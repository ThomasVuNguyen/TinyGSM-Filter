[
  {
    "index": 0,
    "response": "**Reasoning:**\n\n1. Identify the given values:\n   - Price per apple = \\$0.50\n   - Number of apples = 6\n   - Tax rate = 7% = 0.07 (as a decimal)\n\n2. Compute the subtotal (cost before tax):\n   subtotal = price_per_apple * number_of_apples\n\n3. Compute the tax amount:\n   tax_amount = subtotal * tax_rate\n\n4. Compute the total cost including tax:\n   total_cost = subtotal + tax_amount\n\n5. Return the total cost.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    One apple costs $0.50. How much will 6 apples cost, including tax at the rate of 7%?\n    \"\"\"\n    # Given values\n    price_per_apple = 0.50\n    number_of_apples = 6\n    tax_rate = 0.07\n\n    # Step-by-step calculation\n    subtotal = price_per_apple * number_of_apples\n    tax_amount = subtotal * tax_rate\n    result = subtotal + tax_amount\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    One apple costs $0.50. How much will 6 apples cost, including tax at the rate of 7%?\n    \"\"\"\n    # Given values\n    price_per_apple = 0.50\n    number_of_apples = 6\n    tax_rate = 0.07\n\n    # Step-by-step calculation\n    subtotal = price_per_apple * number_of_apples\n    tax_amount = subtotal * tax_rate\n    result = subtotal + tax_amount\n\n    return result",
    "result": 3.21
  },
  {
    "index": 1,
    "response": "**Reasoning:**\n\n1. We have a total of 45 students.\n2. Out of those, 32 students passed the exam.\n3. The passing rate is defined as:\n   passing rate = (number of students who passed) / (total number of students).\n4. Numerically, that is passing rate = 32 / 45 ≈ 0.711111...\n5. If you want it as a percentage, you would multiply that by 100 to get about 71.11%.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Out of 45 students, 32 passed a math exam. What is the passing rate?\n    \"\"\"\n    total_students = 45\n    number_passed = 32\n    \n    # Calculate the passing rate as a decimal fraction\n    passing_rate = number_passed / total_students\n    \n    return passing_rate\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Out of 45 students, 32 passed a math exam. What is the passing rate?\n    \"\"\"\n    total_students = 45\n    number_passed = 32\n    \n    # Calculate the passing rate as a decimal fraction\n    passing_rate = number_passed / total_students\n    \n    return passing_rate",
    "result": 0.7111111111111111
  },
  {
    "index": 2,
    "response": "**Reasoning:**\n\n1. Kevin’s total bonus is \\$400.  \n2. He allocates:  \n   - Stock A: one-third of \\$400 = 400/3  \n   - Stock B: one-fifth of \\$400 = 400/5  \n   - Stock C: one-fourth of \\$400 = 400/4  \n3. The problem says “the remaining one-fourth on stock D,” but the first three allocations actually sum to  \n   1/3 + 1/5 + 1/4 = 20/60 + 12/60 + 15/60 = 47/60 of the \\$400,  \n   leaving 13/60 of the \\$400 for stock D (i.e. the remainder).  \n4. Compute each initial investment:  \n   - invest_A = 400/3  \n   - invest_B = 400/5  \n   - invest_C = 400/4  \n   - invest_D = 400 − (invest_A + invest_B + invest_C) = 400 * 13/60  \n5. After one year:  \n   - Stock A doubles: end_A = invest_A × 2  \n   - Stock B decreases by 1/4: end_B = invest_B × (1 − 1/4) = invest_B × 3/4  \n   - Stock C doubles: end_C = invest_C × 2  \n   - Stock D triples: end_D = invest_D × 3  \n6. Sum up end_A + end_B + end_C + end_D to get the total value at year end.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Kevin received a $400 bonus at work and he decided to invest this money in the stock market.\n    He spent one-third of his bonus on stock A, one-fifth on stock B, one-fourth on stock C,\n    and the remaining one-fourth on stock D. After one year, stock A and stock C had doubled\n    in value, stock B had decreased by a quarter, and stock D had tripled in value.\n    At the end of the year, how much were Kevin's stocks worth, in dollars?\n    \"\"\"\n    total_bonus = 400.0\n\n    # Initial allocations\n    invest_A = total_bonus / 3\n    invest_B = total_bonus / 5\n    invest_C = total_bonus / 4\n    # The remainder goes to D\n    invest_D = total_bonus - (invest_A + invest_B + invest_C)\n\n    # Values after one year\n    end_A = invest_A * 2          # doubled\n    end_B = invest_B * 0.75       # down by 1/4\n    end_C = invest_C * 2          # doubled\n    end_D = invest_D * 3          # tripled\n\n    # Total value at year end\n    result = end_A + end_B + end_C + end_D\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Kevin received a $400 bonus at work and he decided to invest this money in the stock market.\n    He spent one-third of his bonus on stock A, one-fifth on stock B, one-fourth on stock C,\n    and the remaining one-fourth on stock D. After one year, stock A and stock C had doubled\n    in value, stock B had decreased by a quarter, and stock D had tripled in value.\n    At the end of the year, how much were Kevin's stocks worth, in dollars?\n    \"\"\"\n    total_bonus = 400.0\n\n    # Initial allocations\n    invest_A = total_bonus / 3\n    invest_B = total_bonus / 5\n    invest_C = total_bonus / 4\n    # The remainder goes to D\n    invest_D = total_bonus - (invest_A + invest_B + invest_C)\n\n    # Values after one year\n    end_A = invest_A * 2          # doubled\n    end_B = invest_B * 0.75       # down by 1/4\n    end_C = invest_C * 2          # doubled\n    end_D = invest_D * 3          # tripled\n\n    # Total value at year end\n    result = end_A + end_B + end_C + end_D\n    return result",
    "result": 786.6666666666666
  },
  {
    "index": 3,
    "response": "**Reasoning:**\n- There are 8 friends.\n- Each friend pays \\$5 for one game of bowling.\n- Each friend also rents shoes for \\$3.\n- They buy nachos and cheese totaling \\$15.\n- They share a pitcher of soda costing \\$12.\n- Total cost is the sum of:\n  1. Bowling fees: 8 friends * \\$5 each\n  2. Shoe rentals: 8 friends * \\$3 each\n  3. Nachos and cheese: \\$15\n  4. Pitcher of soda: \\$12\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A group of 8 friends went bowling. They paid $5 each per game and also rented shoes for $3 each. They bought nachos and cheese totalling $15 and shared a pitcher of soda which cost $12. How much did they spend altogether?\n    \"\"\"\n    num_friends = 8\n    cost_per_game = 5\n    cost_per_shoe_rental = 3\n    cost_nachos_and_cheese = 15\n    cost_pitcher_of_soda = 12\n\n    total_bowling_fees = num_friends * cost_per_game\n    total_shoe_rentals = num_friends * cost_per_shoe_rental\n\n    result = total_bowling_fees + total_shoe_rentals + cost_nachos_and_cheese + cost_pitcher_of_soda\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A group of 8 friends went bowling. They paid $5 each per game and also rented shoes for $3 each. They bought nachos and cheese totalling $15 and shared a pitcher of soda which cost $12. How much did they spend altogether?\n    \"\"\"\n    num_friends = 8\n    cost_per_game = 5\n    cost_per_shoe_rental = 3\n    cost_nachos_and_cheese = 15\n    cost_pitcher_of_soda = 12\n\n    total_bowling_fees = num_friends * cost_per_game\n    total_shoe_rentals = num_friends * cost_per_shoe_rental\n\n    result = total_bowling_fees + total_shoe_rentals + cost_nachos_and_cheese + cost_pitcher_of_soda\n    return result",
    "result": 91
  },
  {
    "index": 4,
    "response": "**Reasoning:**\nThe toy costs \\$8 to produce. Selling at a 25% loss means the selling price is 75% of the cost:\nselling price = 8 × (1 – 0.25) = 8 × 0.75 = 6.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A manufacturer produces toys at a cost of $8 per unit and sells them at a 25% loss. What is the selling price of one toy?\n    \"\"\"\n    cost_price = 8.0\n    loss_percent = 25.0\n    selling_price = cost_price * (1 - loss_percent / 100)\n    return selling_price\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A manufacturer produces toys at a cost of $8 per unit and sells them at a 25% loss. What is the selling price of one toy?\n    \"\"\"\n    cost_price = 8.0\n    loss_percent = 25.0\n    selling_price = cost_price * (1 - loss_percent / 100)\n    return selling_price",
    "result": 6.0
  },
  {
    "index": 5,
    "response": "**Reasoning:**\n1. Gary eats 14 cookies total from Monday to Thursday.\n2. On Friday, he eats 7 times as many cookies as he did from Monday to Thursday.\n   - Friday’s cookies = 7 × 14 = 98\n3. Total cookies eaten in the week = cookies Monday–Thursday + cookies Friday\n   - Total = 14 + 98 = 112\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Gary can eat 14 cookies from Monday to Thursday. If Gary ate 7 times the amount on Friday, how many cookies did Gary eat in all?\n    \"\"\"\n    cookies_mon_thu = 14\n    cookies_fri = 7 * cookies_mon_thu\n    result = cookies_mon_thu + cookies_fri\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Gary can eat 14 cookies from Monday to Thursday. If Gary ate 7 times the amount on Friday, how many cookies did Gary eat in all?\n    \"\"\"\n    cookies_mon_thu = 14\n    cookies_fri = 7 * cookies_mon_thu\n    result = cookies_mon_thu + cookies_fri\n    return result",
    "result": 112
  },
  {
    "index": 6,
    "response": "**Reasoning:**\n\n1. Let \\( S \\) be the size of the smallest painting (in square feet).  \n2. We are told the largest painting was 6 square feet and the range of painting sizes is 3 square feet.  \n   Range = largest − smallest, so  \n   \\( 6 - S = 3 \\)  \n   \\( S = 6 - 3 = 3 \\)  \n3. Lisa's painting is four times the size of the smallest painting, so  \n   Lisa's painting = \\(4 \\times S = 4 \\times 3 = 12\\) square feet.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In a painting competition, Lisa's painting is four times the size of the smallest painting. If the largest painting was 6 square feet and the range of painting sizes is 3 square feet, what is the size of Lisa's painting?\n    \"\"\"\n    largest_painting = 6.0\n    range_of_sizes = 3.0\n    smallest_painting = largest_painting - range_of_sizes\n    lisas_painting = 4 * smallest_painting\n    result = lisas_painting\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In a painting competition, Lisa's painting is four times the size of the smallest painting. If the largest painting was 6 square feet and the range of painting sizes is 3 square feet, what is the size of Lisa's painting?\n    \"\"\"\n    largest_painting = 6.0\n    range_of_sizes = 3.0\n    smallest_painting = largest_painting - range_of_sizes\n    lisas_painting = 4 * smallest_painting\n    result = lisas_painting\n\n    return result",
    "result": 12.0
  },
  {
    "index": 7,
    "response": "**Reasoning:**\n1. Let Zoe’s number of Legos be Z. We are told Z = 15.\n2. Ben has seven times more Legos than Zoe. Interpreting “seven times more” here as “seven times as many,” Ben’s Legos B = 7 × Z.\n3. Ben has four less than Lily. So B = L − 4, which rearranges to Lily’s Legos L = B + 4.\n4. Compute:\n   - Z = 15\n   - B = 7 × 15 = 105\n   - L = 105 + 4 = 109\n5. The total is B + Z + L = 105 + 15 + 109 = 229.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Ben figured out he has seven times more Legos than Zoe, and four less than Lily. Zoe has 15 Legos. How many Legos do Ben, Zoe, and Lily have in total?\n    \"\"\"\n    zoe_legos = 15\n    ben_legos = 7 * zoe_legos\n    lily_legos = ben_legos + 4\n\n    result = ben_legos + zoe_legos + lily_legos\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Ben figured out he has seven times more Legos than Zoe, and four less than Lily. Zoe has 15 Legos. How many Legos do Ben, Zoe, and Lily have in total?\n    \"\"\"\n    zoe_legos = 15\n    ben_legos = 7 * zoe_legos\n    lily_legos = ben_legos + 4\n\n    result = ben_legos + zoe_legos + lily_legos\n    return result",
    "result": 229
  },
  {
    "index": 8,
    "response": "**Reasoning:**\n\nTo find the amount of wrapping paper needed, we need the total surface area of the rectangular box. A box (rectangular prism) has 6 faces:\n\n- 2 faces of size length × width  \n- 2 faces of size length × height  \n- 2 faces of size width × height  \n\nThe surface area \\(S\\) is therefore:\nS = 2*(length*width) + 2*(length*height) + 2*(width*height)\n\nGiven:\n- length = 12 inches  \n- width  = 8 inches  \n- height = 4 inches  \n\nCompute each face area:\n- area_lw = length * width = 12 * 8 = 96  \n- area_lh = length * height = 12 * 4 = 48  \n- area_wh = width  * height = 8  * 4 = 32  \n\nSum these and multiply by 2:\nS = 2 * (96 + 48 + 32) = 2 * 176 = 352 square inches\n\nSo Missy needs 352 square inches of wrapping paper.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Missy needs to wrap a gift with wrapping paper. The gift is a rectangular box that measures 12 inches long, 8 inches wide, and 4 inches tall. How much wrapping paper does she need to cover the entire box?\n    \"\"\"\n    # Given dimensions\n    length_inches = 12\n    width_inches = 8\n    height_inches = 4\n\n    # Areas of the three distinct face pairs\n    area_length_width = length_inches * width_inches    # 12 * 8\n    area_length_height = length_inches * height_inches  # 12 * 4\n    area_width_height = width_inches * height_inches    # 8 * 4\n\n    # Total surface area: 2 * (lw + lh + wh)\n    total_surface_area = 2 * (area_length_width + area_length_height + area_width_height)\n\n    result = total_surface_area\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Missy needs to wrap a gift with wrapping paper. The gift is a rectangular box that measures 12 inches long, 8 inches wide, and 4 inches tall. How much wrapping paper does she need to cover the entire box?\n    \"\"\"\n    # Given dimensions\n    length_inches = 12\n    width_inches = 8\n    height_inches = 4\n\n    # Areas of the three distinct face pairs\n    area_length_width = length_inches * width_inches    # 12 * 8\n    area_length_height = length_inches * height_inches  # 12 * 4\n    area_width_height = width_inches * height_inches    # 8 * 4\n\n    # Total surface area: 2 * (lw + lh + wh)\n    total_surface_area = 2 * (area_length_width + area_length_height + area_width_height)\n\n    result = total_surface_area\n    return result",
    "result": 352
  },
  {
    "index": 9,
    "response": "**Reasoning:**\n1. The price of the pizza is assumed to be directly proportional to its area.\n2. The area \\(A\\) of a circle is given by \\(A = \\pi r^2\\).\n3. If the radius is doubled (from 10 cm to 20 cm), the new area becomes:\n   - \\(A_\\text{new} = \\pi (2r)^2 = \\pi \\cdot 4r^2 = 4 \\times (\\pi r^2) = 4A_\\text{original}\\).\n4. Therefore, the price will also increase by a factor of 4.\n5. Original price is \\$20, so new price = \\(4 \\times 20 = \\$80\\).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A pizza has a radius of 10 cm and a price of 20 dollars. If the radius is doubled, what will be the new price of the pizza?\n    \"\"\"\n    import math\n\n    original_radius = 10    # in cm\n    original_price = 20.0   # in dollars\n\n    # Doubling the radius\n    new_radius = original_radius * 2\n\n    # Compute areas\n    original_area = math.pi * original_radius ** 2\n    new_area = math.pi * new_radius ** 2\n\n    # Ratio of new area to original area\n    area_ratio = new_area / original_area\n\n    # New price scales by the same ratio\n    result = original_price * area_ratio\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A pizza has a radius of 10 cm and a price of 20 dollars. If the radius is doubled, what will be the new price of the pizza?\n    \"\"\"\n    import math\n\n    original_radius = 10    # in cm\n    original_price = 20.0   # in dollars\n\n    # Doubling the radius\n    new_radius = original_radius * 2\n\n    # Compute areas\n    original_area = math.pi * original_radius ** 2\n    new_area = math.pi * new_radius ** 2\n\n    # Ratio of new area to original area\n    area_ratio = new_area / original_area\n\n    # New price scales by the same ratio\n    result = original_price * area_ratio\n\n    return result",
    "result": 80.0
  },
  {
    "index": 10,
    "response": "**Reasoning:**\n1. Let the total number of cans be \\(T\\).\n2. They split the \\(T\\) cans into four equal groups, so each group has \\(\\frac{T}{4}\\) cans.\n3. Lisa then took one-fourth of the cans from the first group. One-fourth of that group is \\(\\frac{1}{4}\\times \\frac{T}{4} = \\frac{T}{16}\\).\n4. Therefore, Lisa gave \\(\\frac{T}{16}\\) cans to her neighbor.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    They decided to split the cans into four equal groups and donate them to different charities.\n    Then, Lisa took one-fourth of the cans from the first group and gave them to her neighbor.\n    How many cans did Lisa give to her neighbor?\n    \"\"\"\n    # Let total_cans represent the total number of cans before splitting\n    total_cans = 100  # for example, you can replace 100 with any total number of cans\n    \n    # Step 1: compute how many cans are in each of the four groups\n    cans_per_group = total_cans / 4\n    \n    # Step 2: compute how many cans Lisa took from the first group (one-fourth of that group)\n    cans_lisa_gave = cans_per_group / 4\n    \n    result = cans_lisa_gave\n    return result\n```\n\nIn this code, if you plug in any value for `total_cans`, the function will return `total_cans / 16`, which is the number of cans Lisa gave to her neighbor.",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    They decided to split the cans into four equal groups and donate them to different charities.\n    Then, Lisa took one-fourth of the cans from the first group and gave them to her neighbor.\n    How many cans did Lisa give to her neighbor?\n    \"\"\"\n    # Let total_cans represent the total number of cans before splitting\n    total_cans = 100  # for example, you can replace 100 with any total number of cans\n    \n    # Step 1: compute how many cans are in each of the four groups\n    cans_per_group = total_cans / 4\n    \n    # Step 2: compute how many cans Lisa took from the first group (one-fourth of that group)\n    cans_lisa_gave = cans_per_group / 4\n    \n    result = cans_lisa_gave\n    return result",
    "result": 6.25
  },
  {
    "index": 11,
    "response": "**Reasoning:**\n\n1. Lisa has 6 blue beads.  \n2. She has 4 times as many green beads as blue beads, so green beads = 4 × 6 = 24.  \n3. She has 2 times as many yellow beads as green beads, so yellow beads = 2 × 24 = 48.  \n4. Total beads = blue + green + yellow = 6 + 24 + 48 = 78.  \n5. She uses 9 beads for each bracelet, so the number of bracelets = floor(78 ÷ 9) = 8.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Lisa is making bracelets for her classmates. She has 6 blue beads, 4 times as many green beads as blue beads, and 2 times as many yellow beads as green beads. Lisa then uses the beads to make bracelets. If she uses 9 beads for each bracelet, how many bracelets will Lisa make?\n    \"\"\"\n    blue_beads = 6\n    green_beads = 4 * blue_beads\n    yellow_beads = 2 * green_beads\n    total_beads = blue_beads + green_beads + yellow_beads\n    result = total_beads // 9\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Lisa is making bracelets for her classmates. She has 6 blue beads, 4 times as many green beads as blue beads, and 2 times as many yellow beads as green beads. Lisa then uses the beads to make bracelets. If she uses 9 beads for each bracelet, how many bracelets will Lisa make?\n    \"\"\"\n    blue_beads = 6\n    green_beads = 4 * blue_beads\n    yellow_beads = 2 * green_beads\n    total_beads = blue_beads + green_beads + yellow_beads\n    result = total_beads // 9\n\n    return result",
    "result": 8
  },
  {
    "index": 12,
    "response": "**Reasoning:**\n1. The problem states, “She first has 150 marbles.”  That tells us directly how many she started with.\n2. The subsequent steps (adding 75, removing 92, ending with 31) are just describing what happens after she starts with those 150 marbles.\n3. The question asks, “How many marbles did she start with?”  By step 1, the answer is 150.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mia has a pile of marbles. She first has 150 marbles. Then she adds 75 more marbles to the pile. She takes out 92 marbles for a project, and has 31 marbles left. How many marbles did she start with?\n    \"\"\"\n    # The problem tells us she started with 150 marbles.\n    starting_marbles = 150\n\n    # The question is asking for how many she started with.\n    result = starting_marbles\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mia has a pile of marbles. She first has 150 marbles. Then she adds 75 more marbles to the pile. She takes out 92 marbles for a project, and has 31 marbles left. How many marbles did she start with?\n    \"\"\"\n    # The problem tells us she started with 150 marbles.\n    starting_marbles = 150\n\n    # The question is asking for how many she started with.\n    result = starting_marbles\n\n    return result",
    "result": 150
  },
  {
    "index": 13,
    "response": "**Reasoning:**\n1. Jen initially bought 21 books.  \n2. She then returned 3 of those books.  \n3. To find out how many books she ended up with, subtract the number returned from the number bought: 21 − 3 = 18.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jen bought 21 books, but she returned 3 of them, how many books did Jen end up with?\n    \"\"\"\n    # number of books Jen bought\n    books_bought = 21\n    # number of books Jen returned\n    books_returned = 3\n    # calculate how many books remain\n    result = books_bought - books_returned\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jen bought 21 books, but she returned 3 of them, how many books did Jen end up with?\n    \"\"\"\n    # number of books Jen bought\n    books_bought = 21\n    # number of books Jen returned\n    books_returned = 3\n    # calculate how many books remain\n    result = books_bought - books_returned\n\n    return result",
    "result": 18
  },
  {
    "index": 14,
    "response": "**Reasoning:**\n1. We know that 1 bottle of juice can fill 6 glasses.\n2. We want to find out how many glasses can be filled using 48 bottles.\n3. To do that, we multiply the number of bottles (48) by the number of glasses each bottle can fill (6).\n4. The result of this multiplication will give us the total number of glasses filled.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A bottle of juice can fill 6 glasses. How many glasses can be filled from 48 bottles of juice?\n    \"\"\"\n    # Number of bottles available\n    bottles = 48\n\n    # Number of glasses one bottle can fill\n    glasses_per_bottle = 6\n\n    # Calculate total glasses\n    result = bottles * glasses_per_bottle\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A bottle of juice can fill 6 glasses. How many glasses can be filled from 48 bottles of juice?\n    \"\"\"\n    # Number of bottles available\n    bottles = 48\n\n    # Number of glasses one bottle can fill\n    glasses_per_bottle = 6\n\n    # Calculate total glasses\n    result = bottles * glasses_per_bottle\n\n    return result",
    "result": 288
  },
  {
    "index": 15,
    "response": "**Reasoning:**\n\n1. Jill’s original time per lap is 2 minutes.  \n2. Swimming 30% faster means her new speed is 1.3 times her original speed.  \n3. Since time = distance ÷ speed, if speed increases by a factor of 1.3, time per lap decreases by the same factor:  \n   new_time_per_lap = original_time_per_lap ÷ 1.3  \n4. Calculate the new time per lap: 2 minutes ÷ 1.3 ≈ 1.53846 minutes.  \n5. For 10 laps, total_time = new_time_per_lap × 10 ≈ 15.3846 minutes.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jill can swim a lap in a pool in 2 minutes. When she was swimming her usual distance, the pool was converted to a heated pool \n    that made the water less dense hence Jill swam 30% faster than expected. If she completed 10 laps, what was her time?\n    \"\"\"\n    original_time_per_lap = 2.0              # minutes per lap originally\n    speed_increase_factor = 1 + 0.30         # 30% faster => speed multiplied by 1.3\n    # New time per lap is reduced by the same factor.\n    new_time_per_lap = original_time_per_lap / speed_increase_factor\n    laps = 10\n    total_time = new_time_per_lap * laps     # total time for 10 laps\n    return total_time\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jill can swim a lap in a pool in 2 minutes. When she was swimming her usual distance, the pool was converted to a heated pool \n    that made the water less dense hence Jill swam 30% faster than expected. If she completed 10 laps, what was her time?\n    \"\"\"\n    original_time_per_lap = 2.0              # minutes per lap originally\n    speed_increase_factor = 1 + 0.30         # 30% faster => speed multiplied by 1.3\n    # New time per lap is reduced by the same factor.\n    new_time_per_lap = original_time_per_lap / speed_increase_factor\n    laps = 10\n    total_time = new_time_per_lap * laps     # total time for 10 laps\n    return total_time",
    "result": 15.384615384615383
  },
  {
    "index": 16,
    "response": "**Reasoning:**\n1. We are given the total distance traveled by the car: 75 miles.\n2. We are also given the total time taken: 1.5 hours.\n3. The formula for average speed is:\n   average speed = total distance ÷ total time\n4. Substitute the given values:\n   average speed = 75 miles ÷ 1.5 hours\n5. Compute the division:\n   75 ÷ 1.5 = 50\n6. Therefore, the car’s average speed is 50 miles per hour.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car travels 75 miles in 1.5 hours. What is the average speed of the car in miles per hour? result =?\n    \"\"\"\n    distance_miles = 75\n    time_hours = 1.5\n    average_speed_mph = distance_miles / time_hours\n    result = average_speed_mph\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car travels 75 miles in 1.5 hours. What is the average speed of the car in miles per hour? result =?\n    \"\"\"\n    distance_miles = 75\n    time_hours = 1.5\n    average_speed_mph = distance_miles / time_hours\n    result = average_speed_mph\n\n    return result",
    "result": 50.0
  },
  {
    "index": 17,
    "response": "**Reasoning:**\n\n1. Identify the known quantities:\n   - Principal \\(P = \\$2000\\)\n   - Annual interest rate \\(r = 8\\%\\)\n   - Monthly payment \\(A = \\$200\\)\n\n2. Convert the annual interest rate to a monthly rate:\n   \\[\n   i = \\frac{r}{12} = \\frac{0.08}{12} = 0.006666\\ldots\n   \\]\n\n3. For a loan with fixed monthly payments, the number of payments \\(n\\) satisfies the amortization formula:\n   \\[\n   A = \\frac{P\\,i}{1 - (1 + i)^{-n}}\n   \\]\n\n4. Solve this equation for \\(n\\):\n   \\[\n   A\\bigl[1 - (1 + i)^{-n}\\bigr] = P\\,i\n   \\quad\\Longrightarrow\\quad\n   1 - (1 + i)^{-n} = \\frac{P\\,i}{A}\n   \\quad\\Longrightarrow\\quad\n   (1 + i)^{-n} = 1 - \\frac{P\\,i}{A}\n   \\]\n   \\[\n   -n \\ln(1 + i) = \\ln\\!\\Bigl(1 - \\frac{P\\,i}{A}\\Bigr)\n   \\quad\\Longrightarrow\\quad\n   n = -\\frac{\\ln\\!\\bigl(1 - \\tfrac{P\\,i}{A}\\bigr)}{\\ln(1 + i)}\n   \\]\n   Equivalently, one often uses:\n   \\[\n   n = \\frac{\\ln\\!\\bigl(A/(A - P\\,i)\\bigr)}{\\ln(1 + i)}.\n   \\]\n\n5. Substitute the numbers:\n   \\[\n   i = 0.08/12,\\;\n   A - P\\,i = 200 - 2000 \\times 0.006666\\ldots = 186.666\\ldots\n   \\]\n   \\[\n   n = \\frac{\\ln\\bigl(200/186.666\\ldots\\bigr)}{\\ln(1.006666\\ldots)}\n     \\approx 10.49\\text{ months}\n   \\]\n\nSo it will take about 10.5 months (roughly 11 payments) to pay off the loan.\n\n**Solution:**\n```python\nimport math\n\ndef simple_math_problem() -> float:\n    \"\"\"\n    Javier borrowed $2000 from a bank with an annual interest rate of 8%. If he pays $200 per month, how long will it take for him to pay off the loan?\n    \"\"\"\n    principal = 2000.0\n    annual_interest_rate = 0.08\n    monthly_payment = 200.0\n\n    monthly_interest_rate = annual_interest_rate / 12.0\n\n    # Use the amortization formula to solve for the number of payments n:\n    # n = log(A/(A - P*i)) / log(1 + i)\n    result = math.log(\n        monthly_payment / (monthly_payment - principal * monthly_interest_rate)\n    ) / math.log(1 + monthly_interest_rate)\n\n    return result\n```",
    "code": "import math\n\ndef simple_math_problem() -> float:\n    \"\"\"\n    Javier borrowed $2000 from a bank with an annual interest rate of 8%. If he pays $200 per month, how long will it take for him to pay off the loan?\n    \"\"\"\n    principal = 2000.0\n    annual_interest_rate = 0.08\n    monthly_payment = 200.0\n\n    monthly_interest_rate = annual_interest_rate / 12.0\n\n    # Use the amortization formula to solve for the number of payments n:\n    # n = log(A/(A - P*i)) / log(1 + i)\n    result = math.log(\n        monthly_payment / (monthly_payment - principal * monthly_interest_rate)\n    ) / math.log(1 + monthly_interest_rate)\n\n    return result",
    "result": 10.383388956640916
  },
  {
    "index": 18,
    "response": "**Reasoning:**\n1. The distance from New York to Philadelphia is 220 miles one way, so a round trip is  \n   220 miles × 2 = 440 miles.  \n2. The car’s fuel efficiency is 30 miles per gallon, so the total gallons needed are  \n   440 miles ÷ 30 miles per gallon = 14.666… gallons.  \n3. Gas costs \\$3.50 per gallon, so the total cost is  \n   14.666… gallons × \\$3.50 per gallon = \\$51.333…  \n4. Therefore, Kelly will spend about \\$51.33 on gas for the round trip.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Kelly drives a car that can travel 30 miles per gallon of gas. She wants to drive from New York to Philadelphia and back, which is 220 miles away. If she buys gas for $3.50 per gallon, how much money will she spend on gas in total?\n    \"\"\"\n    miles_per_gallon = 30\n    distance_one_way = 220\n    round_trip_distance = distance_one_way * 2  # 440 miles\n    price_per_gallon = 3.50\n\n    gallons_needed = round_trip_distance / miles_per_gallon\n    result = gallons_needed * price_per_gallon\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Kelly drives a car that can travel 30 miles per gallon of gas. She wants to drive from New York to Philadelphia and back, which is 220 miles away. If she buys gas for $3.50 per gallon, how much money will she spend on gas in total?\n    \"\"\"\n    miles_per_gallon = 30\n    distance_one_way = 220\n    round_trip_distance = distance_one_way * 2  # 440 miles\n    price_per_gallon = 3.50\n\n    gallons_needed = round_trip_distance / miles_per_gallon\n    result = gallons_needed * price_per_gallon\n\n    return result",
    "result": 51.33333333333333
  },
  {
    "index": 19,
    "response": "**Reasoning:**\n1. We know the current cost of one box of chocolates is \\$12.00.\n2. The price increases by 15% next month. As a decimal, 15% is 0.15.\n3. To find the new price per box, multiply the current price by (1 + 0.15).\n4. Next, find the increase in price per box by subtracting the original price from the new price.\n5. We want the total extra cost for 3 boxes, so multiply the increase per box by 3.\n6. The result is how much more it will cost to buy 3 boxes next month compared to now.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A box of chocolates contains 24 pieces and costs $12.00. If the price of chocolate increases by 15% next month, how much more will it cost to buy 3 boxes of chocolates next month?\n    \"\"\"\n    current_price_per_box = 12.00       # current cost for one box in dollars\n    increase_rate = 0.15               # 15% price increase as a decimal\n    num_boxes = 3                      # number of boxes to buy\n\n    new_price_per_box = current_price_per_box * (1 + increase_rate)\n    additional_cost = (new_price_per_box - current_price_per_box) * num_boxes\n\n    result = additional_cost\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A box of chocolates contains 24 pieces and costs $12.00. If the price of chocolate increases by 15% next month, how much more will it cost to buy 3 boxes of chocolates next month?\n    \"\"\"\n    current_price_per_box = 12.00       # current cost for one box in dollars\n    increase_rate = 0.15               # 15% price increase as a decimal\n    num_boxes = 3                      # number of boxes to buy\n\n    new_price_per_box = current_price_per_box * (1 + increase_rate)\n    additional_cost = (new_price_per_box - current_price_per_box) * num_boxes\n\n    result = additional_cost\n    return result",
    "result": 5.399999999999997
  },
  {
    "index": 20,
    "response": "**Reasoning:**\n1. Rose’s baking time is already given in minutes: 50 minutes.  \n2. Lily’s baking time is given as 1 hour and 10 minutes. Convert that to minutes:  \n   1 hour = 60 minutes, so 1 hour 10 minutes = 60 + 10 = 70 minutes.  \n3. To find how much faster Rose was, subtract Rose’s time from Lily’s time:  \n   70 minutes − 50 minutes = 20 minutes.  \n4. Therefore, Rose was 20 minutes faster than Lily.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Rose baked a cake in 50 minutes, while Lily cooked the same cake in 1 hour and 10 minutes. How much faster was Rose compared to Lily in baking the cake?\n    \"\"\"\n    # Rose’s baking time in minutes\n    rose_time_minutes = 50\n    \n    # Lily’s baking time in minutes (1 hour = 60 minutes, plus 10 minutes)\n    lily_time_minutes = 1 * 60 + 10\n    \n    # Calculate how much faster Rose was\n    difference = lily_time_minutes - rose_time_minutes\n    \n    result = difference\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Rose baked a cake in 50 minutes, while Lily cooked the same cake in 1 hour and 10 minutes. How much faster was Rose compared to Lily in baking the cake?\n    \"\"\"\n    # Rose’s baking time in minutes\n    rose_time_minutes = 50\n    \n    # Lily’s baking time in minutes (1 hour = 60 minutes, plus 10 minutes)\n    lily_time_minutes = 1 * 60 + 10\n    \n    # Calculate how much faster Rose was\n    difference = lily_time_minutes - rose_time_minutes\n    \n    result = difference\n    return result",
    "result": 20
  },
  {
    "index": 21,
    "response": "**Reasoning:**\n1. We know that every 3 gardeners can take care of 120 plants in one day.\n2. So one gardener can take care of 120 ÷ 3 = 40 plants per day.\n3. In one week (7 days), one gardener can then take care of 40 × 7 = 280 plants.\n4. Let the total number of gardeners be \\(n\\). In a week they maintain \\(280 \\times n\\) plants.\n5. We are told that in a week the park maintained 2,520 plants, so:\n   280 × n = 2,520\n6. Solve for \\(n\\):\n   n = 2,520 ÷ 280 = 9\n\nTherefore, there are 9 gardeners working in the park.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In a park, every 3 gardeners can take care of 120 plants per day. In a week, the park maintained 2,520 plants. How many gardeners are working in the park?\n    \"\"\"\n    gardeners_for_120_plants = 3\n    plants_per_day_by_3_gardeners = 120\n    days_per_week = 7\n    total_plants_maintained_week = 2520\n\n    # plants one gardener can take care of in one day\n    plants_per_day_by_1_gardener = plants_per_day_by_3_gardeners / gardeners_for_120_plants\n\n    # plants one gardener can take care of in one week\n    plants_per_week_per_gardener = plants_per_day_by_1_gardener * days_per_week\n\n    # number of gardeners needed to maintain the total plants in a week\n    result = total_plants_maintained_week / plants_per_week_per_gardener\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In a park, every 3 gardeners can take care of 120 plants per day. In a week, the park maintained 2,520 plants. How many gardeners are working in the park?\n    \"\"\"\n    gardeners_for_120_plants = 3\n    plants_per_day_by_3_gardeners = 120\n    days_per_week = 7\n    total_plants_maintained_week = 2520\n\n    # plants one gardener can take care of in one day\n    plants_per_day_by_1_gardener = plants_per_day_by_3_gardeners / gardeners_for_120_plants\n\n    # plants one gardener can take care of in one week\n    plants_per_week_per_gardener = plants_per_day_by_1_gardener * days_per_week\n\n    # number of gardeners needed to maintain the total plants in a week\n    result = total_plants_maintained_week / plants_per_week_per_gardener\n\n    return result",
    "result": 9.0
  },
  {
    "index": 22,
    "response": "**Reasoning:**\n\n1. Let the revenue from the large lemonade be \\$8.  \n2. The small lemonade brings in half of that, so its revenue is \\$8 / 2 = \\$4.  \n3. The peach iced tea brings in three times the large lemonade’s amount, so its revenue is \\$8 * 3 = \\$24.  \n4. The sum of those three items is \\$8 + \\$4 + \\$24 = \\$36.  \n5. That \\$36 represents 90% of the total proceeds. Let the total proceeds be \\(T\\). Then  \n   0.9 × T = 36  \n   T = 36 / 0.9 = 40.  \n6. Therefore, the total proceeds from Tom’s lemonade stand are \\$40.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Tom set up a lemonade stand to collect funds for a charity walk. Three items he sold made up 90% of the total sale proceeds. He sold a large lemonade for $8, a small lemonade for half the amount he made for selling the large lemonade, and a peach iced tea for three times the amount he made for selling the large lemonade. What was the total proceeds from Tom's lemonade stand?\n    \"\"\"\n    revenue_large = 8\n    revenue_small = revenue_large / 2\n    revenue_peach_iced_tea = revenue_large * 3\n    revenue_top_three = revenue_large + revenue_small + revenue_peach_iced_tea\n    total_proceeds = revenue_top_three / 0.9\n    return total_proceeds\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Tom set up a lemonade stand to collect funds for a charity walk. Three items he sold made up 90% of the total sale proceeds. He sold a large lemonade for $8, a small lemonade for half the amount he made for selling the large lemonade, and a peach iced tea for three times the amount he made for selling the large lemonade. What was the total proceeds from Tom's lemonade stand?\n    \"\"\"\n    revenue_large = 8\n    revenue_small = revenue_large / 2\n    revenue_peach_iced_tea = revenue_large * 3\n    revenue_top_three = revenue_large + revenue_small + revenue_peach_iced_tea\n    total_proceeds = revenue_top_three / 0.9\n    return total_proceeds",
    "result": 40.0
  },
  {
    "index": 23,
    "response": "**Reasoning:**\n1. Identify the original number of cupcakes the recipe makes: 12 cupcakes.  \n2. Identify the desired number of cupcakes Sarah wants: 48 cupcakes.  \n3. To find how many times to multiply the recipe, divide the desired amount by the original amount:  \n   factor = 48 ÷ 12  \n4. Calculate the factor: 48 ÷ 12 = 4. Sarah needs to multiply the recipe by 4.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A recipe makes 12 cupcakes. If Sarah wants to make 48 cupcakes, how many times does she need to multiply the recipe?\n    \"\"\"\n    original_cupcakes = 12\n    desired_cupcakes = 48\n\n    # Calculate how many times to multiply the recipe\n    factor = desired_cupcakes / original_cupcakes\n\n    result = factor\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A recipe makes 12 cupcakes. If Sarah wants to make 48 cupcakes, how many times does she need to multiply the recipe?\n    \"\"\"\n    original_cupcakes = 12\n    desired_cupcakes = 48\n\n    # Calculate how many times to multiply the recipe\n    factor = desired_cupcakes / original_cupcakes\n\n    result = factor\n    return result",
    "result": 4.0
  },
  {
    "index": 24,
    "response": "**Reasoning:**\n1. We are asked to find the total length of all the slides in the playground.\n2. The playground has 4 slides.\n3. Each slide is 12 meters long.\n4. To find the total length, multiply the number of slides by the length of each slide.\n5. Total length = 4 slides × 12 meters/slide = 48 meters.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A playground has 4 slides. Each slide is 12 meters long. How many meters long is the entire playground?\n    \"\"\"\n    number_of_slides = 4\n    length_per_slide = 12  # in meters\n\n    # Multiply to get the total length\n    result = number_of_slides * length_per_slide\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A playground has 4 slides. Each slide is 12 meters long. How many meters long is the entire playground?\n    \"\"\"\n    number_of_slides = 4\n    length_per_slide = 12  # in meters\n\n    # Multiply to get the total length\n    result = number_of_slides * length_per_slide\n\n    return result",
    "result": 48
  },
  {
    "index": 25,
    "response": "**Reasoning:**\n\n1. Let M_now be the number of problems Michael can solve now. We are told  \n   M_now = 20.\n\n2. Alex can solve 5 more problems than Michael right now.  \n   So Alex’s current capacity is  \n   A_now = M_now + 5.\n\n3. Alex can also solve 25 more problems than Michael could have solved 4 years ago.  \n   Let M_4yrs_ago be the number Michael could solve 4 years ago. Then  \n   A_now = M_4yrs_ago + 25.\n\n4. Equate the two expressions for A_now:  \n   M_now + 5 = M_4yrs_ago + 25  \n   ⇒ M_4yrs_ago = (M_now + 5) − 25  \n                  = M_now − 20.\n\n5. Substitute M_now = 20:  \n   M_4yrs_ago = 20 − 20 = 0.\n\nTherefore, Michael could solve 0 problems 4 years ago.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Alex can solve 5 more math problems than Michael right now. Alex can also solve 25 more math problems than Michael could have solved 4 years ago. How many math problems could Michael solve 4 years ago if he can solve 20 math problems now?\n    \"\"\"\n    # Number of problems Michael can solve now\n    michael_now = 20\n\n    # Number of problems Alex can solve now\n    alex_now = michael_now + 5\n\n    # Number of problems Michael could solve 4 years ago\n    michael_4_years_ago = alex_now - 25\n\n    result = michael_4_years_ago\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Alex can solve 5 more math problems than Michael right now. Alex can also solve 25 more math problems than Michael could have solved 4 years ago. How many math problems could Michael solve 4 years ago if he can solve 20 math problems now?\n    \"\"\"\n    # Number of problems Michael can solve now\n    michael_now = 20\n\n    # Number of problems Alex can solve now\n    alex_now = michael_now + 5\n\n    # Number of problems Michael could solve 4 years ago\n    michael_4_years_ago = alex_now - 25\n\n    result = michael_4_years_ago\n    return result",
    "result": 0
  },
  {
    "index": 26,
    "response": "**Reasoning:**\n\n1. Identify the number of students going on the field trip: 30 students.  \n2. Identify the fixed transportation cost: \\$900.  \n3. Identify the variable entrance fee per student: \\$5 per student.  \n4. Compute the total entrance fees by multiplying the number of students by the per-student entrance fee:  \n   total_entrance_fees = 30 * \\$5 = \\$150.  \n5. Compute the total cost of the trip by adding the transportation cost and the total entrance fees:  \n   total_cost = \\$900 + \\$150 = \\$1050.  \n6. Divide the total cost by the number of students to find how much each student should contribute:  \n   contribution_per_student = \\$1050 / 30 = \\$35.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A group of teachers planned a field trip for 30 students. The transportation will cost $900, and the entrance fee is $5 per student. How much should each student contribute in total?\n    \"\"\"\n    number_of_students = 30\n    transportation_cost = 900  # in dollars\n    entrance_fee_per_student = 5  # in dollars\n\n    # Step 1: Calculate total entrance fees\n    total_entrance_fees = number_of_students * entrance_fee_per_student\n\n    # Step 2: Calculate overall trip cost\n    total_cost = transportation_cost + total_entrance_fees\n\n    # Step 3: Calculate per-student contribution\n    result = total_cost / number_of_students\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A group of teachers planned a field trip for 30 students. The transportation will cost $900, and the entrance fee is $5 per student. How much should each student contribute in total?\n    \"\"\"\n    number_of_students = 30\n    transportation_cost = 900  # in dollars\n    entrance_fee_per_student = 5  # in dollars\n\n    # Step 1: Calculate total entrance fees\n    total_entrance_fees = number_of_students * entrance_fee_per_student\n\n    # Step 2: Calculate overall trip cost\n    total_cost = transportation_cost + total_entrance_fees\n\n    # Step 3: Calculate per-student contribution\n    result = total_cost / number_of_students\n\n    return result",
    "result": 35.0
  },
  {
    "index": 27,
    "response": "**Reasoning:**\n1. We have a rectangular box with dimensions:\n   - length = 20 cm\n   - width  = 15 cm\n   - height = 10 cm\n2. The volume \\(V\\) of a rectangular box in cubic centimeters is given by:\n   \\[\n     V_{\\text{cm}^3} = \\text{length} \\times \\text{width} \\times \\text{height}\n   \\]\n3. Substituting the given values:\n   \\[\n     V_{\\text{cm}^3} = 20 \\times 15 \\times 10 = 3000 \\text{ cm}^3\n   \\]\n4. We need the volume in liters. 1 liter is equivalent to 1000 cm³, so:\n   \\[\n     V_{\\text{L}} = \\frac{V_{\\text{cm}^3}}{1000} = \\frac{3000}{1000} = 3 \\text{ liters}\n   \\]\n5. Therefore, the volume of the box is 3 liters.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A rectangular box has a length of 20 cm, a width of 15 cm, and a height of 10 cm. What is the volume of the box in liters?\n    \"\"\"\n    # Given dimensions in centimeters\n    length_cm = 20\n    width_cm = 15\n    height_cm = 10\n\n    # Calculate volume in cubic centimeters\n    volume_cm3 = length_cm * width_cm * height_cm\n\n    # Convert cubic centimeters to liters (1 L = 1000 cm^3)\n    volume_liters = volume_cm3 / 1000\n\n    result = volume_liters\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A rectangular box has a length of 20 cm, a width of 15 cm, and a height of 10 cm. What is the volume of the box in liters?\n    \"\"\"\n    # Given dimensions in centimeters\n    length_cm = 20\n    width_cm = 15\n    height_cm = 10\n\n    # Calculate volume in cubic centimeters\n    volume_cm3 = length_cm * width_cm * height_cm\n\n    # Convert cubic centimeters to liters (1 L = 1000 cm^3)\n    volume_liters = volume_cm3 / 1000\n\n    result = volume_liters\n    return result",
    "result": 3.0
  },
  {
    "index": 28,
    "response": "**Reasoning:**\n1. Let the distance by which Tom is ahead be d = 10 meters.\n2. Tom’s speed is v_T = 5 m/s.\n3. Jerry’s speed is v_J = 4 m/s.\n4. To find the time t when Jerry catches Tom, we use the relative‐speed approach. Jerry will only catch Tom if Jerry’s speed exceeds Tom’s speed.  \n   Relative speed = v_J – v_T.\n5. Here v_J – v_T = 4 – 5 = –1 m/s, which is negative. That means Jerry is slower than Tom and the gap will only grow larger, not shrink.\n6. Therefore, Jerry will never catch up to Tom, so the time required is infinite.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Tom and Jerry are racing each other. Tom is 10 meters ahead of Jerry.\n    If Tom runs at a constant speed of 5 meters per second and Jerry runs at\n    a constant speed of 4 meters per second, in how many seconds will Jerry\n    catch up to Tom?\n    \"\"\"\n    head_start = 10.0       # meters\n    speed_tom = 5.0         # m/s\n    speed_jerry = 4.0       # m/s\n\n    # Jerry can only catch Tom if Jerry is faster than Tom.\n    if speed_jerry <= speed_tom:\n        result = float('inf')  # Never catches up\n    else:\n        result = head_start / (speed_jerry - speed_tom)\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Tom and Jerry are racing each other. Tom is 10 meters ahead of Jerry.\n    If Tom runs at a constant speed of 5 meters per second and Jerry runs at\n    a constant speed of 4 meters per second, in how many seconds will Jerry\n    catch up to Tom?\n    \"\"\"\n    head_start = 10.0       # meters\n    speed_tom = 5.0         # m/s\n    speed_jerry = 4.0       # m/s\n\n    # Jerry can only catch Tom if Jerry is faster than Tom.\n    if speed_jerry <= speed_tom:\n        result = float('inf')  # Never catches up\n    else:\n        result = head_start / (speed_jerry - speed_tom)\n\n    return result",
    "result": Infinity
  },
  {
    "index": 29,
    "response": "**Reasoning:**\n\n1. There are 4 classes, each with 25 students, so each class has the same number of students.\n2. Each question is worth 5 points.\n3. The given averages (16.5, 18, 15.5, 17) must refer to the average number of questions each student got right in that class.\n4. To find the average points per student in each class, multiply the average number of correct answers by 5.\n5. Then multiply that by the number of students in the class (25) to get the total points for each class.\n6. Finally, sum the totals of all four classes to get the school’s total points.\n\nClass A total points = 25 students * 16.5 correct * 5 points  \nClass B total points = 25 * 18 * 5  \nClass C total points = 25 * 15.5 * 5  \nClass D total points = 25 * 17 * 5  \n\nSum those four results to get the final answer.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A school has 4 classes, each with 25 students. The students take a math test that has 20 questions. Each question is worth 5 points. The average score of each class is given below: Class A: 16.5 Class B: 18 Class C: 15.5 Class D: 17 How many points did the school score in total on the math test?\n    \"\"\"\n    students_per_class = 25\n    points_per_question = 5\n\n    average_score_A = 16.5\n    average_score_B = 18.0\n    average_score_C = 15.5\n    average_score_D = 17.0\n\n    total_points_A = students_per_class * average_score_A * points_per_question\n    total_points_B = students_per_class * average_score_B * points_per_question\n    total_points_C = students_per_class * average_score_C * points_per_question\n    total_points_D = students_per_class * average_score_D * points_per_question\n\n    result = total_points_A + total_points_B + total_points_C + total_points_D\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A school has 4 classes, each with 25 students. The students take a math test that has 20 questions. Each question is worth 5 points. The average score of each class is given below: Class A: 16.5 Class B: 18 Class C: 15.5 Class D: 17 How many points did the school score in total on the math test?\n    \"\"\"\n    students_per_class = 25\n    points_per_question = 5\n\n    average_score_A = 16.5\n    average_score_B = 18.0\n    average_score_C = 15.5\n    average_score_D = 17.0\n\n    total_points_A = students_per_class * average_score_A * points_per_question\n    total_points_B = students_per_class * average_score_B * points_per_question\n    total_points_C = students_per_class * average_score_C * points_per_question\n    total_points_D = students_per_class * average_score_D * points_per_question\n\n    result = total_points_A + total_points_B + total_points_C + total_points_D\n\n    return result",
    "result": 8375.0
  },
  {
    "index": 30,
    "response": "**Reasoning:**\n1. Let Emma’s current age be E. We know E = 2.\n2. Let Jacob’s current age be J (unknown).\n3. In 7 years, Emma’s age will be E + 7, and Jacob’s age will be J + 7.\n4. The problem states that in 7 years, Jacob will be five times older than Emma, i.e.  \n   J + 7 = 5 × (E + 7)\n5. Substitute E = 2 into the equation:  \n   J + 7 = 5 × (2 + 7) = 5 × 9 = 45  \n   ⇒ J = 45 − 7 = 38\n6. The sum of their current ages is J + E = 38 + 2 = 40.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In 7 years, Jacob will be five times older than Emma. If Emma is currently 2 years old, what's the sum of their ages now?\n    \"\"\"\n    # Emma's current age\n    age_emma_current = 2\n\n    # Number of years until the future condition\n    years_until_future = 7\n\n    # Emma's age in 7 years\n    future_age_emma = age_emma_current + years_until_future\n\n    # Jacob's age in 7 years, given it's 5 times Emma's future age\n    future_age_jacob = 5 * future_age_emma\n\n    # Jacob's current age\n    age_jacob_current = future_age_jacob - years_until_future\n\n    # Sum of their current ages\n    result = age_emma_current + age_jacob_current\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In 7 years, Jacob will be five times older than Emma. If Emma is currently 2 years old, what's the sum of their ages now?\n    \"\"\"\n    # Emma's current age\n    age_emma_current = 2\n\n    # Number of years until the future condition\n    years_until_future = 7\n\n    # Emma's age in 7 years\n    future_age_emma = age_emma_current + years_until_future\n\n    # Jacob's age in 7 years, given it's 5 times Emma's future age\n    future_age_jacob = 5 * future_age_emma\n\n    # Jacob's current age\n    age_jacob_current = future_age_jacob - years_until_future\n\n    # Sum of their current ages\n    result = age_emma_current + age_jacob_current\n\n    return result",
    "result": 40
  },
  {
    "index": 31,
    "response": "**Reasoning:**\n1. Jenny wants to make 4 turkey sandwiches.  \n2. Jenny wants to make 6 ham sandwiches.  \n3. Each sandwich requires 2 slices of bread.  \n4. First, calculate the total number of sandwiches:  \n   total_sandwiches = 4 (turkey) + 6 (ham) = 10  \n5. Then, multiply the total number of sandwiches by 2 slices per sandwich:  \n   total_slices = 10 * 2 = 20  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jenny is making sandwiches for a picnic. She wants to make 4 turkey sandwiches and 6 ham sandwiches. If each sandwich needs 2 slices of bread, how many slices of bread does Jenny need in total?\n    \"\"\"\n    number_turkey_sandwiches = 4\n    number_ham_sandwiches = 6\n    slices_per_sandwich = 2\n    \n    # Calculate total sandwiches\n    total_sandwiches = number_turkey_sandwiches + number_ham_sandwiches\n    \n    # Calculate total slices needed\n    result = total_sandwiches * slices_per_sandwich\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jenny is making sandwiches for a picnic. She wants to make 4 turkey sandwiches and 6 ham sandwiches. If each sandwich needs 2 slices of bread, how many slices of bread does Jenny need in total?\n    \"\"\"\n    number_turkey_sandwiches = 4\n    number_ham_sandwiches = 6\n    slices_per_sandwich = 2\n    \n    # Calculate total sandwiches\n    total_sandwiches = number_turkey_sandwiches + number_ham_sandwiches\n    \n    # Calculate total slices needed\n    result = total_sandwiches * slices_per_sandwich\n    \n    return result",
    "result": 20
  },
  {
    "index": 32,
    "response": "**Reasoning:**\n1. Identify the total number of cookies in the box.  \n2. Identify the number of people who will split the cookies.  \n3. Divide the total number of cookies by the number of people to find out how many cookies each person gets.\n\nDetailed steps:  \n- Total cookies = 12  \n- Number of people = 3  \n- Cookies per person = 12 ÷ 3 = 4\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If a box contains 12 cookies, and there are 3 people at a party, how many cookies will each person get if they split the cookies evenly?\n    \"\"\"\n    total_cookies = 12\n    num_people = 3\n    result = total_cookies / num_people\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a box contains 12 cookies, and there are 3 people at a party, how many cookies will each person get if they split the cookies evenly?\n    \"\"\"\n    total_cookies = 12\n    num_people = 3\n    result = total_cookies / num_people\n    return result",
    "result": 4.0
  },
  {
    "index": 33,
    "response": "**Reasoning:**\n\n1. Total volume to transfer = 80 L  \n2. Bucket capacity = 5 L  \n3. Number of full buckets needed = 80 L ÷ 5 L = 16 buckets  \n4. Time per bucket = fill time + pour time = 15 s + 40 s = 55 s  \n5. Total time = 16 buckets × 55 s/bucket = 880 s  \n\nIf desired, 880 s is 14 minutes and 40 seconds.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Chris has to transfer 80 litres of water from one container to another using a 5 litres bucket. It takes him 15 seconds to fill the bucket, and 40 seconds to pour it into the other container. How long will it take Chris to transfer all the water?\n    \"\"\"\n    total_litres = 80\n    bucket_capacity = 5\n    fill_time = 15\n    pour_time = 40\n\n    # Number of buckets needed\n    num_buckets = total_litres / bucket_capacity\n\n    # Time needed for each bucket\n    time_per_bucket = fill_time + pour_time\n\n    # Total time to transfer all the water\n    result = num_buckets * time_per_bucket\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Chris has to transfer 80 litres of water from one container to another using a 5 litres bucket. It takes him 15 seconds to fill the bucket, and 40 seconds to pour it into the other container. How long will it take Chris to transfer all the water?\n    \"\"\"\n    total_litres = 80\n    bucket_capacity = 5\n    fill_time = 15\n    pour_time = 40\n\n    # Number of buckets needed\n    num_buckets = total_litres / bucket_capacity\n\n    # Time needed for each bucket\n    time_per_bucket = fill_time + pour_time\n\n    # Total time to transfer all the water\n    result = num_buckets * time_per_bucket\n\n    return result",
    "result": 880.0
  },
  {
    "index": 34,
    "response": "**Reasoning:**\n\n1. First, find Maria’s running speed.  \n   Maria runs 6 miles in 1 hour, so her speed is  \n   Maria_speed = 6 miles / 1 hour = 6 miles per hour (mph).\n\n2. Sarah runs 25% slower than Maria.  \n   A 25% reduction means Sarah runs at 75% of Maria’s speed:  \n   Sarah_speed = Maria_speed × (1 − 0.25) = 6 mph × 0.75 = 4.5 mph.\n\n3. We want the time it takes Sarah to run 5 miles.  \n   Time = Distance / Speed, so  \n   Sarah_time = 5 miles / 4.5 mph = 1.1111111111111112 hours.\n\n4. Therefore, it takes Sarah approximately 1.1111 hours to run 5 miles.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Maria can run 6 miles in an hour. Her friend Sarah runs at a speed 25% slower than Maria. How long does it take for Sarah to run 5 miles?\n    \"\"\"\n    # Maria's known running data\n    maria_distance_miles = 6       # miles\n    maria_time_hours = 1           # hour\n    \n    # Calculate Maria's speed in miles per hour\n    maria_speed_mph = maria_distance_miles / maria_time_hours\n    \n    # Sarah runs 25% slower than Maria\n    speed_reduction_fraction = 0.25\n    sarah_speed_mph = maria_speed_mph * (1 - speed_reduction_fraction)\n    \n    # Distance Sarah needs to run\n    distance_sarah_miles = 5       # miles\n    \n    # Time = Distance / Speed\n    sarah_time_hours = distance_sarah_miles / sarah_speed_mph\n    \n    result = sarah_time_hours\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Maria can run 6 miles in an hour. Her friend Sarah runs at a speed 25% slower than Maria. How long does it take for Sarah to run 5 miles?\n    \"\"\"\n    # Maria's known running data\n    maria_distance_miles = 6       # miles\n    maria_time_hours = 1           # hour\n    \n    # Calculate Maria's speed in miles per hour\n    maria_speed_mph = maria_distance_miles / maria_time_hours\n    \n    # Sarah runs 25% slower than Maria\n    speed_reduction_fraction = 0.25\n    sarah_speed_mph = maria_speed_mph * (1 - speed_reduction_fraction)\n    \n    # Distance Sarah needs to run\n    distance_sarah_miles = 5       # miles\n    \n    # Time = Distance / Speed\n    sarah_time_hours = distance_sarah_miles / sarah_speed_mph\n    \n    result = sarah_time_hours\n    return result",
    "result": 1.1111111111111112
  },
  {
    "index": 35,
    "response": "**Reasoning:**\n\n1. Let the total budget be \\(B\\).\n2. We know 15% of the budget is spent on technology upgrades, and that amount is \\$20,000.\n3. So \\(0.15 \\times B = 20{,}000\\). Solve for \\(B\\):  \n   \\(B = 20{,}000 \\div 0.15 = 133{,}333.\\overline{33}\\).\n4. The district also spends 35% of the budget on teacher salaries, which is \\(0.35 \\times B\\).\n5. The remaining percentage of the budget is  \n   \\(1 - 0.15 - 0.35 = 0.50\\) or 50%.\n6. Therefore, the remaining amount is  \n   \\(0.50 \\times B = 0.50 \\times 133{,}333.\\overline{33} = 66{,}666.\\overline{66}\\).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    The school district of MNO spends 15% of its budget on technology upgrades. MNO spent $20,000 on technology upgrades and 35% on teacher salaries. What is the remaining amount in the budget?\n    \"\"\"\n    # Given percentages and amounts\n    tech_percentage = 0.15\n    tech_spent = 20000.0\n    salary_percentage = 0.35\n\n    # Calculate total budget from the technology spending\n    total_budget = tech_spent / tech_percentage\n\n    # Calculate the remaining percentage of the budget\n    remaining_percentage = 1 - tech_percentage - salary_percentage\n\n    # Compute the remaining amount\n    result = total_budget * remaining_percentage\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The school district of MNO spends 15% of its budget on technology upgrades. MNO spent $20,000 on technology upgrades and 35% on teacher salaries. What is the remaining amount in the budget?\n    \"\"\"\n    # Given percentages and amounts\n    tech_percentage = 0.15\n    tech_spent = 20000.0\n    salary_percentage = 0.35\n\n    # Calculate total budget from the technology spending\n    total_budget = tech_spent / tech_percentage\n\n    # Calculate the remaining percentage of the budget\n    remaining_percentage = 1 - tech_percentage - salary_percentage\n\n    # Compute the remaining amount\n    result = total_budget * remaining_percentage\n\n    return result",
    "result": 66666.66666666667
  },
  {
    "index": 36,
    "response": "**Reasoning:**\n\n1. Identify what is being asked: how many portions each guest can eat if the casserole (18 portions) is divided equally among 9 guests.\n2. Note the total number of portions: 18.\n3. Note the total number of guests: 9.\n4. To find the portions per guest, divide the total portions by the number of guests:  \n   portions_per_guest = total_portions ÷ number_of_guests  \n5. Compute 18 ÷ 9 = 2.  \n\nTherefore, each guest can eat 2 portions.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sarah is hosting a dinner party for 9 guests. She makes a casserole that is divided into 18 even portions. If she wants to ensure that each guest gets an equal amount of casserole, how many portions can each guest eat?\n    \"\"\"\n    num_guests = 9\n    total_portions = 18\n\n    # Calculate how many portions each guest gets\n    result = total_portions / num_guests\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sarah is hosting a dinner party for 9 guests. She makes a casserole that is divided into 18 even portions. If she wants to ensure that each guest gets an equal amount of casserole, how many portions can each guest eat?\n    \"\"\"\n    num_guests = 9\n    total_portions = 18\n\n    # Calculate how many portions each guest gets\n    result = total_portions / num_guests\n\n    return result",
    "result": 2.0
  },
  {
    "index": 37,
    "response": "**Reasoning:**\n\n1. Total apples sold in a day = 300  \n2. Percentage of rotten apples = 15% = 0.15  \n3. Number of rotten apples = total apples × rotten percentage = 300 × 0.15 = 45  \n4. Number of fresh apples = total apples − rotten apples = 300 − 45 = 255  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If a grocery store sells 300 apples in a day, and 15% of them are rotten, how many fresh apples were sold?\n    \"\"\"\n    total_apples = 300\n    rotten_percentage = 0.15\n    \n    # calculate how many are rotten\n    rotten_apples = total_apples * rotten_percentage\n    \n    # subtract rotten from total to get fresh\n    fresh_apples = total_apples - rotten_apples\n    \n    result = fresh_apples\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a grocery store sells 300 apples in a day, and 15% of them are rotten, how many fresh apples were sold?\n    \"\"\"\n    total_apples = 300\n    rotten_percentage = 0.15\n    \n    # calculate how many are rotten\n    rotten_apples = total_apples * rotten_percentage\n    \n    # subtract rotten from total to get fresh\n    fresh_apples = total_apples - rotten_apples\n    \n    result = fresh_apples\n    return result",
    "result": 255.0
  },
  {
    "index": 38,
    "response": "**Reasoning:**\n1. We have 6 apples and 8 oranges, for a total of 14 pieces of fruit.\n2. We select 2 pieces of fruit at random (without replacement).\n3. The total number of ways to choose 2 pieces out of 14 is C(14, 2) = 14·13/2 = 91.\n4. The number of ways to choose exactly 1 apple and 1 orange is (number of apples)·(number of oranges) = 6·8 = 48.\n5. Therefore, the probability of selecting 1 apple and 1 orange is  \n   48 / 91.\n\n**Solution:**\n```python\nimport math\n\ndef simple_math_problem() -> float:\n    \"\"\"\n    A fruit bowl contains 6 apples and 8 oranges. If 2 pieces of fruit are selected at random, \n    what is the probability that 1 piece of fruit is an apple and 1 piece of fruit is an orange?\n    \"\"\"\n    total_apples = 6\n    total_oranges = 8\n    total_fruit = total_apples + total_oranges  # 14 pieces\n\n    # Total ways to choose any 2 pieces out of 14\n    total_pairs = math.comb(total_fruit, 2)\n\n    # Ways to choose exactly 1 apple and 1 orange\n    apple_orange_pairs = total_apples * total_oranges\n\n    # Probability\n    result = apple_orange_pairs / total_pairs\n\n    return result\n```",
    "code": "import math\n\ndef simple_math_problem() -> float:\n    \"\"\"\n    A fruit bowl contains 6 apples and 8 oranges. If 2 pieces of fruit are selected at random, \n    what is the probability that 1 piece of fruit is an apple and 1 piece of fruit is an orange?\n    \"\"\"\n    total_apples = 6\n    total_oranges = 8\n    total_fruit = total_apples + total_oranges  # 14 pieces\n\n    # Total ways to choose any 2 pieces out of 14\n    total_pairs = math.comb(total_fruit, 2)\n\n    # Ways to choose exactly 1 apple and 1 orange\n    apple_orange_pairs = total_apples * total_oranges\n\n    # Probability\n    result = apple_orange_pairs / total_pairs\n\n    return result",
    "result": 0.5274725274725275
  },
  {
    "index": 39,
    "response": "**Reasoning:**\n1. The original recipe calls for 2 cups of flour and 1 cup of sugar.  \n2. To make half of the recipe, we take each amount and divide by 2.  \n   - Half of the flour: 2 cups ÷ 2 = 1 cup  \n   - Half of the sugar: 1 cup ÷ 2 = 0.5 cup  \n\n**Solution:**\n```python\ndef simple_math_problem() -> tuple:\n    \"\"\"\n    A recipe calls for 2 cups of flour and 1 cup of sugar. If you want to make half of the recipe, how much flour and sugar do you need?\n    \"\"\"\n    original_flour_cups = 2.0\n    original_sugar_cups = 1.0\n\n    half_flour_cups = original_flour_cups / 2\n    half_sugar_cups = original_sugar_cups / 2\n\n    result = (half_flour_cups, half_sugar_cups)\n    return result\n```",
    "code": "def simple_math_problem() -> tuple:\n    \"\"\"\n    A recipe calls for 2 cups of flour and 1 cup of sugar. If you want to make half of the recipe, how much flour and sugar do you need?\n    \"\"\"\n    original_flour_cups = 2.0\n    original_sugar_cups = 1.0\n\n    half_flour_cups = original_flour_cups / 2\n    half_sugar_cups = original_sugar_cups / 2\n\n    result = (half_flour_cups, half_sugar_cups)\n    return result",
    "result": [
      1.0,
      0.5
    ]
  },
  {
    "index": 40,
    "response": "**Reasoning:**\n1. Identify how many seeds each bird eats:\n   - The first bird eats 15 seeds.\n   - The second bird eats twice as many as the first: 2 * 15 = 30 seeds.\n   - The third bird eats 10 seeds less than the second: 30 - 10 = 20 seeds.\n   - The fourth bird eats the same amount as the third: 20 seeds.\n   - The fifth bird eats 5 seeds more than the fourth: 20 + 5 = 25 seeds.\n2. Sum the seeds eaten by all five birds:\n   15 + 30 + 20 + 20 + 25 = 110 seeds.\n3. Therefore, Lisa should prepare 110 seeds in a day for her five birds.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Lisa has five birds. The first bird eats 15 seeds a day. The second bird eats twice as many seeds as the first bird. The third bird eats 10 seeds less than the second bird. The fourth bird eats the same amount of seeds as the third bird while the fifth bird eats 5 seeds more than the fourth bird. How many seeds should Lisa prepare in a day for her five birds?\n    \"\"\"\n    first_bird = 15\n    second_bird = 2 * first_bird\n    third_bird = second_bird - 10\n    fourth_bird = third_bird\n    fifth_bird = fourth_bird + 5\n\n    result = first_bird + second_bird + third_bird + fourth_bird + fifth_bird\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Lisa has five birds. The first bird eats 15 seeds a day. The second bird eats twice as many seeds as the first bird. The third bird eats 10 seeds less than the second bird. The fourth bird eats the same amount of seeds as the third bird while the fifth bird eats 5 seeds more than the fourth bird. How many seeds should Lisa prepare in a day for her five birds?\n    \"\"\"\n    first_bird = 15\n    second_bird = 2 * first_bird\n    third_bird = second_bird - 10\n    fourth_bird = third_bird\n    fifth_bird = fourth_bird + 5\n\n    result = first_bird + second_bird + third_bird + fourth_bird + fifth_bird\n    return result",
    "result": 110
  },
  {
    "index": 41,
    "response": "**Reasoning:**\n\n1. First, find the production rate per machine per hour using the initial data:\n   - 10 machines produce 500 items in 4 hours.\n   - Total machine‐hours = 10 machines × 4 hours = 40 machine‐hours.\n   - Rate per machine per hour = 500 items ÷ 40 machine‐hours = 12.5 items/(machine·hour).\n\n2. Next, use that rate to find how long 15 machines take to produce 900 items:\n   - Combined rate of 15 machines = 15 machines × 12.5 items/(machine·hour) = 187.5 items/hour.\n   - Time required = 900 items ÷ 187.5 items/hour = 4.8 hours.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If 10 machines can produce 500 items in 4 hours, how long will it take for 15 machines to produce 900 items?\n    \"\"\"\n    machines_initial = 10\n    items_initial = 500\n    time_initial_hours = 4.0\n\n    machines_target = 15\n    items_target = 900\n\n    # Calculate rate per machine per hour\n    rate_per_machine_per_hour = items_initial / (machines_initial * time_initial_hours)\n    # Calculate time needed for the target scenario\n    time_target_hours = items_target / (machines_target * rate_per_machine_per_hour)\n\n    result = time_target_hours\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If 10 machines can produce 500 items in 4 hours, how long will it take for 15 machines to produce 900 items?\n    \"\"\"\n    machines_initial = 10\n    items_initial = 500\n    time_initial_hours = 4.0\n\n    machines_target = 15\n    items_target = 900\n\n    # Calculate rate per machine per hour\n    rate_per_machine_per_hour = items_initial / (machines_initial * time_initial_hours)\n    # Calculate time needed for the target scenario\n    time_target_hours = items_target / (machines_target * rate_per_machine_per_hour)\n\n    result = time_target_hours\n    return result",
    "result": 4.8
  },
  {
    "index": 42,
    "response": "**Reasoning:**\n1. The problem states there are initially 15 chairs in the room.  \n2. Then 6 more chairs are added to the room.  \n3. To find the total number of chairs now, we add the initial chairs and the added chairs: 15 + 6.  \n4. The sum gives the total chairs currently in the room.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    There are 15 chairs in the room. 6 more chairs are added. How many chairs are in the room now?\n    \"\"\"\n    initial_chairs = 15\n    added_chairs = 6\n    # Calculate the total number of chairs step by step\n    total_chairs = initial_chairs + added_chairs\n    result = float(total_chairs)\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 15 chairs in the room. 6 more chairs are added. How many chairs are in the room now?\n    \"\"\"\n    initial_chairs = 15\n    added_chairs = 6\n    # Calculate the total number of chairs step by step\n    total_chairs = initial_chairs + added_chairs\n    result = float(total_chairs)\n    return result",
    "result": 21.0
  },
  {
    "index": 43,
    "response": "**Reasoning:**\n1. We know the rabbit’s first year counts as 9 human years.  \n2. The rabbit’s second year counts as 6 human years.  \n3. Every year after the second counts as 3 human years each.  \n4. For a 4-year-old rabbit:\n   - Year 1 → 9 human years  \n   - Year 2 → 6 human years  \n   - Years 3 and 4 → 2 years × 3 human years/year = 6 human years  \n5. Sum these up: 9 + 6 + 6 = 21 human years.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If a rabbit's first year equals 9 human years, the second year equals 6 human years, and every year after that equals 3 human years, how old is my 4-year-old rabbit in human years?\n    \"\"\"\n    first_year = 9\n    second_year = 6\n    subsequent_year_value = 3\n    rabbit_age = 4\n\n    # The first two years are handled separately, then each additional year adds 3 human years\n    additional_years = rabbit_age - 2  # years beyond the first two\n    result = first_year + second_year + additional_years * subsequent_year_value\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a rabbit's first year equals 9 human years, the second year equals 6 human years, and every year after that equals 3 human years, how old is my 4-year-old rabbit in human years?\n    \"\"\"\n    first_year = 9\n    second_year = 6\n    subsequent_year_value = 3\n    rabbit_age = 4\n\n    # The first two years are handled separately, then each additional year adds 3 human years\n    additional_years = rabbit_age - 2  # years beyond the first two\n    result = first_year + second_year + additional_years * subsequent_year_value\n\n    return result",
    "result": 21
  },
  {
    "index": 44,
    "response": "**Reasoning:**\n1. We start with a total of 24 pencils in the box.\n2. Each child receives 5 pencils.\n3. There are 4 children in total.\n4. The total number of pencils given out is 5 pencils/child × 4 children = 20 pencils.\n5. Subtract the 20 given-away pencils from the original 24 to find how many remain: 24 − 20 = 4 pencils left.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A box contains 24 pencils. If 5 pencils are given to each of the 4 children, how many pencils are left in the box?\n    \"\"\"\n    total_pencils = 24\n    pencils_each = 5\n    number_of_children = 4\n\n    # Calculate how many pencils are given out in total\n    pencils_given = pencils_each * number_of_children\n\n    # Subtract from the total to find how many remain\n    result = total_pencils - pencils_given\n\n    return float(result)\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A box contains 24 pencils. If 5 pencils are given to each of the 4 children, how many pencils are left in the box?\n    \"\"\"\n    total_pencils = 24\n    pencils_each = 5\n    number_of_children = 4\n\n    # Calculate how many pencils are given out in total\n    pencils_given = pencils_each * number_of_children\n\n    # Subtract from the total to find how many remain\n    result = total_pencils - pencils_given\n\n    return float(result)",
    "result": 4.0
  },
  {
    "index": 45,
    "response": "**Reasoning:**\n1. We have a wall that is 12 feet wide and 9 feet tall.\n2. The total area of the wall is width × height = 12 ft × 9 ft = 108 square feet.\n3. Joseph can paint at a rate of 4 square feet per minute.\n4. To find the time required, divide the total area by the rate:\n   time = area / rate = 108 sq ft / (4 sq ft/min) = 27 minutes.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Joseph wants to paint a bedroom wall that is 12 feet wide and 9 feet tall. \n    If he can paint 4 square feet per minute, how long will it take for him to completely paint the wall?\n    \"\"\"\n    # Given dimensions of the wall\n    width_feet = 12\n    height_feet = 9\n\n    # Painting rate in square feet per minute\n    rate_sqft_per_min = 4\n\n    # Calculate the total area of the wall\n    total_area_sqft = width_feet * height_feet  # 12 * 9 = 108\n\n    # Calculate the time required in minutes\n    time_minutes = total_area_sqft / rate_sqft_per_min  # 108 / 4 = 27\n\n    return time_minutes\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Joseph wants to paint a bedroom wall that is 12 feet wide and 9 feet tall. \n    If he can paint 4 square feet per minute, how long will it take for him to completely paint the wall?\n    \"\"\"\n    # Given dimensions of the wall\n    width_feet = 12\n    height_feet = 9\n\n    # Painting rate in square feet per minute\n    rate_sqft_per_min = 4\n\n    # Calculate the total area of the wall\n    total_area_sqft = width_feet * height_feet  # 12 * 9 = 108\n\n    # Calculate the time required in minutes\n    time_minutes = total_area_sqft / rate_sqft_per_min  # 108 / 4 = 27\n\n    return time_minutes",
    "result": 27.0
  },
  {
    "index": 46,
    "response": "**Reasoning:**\n1. Anisha has 500 marbles in total.  \n2. Each box can hold up to 10 marbles.  \n3. To find the minimum number of boxes needed, divide the total number of marbles by the capacity of each box.  \n4. 500 ÷ 10 = 50.  \n5. Since 500 is exactly divisible by 10, there is no remainder, so exactly 50 boxes are required.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Anisha has 500 round marbles and wants to fit them into as few boxes as possible. If each box only holds 10 marbles, how many boxes does Anisha need?\n    \"\"\"\n    total_marbles = 500\n    box_capacity = 10\n\n    # Step-by-step calculation\n    boxes_needed = total_marbles / box_capacity\n\n    result = boxes_needed\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Anisha has 500 round marbles and wants to fit them into as few boxes as possible. If each box only holds 10 marbles, how many boxes does Anisha need?\n    \"\"\"\n    total_marbles = 500\n    box_capacity = 10\n\n    # Step-by-step calculation\n    boxes_needed = total_marbles / box_capacity\n\n    result = boxes_needed\n    return result",
    "result": 50.0
  },
  {
    "index": 47,
    "response": "**Reasoning:**\n1. Each pair of shoes costs \\$40.  \n2. Mary orders 2 pairs, so the cost for shoes is 2 × \\$40 = \\$80.  \n3. The jacket costs \\$60.  \n4. Total cost = \\$80 (shoes) + \\$60 (jacket) = \\$140.  \n5. Mary pays with a \\$150 bill.  \n6. Change = \\$150 − \\$140 = \\$10.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mary orders 2 pairs of shoes that cost $40 each and a jacket that costs $60. She pays with a $150 bill. How much does she get in change?\n    \"\"\"\n    price_per_pair = 40\n    number_of_pairs = 2\n    jacket_cost = 60\n    bill_amount = 150\n\n    cost_of_shoes = price_per_pair * number_of_pairs\n    total_cost = cost_of_shoes + jacket_cost\n    result = bill_amount - total_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mary orders 2 pairs of shoes that cost $40 each and a jacket that costs $60. She pays with a $150 bill. How much does she get in change?\n    \"\"\"\n    price_per_pair = 40\n    number_of_pairs = 2\n    jacket_cost = 60\n    bill_amount = 150\n\n    cost_of_shoes = price_per_pair * number_of_pairs\n    total_cost = cost_of_shoes + jacket_cost\n    result = bill_amount - total_cost\n\n    return result",
    "result": 10
  },
  {
    "index": 48,
    "response": "**Reasoning:**\n1. Calculate the total time the teacher spends on all three tasks in one day:\n   - Grading papers: 12 minutes\n   - Creating lesson plans: 20 minutes\n   - Setting up the classroom: 8 minutes  \n   Total per day = 12 + 20 + 8 = 40 minutes\n\n2. The teacher repeats this routine for 4 days.\n   Total for 4 days = 40 minutes/day × 4 days = 160 minutes\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A teacher spends 12 minutes grading papers, 20 minutes creating lesson plans, and 8 minutes setting up the classroom. If the teacher repeats this routine for 4 days, how much time does the teacher spend in total?\n    \"\"\"\n    minutes_grading = 12\n    minutes_planning = 20\n    minutes_setting_up = 8\n    days = 4\n\n    # Total time spent per day\n    time_per_day = minutes_grading + minutes_planning + minutes_setting_up\n\n    # Total time for the given number of days\n    result = time_per_day * days\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A teacher spends 12 minutes grading papers, 20 minutes creating lesson plans, and 8 minutes setting up the classroom. If the teacher repeats this routine for 4 days, how much time does the teacher spend in total?\n    \"\"\"\n    minutes_grading = 12\n    minutes_planning = 20\n    minutes_setting_up = 8\n    days = 4\n\n    # Total time spent per day\n    time_per_day = minutes_grading + minutes_planning + minutes_setting_up\n\n    # Total time for the given number of days\n    result = time_per_day * days\n\n    return result",
    "result": 160
  },
  {
    "index": 49,
    "response": "**Reasoning:**\n\n1. We are given that Kai plants 6 flowers on Day 1.\n2. Each subsequent day he plants 4 more flowers than the day before.\n3. He does this for 7 days in total.\n4. We can list how many flowers he plants each day:\n   - Day 1: 6\n   - Day 2: 6 + 4 = 10\n   - Day 3: 10 + 4 = 14\n   - Day 4: 14 + 4 = 18\n   - Day 5: 18 + 4 = 22\n   - Day 6: 22 + 4 = 26\n   - Day 7: 26 + 4 = 30\n5. To find the total, sum these amounts:  \n   6 + 10 + 14 + 18 + 22 + 26 + 30 = 126\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Kai is planting flowers in his garden. He plants 6 flowers on the first day and then adds 4 more flowers every day. If he plants flowers for 7 days, how many flowers will he have planted in total?\n    \"\"\"\n    # initial number of flowers on day 1\n    initial_flowers = 6\n    # number of days he increases by each day\n    daily_increase = 4\n    # total days of planting\n    days = 7\n\n    # Calculate the total using a loop\n    total_flowers = 0\n    for day in range(days):\n        # flowers planted on this day\n        today_flowers = initial_flowers + daily_increase * day\n        total_flowers += today_flowers\n\n    result = total_flowers\n    return result\n```\n\nIf you run `simple_math_problem()` it will return `126.0`.",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Kai is planting flowers in his garden. He plants 6 flowers on the first day and then adds 4 more flowers every day. If he plants flowers for 7 days, how many flowers will he have planted in total?\n    \"\"\"\n    # initial number of flowers on day 1\n    initial_flowers = 6\n    # number of days he increases by each day\n    daily_increase = 4\n    # total days of planting\n    days = 7\n\n    # Calculate the total using a loop\n    total_flowers = 0\n    for day in range(days):\n        # flowers planted on this day\n        today_flowers = initial_flowers + daily_increase * day\n        total_flowers += today_flowers\n\n    result = total_flowers\n    return result",
    "result": 126
  },
  {
    "index": 50,
    "response": "**Reasoning:**\n1. Emily takes 5 pills twice a day, so she takes 5 pills at breakfast (or another meal) and 5 pills at lunch every day.\n2. That’s a total of 2 doses per day × 5 pills per dose = 10 pills per day.\n3. We assume each month has 30 days (a typical assumption for “a month” in such problems).\n4. In the first month, she follows the instructions for all 30 days, so she takes 30 days × 10 pills/day = 300 pills with meals.\n5. In the second month, she again would take 30 days × 10 pills/day = 300 pills, but she forgot to take her lunch dose twice. Each missed lunch dose is 5 pills, so she missed 2 × 5 = 10 pills.\n6. Therefore, in the second month she actually took 300 − 10 = 290 pills with her meals.\n7. Over the two months combined, she took 300 + 290 = 590 pills with her meals.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Emily has to take 5 pills of vitamin C twice a day. Her vitamin instructions are to take them with a meal.\n    She followed the instructions for a month, but in the second month, she forgot to take them with lunch twice.\n    How many pills of vitamin C did she take with her meals over those two months?\n    \"\"\"\n    # Number of days in each month\n    days_in_first_month = 30\n    days_in_second_month = 30\n\n    # Pills per dose and doses per day\n    pills_per_dose = 5\n    doses_per_day = 2\n\n    # Calculate total pills taken in each month if no doses were missed\n    total_pills_month1 = days_in_first_month * doses_per_day * pills_per_dose\n    total_pills_month2 = days_in_second_month * doses_per_day * pills_per_dose\n\n    # She forgot two lunch doses in the second month\n    missed_lunches = 2\n    missed_pills = missed_lunches * pills_per_dose\n\n    # Total pills actually taken with meals over two months\n    result = total_pills_month1 + total_pills_month2 - missed_pills\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Emily has to take 5 pills of vitamin C twice a day. Her vitamin instructions are to take them with a meal.\n    She followed the instructions for a month, but in the second month, she forgot to take them with lunch twice.\n    How many pills of vitamin C did she take with her meals over those two months?\n    \"\"\"\n    # Number of days in each month\n    days_in_first_month = 30\n    days_in_second_month = 30\n\n    # Pills per dose and doses per day\n    pills_per_dose = 5\n    doses_per_day = 2\n\n    # Calculate total pills taken in each month if no doses were missed\n    total_pills_month1 = days_in_first_month * doses_per_day * pills_per_dose\n    total_pills_month2 = days_in_second_month * doses_per_day * pills_per_dose\n\n    # She forgot two lunch doses in the second month\n    missed_lunches = 2\n    missed_pills = missed_lunches * pills_per_dose\n\n    # Total pills actually taken with meals over two months\n    result = total_pills_month1 + total_pills_month2 - missed_pills\n\n    return result",
    "result": 590
  },
  {
    "index": 51,
    "response": "It looks like some information is missing—namely, how many squares of fabric Grace needs for her quilt. Could you please tell me the number of squares so I can compute the total time?",
    "code": "",
    "result": null
  },
  {
    "index": 52,
    "response": "**Reasoning:**\n\n1. We know the car’s speed is 60 km/hour.\n2. We want to travel a distance of 10 km.\n3. Time (in hours) = Distance ÷ Speed.  \n   time_hours = 10 km ÷ 60 km/hour = 1/6 hour.\n4. To convert hours into minutes, multiply by 60.  \n   time_minutes = (1/6) hour × 60 minutes/hour = 10 minutes.\n5. Therefore, it will take 10 minutes to travel 10 km at 60 km/hour.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car is travelling at a speed of 60 km/hour. How many minutes will it take to travel a distance of 10 km?\n    \"\"\"\n    speed_km_per_h = 60\n    distance_km = 10\n    # Calculate time in hours\n    time_hours = distance_km / speed_km_per_h\n    # Convert hours to minutes\n    time_minutes = time_hours * 60\n    result = time_minutes\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car is travelling at a speed of 60 km/hour. How many minutes will it take to travel a distance of 10 km?\n    \"\"\"\n    speed_km_per_h = 60\n    distance_km = 10\n    # Calculate time in hours\n    time_hours = distance_km / speed_km_per_h\n    # Convert hours to minutes\n    time_minutes = time_hours * 60\n    result = time_minutes\n    \n    return result",
    "result": 10.0
  },
  {
    "index": 53,
    "response": "**Reasoning:**\n1. The area \\(A\\) of a rectangle is given by the product of its two side lengths: \\(A = \\text{length} \\times \\text{width}\\).\n2. We know one side (call it the length) is 15 meters.\n3. We know the area is 240 square meters.\n4. To find the other side (the width), we rearrange the formula: \\(\\text{width} = \\dfrac{A}{\\text{length}}\\).\n5. Substitute the known values: \\(\\text{width} = \\dfrac{240}{15} = 16\\).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A rectangle has one side that is 15 meters long. If the area of the rectangle is 240 square meters, what is the length of the other side of the rectangle in meters?\n    \"\"\"\n    known_side = 15  # meters\n    area = 240       # square meters\n    \n    # Using area = length * width  =>  width = area / length\n    other_side = area / known_side\n    \n    result = other_side\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A rectangle has one side that is 15 meters long. If the area of the rectangle is 240 square meters, what is the length of the other side of the rectangle in meters?\n    \"\"\"\n    known_side = 15  # meters\n    area = 240       # square meters\n    \n    # Using area = length * width  =>  width = area / length\n    other_side = area / known_side\n    \n    result = other_side\n    return result",
    "result": 16.0
  },
  {
    "index": 54,
    "response": "**Reasoning:**\n\n1. We are asked for the percentage difference in diameter between a basketball and a soccer ball, expressed as a percentage of the basketball’s diameter.\n2. The basketball’s diameter is 9.39 inches.\n3. The soccer ball’s diameter is 8.66 inches.\n4. First, compute the absolute difference in diameters:\n   difference = basketball_diameter – soccer_ball_diameter\n5. Then, to express this difference as a percentage of the basketball’s diameter, divide the difference by the basketball’s diameter and multiply by 100:\n   percentage_difference = (difference / basketball_diameter) * 100\n6. Finally, return that percentage.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A basketball has a diameter of 9.39 inches, while a soccer ball has a diameter of 8.66 inches. \n    What is the percentage difference in their diameter, expressed as a percentage of the basketball's diameter?\n    \"\"\"\n    # Given diameters\n    basketball_diameter = 9.39\n    soccer_ball_diameter = 8.66\n\n    # Step 1: Compute the difference in diameters\n    difference = basketball_diameter - soccer_ball_diameter\n\n    # Step 2: Compute the percentage difference relative to the basketball’s diameter\n    result = (difference / basketball_diameter) * 100\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A basketball has a diameter of 9.39 inches, while a soccer ball has a diameter of 8.66 inches. \n    What is the percentage difference in their diameter, expressed as a percentage of the basketball's diameter?\n    \"\"\"\n    # Given diameters\n    basketball_diameter = 9.39\n    soccer_ball_diameter = 8.66\n\n    # Step 1: Compute the difference in diameters\n    difference = basketball_diameter - soccer_ball_diameter\n\n    # Step 2: Compute the percentage difference relative to the basketball’s diameter\n    result = (difference / basketball_diameter) * 100\n\n    return result",
    "result": 7.774227902023433
  },
  {
    "index": 55,
    "response": "**Reasoning:**\n1. We know each customer buys 9 cups.\n2. We also know each cup costs \\$3.99.\n3. The store sold a total of 72 cups.\n4. First, determine how many customers purchased those 72 cups:\n     number_of_customers = total_cups_sold / cups_per_customer\n5. Then compute the total revenue:\n     total_revenue = total_cups_sold * price_per_cup\n6. Plugging in the numbers:\n     number_of_customers = 72 / 9 = 8  \n     total_revenue = 72 * 3.99 = 287.28\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If each customer buys 9 cups, and each cup cost 3.99, how much money does the store make from selling 72 cups?\n    \"\"\"\n    cups_per_customer = 9\n    price_per_cup = 3.99\n    total_cups_sold = 72\n\n    # Calculate number of customers\n    number_of_customers = total_cups_sold / cups_per_customer\n\n    # Calculate total revenue\n    total_revenue = total_cups_sold * price_per_cup\n\n    result = total_revenue\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If each customer buys 9 cups, and each cup cost 3.99, how much money does the store make from selling 72 cups?\n    \"\"\"\n    cups_per_customer = 9\n    price_per_cup = 3.99\n    total_cups_sold = 72\n\n    # Calculate number of customers\n    number_of_customers = total_cups_sold / cups_per_customer\n\n    # Calculate total revenue\n    total_revenue = total_cups_sold * price_per_cup\n\n    result = total_revenue\n    return result",
    "result": 287.28000000000003
  },
  {
    "index": 56,
    "response": "**Reasoning:**\n1. We are told the sum of two numbers is 35.  \n2. One of the numbers is 11.  \n3. To find the other number, subtract the known number from the total sum:  \n   other number = 35 − 11  \n4. Compute 35 − 11 = 24.  \n5. Therefore, the other number is 24.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    The sum of two numbers is 35. If one of the numbers is 11, what is the other number?\n    \"\"\"\n    sum_of_numbers = 35\n    first_number = 11\n    second_number = sum_of_numbers - first_number\n    result = second_number\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The sum of two numbers is 35. If one of the numbers is 11, what is the other number?\n    \"\"\"\n    sum_of_numbers = 35\n    first_number = 11\n    second_number = sum_of_numbers - first_number\n    result = second_number\n    return result",
    "result": 24
  },
  {
    "index": 57,
    "response": "**Reasoning:**\n1. Ethan saves \\$60 in two weeks.\n2. To find his weekly savings rate, divide \\$60 by 2 weeks:  \n   savings_per_week = 60 / 2 = \\$30 per week.\n3. A month is approximated as 4 weeks.\n4. Therefore, in a month he would save:  \n   monthly_savings = savings_per_week * 4 = 30 * 4 = \\$120.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Ethan saved $60 in two weeks. How much would he have saved in a month if he saved at the same rate?\n    \"\"\"\n    savings_two_weeks = 60\n    weeks_in_two_weeks = 2\n    # Calculate weekly savings rate\n    savings_per_week = savings_two_weeks / weeks_in_two_weeks\n    # Assume 4 weeks in a month\n    weeks_in_month = 4\n    # Calculate monthly savings\n    result = savings_per_week * weeks_in_month\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Ethan saved $60 in two weeks. How much would he have saved in a month if he saved at the same rate?\n    \"\"\"\n    savings_two_weeks = 60\n    weeks_in_two_weeks = 2\n    # Calculate weekly savings rate\n    savings_per_week = savings_two_weeks / weeks_in_two_weeks\n    # Assume 4 weeks in a month\n    weeks_in_month = 4\n    # Calculate monthly savings\n    result = savings_per_week * weeks_in_month\n\n    return result",
    "result": 120.0
  },
  {
    "index": 58,
    "response": "**Reasoning:**\n1. We are given the ratio of red to blue balls is 3 : 5.\n2. Let the common scale factor be k. Then:\n   - Number of red balls = 3 k\n   - Number of blue balls = 5 k\n3. We know there are 24 red balls, so:\n   - 3 k = 24\n   - k = 24 / 3 = 8\n4. Therefore, number of blue balls = 5 × k = 5 × 8 = 40\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    The ratio of red balls to blue balls in a bag is 3:5. If there are 24 red balls in the bag, how many blue balls are in the bag?\n    \"\"\"\n    # Given ratio parts\n    red_ratio = 3\n    blue_ratio = 5\n\n    # Given actual number of red balls\n    red_balls = 24\n\n    # Determine the scale factor k\n    scale_factor = red_balls / red_ratio  # k = 24 / 3 = 8\n\n    # Calculate the number of blue balls\n    blue_balls = blue_ratio * scale_factor  # 5 * 8 = 40\n\n    result = float(blue_balls)\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The ratio of red balls to blue balls in a bag is 3:5. If there are 24 red balls in the bag, how many blue balls are in the bag?\n    \"\"\"\n    # Given ratio parts\n    red_ratio = 3\n    blue_ratio = 5\n\n    # Given actual number of red balls\n    red_balls = 24\n\n    # Determine the scale factor k\n    scale_factor = red_balls / red_ratio  # k = 24 / 3 = 8\n\n    # Calculate the number of blue balls\n    blue_balls = blue_ratio * scale_factor  # 5 * 8 = 40\n\n    result = float(blue_balls)\n    return result",
    "result": 40.0
  },
  {
    "index": 59,
    "response": "**Reasoning:**\n\n1. Identify the total time Adam spends at the museum: 10 hours.  \n2. Identify the time spent in each specified exhibit:\n   - Dinosaur exhibit: 1.5 hours  \n   - Art exhibit: 3 hours  \n   - Science exhibit: 2 hours  \n3. Sum the times spent in the specified exhibits:  \n   1.5 + 3 + 2 = 6.5 hours  \n4. Subtract the summed time from the total time to find the remaining time:  \n   10 − 6.5 = 3.5 hours  \n\nTherefore, Adam spends 3.5 hours exploring the rest of the museum.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Adam spends 10 hours at a museum. He spends 1.5 hours in the dinosaur exhibit, 3 hours in the art exhibit, and 2 hours in the science exhibit. How long does he spend exploring the rest of the museum?\n    \"\"\"\n    total_time = 10.0\n    dinosaur_exhibit_time = 1.5\n    art_exhibit_time = 3.0\n    science_exhibit_time = 2.0\n\n    # Calculate time spent in the specified exhibits\n    time_in_specified_exhibits = (\n        dinosaur_exhibit_time\n        + art_exhibit_time\n        + science_exhibit_time\n    )\n\n    # Calculate the remaining time\n    remaining_time = total_time - time_in_specified_exhibits\n\n    return remaining_time\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Adam spends 10 hours at a museum. He spends 1.5 hours in the dinosaur exhibit, 3 hours in the art exhibit, and 2 hours in the science exhibit. How long does he spend exploring the rest of the museum?\n    \"\"\"\n    total_time = 10.0\n    dinosaur_exhibit_time = 1.5\n    art_exhibit_time = 3.0\n    science_exhibit_time = 2.0\n\n    # Calculate time spent in the specified exhibits\n    time_in_specified_exhibits = (\n        dinosaur_exhibit_time\n        + art_exhibit_time\n        + science_exhibit_time\n    )\n\n    # Calculate the remaining time\n    remaining_time = total_time - time_in_specified_exhibits\n\n    return remaining_time",
    "result": 3.5
  },
  {
    "index": 60,
    "response": "**Reasoning:**\n\n1. Let the two numbers be x and y.  \n2. From the problem, their sum is x + y = 30.  \n3. Also, one number is twice the other, so y = 2·x.  \n4. Substitute y = 2x into x + y = 30 to get x + 2x = 30 → 3x = 30 → x = 10.  \n5. Then y = 2·10 = 20.  \n6. Therefore, the two numbers are 10 and 20.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    The sum of two numbers is 30. If one number is twice the other, what are the two numbers?\n    \"\"\"\n    sum_of_numbers = 30\n    ratio_of_larger_to_smaller = 2\n    total_parts = 1 + ratio_of_larger_to_smaller\n    smaller_number = sum_of_numbers / total_parts\n    larger_number = ratio_of_larger_to_smaller * smaller_number\n    result = (smaller_number, larger_number)\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The sum of two numbers is 30. If one number is twice the other, what are the two numbers?\n    \"\"\"\n    sum_of_numbers = 30\n    ratio_of_larger_to_smaller = 2\n    total_parts = 1 + ratio_of_larger_to_smaller\n    smaller_number = sum_of_numbers / total_parts\n    larger_number = ratio_of_larger_to_smaller * smaller_number\n    result = (smaller_number, larger_number)\n\n    return result",
    "result": [
      10.0,
      20.0
    ]
  },
  {
    "index": 61,
    "response": "**Reasoning:**\n1. We are given the diameter of the pizza, which is 16 inches.  \n2. The radius \\(r\\) is half of the diameter, so \\(r = \\frac{16}{2} = 8\\) inches.  \n3. The formula for the area \\(A\\) of a circle is \\(A = \\pi r^2\\).  \n4. Substitute \\(r = 8\\) inches into the formula to get \\(A = \\pi \\times 8^2 = 64\\pi\\).  \n5. We will compute this using Python's `math.pi` for \\(\\pi\\).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A pizza has a diameter of 16 inches. What is the area of the pizza?\n    \"\"\"\n    import math\n\n    # Given diameter of the pizza in inches\n    diameter_inches = 16\n\n    # Compute the radius in inches\n    radius_inches = diameter_inches / 2\n\n    # Calculate the area using the formula A = π r^2\n    area_square_inches = math.pi * (radius_inches ** 2)\n\n    # Store the final result\n    result = area_square_inches\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A pizza has a diameter of 16 inches. What is the area of the pizza?\n    \"\"\"\n    import math\n\n    # Given diameter of the pizza in inches\n    diameter_inches = 16\n\n    # Compute the radius in inches\n    radius_inches = diameter_inches / 2\n\n    # Calculate the area using the formula A = π r^2\n    area_square_inches = math.pi * (radius_inches ** 2)\n\n    # Store the final result\n    result = area_square_inches\n\n    return result",
    "result": 201.06192982974676
  },
  {
    "index": 62,
    "response": "**Reasoning:**\n\n1. The gas station sells 1000 gallons of gas each day.\n2. Each gallon sells for \\$2.85.\n3. Daily revenue = (gallons sold per day) × (price per gallon)  \n   = 1000 × 2.85  \n   = \\$2,850 per day.\n4. We assume \"a month\" means 30 days.\n5. Monthly revenue = (daily revenue) × (number of days in a month)  \n   = 2,850 × 30  \n   = \\$85,500.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A gas station sells 1000 gallons of gas a day at $2.85 per gallon. How much money do they make in a month?\n    \"\"\"\n    daily_gallons_sold = 1000\n    price_per_gallon = 2.85\n    days_in_month = 30\n\n    # calculate daily revenue\n    daily_revenue = daily_gallons_sold * price_per_gallon\n\n    # calculate monthly revenue\n    result = daily_revenue * days_in_month\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A gas station sells 1000 gallons of gas a day at $2.85 per gallon. How much money do they make in a month?\n    \"\"\"\n    daily_gallons_sold = 1000\n    price_per_gallon = 2.85\n    days_in_month = 30\n\n    # calculate daily revenue\n    daily_revenue = daily_gallons_sold * price_per_gallon\n\n    # calculate monthly revenue\n    result = daily_revenue * days_in_month\n\n    return result",
    "result": 85500.0
  },
  {
    "index": 63,
    "response": "**Reasoning:**\n\n1. Determine the total weekly revenue:\n   - LuxeStay earns \\$1,000,000 per day from room bookings.\n   - There are 7 days in a week.\n   - Weekly revenue = 1,000,000 * 7.\n\n2. Determine the total weekly expenses:\n   - LuxeStay’s expenses are given on a monthly basis (\\$15,000,000 per month).\n   - Assume 1 month ≈ 4 weeks.\n   - Weekly expenses = 15,000,000 / 4.\n\n3. Compute the weekly profit:\n   - Weekly profit = weekly revenue – weekly expenses.\n\n4. Calculate the fine:\n   - The fine is 0.75% of weekly profit.\n   - 0.75% expressed as a decimal is 0.0075.\n   - Fine = weekly profit * 0.0075.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    The hotel chain LuxeStay was sued for providing poor customer service and is being fined 0.75% of their weekly profits.\n    Every day LuxeStay earns $1,000,000 from room bookings and their monthly expenses are $15,000,000.\n    What will be the total amount of LuxeStay's fine?\n    \"\"\"\n    # Daily earnings from room bookings\n    daily_revenue = 1_000_000.0\n    \n    # Weekly revenue (7 days in a week)\n    weekly_revenue = daily_revenue * 7\n    \n    # Monthly expenses and conversion to weekly expenses (4 weeks per month)\n    monthly_expenses = 15_000_000.0\n    weekly_expenses = monthly_expenses / 4\n    \n    # Weekly profit = weekly revenue - weekly expenses\n    weekly_profit = weekly_revenue - weekly_expenses\n    \n    # Fine rate (0.75% as a decimal)\n    fine_rate = 0.0075\n    \n    # Total fine\n    result = weekly_profit * fine_rate\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The hotel chain LuxeStay was sued for providing poor customer service and is being fined 0.75% of their weekly profits.\n    Every day LuxeStay earns $1,000,000 from room bookings and their monthly expenses are $15,000,000.\n    What will be the total amount of LuxeStay's fine?\n    \"\"\"\n    # Daily earnings from room bookings\n    daily_revenue = 1_000_000.0\n    \n    # Weekly revenue (7 days in a week)\n    weekly_revenue = daily_revenue * 7\n    \n    # Monthly expenses and conversion to weekly expenses (4 weeks per month)\n    monthly_expenses = 15_000_000.0\n    weekly_expenses = monthly_expenses / 4\n    \n    # Weekly profit = weekly revenue - weekly expenses\n    weekly_profit = weekly_revenue - weekly_expenses\n    \n    # Fine rate (0.75% as a decimal)\n    fine_rate = 0.0075\n    \n    # Total fine\n    result = weekly_profit * fine_rate\n    \n    return result",
    "result": 24375.0
  },
  {
    "index": 64,
    "response": "**Reasoning:**\n\n1. Identify the number of workers:\n   - There are 60 workers.\n2. Identify the average hours worked per worker per week:\n   - Each worker works 35 hours per week on average.\n3. Identify the average wage per hour:\n   - Each worker earns \\$20 per hour on average.\n4. Compute the weekly wage per worker:\n   - Weekly wage per worker = hours per week * wage per hour = 35 * 20 = \\$700.\n5. Compute the total weekly wage bill:\n   - Total weekly wage bill = number of workers * weekly wage per worker = 60 * 700 = \\$42,000.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A company employs 60 workers. The average number of hours worked by each worker per week is 35. \n    If each worker earns an average of $20 per hour, calculate the total weekly wage bill of the company.\n    \"\"\"\n    # Number of workers\n    num_workers = 60\n    # Average hours worked per worker per week\n    avg_hours_per_worker = 35\n    # Average wage earned per hour\n    avg_wage_per_hour = 20\n\n    # Calculate weekly wage per worker\n    weekly_wage_per_worker = avg_hours_per_worker * avg_wage_per_hour\n    # Calculate total weekly wage bill for all workers\n    total_weekly_wage_bill = num_workers * weekly_wage_per_worker\n\n    result = total_weekly_wage_bill\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A company employs 60 workers. The average number of hours worked by each worker per week is 35. \n    If each worker earns an average of $20 per hour, calculate the total weekly wage bill of the company.\n    \"\"\"\n    # Number of workers\n    num_workers = 60\n    # Average hours worked per worker per week\n    avg_hours_per_worker = 35\n    # Average wage earned per hour\n    avg_wage_per_hour = 20\n\n    # Calculate weekly wage per worker\n    weekly_wage_per_worker = avg_hours_per_worker * avg_wage_per_hour\n    # Calculate total weekly wage bill for all workers\n    total_weekly_wage_bill = num_workers * weekly_wage_per_worker\n\n    result = total_weekly_wage_bill\n    return result",
    "result": 42000
  },
  {
    "index": 65,
    "response": "**Reasoning:**\n\n1. Start with the initial amount of money: \\$1700.  \n2. He first spends \\(\\tfrac{4}{7}\\) of the initial money plus an extra \\$120 on the laptop.  \n   - Amount spent on laptop = \\(\\tfrac{4}{7} \\times 1700 + 120\\).  \n3. Compute how much remains after buying the laptop:  \n   - Remaining after laptop = \\(1700 - \\text{(amount spent on laptop)}\\).  \n4. From that remaining amount, he then spends \\(\\tfrac{4}{9}\\) of it plus an extra \\$90 on the headset.  \n   - Amount spent on headset = \\(\\tfrac{4}{9} \\times \\text{(remaining after laptop)} + 90\\).  \n5. Finally, compute how much money is left after both purchases:  \n   - Money left = \\(\\text{(remaining after laptop)} - \\text{(amount spent on headset)}\\).  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    ven had $1700 for a gaming laptop. He spent 4/7 of the money and an additional $120 for the laptop. He then spent 4/9 of the remaining money and an additional $90 for a headset. How much money does he have left?\n    \"\"\"\n    # Initial amount saved\n    initial_money = 1700.0\n\n    # Spend on the laptop: 4/7 of initial plus $120\n    spent_on_laptop = (4/7) * initial_money + 120\n\n    # Remaining after buying the laptop\n    remaining_after_laptop = initial_money - spent_on_laptop\n\n    # Spend on the headset: 4/9 of the remaining plus $90\n    spent_on_headset = (4/9) * remaining_after_laptop + 90\n\n    # Final money left\n    money_left = remaining_after_laptop - spent_on_headset\n\n    result = money_left\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    ven had $1700 for a gaming laptop. He spent 4/7 of the money and an additional $120 for the laptop. He then spent 4/9 of the remaining money and an additional $90 for a headset. How much money does he have left?\n    \"\"\"\n    # Initial amount saved\n    initial_money = 1700.0\n\n    # Spend on the laptop: 4/7 of initial plus $120\n    spent_on_laptop = (4/7) * initial_money + 120\n\n    # Remaining after buying the laptop\n    remaining_after_laptop = initial_money - spent_on_laptop\n\n    # Spend on the headset: 4/9 of the remaining plus $90\n    spent_on_headset = (4/9) * remaining_after_laptop + 90\n\n    # Final money left\n    money_left = remaining_after_laptop - spent_on_headset\n\n    result = money_left\n    return result",
    "result": 248.0952380952382
  },
  {
    "index": 66,
    "response": "**Reasoning:**\n1. The original total spending is \\$200.  \n2. The store first applies a 15% discount. A 15% discount means the customer pays 85% of the original price:  \n   price_after_first_discount = 200 × (1 − 0.15) = 200 × 0.85 = 170.  \n3. The customer then applies an additional 10% off the discounted amount. A 10% discount means they pay 90% of what's left:  \n   final_price = 170 × (1 − 0.10) = 170 × 0.90 = 153.  \n4. Therefore, the customer pays \\$153.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A store has a sale and discounts all items by 15%. If a customer spends $200 and has a coupon for an additional 10% off the discounted amount, how much does the customer pay?\n    \"\"\"\n    original_price = 200.0\n    first_discount_rate = 0.15\n    price_after_first_discount = original_price * (1 - first_discount_rate)\n    additional_coupon_rate = 0.10\n    final_price = price_after_first_discount * (1 - additional_coupon_rate)\n    result = final_price\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A store has a sale and discounts all items by 15%. If a customer spends $200 and has a coupon for an additional 10% off the discounted amount, how much does the customer pay?\n    \"\"\"\n    original_price = 200.0\n    first_discount_rate = 0.15\n    price_after_first_discount = original_price * (1 - first_discount_rate)\n    additional_coupon_rate = 0.10\n    final_price = price_after_first_discount * (1 - additional_coupon_rate)\n    result = final_price\n\n    return result",
    "result": 153.0
  },
  {
    "index": 67,
    "response": "**Reasoning:**\n1. We know the cost of one bag of candy is \\$2.50.  \n2. Sally wants to buy 10 bags.  \n3. To find the total cost, multiply the cost per bag by the number of bags:  \n   total_cost = cost_per_bag * number_of_bags  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A bag of candy costs $2.50. If Sally wants to buy 10 bags of candy, how much will it cost her in total?\n    \"\"\"\n    cost_per_bag = 2.50\n    number_of_bags = 10\n\n    # Multiply cost per bag by number of bags to get total cost\n    result = cost_per_bag * number_of_bags\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A bag of candy costs $2.50. If Sally wants to buy 10 bags of candy, how much will it cost her in total?\n    \"\"\"\n    cost_per_bag = 2.50\n    number_of_bags = 10\n\n    # Multiply cost per bag by number of bags to get total cost\n    result = cost_per_bag * number_of_bags\n\n    return result",
    "result": 25.0
  },
  {
    "index": 68,
    "response": "**Reasoning:**\n1. The bucket capacity is 8 liters.\n2. The basin capacity is 12 liters, but it is only 40% filled.\n3. Calculate the current amount of water in the basin:\n   basin_fill = 40% of 12 liters = 0.4 * 12 = 4.8 liters.\n4. Determine how much more water is needed to fill the basin:\n   needed_for_basin = 12 - 4.8 = 7.2 liters.\n5. The bucket is empty (needs full capacity), so it needs 8 liters.\n6. Total water required = water needed for basin + water needed for bucket = 7.2 + 8 = 15.2 liters.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A bucket holds 8 liters of water, while a basin holds 12 liters of water. \n    If the basin is only 40% filled, how much more water is needed to fill \n    both the bucket and basin, assuming they have the same capacity?\n    \"\"\"\n    bucket_capacity = 8             # liters\n    basin_capacity = 12             # liters\n    basin_fill_fraction = 0.40      # 40%\n\n    # Current water in the basin\n    current_water_in_basin = basin_capacity * basin_fill_fraction\n\n    # Water needed to fill the basin\n    water_needed_for_basin = basin_capacity - current_water_in_basin\n\n    # Water needed to fill the bucket (empty)\n    water_needed_for_bucket = bucket_capacity\n\n    # Total water required\n    result = water_needed_for_basin + water_needed_for_bucket\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A bucket holds 8 liters of water, while a basin holds 12 liters of water. \n    If the basin is only 40% filled, how much more water is needed to fill \n    both the bucket and basin, assuming they have the same capacity?\n    \"\"\"\n    bucket_capacity = 8             # liters\n    basin_capacity = 12             # liters\n    basin_fill_fraction = 0.40      # 40%\n\n    # Current water in the basin\n    current_water_in_basin = basin_capacity * basin_fill_fraction\n\n    # Water needed to fill the basin\n    water_needed_for_basin = basin_capacity - current_water_in_basin\n\n    # Water needed to fill the bucket (empty)\n    water_needed_for_bucket = bucket_capacity\n\n    # Total water required\n    result = water_needed_for_basin + water_needed_for_bucket\n\n    return result",
    "result": 15.2
  },
  {
    "index": 69,
    "response": "**Reasoning:**\n\n1. Determine the cost of each type of item:\n   - Scarf: \\$7 each\n   - Hat: \\$5 each\n   - Glove: \\$4 each\n   - Sock: \\$3 each\n\n2. Determine how many of each item Kelly wants:\n   - 4 scarves\n   - 3 hats\n   - 5 gloves\n   - 6 socks\n\n3. Compute the total cost for each category by multiplying the unit price by the quantity:\n   - Total for scarves = 7 * 4\n   - Total for hats    = 5 * 3\n   - Total for gloves  = 4 * 5\n   - Total for socks   = 3 * 6\n\n4. Sum all those totals to get the overall cost.\n\n5. Subtract Kelly’s budget (\\$55) from the overall cost to find out how much more money she needs.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    At the flea market, the scarves are $7 each, the hats are $5 each, \n    the gloves are $4 each, and the socks are $3 each. Kelly wants to \n    buy 4 scarves, 3 hats, 5 gloves, and 6 socks, but she only has 55 \n    dollars. How much money is she short?\n    \"\"\"\n    # Unit prices\n    price_scarf = 7\n    price_hat = 5\n    price_glove = 4\n    price_sock = 3\n\n    # Quantities\n    num_scarves = 4\n    num_hats = 3\n    num_gloves = 5\n    num_socks = 6\n\n    # Total cost per item category\n    total_cost_scarves = price_scarf * num_scarves\n    total_cost_hats = price_hat * num_hats\n    total_cost_gloves = price_glove * num_gloves\n    total_cost_socks = price_sock * num_socks\n\n    # Overall cost\n    total_cost = (\n        total_cost_scarves\n        + total_cost_hats\n        + total_cost_gloves\n        + total_cost_socks\n    )\n\n    # Kelly's budget\n    budget = 55\n\n    # Amount she is short\n    result = total_cost - budget\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    At the flea market, the scarves are $7 each, the hats are $5 each, \n    the gloves are $4 each, and the socks are $3 each. Kelly wants to \n    buy 4 scarves, 3 hats, 5 gloves, and 6 socks, but she only has 55 \n    dollars. How much money is she short?\n    \"\"\"\n    # Unit prices\n    price_scarf = 7\n    price_hat = 5\n    price_glove = 4\n    price_sock = 3\n\n    # Quantities\n    num_scarves = 4\n    num_hats = 3\n    num_gloves = 5\n    num_socks = 6\n\n    # Total cost per item category\n    total_cost_scarves = price_scarf * num_scarves\n    total_cost_hats = price_hat * num_hats\n    total_cost_gloves = price_glove * num_gloves\n    total_cost_socks = price_sock * num_socks\n\n    # Overall cost\n    total_cost = (\n        total_cost_scarves\n        + total_cost_hats\n        + total_cost_gloves\n        + total_cost_socks\n    )\n\n    # Kelly's budget\n    budget = 55\n\n    # Amount she is short\n    result = total_cost - budget\n\n    return result",
    "result": 26
  },
  {
    "index": 70,
    "response": "**Reasoning:**\n\n1. Three nickels have a total value of 3 × $0.05 = $0.15.  \n2. Tom’s five coins total $0.30, so the remaining two coins must together be worth $0.30 − $0.15 = $0.15.  \n3. Among standard U.S. coins (1¢, 5¢, 10¢, 25¢, etc.), the only way to make $0.15 with exactly two coins is one dime (10¢) plus one nickel (5¢).  \n4. Therefore, the other two coins are one dime and one nickel.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Tom has 5 coins with a total value of $0.30. Three of the coins are nickels.\n    What are the other 2 coins?\n    \"\"\"\n    # Given quantities\n    number_of_nickels = 3\n    value_per_nickel = 0.05  # dollars\n    total_value = 0.30       # dollars\n\n    # Value contributed by the three nickels\n    value_from_nickels = number_of_nickels * value_per_nickel\n\n    # Remaining value to reach $0.30\n    remaining_value = total_value - value_from_nickels\n\n    # We have 2 coins left whose combined value must equal remaining_value ($0.15).\n    # The only two-coin combination to make $0.15 is 1 dime (0.10) + 1 nickel (0.05).\n    number_of_dimes = 1\n    value_per_dime = 0.10\n\n    # Check that the chosen coins sum to the required remaining value\n    total_other_coins_value = (number_of_dimes * value_per_dime +\n                               value_per_nickel * 1)  # one more nickel\n\n    # final calculation\n    result = total_other_coins_value\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Tom has 5 coins with a total value of $0.30. Three of the coins are nickels.\n    What are the other 2 coins?\n    \"\"\"\n    # Given quantities\n    number_of_nickels = 3\n    value_per_nickel = 0.05  # dollars\n    total_value = 0.30       # dollars\n\n    # Value contributed by the three nickels\n    value_from_nickels = number_of_nickels * value_per_nickel\n\n    # Remaining value to reach $0.30\n    remaining_value = total_value - value_from_nickels\n\n    # We have 2 coins left whose combined value must equal remaining_value ($0.15).\n    # The only two-coin combination to make $0.15 is 1 dime (0.10) + 1 nickel (0.05).\n    number_of_dimes = 1\n    value_per_dime = 0.10\n\n    # Check that the chosen coins sum to the required remaining value\n    total_other_coins_value = (number_of_dimes * value_per_dime +\n                               value_per_nickel * 1)  # one more nickel\n\n    # final calculation\n    result = total_other_coins_value\n\n    return result",
    "result": 0.15000000000000002
  },
  {
    "index": 71,
    "response": "**Reasoning:**\n\n1. First, determine each person’s painting rate in “rooms per hour.”\n   - John can paint 1 room in 5 hours, so his rate is \\(1/5\\) rooms per hour.\n   - Sarah can paint 1 room in 7 hours, so her rate is \\(1/7\\) rooms per hour.\n2. When they work together, their rates add. Combined rate = \\(1/5 + 1/7\\).\n3. Compute the combined rate:\n   - \\(1/5 + 1/7 = \\frac{7}{35} + \\frac{5}{35} = \\frac{12}{35}\\) rooms per hour.\n4. The time to paint 1 room together is the reciprocal of their combined rate:\n   - Time = \\(1 \\div \\tfrac{12}{35} = \\tfrac{35}{12}\\) hours.\n5. \\(\\tfrac{35}{12}\\) hours is approximately 2.9167 hours (about 2 hours and 55 minutes).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John can paint a room in 5 hours, while Sarah can paint the same room in 7 hours. How long will it take them to paint the room together?\n    \"\"\"\n    # John's painting rate in rooms per hour\n    john_rate = 1 / 5\n    # Sarah's painting rate in rooms per hour\n    sarah_rate = 1 / 7\n    # Combined painting rate when working together\n    combined_rate = john_rate + sarah_rate\n    # Time to paint one room = 1 room divided by combined rate\n    result = 1 / combined_rate\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John can paint a room in 5 hours, while Sarah can paint the same room in 7 hours. How long will it take them to paint the room together?\n    \"\"\"\n    # John's painting rate in rooms per hour\n    john_rate = 1 / 5\n    # Sarah's painting rate in rooms per hour\n    sarah_rate = 1 / 7\n    # Combined painting rate when working together\n    combined_rate = john_rate + sarah_rate\n    # Time to paint one room = 1 room divided by combined rate\n    result = 1 / combined_rate\n    return result",
    "result": 2.9166666666666665
  },
  {
    "index": 72,
    "response": "**Reasoning:**\n1. The problem states that Susan has a total of 14 paintbrushes.\n2. She wants to divide them equally between her two children.\n3. To find out how many paintbrushes each child gets, we divide the total number of paintbrushes by the number of children.\n4. Calculation: 14 ÷ 2 = 7.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Susan has 14 paintbrushes. She wants the same amount of paintbrushes for each of her two children. How many paintbrushes will each child get?\n    \"\"\"\n    total_paintbrushes = 14\n    number_of_children = 2\n\n    # Divide the paintbrushes equally between the children\n    result = total_paintbrushes / number_of_children\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Susan has 14 paintbrushes. She wants the same amount of paintbrushes for each of her two children. How many paintbrushes will each child get?\n    \"\"\"\n    total_paintbrushes = 14\n    number_of_children = 2\n\n    # Divide the paintbrushes equally between the children\n    result = total_paintbrushes / number_of_children\n\n    return result",
    "result": 7.0
  },
  {
    "index": 73,
    "response": "**Reasoning:**\n1. Identify Ms. Lee’s monthly income: \\$3200.  \n2. Determine the income tax rate: 10%, which as a decimal is 0.10.  \n3. Determine the rent rate: 15%, which as a decimal is 0.15.  \n4. Calculate the amount paid in income tax: 3200 * 0.10 = 320.  \n5. Calculate the amount paid in rent: 3200 * 0.15 = 480.  \n6. Subtract both expenses from the total income:  \n   3200 – 320 – 480 = 2400.  \n7. The result is the money left after paying tax and rent.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Ms. Lee is a teacher who earns $3200 per month, but she has to pay 10% of her income as income tax and 15% as rent for her apartment. How much money does she have left after paying these expenses?\n    \"\"\"\n    # Monthly income\n    monthly_income = 3200.0\n\n    # Rates for deductions\n    tax_rate = 0.10\n    rent_rate = 0.15\n\n    # Calculate each deduction\n    tax_amount = monthly_income * tax_rate\n    rent_amount = monthly_income * rent_rate\n\n    # Calculate remaining money after deductions\n    result = monthly_income - tax_amount - rent_amount\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Ms. Lee is a teacher who earns $3200 per month, but she has to pay 10% of her income as income tax and 15% as rent for her apartment. How much money does she have left after paying these expenses?\n    \"\"\"\n    # Monthly income\n    monthly_income = 3200.0\n\n    # Rates for deductions\n    tax_rate = 0.10\n    rent_rate = 0.15\n\n    # Calculate each deduction\n    tax_amount = monthly_income * tax_rate\n    rent_amount = monthly_income * rent_rate\n\n    # Calculate remaining money after deductions\n    result = monthly_income - tax_amount - rent_amount\n\n    return result",
    "result": 2400.0
  },
  {
    "index": 74,
    "response": "**Reasoning:**\n\n1. We know:\n   - One bottle of the first brand gives 16 washes.\n   - The second brand gives three times as many washes per bottle, so \\(3 \\times 16 = 48\\) washes per bottle.\n2. We assume the “mixture of both brands” is made in a 1:1 volume ratio.  \n   - That means one bottle of the mixture contains half a bottle of brand A and half a bottle of brand B.\n3. Washes per bottle of mixture:\n   - From brand A: \\(0.5 \\times 16 = 8\\) washes  \n   - From brand B: \\(0.5 \\times 48 = 24\\) washes  \n   - Total per bottle of mixture: \\(8 + 24 = 32\\) washes\n4. For 2½ bottles of this mixture:\n   - \\(2.5 \\times 32 = 80\\) washes\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If one bottle of shampoo can be used for 16 hair washes, and another brand can make three times as many hair washes as the first brand, then how many hair washes can be made from two and a half bottles of shampoo from the mixture of both brands?\n    \"\"\"\n    # Washes per bottle for each brand\n    washes_first_brand_per_bottle = 16\n    washes_second_brand_per_bottle = 3 * washes_first_brand_per_bottle\n\n    # We mix equal volumes of both brands, so each bottle of mixture is half A, half B\n    fraction_per_brand = 0.5\n\n    # Calculate washes per bottle of mixture\n    washes_per_bottle_of_mixture = (\n        fraction_per_brand * washes_first_brand_per_bottle\n        + fraction_per_brand * washes_second_brand_per_bottle\n    )\n\n    # Total bottles of mixture we have\n    bottles_of_mixture = 2.5\n\n    # Final result\n    result = bottles_of_mixture * washes_per_bottle_of_mixture\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If one bottle of shampoo can be used for 16 hair washes, and another brand can make three times as many hair washes as the first brand, then how many hair washes can be made from two and a half bottles of shampoo from the mixture of both brands?\n    \"\"\"\n    # Washes per bottle for each brand\n    washes_first_brand_per_bottle = 16\n    washes_second_brand_per_bottle = 3 * washes_first_brand_per_bottle\n\n    # We mix equal volumes of both brands, so each bottle of mixture is half A, half B\n    fraction_per_brand = 0.5\n\n    # Calculate washes per bottle of mixture\n    washes_per_bottle_of_mixture = (\n        fraction_per_brand * washes_first_brand_per_bottle\n        + fraction_per_brand * washes_second_brand_per_bottle\n    )\n\n    # Total bottles of mixture we have\n    bottles_of_mixture = 2.5\n\n    # Final result\n    result = bottles_of_mixture * washes_per_bottle_of_mixture\n    return result",
    "result": 80.0
  },
  {
    "index": 75,
    "response": "**Reasoning:**\n1. There are 3 bags.  \n2. Each bag contains 5 apples, so initially Joe has 3 * 5 = 15 apples.  \n3. He eats 2 apples from each bag, so he eats 3 * 2 = 6 apples in total.  \n4. The number of apples remaining is 15 − 6 = 9.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Joe has 3 bags with 5 apples in each bag. He eats 2 apples from each bag. How many apples does he have left?\n    \"\"\"\n    number_of_bags = 3\n    apples_per_bag = 5\n    # Total apples at the start\n    total_apples_initial = number_of_bags * apples_per_bag\n\n    apples_eaten_per_bag = 2\n    # Total apples eaten\n    total_apples_eaten = number_of_bags * apples_eaten_per_bag\n\n    # Remaining apples\n    result = float(total_apples_initial - total_apples_eaten)\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Joe has 3 bags with 5 apples in each bag. He eats 2 apples from each bag. How many apples does he have left?\n    \"\"\"\n    number_of_bags = 3\n    apples_per_bag = 5\n    # Total apples at the start\n    total_apples_initial = number_of_bags * apples_per_bag\n\n    apples_eaten_per_bag = 2\n    # Total apples eaten\n    total_apples_eaten = number_of_bags * apples_eaten_per_bag\n\n    # Remaining apples\n    result = float(total_apples_initial - total_apples_eaten)\n    return result",
    "result": 9.0
  },
  {
    "index": 76,
    "response": "**Reasoning:**\n\n1. The original recipe calls for 2 1/2 cups of flour.  \n2. Convert 2 1/2 into a decimal or improper fraction:  \n   2 1/2 = 2 + 0.5 = 2.5 cups.  \n3. To make half the recipe, multiply the total flour by 1/2:  \n   2.5 × 0.5 = 1.25 cups.  \n4. Therefore, you need 1.25 cups of flour for half the recipe.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A recipe calls for 2 1/2 cups of flour. If you want to make half the recipe, how many cups of flour do you need?\n    \"\"\"\n    whole_cups = 2\n    half_cup = 0.5\n    original_flour_cups = whole_cups + half_cup  # total of 2.5 cups\n    half_recipe_multiplier = 0.5\n    result = original_flour_cups * half_recipe_multiplier  # 2.5 * 0.5\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A recipe calls for 2 1/2 cups of flour. If you want to make half the recipe, how many cups of flour do you need?\n    \"\"\"\n    whole_cups = 2\n    half_cup = 0.5\n    original_flour_cups = whole_cups + half_cup  # total of 2.5 cups\n    half_recipe_multiplier = 0.5\n    result = original_flour_cups * half_recipe_multiplier  # 2.5 * 0.5\n\n    return result",
    "result": 1.25
  },
  {
    "index": 77,
    "response": "**Reasoning:**\n1. Identify the cost of one book: \\$15.75.  \n2. Determine how many books Sarah wants to buy: 4.  \n3. Calculate the total cost: multiply the cost per book by the number of books.  \n4. Sarah pays with a \\$100 bill, so subtract the total cost from \\$100 to find the change.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A book costs $15.75. If Sarah wants to buy 4 of those books, how much change will she receive when she pays with a $100 bill?\n    \"\"\"\n    # Cost of one book in dollars\n    price_per_book = 15.75\n    # Number of books Sarah wants to buy\n    number_of_books = 4\n    # Calculate the total cost for the books\n    total_cost = price_per_book * number_of_books\n    # Amount paid by Sarah\n    payment = 100.00\n    # Calculate the change returned\n    change = payment - total_cost\n    # This is the final result\n    result = change\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A book costs $15.75. If Sarah wants to buy 4 of those books, how much change will she receive when she pays with a $100 bill?\n    \"\"\"\n    # Cost of one book in dollars\n    price_per_book = 15.75\n    # Number of books Sarah wants to buy\n    number_of_books = 4\n    # Calculate the total cost for the books\n    total_cost = price_per_book * number_of_books\n    # Amount paid by Sarah\n    payment = 100.00\n    # Calculate the change returned\n    change = payment - total_cost\n    # This is the final result\n    result = change\n\n    return result",
    "result": 37.0
  },
  {
    "index": 78,
    "response": "**Reasoning:**\n- We start with an initial count of books in the store.\n- Record how many books were sold on Monday.\n- Record how many books were sold on Tuesday.\n- Compute the total number of books sold (Monday + Tuesday).\n- Subtract the total sold from the initial count to find how many are left.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A store had 200 books. They sold 45 books on Monday and 56 books on Tuesday. How many books are left in the store?\n    \"\"\"\n    # Initial number of books in the store\n    initial_books = 200\n\n    # Number of books sold on Monday\n    sold_monday = 45\n\n    # Number of books sold on Tuesday\n    sold_tuesday = 56\n\n    # Calculate the total number of books sold\n    total_sold = sold_monday + sold_tuesday\n\n    # Calculate how many books remain\n    remaining_books = initial_books - total_sold\n\n    # Assign the final result\n    result = remaining_books\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A store had 200 books. They sold 45 books on Monday and 56 books on Tuesday. How many books are left in the store?\n    \"\"\"\n    # Initial number of books in the store\n    initial_books = 200\n\n    # Number of books sold on Monday\n    sold_monday = 45\n\n    # Number of books sold on Tuesday\n    sold_tuesday = 56\n\n    # Calculate the total number of books sold\n    total_sold = sold_monday + sold_tuesday\n\n    # Calculate how many books remain\n    remaining_books = initial_books - total_sold\n\n    # Assign the final result\n    result = remaining_books\n\n    return result",
    "result": 99
  },
  {
    "index": 79,
    "response": "**Reasoning:**\n\n1. We know the total number of rounds played is 51.  \n2. Out of these, 12 rounds ended in a draw.  \n3. The number of rounds that were won by either player is simply the total rounds minus the drawn rounds:  \n   won_rounds = total_rounds − drawn_rounds  \n4. Substituting the values: won_rounds = 51 − 12 = 39.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If in a game 51 rounds were played and 12 were drawn, how many of the rounds were won by either player?\n    \"\"\"\n    total_rounds = 51\n    drawn_rounds = 12\n    won_rounds = total_rounds - drawn_rounds\n    result = won_rounds\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If in a game 51 rounds were played and 12 were drawn, how many of the rounds were won by either player?\n    \"\"\"\n    total_rounds = 51\n    drawn_rounds = 12\n    won_rounds = total_rounds - drawn_rounds\n    result = won_rounds\n\n    return result",
    "result": 39
  },
  {
    "index": 80,
    "response": "**Reasoning:**\n1. The car travels 120 kilometers in 2 hours.\n2. First, find the speed in kilometers per hour (km/h):\n   - speed_kmh = distance_km / time_h = 120 km / 2 h = 60 km/h.\n3. Convert the speed from km/h to meters per second (m/s):\n   - 1 km = 1000 m\n   - 1 hour = 3600 seconds\n   - speed_ms = speed_kmh * (1000 m / 1 km) / (3600 s / 1 h)\n   - speed_ms = 60 * 1000 / 3600 = 16.666... m/s.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car travels 120 km in 2 hours. What is the speed of the car in meters per second?\n    \"\"\"\n    distance_km = 120\n    time_hours = 2\n    # Speed in kilometers per hour\n    speed_kmh = distance_km / time_hours\n    # Convert km/h to m/s by multiplying by 1000 (m/km) and dividing by 3600 (s/h)\n    speed_ms = speed_kmh * 1000 / 3600\n    result = speed_ms\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car travels 120 km in 2 hours. What is the speed of the car in meters per second?\n    \"\"\"\n    distance_km = 120\n    time_hours = 2\n    # Speed in kilometers per hour\n    speed_kmh = distance_km / time_hours\n    # Convert km/h to m/s by multiplying by 1000 (m/km) and dividing by 3600 (s/h)\n    speed_ms = speed_kmh * 1000 / 3600\n    result = speed_ms\n    return result",
    "result": 16.666666666666668
  },
  {
    "index": 81,
    "response": "**Reasoning:**\n\n1. We start with the total amount of money Lisa has: \\$110.00  \n2. The cost of the sneakers is \\$79.95.  \n3. The cost of the sandals is \\$59.95.  \n4. First, compute the total cost by adding the cost of the sneakers and the cost of the sandals.  \n5. Finally, subtract the total cost from the amount Lisa has to find out how much money is left.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Student: Lisa is shopping for shoes for her daughter. She finds a pair of sneakers \n    that cost $79.95 and a pair of sandals that cost $59.95. If Lisa has $110, how much \n    money does she have left?\n    \"\"\"\n    total_money = 110.00\n    sneaker_cost = 79.95\n    sandal_cost = 59.95\n\n    total_cost = sneaker_cost + sandal_cost\n    result = total_money - total_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Student: Lisa is shopping for shoes for her daughter. She finds a pair of sneakers \n    that cost $79.95 and a pair of sandals that cost $59.95. If Lisa has $110, how much \n    money does she have left?\n    \"\"\"\n    total_money = 110.00\n    sneaker_cost = 79.95\n    sandal_cost = 59.95\n\n    total_cost = sneaker_cost + sandal_cost\n    result = total_money - total_cost\n\n    return result",
    "result": -29.900000000000006
  },
  {
    "index": 82,
    "response": "**Reasoning:**\n1. Mary buys 4 rolls for herself and 2 rolls for her friend each Saturday.\n2. That is a total of 4 + 2 = 6 rolls per Saturday.\n3. The problem refers to “every weekend for the month of August,” which we interpret as one Saturday per weekend. A month of August spans 4 full weeks (4 Saturdays).\n4. Therefore, the total yarn rolls purchased = 6 rolls/Saturday * 4 Saturdays = 24 rolls.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mary loves to knit. Every Saturday, she visits the craft store and buys 4 rolls of yarn for herself and 2 for her friend. If Mary did this every weekend for the month of August, how much yarn did she end up purchasing?\n    \"\"\"\n    # Number of rolls Mary buys for herself each Saturday\n    rolls_for_self = 4\n    # Number of rolls Mary buys for her friend each Saturday\n    rolls_for_friend = 2\n    # Total rolls purchased each Saturday\n    rolls_per_saturday = rolls_for_self + rolls_for_friend\n    # Number of Saturdays (weekends) in August\n    saturdays_in_august = 4\n    # Total rolls purchased in August\n    result = rolls_per_saturday * saturdays_in_august\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mary loves to knit. Every Saturday, she visits the craft store and buys 4 rolls of yarn for herself and 2 for her friend. If Mary did this every weekend for the month of August, how much yarn did she end up purchasing?\n    \"\"\"\n    # Number of rolls Mary buys for herself each Saturday\n    rolls_for_self = 4\n    # Number of rolls Mary buys for her friend each Saturday\n    rolls_for_friend = 2\n    # Total rolls purchased each Saturday\n    rolls_per_saturday = rolls_for_self + rolls_for_friend\n    # Number of Saturdays (weekends) in August\n    saturdays_in_august = 4\n    # Total rolls purchased in August\n    result = rolls_per_saturday * saturdays_in_august\n\n    return result",
    "result": 24
  },
  {
    "index": 83,
    "response": "**Reasoning:**\n1. John is inviting 150 guests.\n2. Katie is inviting one quarter of John’s number of guests, i.e. 150 * (1/4) = 37.5 guests.\n3. Total number of guests = 150 + 37.5 = 187.5 guests.\n4. Each guest needs a knife, a fork, and a spoon, so 3 pieces of silverware per guest.\n5. Total silverware needed = 187.5 guests * 3 pieces/guest = 562.5 pieces of silverware.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John and Katie are planning a wedding. John is inviting 150 guests, and Katie is inviting one quarter of that number of guests. They want to make sure they have enough silverware. Each guest will need a knife, fork, and spoon. How much silverware will they need in total?\n    \"\"\"\n    john_guests = 150\n    katie_guests = john_guests * (1/4)\n    total_guests = john_guests + katie_guests\n    silverware_per_guest = 3  # knife, fork, spoon\n    result = total_guests * silverware_per_guest\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John and Katie are planning a wedding. John is inviting 150 guests, and Katie is inviting one quarter of that number of guests. They want to make sure they have enough silverware. Each guest will need a knife, fork, and spoon. How much silverware will they need in total?\n    \"\"\"\n    john_guests = 150\n    katie_guests = john_guests * (1/4)\n    total_guests = john_guests + katie_guests\n    silverware_per_guest = 3  # knife, fork, spoon\n    result = total_guests * silverware_per_guest\n\n    return result",
    "result": 562.5
  },
  {
    "index": 84,
    "response": "**Reasoning:**\n\nWe have a rectangular field of length \\(L = 40\\) m and width \\(W = 30\\) m.  The farmer will install three fences:\n\n1. One fence along the diagonal of the rectangle.\n2. One fence joining the midpoints of the two longer sides (a horizontal line halfway up).\n3. One fence joining the midpoints of the two shorter sides (a vertical line halfway across).\n\nEach of those fences is a straight segment:\n\n- The diagonal length is \\(\\sqrt{L^2 + W^2} = \\sqrt{40^2 + 30^2} = 50\\) m.\n- The horizontal midpoint fence runs the full length \\(L = 40\\) m.\n- The vertical midpoint fence runs the full width \\(W = 30\\) m.\n\nAdding them gives the total fencing required:\n\\[\n50 + 40 + 30 \\;=\\; 120\\text{ m}.\n\\]\n\n---\n\n**Solution:**\n```python\nimport math\n\ndef simple_math_problem() -> float:\n    \"\"\"\n    A rectangular field has a length of 40 meters and a width of 30 meters.\n    A farmer wants to divide the field into four smaller rectangles by fencing\n    along the diagonal and the midpoint of each side. How many meters of fencing\n    does the farmer need?\n    \"\"\"\n    # dimensions of the field\n    length = 40.0  # in meters\n    width  = 30.0  # in meters\n\n    # length of the diagonal using the Pythagorean theorem\n    diagonal = math.sqrt(length**2 + width**2)\n\n    # fence joining midpoints of the two longer sides (horizontal cut)\n    horizontal_midline = length\n\n    # fence joining midpoints of the two shorter sides (vertical cut)\n    vertical_midline = width\n\n    # total fencing needed\n    result = diagonal + horizontal_midline + vertical_midline\n\n    return result\n```",
    "code": "import math\n\ndef simple_math_problem() -> float:\n    \"\"\"\n    A rectangular field has a length of 40 meters and a width of 30 meters.\n    A farmer wants to divide the field into four smaller rectangles by fencing\n    along the diagonal and the midpoint of each side. How many meters of fencing\n    does the farmer need?\n    \"\"\"\n    # dimensions of the field\n    length = 40.0  # in meters\n    width  = 30.0  # in meters\n\n    # length of the diagonal using the Pythagorean theorem\n    diagonal = math.sqrt(length**2 + width**2)\n\n    # fence joining midpoints of the two longer sides (horizontal cut)\n    horizontal_midline = length\n\n    # fence joining midpoints of the two shorter sides (vertical cut)\n    vertical_midline = width\n\n    # total fencing needed\n    result = diagonal + horizontal_midline + vertical_midline\n\n    return result",
    "result": 120.0
  },
  {
    "index": 85,
    "response": "**Reasoning:**\n1. Company B charges $20 per person for any group larger than 10 people.\n2. We have a group of 30 people.\n3. To find the total cost for the group under Company B’s pricing, multiply the number of people (30) by the per-person rate ($20).\n4. The result is the total discounted cost for Company B.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Two bus companies offer group discounts for their services. Company A charges a fixed rate of $250 for a group of up to 10 people, and Company B offers a lower rate for groups larger than 10, charging $20 per person in the group. If a group of 30 people wants to use the services of Company B, how much will the discount cost?\n    \"\"\"\n    num_people = 30\n    cost_per_person = 20\n    discount_cost = num_people * cost_per_person\n\n    return discount_cost\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Two bus companies offer group discounts for their services. Company A charges a fixed rate of $250 for a group of up to 10 people, and Company B offers a lower rate for groups larger than 10, charging $20 per person in the group. If a group of 30 people wants to use the services of Company B, how much will the discount cost?\n    \"\"\"\n    num_people = 30\n    cost_per_person = 20\n    discount_cost = num_people * cost_per_person\n\n    return discount_cost",
    "result": 600
  },
  {
    "index": 86,
    "response": "**Reasoning:**\n\n1. Calculate the number of chickens in the 8 full coops:\n   - 8 coops × 12 chickens each = 96 chickens  \n2. Calculate the number of chickens in the 2 half-full coops:\n   - Half of 12 chickens = 6 chickens per coop  \n   - 2 coops × 6 chickens each = 12 chickens  \n3. Total chickens before giving any away:\n   - 96 + 12 = 108 chickens  \n4. After giving away 20 chickens:\n   - 108 − 20 = 88 chickens  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sara is a farmer and needs to count how many chickens she has. \n    She finds 8 coops with exactly 12 chickens each and 2 coops with half-full of chickens. \n    She decides to give away 20 chickens to a neighboring farm. \n    How many chickens does Sara have now?\n    \"\"\"\n    coops_full = 8\n    chickens_per_full_coop = 12\n    coops_half = 2\n    chickens_per_half_coop = chickens_per_full_coop / 2\n\n    # Total chickens before giving any away\n    total_chickens = (coops_full * chickens_per_full_coop) + (coops_half * chickens_per_half_coop)\n    \n    # Chickens given away\n    given_away = 20\n    \n    # Final count\n    result = total_chickens - given_away\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sara is a farmer and needs to count how many chickens she has. \n    She finds 8 coops with exactly 12 chickens each and 2 coops with half-full of chickens. \n    She decides to give away 20 chickens to a neighboring farm. \n    How many chickens does Sara have now?\n    \"\"\"\n    coops_full = 8\n    chickens_per_full_coop = 12\n    coops_half = 2\n    chickens_per_half_coop = chickens_per_full_coop / 2\n\n    # Total chickens before giving any away\n    total_chickens = (coops_full * chickens_per_full_coop) + (coops_half * chickens_per_half_coop)\n    \n    # Chickens given away\n    given_away = 20\n    \n    # Final count\n    result = total_chickens - given_away\n\n    return result",
    "result": 88.0
  },
  {
    "index": 87,
    "response": "**Reasoning:**\n1. Let `price_large` be the selling price of one large painting.  \n2. Let `price_small` be the selling price of one small painting.  \n3. David sold 5 large paintings, so his income from large paintings is \\(5 \\times \\text{price_large}\\).  \n4. He also sold 11 small paintings, so his income from small paintings is \\(11 \\times \\text{price_small}\\).  \n5. His total income for the day is  \n   total_income = \\(5 \\times \\text{price_large} + 11 \\times \\text{price_small}\\).  \n6. He wants to split this total equally among 5 people, so each person gets  \n   income_per_person = \\(\\frac{\\text{total_income}}{5}\\).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    David sold 5 large paintings and 11 small paintings on a single day. He wants to divide his income equally among 5 people. How much should each person get?\n    \"\"\"\n    # Assign the unit prices (you can change these to the actual numbers)\n    price_large = 0.0   # price of one large painting\n    price_small = 0.0   # price of one small painting\n\n    # Compute total income\n    income_from_large = 5 * price_large\n    income_from_small = 11 * price_small\n    total_income = income_from_large + income_from_small\n\n    # Divide equally among 5 people\n    result = total_income / 5\n\n    return result\n```\nReplace `price_large` and `price_small` with the actual selling prices to compute each person's share.",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    David sold 5 large paintings and 11 small paintings on a single day. He wants to divide his income equally among 5 people. How much should each person get?\n    \"\"\"\n    # Assign the unit prices (you can change these to the actual numbers)\n    price_large = 0.0   # price of one large painting\n    price_small = 0.0   # price of one small painting\n\n    # Compute total income\n    income_from_large = 5 * price_large\n    income_from_small = 11 * price_small\n    total_income = income_from_large + income_from_small\n\n    # Divide equally among 5 people\n    result = total_income / 5\n\n    return result",
    "result": 0.0
  },
  {
    "index": 88,
    "response": "**Reasoning:**\n1. The jar contains a total of 256 beads.  \n2. Three quarters (3/4) of these beads are blue.  \n3. Calculate the number of blue beads by multiplying the total by 3/4:  \n   blue_beads = (3/4) * 256 = 192.  \n4. The non-blue beads are the remainder when you subtract the blue beads from the total:  \n   non_blue_beads = 256 − 192 = 64.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    There are 256 beads in a jar. If 3/4 of the beads are blue, calculate the number of non-blue beads.\n    \"\"\"\n    total_beads = 256\n    fraction_blue = 3 / 4\n    number_blue_beads = total_beads * fraction_blue\n    non_blue_beads = total_beads - number_blue_beads\n\n    result = non_blue_beads\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 256 beads in a jar. If 3/4 of the beads are blue, calculate the number of non-blue beads.\n    \"\"\"\n    total_beads = 256\n    fraction_blue = 3 / 4\n    number_blue_beads = total_beads * fraction_blue\n    non_blue_beads = total_beads - number_blue_beads\n\n    result = non_blue_beads\n    return result",
    "result": 64.0
  },
  {
    "index": 89,
    "response": "**Reasoning:**\n\n1. Scott’s starting balance is \\$10,000.  \n2. A 20% decline means he loses 0.20 × \\$10,000 = \\$2,000.  \n3. After the decline, his balance is \\$10,000 − \\$2,000 = \\$8,000.  \n4. He then invests an additional \\$5,000.  \n5. His final balance is \\$8,000 + \\$5,000 = \\$13,000.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Scott started the year with $10,000 in his investment account. During the year, his account declined by 20%. He then aimed to recover his losses so he invested another $5,000. What was Scott’s total account balance at the end of the year?\n    \"\"\"\n    starting_balance = 10000.0\n    decline_rate = 0.20\n    additional_investment = 5000.0\n\n    # Calculate the balance after a 20% decline\n    balance_after_decline = starting_balance * (1 - decline_rate)\n    # Add the additional investment\n    result = balance_after_decline + additional_investment\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Scott started the year with $10,000 in his investment account. During the year, his account declined by 20%. He then aimed to recover his losses so he invested another $5,000. What was Scott’s total account balance at the end of the year?\n    \"\"\"\n    starting_balance = 10000.0\n    decline_rate = 0.20\n    additional_investment = 5000.0\n\n    # Calculate the balance after a 20% decline\n    balance_after_decline = starting_balance * (1 - decline_rate)\n    # Add the additional investment\n    result = balance_after_decline + additional_investment\n\n    return result",
    "result": 13000.0
  },
  {
    "index": 90,
    "response": "**Reasoning:**\n1. Identify Becky’s fixed base salary: \\$2,000 per month.  \n2. Identify her commission rate: 10% (which as a decimal is 0.10).  \n3. Identify her total sales for November: \\$15,600.  \n4. Compute commission amount = commission rate * total sales = 0.10 * 15,600 = \\$1,560.  \n5. Compute total earnings for November = base salary + commission amount = 2,000 + 1,560 = \\$3,560.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Becky works as a sales assistant at a bookstore. She earns a base salary of $2,000 per month, plus a commission of 10% of her total sales. In November, she sold $15,600 worth of books. How much money did she earn in November?\n    \"\"\"\n    # Base monthly salary in dollars\n    base_salary = 2000.0\n    \n    # Commission rate (10%)\n    commission_rate = 0.10\n    \n    # Total sales in November in dollars\n    sales_november = 15600.0\n    \n    # Calculate commission earned\n    commission_amount = commission_rate * sales_november\n    \n    # Calculate total earnings for November\n    result = base_salary + commission_amount\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Becky works as a sales assistant at a bookstore. She earns a base salary of $2,000 per month, plus a commission of 10% of her total sales. In November, she sold $15,600 worth of books. How much money did she earn in November?\n    \"\"\"\n    # Base monthly salary in dollars\n    base_salary = 2000.0\n    \n    # Commission rate (10%)\n    commission_rate = 0.10\n    \n    # Total sales in November in dollars\n    sales_november = 15600.0\n    \n    # Calculate commission earned\n    commission_amount = commission_rate * sales_november\n    \n    # Calculate total earnings for November\n    result = base_salary + commission_amount\n    \n    return result",
    "result": 3560.0
  },
  {
    "index": 91,
    "response": "**Reasoning:**\n1. We know Erin has 28 cookies.\n2. Danny has a quarter of the number of cookies that Erin has.  \n   Danny = 28 / 4 = 7.\n3. Casey has 15 more cookies than Danny.  \n   Casey = 7 + 15 = 22.\n4. The total number of cookies is the sum of Casey's, Danny's, and Erin's cookies.  \n   Total = 22 + 7 + 28 = 57.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Casey has 15 more cookies than Danny. Danny has a quarter of the number of cookies that Erin has. If Erin has 28 cookies, how many cookies do the three of them have in total?\n    \"\"\"\n    erin_cookies = 28\n    danny_cookies = erin_cookies / 4\n    casey_cookies = danny_cookies + 15\n    result = casey_cookies + danny_cookies + erin_cookies\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Casey has 15 more cookies than Danny. Danny has a quarter of the number of cookies that Erin has. If Erin has 28 cookies, how many cookies do the three of them have in total?\n    \"\"\"\n    erin_cookies = 28\n    danny_cookies = erin_cookies / 4\n    casey_cookies = danny_cookies + 15\n    result = casey_cookies + danny_cookies + erin_cookies\n\n    return result",
    "result": 57.0
  },
  {
    "index": 92,
    "response": "**Reasoning:**\n1. The laptop has an initial cost of \\$309.\n2. Emily pays an additional \\$49 each month for 6 months.\n3. First compute the total of the monthly payments: 49 × 6 = 294.\n4. Then add that to the initial cost: 309 + 294 = 603.\n5. Therefore, the total cost of the laptop is \\$603.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Emily buys a laptop with $309. She will pay $49 each month for 6 months. What is the total cost of the laptop?\n    \"\"\"\n    initial_price = 309\n    monthly_payment = 49\n    number_of_months = 6\n\n    total_monthly_payments = monthly_payment * number_of_months\n    result = initial_price + total_monthly_payments\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Emily buys a laptop with $309. She will pay $49 each month for 6 months. What is the total cost of the laptop?\n    \"\"\"\n    initial_price = 309\n    monthly_payment = 49\n    number_of_months = 6\n\n    total_monthly_payments = monthly_payment * number_of_months\n    result = initial_price + total_monthly_payments\n\n    return result",
    "result": 603
  },
  {
    "index": 93,
    "response": "**Reasoning:**\n1. Identify the prices of each item Lily buys:\n   - Shirt: \\$20\n   - Pants: \\$40\n   - Dress: \\$50\n2. According to the sale, the cheapest of the three items is free.\n3. Determine which item is the cheapest by comparing the three prices.\n4. Subtract the cheapest price from the sum of all three prices to get the final total.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A clothing store has a sale where customers can buy 3 items and get the cheapest item for free. \n    If Lily buys a shirt for $20, pants for $40, and a dress for $50, what will her total be after the discount?\n    \"\"\"\n    # Prices of the items Lily buys\n    shirt_price = 20.0\n    pants_price = 40.0\n    dress_price = 50.0\n\n    # Find the cheapest item\n    cheapest_price = min(shirt_price, pants_price, dress_price)\n\n    # Calculate the total after subtracting the cheapest item\n    total_before_discount = shirt_price + pants_price + dress_price\n    result = total_before_discount - cheapest_price\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A clothing store has a sale where customers can buy 3 items and get the cheapest item for free. \n    If Lily buys a shirt for $20, pants for $40, and a dress for $50, what will her total be after the discount?\n    \"\"\"\n    # Prices of the items Lily buys\n    shirt_price = 20.0\n    pants_price = 40.0\n    dress_price = 50.0\n\n    # Find the cheapest item\n    cheapest_price = min(shirt_price, pants_price, dress_price)\n\n    # Calculate the total after subtracting the cheapest item\n    total_before_discount = shirt_price + pants_price + dress_price\n    result = total_before_discount - cheapest_price\n\n    return result",
    "result": 90.0
  },
  {
    "index": 94,
    "response": "**Reasoning:**\n\n1. We know the store sold 50 shirts.  \n2. The profit on each shirt is \\$5.  \n3. Total profit is the number of shirts multiplied by the profit per shirt:  \n   total_profit = number_of_shirts * profit_per_shirt  \n4. Compute 50 * 5 = 250.  \n\nTherefore, the store’s total profit is \\$250.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A store sold 50 shirts at a profit of $5 per shirt. If the cost of each shirt to the store was $24, what was the store's total profit?\n    \"\"\"\n    number_of_shirts = 50\n    profit_per_shirt = 5\n    cost_per_shirt = 24  # Given but not needed to compute profit directly\n    \n    # Calculate total profit\n    total_profit = number_of_shirts * profit_per_shirt\n\n    return total_profit\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A store sold 50 shirts at a profit of $5 per shirt. If the cost of each shirt to the store was $24, what was the store's total profit?\n    \"\"\"\n    number_of_shirts = 50\n    profit_per_shirt = 5\n    cost_per_shirt = 24  # Given but not needed to compute profit directly\n    \n    # Calculate total profit\n    total_profit = number_of_shirts * profit_per_shirt\n\n    return total_profit",
    "result": 250
  },
  {
    "index": 95,
    "response": "**Reasoning:**\n1. We start with 50 candies in the bag.  \n2. 8 candies are taken out, so we subtract 8 from the original 50.  \n3. Then 10 more candies are added, so we add 10 to the result of step 2.  \n4. The final result is the total number of candies after these operations.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A bag has 50 candies. If 8 candies are taken out and 10 more candies are added, how many candies are there in total?\n    \"\"\"\n    initial_candies = 50\n    candies_removed = 8\n    candies_added = 10\n\n    # Subtract the removed candies\n    candies_after_removal = initial_candies - candies_removed\n    # Add the new candies\n    final_candies = candies_after_removal + candies_added\n\n    result = float(final_candies)\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A bag has 50 candies. If 8 candies are taken out and 10 more candies are added, how many candies are there in total?\n    \"\"\"\n    initial_candies = 50\n    candies_removed = 8\n    candies_added = 10\n\n    # Subtract the removed candies\n    candies_after_removal = initial_candies - candies_removed\n    # Add the new candies\n    final_candies = candies_after_removal + candies_added\n\n    result = float(final_candies)\n    return result",
    "result": 52.0
  },
  {
    "index": 96,
    "response": "**Reasoning:**\n1. Sam starts with 24 stickers.  \n2. He keeps 2 stickers for himself.  \n3. The number of stickers left to share is 24 − 2 = 22.  \n4. He wants to share these 22 stickers equally among his 3 friends.  \n5. Each friend gets 22 ÷ 3 = 7.333… stickers.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sam has 24 stickers and he wants to share them equally with his 3 friends. He also decides to keep 2 stickers for himself. How many stickers does each friend get?\n    \"\"\"\n    total_stickers = 24\n    stickers_kept_by_sam = 2\n    number_of_friends = 3\n\n    # Stickers available to share\n    available_stickers = total_stickers - stickers_kept_by_sam\n\n    # Stickers per friend\n    result = available_stickers / number_of_friends\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sam has 24 stickers and he wants to share them equally with his 3 friends. He also decides to keep 2 stickers for himself. How many stickers does each friend get?\n    \"\"\"\n    total_stickers = 24\n    stickers_kept_by_sam = 2\n    number_of_friends = 3\n\n    # Stickers available to share\n    available_stickers = total_stickers - stickers_kept_by_sam\n\n    # Stickers per friend\n    result = available_stickers / number_of_friends\n\n    return result",
    "result": 7.333333333333333
  },
  {
    "index": 97,
    "response": "**Reasoning:**\n1. Jane starts with \\$900.\n2. She spends \\(\\tfrac{3}{8}\\) of \\$900 on a new computer:\n   - Compute \\(\\tfrac{3}{8} \\times 900 = 900 \\times 0.375 = 337.5\\).\n3. She then spends \\$150 on software.\n4. To find what she has left, subtract both expenditures from the initial amount:\n   - Remaining = 900 − 337.5 − 150 = 412.5.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If Jane has $900 and she spends 3/8 of it on a new computer, then she spends $150 on software, how much money does Jane have left?\n    \"\"\"\n    initial_amount = 900\n    computer_fraction = 3 / 8\n    computer_cost = initial_amount * computer_fraction\n    software_cost = 150\n    result = initial_amount - computer_cost - software_cost\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If Jane has $900 and she spends 3/8 of it on a new computer, then she spends $150 on software, how much money does Jane have left?\n    \"\"\"\n    initial_amount = 900\n    computer_fraction = 3 / 8\n    computer_cost = initial_amount * computer_fraction\n    software_cost = 150\n    result = initial_amount - computer_cost - software_cost\n    return result",
    "result": 412.5
  },
  {
    "index": 98,
    "response": "**Reasoning:**\n\n1. Let Carla’s age be C. According to the problem, C = 9.  \n2. Bob is six years older than Carla. So Bob’s age B = C + 6 = 9 + 6 = 15.  \n3. Anna is three times as old as Bob. So Anna’s age A = 3 × B = 3 × 15 = 45.  \n4. Tom is eight years younger than Anna. So Tom’s age T = A − 8 = 45 − 8 = 37.  \n\nTherefore, Tom is 37 years old.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Tom is eight years younger than Anna, who is three times as old as Bob, who is six years older than Carla. If Carla is 9 years old, how old is Tom?\n    \"\"\"\n    # Given\n    carla_age = 9\n    \n    # Bob is six years older than Carla\n    bob_age = carla_age + 6\n    \n    # Anna is three times as old as Bob\n    anna_age = 3 * bob_age\n    \n    # Tom is eight years younger than Anna\n    tom_age = anna_age - 8\n    \n    # Final result\n    result = float(tom_age)\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Tom is eight years younger than Anna, who is three times as old as Bob, who is six years older than Carla. If Carla is 9 years old, how old is Tom?\n    \"\"\"\n    # Given\n    carla_age = 9\n    \n    # Bob is six years older than Carla\n    bob_age = carla_age + 6\n    \n    # Anna is three times as old as Bob\n    anna_age = 3 * bob_age\n    \n    # Tom is eight years younger than Anna\n    tom_age = anna_age - 8\n    \n    # Final result\n    result = float(tom_age)\n    \n    return result",
    "result": 37.0
  },
  {
    "index": 99,
    "response": "**Reasoning:**\n1. We know there are 30 students in the class.  \n2. The teacher spends 10 minutes with each student.  \n3. To find the total time, multiply the number of students by the time spent per student:  \n   total_time = number_of_students × time_per_student  \n4. Substitute the given values: total_time = 30 × 10 = 300 minutes.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A teacher has 30 students in a class. If she spends 10 minutes speaking to each student, how long will it take her to speak to all students?\n    \"\"\"\n    number_of_students = 30\n    time_per_student_minutes = 10\n\n    # Calculate the total time in minutes\n    total_time_minutes = number_of_students * time_per_student_minutes\n\n    result = float(total_time_minutes)\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A teacher has 30 students in a class. If she spends 10 minutes speaking to each student, how long will it take her to speak to all students?\n    \"\"\"\n    number_of_students = 30\n    time_per_student_minutes = 10\n\n    # Calculate the total time in minutes\n    total_time_minutes = number_of_students * time_per_student_minutes\n\n    result = float(total_time_minutes)\n    return result",
    "result": 300.0
  }
]