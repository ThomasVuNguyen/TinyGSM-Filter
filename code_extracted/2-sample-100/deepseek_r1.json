[
  {
    "index": 0,
    "response": "**Reasoning:**\nThe area of a parallelogram is calculated using the formula:  \n**Area = base × height**  \nGiven:  \n- Base = 4 cm  \n- Height = 6 cm  \nSubstitute the values into the formula:  \nArea = 4 cm × 6 cm = 24 cm²  \nThe result is 24 square centimeters. Since the problem doesn't specify a unit for the output, we return the numerical value 24.0 as a float.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A parallelogram has a base of 4 cm and a height of 6 cm. What is its area?\n    \"\"\"\n    base_length = 4\n    height_length = 6\n    area = base_length * height_length\n    result = float(area)\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A parallelogram has a base of 4 cm and a height of 6 cm. What is its area?\n    \"\"\"\n    base_length = 4\n    height_length = 6\n    area = base_length * height_length\n    result = float(area)\n    \n    return result",
    "result": 24.0
  },
  {
    "index": 1,
    "response": "**Reasoning:**\nThe problem requires calculating the total area of the walls in a rectangular room. The room has:\n- Length = 12 feet\n- Width = 10 feet\n- Wall height = 8 feet\n\nA rectangular room has four walls:\n- Two walls with dimensions **length × height** (12 ft × 8 ft)\n- Two walls with dimensions **width × height** (10 ft × 8 ft)\n\nThe total wall area is the sum of these four walls:\n- Area of first pair: \\(2 \\times (12 \\times 8)\\)\n- Area of second pair: \\(2 \\times (10 \\times 8)\\)\n\nThis simplifies to:\n\\[\n\\text{Total Wall Area} = 2 \\times (12 \\times 8) + 2 \\times (10 \\times 8) = 2 \\times 8 \\times (12 + 10) = 16 \\times 22 = 352\n\\]\n\nThus, the total wall area is **352 square feet**.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A rectangular room has dimensions 12 feet by 10 feet, and the walls are 8 feet tall. What is the area of the walls?\n    \"\"\"\n    length_feet = 12\n    width_feet = 10\n    wall_height_feet = 8\n    \n    # Calculate the area of the two longer walls (length × height)\n    longer_walls_area = 2 * (length_feet * wall_height_feet)\n    \n    # Calculate the area of the two shorter walls (width × height)\n    shorter_walls_area = 2 * (width_feet * wall_height_feet)\n    \n    # Sum the areas for total wall area\n    total_wall_area = longer_walls_area + shorter_walls_area\n    \n    return float(total_wall_area)\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A rectangular room has dimensions 12 feet by 10 feet, and the walls are 8 feet tall. What is the area of the walls?\n    \"\"\"\n    length_feet = 12\n    width_feet = 10\n    wall_height_feet = 8\n    \n    # Calculate the area of the two longer walls (length × height)\n    longer_walls_area = 2 * (length_feet * wall_height_feet)\n    \n    # Calculate the area of the two shorter walls (width × height)\n    shorter_walls_area = 2 * (width_feet * wall_height_feet)\n    \n    # Sum the areas for total wall area\n    total_wall_area = longer_walls_area + shorter_walls_area\n    \n    return float(total_wall_area)",
    "result": 352.0
  },
  {
    "index": 2,
    "response": "**Reasoning:**\nThe problem states that Robert invested $4500 for 5 years at a certain interest rate, but the rate is not specified. To solve this, we must assume a reasonable interest rate. In many textbook problems, a 5% annual interest rate is commonly used when not specified. Additionally, since the problem is labeled \"simple_math_problem\" and doesn't mention compounding, we assume simple interest. The simple interest formula is:\n\n\\[ \\text{Interest} = \\text{Principal} \\times \\text{Rate} \\times \\text{Time} \\]\n\\[ \\text{Total Amount} = \\text{Principal} + \\text{Interest} \\]\n\nGiven:\n- Principal (\\(P\\)) = $4500\n- Time (\\(T\\)) = 5 years\n- Assumed Rate (\\(R\\)) = 5% per annum\n\nFirst, calculate the interest:\n\\[ \\text{Interest} = 4500 \\times 5 \\times 5 / 100 = 4500 \\times 0.25 = 1125 \\]\n\nThen, calculate the total amount:\n\\[ \\text{Total Amount} = 4500 + 1125 = 5625 \\]\n\nThus, Robert will receive $5625.00 at maturity.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Robert invested $4500 for 5 years in the bank with a certain rate of interest. How much money will he receive when his investment matures at the end of five years?\n    \"\"\"\n    principal = 4500\n    annual_interest_rate_percent = 5  # assumed 5% annual rate\n    years = 5\n    \n    # Calculate simple interest\n    interest = principal * annual_interest_rate_percent * years / 100\n    \n    # Calculate total amount after interest\n    total_amount = principal + interest\n    \n    return total_amount\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Robert invested $4500 for 5 years in the bank with a certain rate of interest. How much money will he receive when his investment matures at the end of five years?\n    \"\"\"\n    principal = 4500\n    annual_interest_rate_percent = 5  # assumed 5% annual rate\n    years = 5\n    \n    # Calculate simple interest\n    interest = principal * annual_interest_rate_percent * years / 100\n    \n    # Calculate total amount after interest\n    total_amount = principal + interest\n    \n    return total_amount",
    "result": 5625.0
  },
  {
    "index": 3,
    "response": "**Reasoning:**\nThe car travels 20 kilometers per liter of gasoline. To find out how many liters are needed for 150 kilometers, we set up a proportion:\n- 20 km requires 1 liter\n- 150 km requires ? liters\n\nThe calculation is straightforward:  \nLiters needed = total distance ÷ distance per liter  \nSo, 150 km ÷ 20 km/liter = 7.5 liters.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car can drive 20 kilometers on 1 liter of gasoline. How many liters of gasoline does it need to drive 150 kilometers?\n    \"\"\"\n    distance_per_liter = 20  # kilometers per liter\n    total_distance = 150  # kilometers to drive\n    liters_needed = total_distance / distance_per_liter\n    result = liters_needed\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car can drive 20 kilometers on 1 liter of gasoline. How many liters of gasoline does it need to drive 150 kilometers?\n    \"\"\"\n    distance_per_liter = 20  # kilometers per liter\n    total_distance = 150  # kilometers to drive\n    liters_needed = total_distance / distance_per_liter\n    result = liters_needed\n    \n    return result",
    "result": 7.5
  },
  {
    "index": 4,
    "response": "**Reasoning:**\nThe problem states that 2 eggs are required to make 6 muffins. To find out how many eggs are needed for 12 muffins, we can set up a proportion since the ratio of eggs to muffins remains constant.\n\n1. Set up the proportion:  \n   \\( \\frac{2 \\text{ eggs}}{6 \\text{ muffins}} = \\frac{x \\text{ eggs}}{12 \\text{ muffins}} \\)\n\n2. Cross-multiply to solve for \\( x \\):  \n   \\( 2 \\times 12 = 6 \\times x \\)  \n   \\( 24 = 6x \\)\n\n3. Solve for \\( x \\):  \n   \\( x = \\frac{24}{6} = 4 \\)\n\nThus, 4 eggs are needed to make 12 muffins.\n\n---\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A recipe calls for 2 eggs to make 6 muffins. If you want to make 12 muffins, how many eggs will you need?\n    \"\"\"\n    eggs_initial = 2\n    muffins_initial = 6\n    muffins_desired = 12\n    \n    # Calculate using proportion: (eggs_initial * muffins_desired) / muffins_initial\n    eggs_needed = (eggs_initial * muffins_desired) / muffins_initial\n    \n    return eggs_needed\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A recipe calls for 2 eggs to make 6 muffins. If you want to make 12 muffins, how many eggs will you need?\n    \"\"\"\n    eggs_initial = 2\n    muffins_initial = 6\n    muffins_desired = 12\n    \n    # Calculate using proportion: (eggs_initial * muffins_desired) / muffins_initial\n    eggs_needed = (eggs_initial * muffins_desired) / muffins_initial\n    \n    return eggs_needed",
    "result": 4.0
  },
  {
    "index": 5,
    "response": "**Reasoning:**\n1. **Problem Analysis**: The problem involves a food chain: snakes eat birds, and birds eat worms. We need to find the total number of worms eaten daily across 7 zoos.\n2. **Key Relationships**:\n   - Each zoo has 20 snakes.\n   - Each snake eats 5 birds per day.\n   - Each bird eats 10 worms per day.\n3. **Step-by-Step Calculation**:\n   - Total snakes = number of zoos × snakes per zoo = 7 × 20 = 140 snakes.\n   - Total birds eaten daily = total snakes × birds per snake = 140 × 5 = 700 birds.\n   - Total worms eaten daily = total birds eaten × worms per bird = 700 × 10 = 7000 worms.\n4. **Conclusion**: The total worms eaten every day is 7000.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Each bird needs to eat 10 worms per day to survive. Each snake needs to consume 5 birds per day to live. Each zoo needs to display 20 snakes to attract visitors. How many worms are eaten every day if there are 7 zoos in the area?\n    \"\"\"\n    num_zoos = 7\n    snakes_per_zoo = 20\n    birds_per_snake_per_day = 5\n    worms_per_bird_per_day = 10\n    \n    total_snakes = num_zoos * snakes_per_zoo\n    total_birds_eaten = total_snakes * birds_per_snake_per_day\n    total_worms_eaten = total_birds_eaten * worms_per_bird_per_day\n    result = float(total_worms_eaten)\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Each bird needs to eat 10 worms per day to survive. Each snake needs to consume 5 birds per day to live. Each zoo needs to display 20 snakes to attract visitors. How many worms are eaten every day if there are 7 zoos in the area?\n    \"\"\"\n    num_zoos = 7\n    snakes_per_zoo = 20\n    birds_per_snake_per_day = 5\n    worms_per_bird_per_day = 10\n    \n    total_snakes = num_zoos * snakes_per_zoo\n    total_birds_eaten = total_snakes * birds_per_snake_per_day\n    total_worms_eaten = total_birds_eaten * worms_per_bird_per_day\n    result = float(total_worms_eaten)\n    \n    return result",
    "result": 7000.0
  },
  {
    "index": 6,
    "response": "**Reasoning:**\n- Let \\( d \\) represent the minutes spent debugging.\n- According to the problem, Jack spends nine times as long coding as debugging, so coding time is \\( 9d \\).\n- The total time worked is the sum of debugging and coding time: \\( d + 9d = 10d \\).\n- The total time is given as 720 minutes, so \\( 10d = 720 \\).\n- Solving for \\( d \\): \\( d = \\frac{720}{10} = 72 \\) minutes.\n- Therefore, Jack spent 72 minutes debugging.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If Jack spends nine times as long coding as debugging, and he worked for a total of 720 minutes today, how many minutes did he spend debugging?\n    \"\"\"\n    total_minutes = 720\n    # Let debugging_time = d, then coding_time = 9d\n    # Total time: d + 9d = 10d = 720\n    debugging_time = total_minutes / 10\n    result = debugging_time\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If Jack spends nine times as long coding as debugging, and he worked for a total of 720 minutes today, how many minutes did he spend debugging?\n    \"\"\"\n    total_minutes = 720\n    # Let debugging_time = d, then coding_time = 9d\n    # Total time: d + 9d = 10d = 720\n    debugging_time = total_minutes / 10\n    result = debugging_time\n    return result",
    "result": 72.0
  },
  {
    "index": 7,
    "response": "**Reasoning:**\n1. The zoo starts with 60 animals.\n2. New animals are added in groups, with each group containing 15 animals.\n3. After adding some number of groups (let's call it `n`), the total number of animals becomes 165.\n4. The equation representing this situation is:  \n   **Initial animals + (Number of groups × Animals per group) = Total animals**  \n   Substitute the known values:  \n   **60 + (n × 15) = 165**.\n5. Solve for `n`:  \n   - Subtract 60 from both sides: **15n = 105**  \n   - Divide both sides by 15: **n = 7**.\n6. Thus, **7 groups** of new animals were added.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A zoo had a total of 60 animals. Then, they added new animals in groups of 15. Now, they have a total of 165 animals. How many groups of new animals were added?\n    \"\"\"\n    initial_animals = 60\n    animals_per_group = 15\n    final_animals = 165\n    \n    # Calculate the total number of new animals added\n    new_animals_added = final_animals - initial_animals\n    \n    # Calculate the number of groups (each group has 15 animals)\n    number_of_groups = new_animals_added / animals_per_group\n    \n    result = number_of_groups\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A zoo had a total of 60 animals. Then, they added new animals in groups of 15. Now, they have a total of 165 animals. How many groups of new animals were added?\n    \"\"\"\n    initial_animals = 60\n    animals_per_group = 15\n    final_animals = 165\n    \n    # Calculate the total number of new animals added\n    new_animals_added = final_animals - initial_animals\n    \n    # Calculate the number of groups (each group has 15 animals)\n    number_of_groups = new_animals_added / animals_per_group\n    \n    result = number_of_groups\n    return result",
    "result": 7.0
  },
  {
    "index": 8,
    "response": "**Reasoning:**\n1. We start with 40 pens and 16 pencils in the drawer.\n2. After using 10 pens, the remaining pens are \\(40 - 10 = 30\\).\n3. After using 8 pencils, the remaining pencils are \\(16 - 8 = 8\\).\n4. The total remaining writing tools are \\(30 \\text{ pens} + 8 \\text{ pencils} = 38\\).\n5. To find the percentage of pens among the remaining tools, calculate \\(\\frac{30}{38} \\times 100\\).\n6. Simplify \\(\\frac{30}{38}\\) to \\(\\frac{15}{19}\\) and compute the percentage.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    There are 40 pens and 16 pencils in a drawer. If 10 pens and 8 pencils are used, what percentage of the writing tools in the drawer are pens?\n    \"\"\"\n    initial_pens = 40\n    initial_pencils = 16\n    pens_used = 10\n    pencils_used = 8\n\n    remaining_pens = initial_pens - pens_used\n    remaining_pencils = initial_pencils - pencils_used\n    total_remaining = remaining_pens + remaining_pencils\n\n    percentage_pens = (remaining_pens / total_remaining) * 100\n    return percentage_pens\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 40 pens and 16 pencils in a drawer. If 10 pens and 8 pencils are used, what percentage of the writing tools in the drawer are pens?\n    \"\"\"\n    initial_pens = 40\n    initial_pencils = 16\n    pens_used = 10\n    pencils_used = 8\n\n    remaining_pens = initial_pens - pens_used\n    remaining_pencils = initial_pencils - pencils_used\n    total_remaining = remaining_pens + remaining_pencils\n\n    percentage_pens = (remaining_pens / total_remaining) * 100\n    return percentage_pens",
    "result": 78.94736842105263
  },
  {
    "index": 9,
    "response": "**Reasoning:**\n1. Sarah has 2 dogs, and one dog eats 50 treats per month. Therefore, both dogs together eat 2 * 50 = 100 treats per month.\n2. Since the dogs eat an equal amount every day, we assume a standard month of 30 days for daily consumption calculations.\n3. Daily consumption for both dogs: 100 treats/month ÷ 30 days/month = 100/30 treats per day.\n4. With a bag of 120 treats, the time required is: total treats ÷ daily consumption = 120 ÷ (100/30) = 120 * 30 / 100 = 36 days.\n5. The result is an integer, but the function returns a float, so we represent it as 36.0.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sarah's dog eats a bag of 50 treats every month. Sarah has 2 dogs. If Sarah bought a bag of treats that has 120 treats in it, how long will it take for her dogs to eat all the treats assuming they both eat an equal amount every day?\n    \"\"\"\n    num_dogs = 2\n    treats_per_dog_per_month = 50\n    total_treats = 120\n    days_per_month = 30  # standard assumption\n    \n    # Calculate total monthly consumption for both dogs\n    monthly_consumption = num_dogs * treats_per_dog_per_month\n    \n    # Calculate daily consumption\n    daily_consumption = monthly_consumption / days_per_month\n    \n    # Calculate days required to consume all treats\n    days_required = total_treats / daily_consumption\n    \n    result = days_required\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sarah's dog eats a bag of 50 treats every month. Sarah has 2 dogs. If Sarah bought a bag of treats that has 120 treats in it, how long will it take for her dogs to eat all the treats assuming they both eat an equal amount every day?\n    \"\"\"\n    num_dogs = 2\n    treats_per_dog_per_month = 50\n    total_treats = 120\n    days_per_month = 30  # standard assumption\n    \n    # Calculate total monthly consumption for both dogs\n    monthly_consumption = num_dogs * treats_per_dog_per_month\n    \n    # Calculate daily consumption\n    daily_consumption = monthly_consumption / days_per_month\n    \n    # Calculate days required to consume all treats\n    days_required = total_treats / daily_consumption\n    \n    result = days_required\n    return result",
    "result": 36.0
  },
  {
    "index": 10,
    "response": "**Reasoning:**\n- Let \\( A \\) be the number of apples and \\( O \\) be the number of oranges.\n- From the problem:  \n  - Dennis has 3 more apples than oranges: \\( A = O + 3 \\)  \n  - Total fruits: \\( A + O = 25 \\)  \n- Substitute \\( A \\) from the first equation into the second:  \n  \\( (O + 3) + O = 25 \\) → \\( 2O + 3 = 25 \\)  \n- Solve for \\( O \\):  \n  \\( 2O = 22 \\) → \\( O = 11 \\)  \n- Then \\( A = 11 + 3 = 14 \\).  \n- Verification: 14 apples + 11 oranges = 25 fruits, and 14 is indeed 3 more than 11.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    At a party, Dennis had 3 more apples than oranges. If he had 25 fruits in total, how many apples did he have?\n    \"\"\"\n    total_fruits = 25\n    extra_apples = 3\n    \n    # Subtract the extra apples to balance apples and oranges\n    balanced_total = total_fruits - extra_apples\n    \n    # Now, apples (without extra) and oranges are equal\n    oranges = balanced_total // 2\n    apples = oranges + extra_apples\n    \n    result = apples\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    At a party, Dennis had 3 more apples than oranges. If he had 25 fruits in total, how many apples did he have?\n    \"\"\"\n    total_fruits = 25\n    extra_apples = 3\n    \n    # Subtract the extra apples to balance apples and oranges\n    balanced_total = total_fruits - extra_apples\n    \n    # Now, apples (without extra) and oranges are equal\n    oranges = balanced_total // 2\n    apples = oranges + extra_apples\n    \n    result = apples\n    return result",
    "result": 14
  },
  {
    "index": 11,
    "response": "**Reasoning:**\nThe problem states that Remy received 6 gifts total from 5 friends. To find the average number of gifts per friend, we divide the total gifts by the number of friends. This gives:  \nAverage = Total Gifts ÷ Number of Friends = 6 ÷ 5 = 1.2  \n\nNo additional assumptions are needed since the problem directly provides the total gifts (6) and the number of friends (5).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Student: For her birthday Remy received 6 gifts from 5 friends, how many gifts did each person give her on average?\n    \"\"\"\n    total_gifts = 6\n    number_of_friends = 5\n    average_gifts_per_friend = total_gifts / number_of_friends\n    result = average_gifts_per_friend\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Student: For her birthday Remy received 6 gifts from 5 friends, how many gifts did each person give her on average?\n    \"\"\"\n    total_gifts = 6\n    number_of_friends = 5\n    average_gifts_per_friend = total_gifts / number_of_friends\n    result = average_gifts_per_friend\n    \n    return result",
    "result": 1.2
  },
  {
    "index": 12,
    "response": "**Reasoning:**\nThe restaurant needs to sell at least 50 pizzas per day on average over the week to cover costs. Since there are 7 days in a week, the total minimum required pizzas for the week is \\(50 \\times 7 = 350\\).\n\nThey sold an average of 45 pizzas per day for the first 5 days, so the total pizzas sold in the first 5 days is \\(45 \\times 5 = 225\\).\n\nThe remaining pizzas needed to meet the weekly goal is the difference: \\(350 - 225 = 125\\). Therefore, they need to sell 125 pizzas over the remaining 2 days.\n\n**Solution:**\n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    A restaurant needs to sell at least 50 pizzas per day to cover their costs. If they sell an average of 45 pizzas per day for the first 5 days of the week, how many pizzas do they need to sell on the remaining 2 days to meet their goal?\n    \"\"\"\n    required_per_day = 50\n    total_days = 7\n    total_required = required_per_day * total_days\n    \n    initial_avg = 45\n    initial_days = 5\n    initial_total = initial_avg * initial_days\n    \n    remaining_needed = total_required - initial_total\n    \n    return remaining_needed\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A restaurant needs to sell at least 50 pizzas per day to cover their costs. If they sell an average of 45 pizzas per day for the first 5 days of the week, how many pizzas do they need to sell on the remaining 2 days to meet their goal?\n    \"\"\"\n    required_per_day = 50\n    total_days = 7\n    total_required = required_per_day * total_days\n    \n    initial_avg = 45\n    initial_days = 5\n    initial_total = initial_avg * initial_days\n    \n    remaining_needed = total_required - initial_total\n    \n    return remaining_needed",
    "result": 125
  },
  {
    "index": 13,
    "response": "**Reasoning:**\n1. Jasmine starts with 500 jelly beans.\n2. She eats 30 jelly beans, so we subtract 30 from the initial amount: 500 - 30 = 470.\n3. She then fills 10 small bags, each holding 40 jelly beans. The total jelly beans used for bags is 10 * 40 = 400.\n4. Subtract the jelly beans used for bags from the remaining amount after eating: 470 - 400 = 70.\n5. Therefore, 70 jelly beans will be left in the jar.\n\n**Solution:**\n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Jasmine has a jar of 500 jelly beans. She wants to fill 10 small bags with jelly beans. Each bag can hold 40 jelly beans. She eats 30 jelly beans before filling the bags. How many jelly beans will be left in the jar after she fills all the bags?\n    \"\"\"\n    initial_jelly_beans = 500\n    eaten = 30\n    remaining_after_eating = initial_jelly_beans - eaten\n    \n    bags = 10\n    beans_per_bag = 40\n    beans_used_for_bags = bags * beans_per_bag\n    \n    beans_left = remaining_after_eating - beans_used_for_bags\n    \n    result = beans_left\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Jasmine has a jar of 500 jelly beans. She wants to fill 10 small bags with jelly beans. Each bag can hold 40 jelly beans. She eats 30 jelly beans before filling the bags. How many jelly beans will be left in the jar after she fills all the bags?\n    \"\"\"\n    initial_jelly_beans = 500\n    eaten = 30\n    remaining_after_eating = initial_jelly_beans - eaten\n    \n    bags = 10\n    beans_per_bag = 40\n    beans_used_for_bags = bags * beans_per_bag\n    \n    beans_left = remaining_after_eating - beans_used_for_bags\n    \n    result = beans_left\n    return result",
    "result": 70
  },
  {
    "index": 14,
    "response": "**Reasoning:**\n1. The problem states there are 10 marbles in total.\n2. Out of these, 6 marbles are red.\n3. To find the percentage of red marbles, divide the number of red marbles by the total number of marbles and multiply by 100.\n4. The calculation is: (6 / 10) * 100 = 60.0.\n5. This means 60% of the marbles are red.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John has a bag with 10 marbles. 6 of these marbles are red, and the remaining 4 marbles are blue. What percentage of marbles are red?\n    \"\"\"\n    total_marbles = 10\n    red_marbles = 6\n    percentage_red = (red_marbles / total_marbles) * 100\n    \n    result = percentage_red\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John has a bag with 10 marbles. 6 of these marbles are red, and the remaining 4 marbles are blue. What percentage of marbles are red?\n    \"\"\"\n    total_marbles = 10\n    red_marbles = 6\n    percentage_red = (red_marbles / total_marbles) * 100\n    \n    result = percentage_red\n    return result",
    "result": 60.0
  },
  {
    "index": 15,
    "response": "**Reasoning:**\n1. **Calculate the total cost of cookies:** Lisa buys 4 packs of cookies, each costing $3. The total cost is \\(4 \\times 3 = 12\\) dollars.\n2. **Calculate the cake cost:** The cake costs 25% more than the total cookie cost. This means the cake cost is \\(12 \\times (1 + 0.25) = 12 \\times 1.25 = 15\\) dollars.\n3. **Calculate total spending:** Add the cookie cost and cake cost: \\(12 + 15 = 27\\) dollars.\n4. **Result:** The total amount spent on both cake and cookies is 27 dollars.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Lisa buys 4 packs of cookies for her party. Each pack has 12 cookies and costs $3. She also buys a cake that costs 25% more than the total price of the cookies. How much did she spend on the cake and cookies?\n    \"\"\"\n    num_packs = 4\n    cost_per_pack = 3.0\n    total_cookie_cost = num_packs * cost_per_pack\n    cake_cost = total_cookie_cost * 1.25\n    total_spent = total_cookie_cost + cake_cost\n\n    return total_spent\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Lisa buys 4 packs of cookies for her party. Each pack has 12 cookies and costs $3. She also buys a cake that costs 25% more than the total price of the cookies. How much did she spend on the cake and cookies?\n    \"\"\"\n    num_packs = 4\n    cost_per_pack = 3.0\n    total_cookie_cost = num_packs * cost_per_pack\n    cake_cost = total_cookie_cost * 1.25\n    total_spent = total_cookie_cost + cake_cost\n\n    return total_spent",
    "result": 27.0
  },
  {
    "index": 16,
    "response": "**Reasoning:**\n1. Zara's basket has a total capacity of 22 blueberries.\n2. Zoey's basket has twice the capacity of Zara's, so it can hold 2 * 22 = 44 blueberries.\n3. Zara currently has 10 blueberries in her basket.\n4. The problem asks how many times Zara's current blueberries (10) fit into Zoey's basket capacity (44). This is calculated by dividing Zoey's capacity by Zara's current count: 44 ÷ 10 = 4.4.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Zoey and her sister Zara are picking blueberries in a farm. Zoey's basket can hold twice as many blueberries as Zara's basket when both are full. Zara's basket can hold 22 blueberries in total, but she only has 10 blueberries in it currently. How many times could Zara's current number of blueberries fit into Zoey's basket?\n    \"\"\"\n    zara_basket_capacity = 22\n    zoey_basket_capacity = 2 * zara_basket_capacity\n    zara_current_blueberries = 10\n    result = zoey_basket_capacity / zara_current_blueberries\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Zoey and her sister Zara are picking blueberries in a farm. Zoey's basket can hold twice as many blueberries as Zara's basket when both are full. Zara's basket can hold 22 blueberries in total, but she only has 10 blueberries in it currently. How many times could Zara's current number of blueberries fit into Zoey's basket?\n    \"\"\"\n    zara_basket_capacity = 22\n    zoey_basket_capacity = 2 * zara_basket_capacity\n    zara_current_blueberries = 10\n    result = zoey_basket_capacity / zara_current_blueberries\n    return result",
    "result": 4.4
  },
  {
    "index": 17,
    "response": "**Reasoning:**\n1. Jack works out for 4 hours.\n2. Sarah works out for three times Jack's hours: \\( 3 \\times 4 = 12 \\) hours.\n3. Combined total hours for Sarah and Jack: \\( 12 + 4 = 16 \\) hours.\n4. Lisa works out for five times their combined total: \\( 5 \\times 16 = 80 \\) hours.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In a week, Sarah works out for three times the number of hours her brother Jack works out. \n    Their personal trainer, Lisa, works out for five times the combined total number of hours \n    both Sarah and Jack work out. If Jack works out for 4 hours, calculate the number of hours Lisa works out.\n    \"\"\"\n    jack_hours = 4\n    sarah_hours = 3 * jack_hours\n    combined_hours = sarah_hours + jack_hours\n    lisa_hours = 5 * combined_hours\n    \n    result = lisa_hours\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In a week, Sarah works out for three times the number of hours her brother Jack works out. \n    Their personal trainer, Lisa, works out for five times the combined total number of hours \n    both Sarah and Jack work out. If Jack works out for 4 hours, calculate the number of hours Lisa works out.\n    \"\"\"\n    jack_hours = 4\n    sarah_hours = 3 * jack_hours\n    combined_hours = sarah_hours + jack_hours\n    lisa_hours = 5 * combined_hours\n    \n    result = lisa_hours\n    return result",
    "result": 80
  },
  {
    "index": 18,
    "response": "**Reasoning:**\n1. The original price of the chair is $175.\n2. A 10% discount means Sally pays only 90% of the original price (100% - 10% = 90%).\n3. Calculate the discounted price: $175 × 0.90 = $157.50.\n4. Add the shipping cost of $30 to the discounted price.\n5. Total price = $157.50 + $30 = $187.50.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sally wanted to buy a new chair so she bought one for $175 with a 10% discount. \n    She also needed to ship the chair and it cost her an additional $30. \n    What was the total price she paid for the chair?\n    \"\"\"\n    original_price = 175\n    discount_percent = 0.10\n    shipping_cost = 30\n    \n    discount_amount = original_price * discount_percent\n    discounted_price = original_price - discount_amount\n    total_price = discounted_price + shipping_cost\n    \n    return total_price\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sally wanted to buy a new chair so she bought one for $175 with a 10% discount. \n    She also needed to ship the chair and it cost her an additional $30. \n    What was the total price she paid for the chair?\n    \"\"\"\n    original_price = 175\n    discount_percent = 0.10\n    shipping_cost = 30\n    \n    discount_amount = original_price * discount_percent\n    discounted_price = original_price - discount_amount\n    total_price = discounted_price + shipping_cost\n    \n    return total_price",
    "result": 187.5
  },
  {
    "index": 19,
    "response": "**Reasoning:**\n1. The garden is rectangular with dimensions 40 feet (length) and 30 feet (width).\n2. Calculate the area: area = length × width = 40 ft × 30 ft = 1200 square feet.\n3. Flower density is 1 flower per 5 square feet.\n4. Total flowers = total area ÷ density = 1200 sq ft ÷ 5 sq ft/flower = 240 flowers.\n5. Since the area is exactly divisible by the density, the result is a whole number.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A garden is 40 feet long and 30 feet wide. If there is 1 flower per 5 square feet, how many flowers are there in the garden?\n    \"\"\"\n    garden_length_feet = 40\n    garden_width_feet = 30\n    area_sq_ft = garden_length_feet * garden_width_feet\n    flowers_per_sq_ft = 1 / 5  # 1 flower per 5 sq ft\n    total_flowers = area_sq_ft * flowers_per_sq_ft\n    \n    return total_flowers\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A garden is 40 feet long and 30 feet wide. If there is 1 flower per 5 square feet, how many flowers are there in the garden?\n    \"\"\"\n    garden_length_feet = 40\n    garden_width_feet = 30\n    area_sq_ft = garden_length_feet * garden_width_feet\n    flowers_per_sq_ft = 1 / 5  # 1 flower per 5 sq ft\n    total_flowers = area_sq_ft * flowers_per_sq_ft\n    \n    return total_flowers",
    "result": 240.0
  },
  {
    "index": 20,
    "response": "**Reasoning:**\n1. The store buys 50 gallons of milk per day.\n2. The original price is $2.50 per gallon, and the new price is $2.00 per gallon.\n3. Calculate the savings per gallon: $2.50 - $2.00 = $0.50.\n4. Daily savings: 50 gallons * $0.50 per gallon = $25.00.\n5. Weekly savings (7 days): $25.00 * 7 = $175.00.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A grocery store buys 50 gallons of milk each day for $2.50 per gallon. If they find a new supplier that sells the same milk for $2.00 per gallon, how much money will they save in a week?\n    \"\"\"\n    gallons_per_day = 50\n    original_price_per_gallon = 2.50\n    new_price_per_gallon = 2.00\n    days_per_week = 7\n    \n    savings_per_gallon = original_price_per_gallon - new_price_per_gallon\n    daily_savings = gallons_per_day * savings_per_gallon\n    weekly_savings = daily_savings * days_per_week\n    \n    result = weekly_savings\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A grocery store buys 50 gallons of milk each day for $2.50 per gallon. If they find a new supplier that sells the same milk for $2.00 per gallon, how much money will they save in a week?\n    \"\"\"\n    gallons_per_day = 50\n    original_price_per_gallon = 2.50\n    new_price_per_gallon = 2.00\n    days_per_week = 7\n    \n    savings_per_gallon = original_price_per_gallon - new_price_per_gallon\n    daily_savings = gallons_per_day * savings_per_gallon\n    weekly_savings = daily_savings * days_per_week\n    \n    result = weekly_savings\n    return result",
    "result": 175.0
  },
  {
    "index": 21,
    "response": "**Reasoning:**\n- The bookshelf has 4 shelves.\n- Each shelf can hold 10 books, so the total capacity is 4 × 10 = 40 books.\n- There are 27 books currently on the bookshelf.\n- The number of empty spaces is the total capacity minus the books present: 40 - 27 = 13.\n\n**Solution:**\n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    A bookshelf has 4 shelves. Each shelf can hold 10 books. If there are 27 books on the bookshelf, how many empty spaces are there?\n    \"\"\"\n    total_shelves = 4\n    books_per_shelf = 10\n    books_present = 27\n    \n    total_capacity = total_shelves * books_per_shelf\n    empty_spaces = total_capacity - books_present\n    \n    result = empty_spaces\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A bookshelf has 4 shelves. Each shelf can hold 10 books. If there are 27 books on the bookshelf, how many empty spaces are there?\n    \"\"\"\n    total_shelves = 4\n    books_per_shelf = 10\n    books_present = 27\n    \n    total_capacity = total_shelves * books_per_shelf\n    empty_spaces = total_capacity - books_present\n    \n    result = empty_spaces\n    return result",
    "result": 13
  },
  {
    "index": 22,
    "response": "**Reasoning:**\n1. Let the cost of the shirt be \\( s \\) dollars.\n2. Then the cost of the sweater is \\( s + 12 \\) dollars.\n3. The total cost is \\( s + (s + 12) = 56 \\).\n4. Simplify the equation: \\( 2s + 12 = 56 \\).\n5. Subtract 12 from both sides: \\( 2s = 44 \\).\n6. Divide both sides by 2: \\( s = 22 \\).\n7. The sweater costs \\( 22 + 12 = 34 \\) dollars.\n8. Alternatively, using simultaneous equations:  \n   - Sweater + Shirt = 56  \n   - Sweater - Shirt = 12  \n   Adding these two equations: \\( 2 \\times \\text{Sweater} = 68 \\)  \n   Therefore, Sweater = 34.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    The total price of a sweater and a shirt is $56. The sweater costs $12 more than the shirt. What is the cost of the sweater?\n    \"\"\"\n    total_cost = 56\n    price_difference = 12\n    \n    # Using the derived formula: sweater = (total_cost + price_difference) / 2\n    sweater_cost = (total_cost + price_difference) / 2\n    \n    return sweater_cost\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The total price of a sweater and a shirt is $56. The sweater costs $12 more than the shirt. What is the cost of the sweater?\n    \"\"\"\n    total_cost = 56\n    price_difference = 12\n    \n    # Using the derived formula: sweater = (total_cost + price_difference) / 2\n    sweater_cost = (total_cost + price_difference) / 2\n    \n    return sweater_cost",
    "result": 34.0
  },
  {
    "index": 23,
    "response": "**Reasoning:**\nThe baker makes a profit from selling cupcakes, which is the revenue from sales minus the cost of cupcake liners for the sold cupcakes. The ingredients cost is not provided, so it's not considered. The baker decorates 15 cupcakes per hour and works for 4 hours, so he decorates 60 cupcakes. During his break, he sells 40 cupcakes. Each cupcake sells for $0.5, and each liner costs $0.2. The profit from selling 40 cupcakes is calculated as:  \nProfit = (Number of cupcakes sold × Revenue per cupcake) - (Number of cupcakes sold × Cost per liner)  \nThis simplifies to:  \nProfit = Number of cupcakes sold × (Revenue per cupcake - Cost per liner)  \nSo, Profit = 40 × ($0.5 - $0.2) = 40 × $0.3 = $12.00.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A baker is making cupcakes for a party. He has enough ingredients to make 120 cupcakes. He can decorate 15 cupcakes in an hour and he charges $0.5 per cupcake. He also pays $0.2 for each cupcake liner. He works for 4 hours and then takes a break. During his break, he sells 40 cupcakes to a neighbor. How much profit does he make after his break?\n    \"\"\"\n    cupcakes_per_hour = 15\n    hours_worked = 4\n    decorated_cupcakes = cupcakes_per_hour * hours_worked  # 60 cupcakes\n    cupcakes_sold = 40\n    revenue_per_cupcake = 0.5\n    cost_per_liner = 0.2\n    profit_per_cupcake = revenue_per_cupcake - cost_per_liner  # $0.3 per cupcake\n    total_profit = cupcakes_sold * profit_per_cupcake  # $12.0\n    \n    return total_profit\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A baker is making cupcakes for a party. He has enough ingredients to make 120 cupcakes. He can decorate 15 cupcakes in an hour and he charges $0.5 per cupcake. He also pays $0.2 for each cupcake liner. He works for 4 hours and then takes a break. During his break, he sells 40 cupcakes to a neighbor. How much profit does he make after his break?\n    \"\"\"\n    cupcakes_per_hour = 15\n    hours_worked = 4\n    decorated_cupcakes = cupcakes_per_hour * hours_worked  # 60 cupcakes\n    cupcakes_sold = 40\n    revenue_per_cupcake = 0.5\n    cost_per_liner = 0.2\n    profit_per_cupcake = revenue_per_cupcake - cost_per_liner  # $0.3 per cupcake\n    total_profit = cupcakes_sold * profit_per_cupcake  # $12.0\n    \n    return total_profit",
    "result": 12.0
  },
  {
    "index": 24,
    "response": "**Reasoning:**\nTo solve this problem step by step:\n1. Maria starts with 28 stickers.\n2. She gives 8 stickers to her brother, so subtract 8 from 28: 28 - 8 = 20 stickers remaining.\n3. She then trades 6 stickers with her friend. Trading means she gives away 6 stickers and receives 9 different stickers in return. So, subtract the 6 she gives away: 20 - 6 = 14 stickers. Then add the 9 new stickers: 14 + 9 = 23 stickers.\n4. Alternatively, the net change from the trade is -6 + 9 = +3 stickers. Adding this to the 20 stickers after giving to her brother: 20 + 3 = 23 stickers.\n5. Therefore, Maria now has 23 stickers.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Maria has 28 stickers. She gives 8 of them to her brother and then trades 6 of them with her friend for 9 different stickers. How many stickers does she have now?\n    \"\"\"\n    initial_stickers = 28\n    given_to_brother = 8\n    traded_away = 6\n    received_in_trade = 9\n    \n    after_giving = initial_stickers - given_to_brother\n    after_trading_away = after_giving - traded_away\n    after_receiving = after_trading_away + received_in_trade\n    \n    result = after_receiving\n    return float(result)\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Maria has 28 stickers. She gives 8 of them to her brother and then trades 6 of them with her friend for 9 different stickers. How many stickers does she have now?\n    \"\"\"\n    initial_stickers = 28\n    given_to_brother = 8\n    traded_away = 6\n    received_in_trade = 9\n    \n    after_giving = initial_stickers - given_to_brother\n    after_trading_away = after_giving - traded_away\n    after_receiving = after_trading_away + received_in_trade\n    \n    result = after_receiving\n    return float(result)",
    "result": 23.0
  },
  {
    "index": 25,
    "response": "**Reasoning:**\nThe problem states: \"If 3 times a number added to 15 is equal to 48, what is the number?\"\n\n1. Let the unknown number be represented as \\( x \\).\n2. \"3 times a number\" translates to \\( 3x \\).\n3. \"Added to 15\" means \\( 15 + 3x \\).\n4. This expression equals 48, so the equation is \\( 15 + 3x = 48 \\).\n5. Subtract 15 from both sides to isolate the term with \\( x \\):\n   \\[\n   3x = 48 - 15\n   \\]\n   \\[\n   3x = 33\n   \\]\n6. Divide both sides by 3 to solve for \\( x \\):\n   \\[\n   x = \\frac{33}{3}\n   \\]\n   \\[\n   x = 11\n   \\]\n\nThus, the solution is \\( x = 11 \\).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If 3 times a number added to 15 is equal to 48, what is the number?\n    \"\"\"\n    # Define the constants from the problem\n    constant_added = 15\n    multiplier = 3\n    total = 48\n    \n    # Rearrange the equation: 3x + 15 = 48 → 3x = 48 - 15\n    step1 = total - constant_added\n    \n    # Solve for x: x = (48 - 15) / 3\n    result = step1 / multiplier\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If 3 times a number added to 15 is equal to 48, what is the number?\n    \"\"\"\n    # Define the constants from the problem\n    constant_added = 15\n    multiplier = 3\n    total = 48\n    \n    # Rearrange the equation: 3x + 15 = 48 → 3x = 48 - 15\n    step1 = total - constant_added\n    \n    # Solve for x: x = (48 - 15) / 3\n    result = step1 / multiplier\n    \n    return result",
    "result": 11.0
  },
  {
    "index": 26,
    "response": "**Reasoning:**\n- The recipe states that 20 cupcakes require 2 cups of flour.\n- To find the flour needed for 40 cupcakes, recognize that 40 cupcakes is exactly double the original 20 cupcakes.\n- Therefore, the flour required should also double: 2 cups × 2 = 4 cups.\n- This is a direct proportion problem: if \\( \\text{flour}_1 \\) is for \\( \\text{cupcakes}_1 \\), then \\( \\text{flour}_2 = \\text{flour}_1 \\times \\frac{\\text{cupcakes}_2}{\\text{cupcakes}_1} \\).\n- Plugging in the values: \\( \\text{flour}_2 = 2 \\times \\frac{40}{20} = 2 \\times 2 = 4 \\).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A recipe for 20 cupcakes needs 2 cups of flour. How much flour is needed for 40 cupcakes?\n    \"\"\"\n    cupcakes_initial = 20\n    flour_initial = 2.0  # Using float for consistency in return type\n    cupcakes_target = 40\n    \n    # Calculate flour for target cupcakes using proportion\n    flour_needed = flour_initial * (cupcakes_target / cupcakes_initial)\n    \n    result = flour_needed\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A recipe for 20 cupcakes needs 2 cups of flour. How much flour is needed for 40 cupcakes?\n    \"\"\"\n    cupcakes_initial = 20\n    flour_initial = 2.0  # Using float for consistency in return type\n    cupcakes_target = 40\n    \n    # Calculate flour for target cupcakes using proportion\n    flour_needed = flour_initial * (cupcakes_target / cupcakes_initial)\n    \n    result = flour_needed\n    return result",
    "result": 4.0
  },
  {
    "index": 27,
    "response": "**Reasoning:**\nThe problem involves calculating the distance traveled by a car given its average speed and the time driven. The formula for distance is:\n\n\\[\n\\text{distance} = \\text{speed} \\times \\text{time}\n\\]\n\nGiven:\n- Speed = 60 km/h\n- Time = 4.5 hours\n\nSubstitute the values into the formula:\n\\[\n\\text{distance} = 60 \\, \\text{km/h} \\times 4.5 \\, \\text{h}\n\\]\n\nMultiplying these values:\n\\[\n60 \\times 4.5 = 270\n\\]\n\nThe car travels 270 km.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car travels at an average speed of 60 km/h. If the car drives non-stop for 4.5 hours, how far does the car travel?\n    \"\"\"\n    average_speed_km_per_h = 60\n    time_driven_hours = 4.5\n    distance_traveled_km = average_speed_km_per_h * time_driven_hours\n    result = distance_traveled_km\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car travels at an average speed of 60 km/h. If the car drives non-stop for 4.5 hours, how far does the car travel?\n    \"\"\"\n    average_speed_km_per_h = 60\n    time_driven_hours = 4.5\n    distance_traveled_km = average_speed_km_per_h * time_driven_hours\n    result = distance_traveled_km\n    \n    return result",
    "result": 270.0
  },
  {
    "index": 28,
    "response": "**Reasoning:**  \nBrian starts with $20. He spends half of this amount on groceries. The remaining amount is saved. To find the savings:  \n- Initial amount: $20  \n- Half spent on groceries: $20 * 0.5 = $10  \n- Savings = Initial amount - Amount spent = $20 - $10 = $10  \n\nAlternatively, since he spends half and saves the other half, savings = $20 * 0.5 = $10.  \n\n**Solution:**  \n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Brian has 20 dollars in the beginning. He spends half of it on groceries and saves the rest. How much money does Brian save?\n    \"\"\"\n    initial_money = 20.0\n    savings = initial_money * 0.5  # Half is saved (since half is spent)\n    result = savings\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Brian has 20 dollars in the beginning. He spends half of it on groceries and saves the rest. How much money does Brian save?\n    \"\"\"\n    initial_money = 20.0\n    savings = initial_money * 0.5  # Half is saved (since half is spent)\n    result = savings\n\n    return result",
    "result": 10.0
  },
  {
    "index": 29,
    "response": "**Reasoning:**\nThe recipe for one chocolate cake requires 2 eggs. To make 3 chocolate cakes, we multiply the number of eggs per cake by the number of cakes:  \n3 cakes × 2 eggs/cake = 6 eggs.  \nThus, 6 eggs are needed.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A recipe for chocolate cake requires 7 tablespoons of butter, 2 eggs, and 3 cups of flour. How many eggs are needed to make 3 chocolate cakes?\n    \"\"\"\n    eggs_per_cake = 2\n    number_of_cakes = 3\n    total_eggs = eggs_per_cake * number_of_cakes\n    result = float(total_eggs)  # Convert to float as per function signature\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A recipe for chocolate cake requires 7 tablespoons of butter, 2 eggs, and 3 cups of flour. How many eggs are needed to make 3 chocolate cakes?\n    \"\"\"\n    eggs_per_cake = 2\n    number_of_cakes = 3\n    total_eggs = eggs_per_cake * number_of_cakes\n    result = float(total_eggs)  # Convert to float as per function signature\n    \n    return result",
    "result": 6.0
  },
  {
    "index": 30,
    "response": "**Reasoning:**\n- Lla has 18 candies and her cousin has 30 candies, so the total number of candies is 18 + 30 = 48.\n- They want to share these candies equally between the two of them.\n- To find how many candies each person gets, divide the total candies by 2: 48 / 2 = 24.\n- Since the result is a whole number, it's straightforward. Each person will have 24 candies.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Lla has a bag of 18 candies. Her cousin has a bag of 30 candies and they want to share them equally. How many candies will each one have after they share them?\n    \"\"\"\n    lla_candies = 18\n    cousin_candies = 30\n    total_candies = lla_candies + cousin_candies\n    number_of_people = 2\n    candies_per_person = total_candies / number_of_people\n    \n    return candies_per_person\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Lla has a bag of 18 candies. Her cousin has a bag of 30 candies and they want to share them equally. How many candies will each one have after they share them?\n    \"\"\"\n    lla_candies = 18\n    cousin_candies = 30\n    total_candies = lla_candies + cousin_candies\n    number_of_people = 2\n    candies_per_person = total_candies / number_of_people\n    \n    return candies_per_person",
    "result": 24.0
  },
  {
    "index": 31,
    "response": "**Reasoning:**\n1. The garden starts with 60 tulip bulbs and 75 daffodil bulbs.\n2. They plant 30 tulip bulbs, leaving 60 - 30 = 30 tulip bulbs unplanted.\n3. They also plant three times as many daffodil bulbs as tulip bulbs planted. Since 30 tulip bulbs are planted, they intend to plant 3 * 30 = 90 daffodil bulbs.\n4. However, only 75 daffodil bulbs are available. Thus, all 75 daffodil bulbs are planted, leaving 75 - 75 = 0 daffodil bulbs unplanted.\n5. The total unplanted bulbs are the sum of unplanted tulip bulbs and unplanted daffodil bulbs: 30 + 0 = 30.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A garden has 60 tulip bulbs and 75 daffodil bulbs. If they plant 30 tulip bulbs and three times as many daffodil bulbs as tulip bulbs, how many bulbs are left unplanted?\n    \"\"\"\n    total_tulip_bulbs = 60\n    total_daffodil_bulbs = 75\n    tulip_planted = 30\n    daffodil_planted = min(3 * tulip_planted, total_daffodil_bulbs)\n    tulip_left = total_tulip_bulbs - tulip_planted\n    daffodil_left = total_daffodil_bulbs - daffodil_planted\n    total_unplanted = tulip_left + daffodil_left\n    return float(total_unplanted)\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A garden has 60 tulip bulbs and 75 daffodil bulbs. If they plant 30 tulip bulbs and three times as many daffodil bulbs as tulip bulbs, how many bulbs are left unplanted?\n    \"\"\"\n    total_tulip_bulbs = 60\n    total_daffodil_bulbs = 75\n    tulip_planted = 30\n    daffodil_planted = min(3 * tulip_planted, total_daffodil_bulbs)\n    tulip_left = total_tulip_bulbs - tulip_planted\n    daffodil_left = total_daffodil_bulbs - daffodil_planted\n    total_unplanted = tulip_left + daffodil_left\n    return float(total_unplanted)",
    "result": 30.0
  },
  {
    "index": 32,
    "response": "**Reasoning:**\nTo solve this problem, we need to calculate the total cost of ingredients for making the recipe 10 times. The recipe requires 2 cups of milk and 3 eggs. Given that eggs cost $0.25 each and milk costs $2 per gallon (with 1 gallon = 16 cups), we break it down as follows:\n\n1. **Calculate total milk needed in cups:**  \n   Recipe requires 2 cups per batch × 10 batches = 20 cups.\n\n2. **Convert milk from cups to gallons:**  \n   20 cups ÷ 16 cups/gallon = 1.25 gallons.\n\n3. **Calculate milk cost:**  \n   1.25 gallons × $2/gallon = $2.50.\n\n4. **Calculate total eggs needed:**  \n   Recipe requires 3 eggs per batch × 10 batches = 30 eggs.\n\n5. **Calculate eggs cost:**  \n   30 eggs × $0.25/egg = $7.50.\n\n6. **Total cost:**  \n   Milk cost ($2.50) + Eggs cost ($7.50) = $10.00.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A recipe calls for 2 cups of milk and 3 eggs. If John wants to make the recipe 10 times and eggs cost $0.25 each and milk costs $2 per gallon (1 gallon = 16 cups), how much does he spend on ingredients for the recipe?\n    \"\"\"\n    # Constants\n    milk_per_recipe_cups = 2\n    eggs_per_recipe = 3\n    batches = 10\n    egg_price = 0.25  # dollars per egg\n    milk_price_per_gallon = 2.0  # dollars per gallon\n    cups_per_gallon = 16\n\n    # Calculate total milk needed (cups) and convert to gallons\n    total_milk_cups = milk_per_recipe_cups * batches\n    total_milk_gallons = total_milk_cups / cups_per_gallon\n\n    # Calculate milk cost\n    milk_cost = total_milk_gallons * milk_price_per_gallon\n\n    # Calculate total eggs needed and cost\n    total_eggs = eggs_per_recipe * batches\n    eggs_cost = total_eggs * egg_price\n\n    # Total cost\n    total_cost = milk_cost + eggs_cost\n\n    return total_cost\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A recipe calls for 2 cups of milk and 3 eggs. If John wants to make the recipe 10 times and eggs cost $0.25 each and milk costs $2 per gallon (1 gallon = 16 cups), how much does he spend on ingredients for the recipe?\n    \"\"\"\n    # Constants\n    milk_per_recipe_cups = 2\n    eggs_per_recipe = 3\n    batches = 10\n    egg_price = 0.25  # dollars per egg\n    milk_price_per_gallon = 2.0  # dollars per gallon\n    cups_per_gallon = 16\n\n    # Calculate total milk needed (cups) and convert to gallons\n    total_milk_cups = milk_per_recipe_cups * batches\n    total_milk_gallons = total_milk_cups / cups_per_gallon\n\n    # Calculate milk cost\n    milk_cost = total_milk_gallons * milk_price_per_gallon\n\n    # Calculate total eggs needed and cost\n    total_eggs = eggs_per_recipe * batches\n    eggs_cost = total_eggs * egg_price\n\n    # Total cost\n    total_cost = milk_cost + eggs_cost\n\n    return total_cost",
    "result": 10.0
  },
  {
    "index": 33,
    "response": "**Reasoning:**\nMia bought 6 dozen plums. Since one dozen equals 12 plums, the total number of plums is 6 × 12 = 72. She used all 72 plums to make 6 cobblers, so each cobbler contains 72 ÷ 6 = 12 plums. Each cobbler is cut into 7 pieces, so the number of plums in each slice is 12 ÷ 7 ≈ 1.7142857. This value is obtained by dividing the total plums by the total slices: 72 plums ÷ (6 cobblers × 7 slices/cobbler) = 72 ÷ 42 = 12/7.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mia bought 6 dozen plums and used them to make 6 plum cobblers. She cut each cobbler into 7 pieces. How many plums are in each slice of cobbler?\n    \"\"\"\n    dozens_of_plums = 6\n    plums_per_dozen = 12\n    total_plums = dozens_of_plums * plums_per_dozen\n    \n    num_cobblers = 6\n    slices_per_cobbler = 7\n    total_slices = num_cobblers * slices_per_cobbler\n    \n    plums_per_slice = total_plums / total_slices\n    \n    return plums_per_slice\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mia bought 6 dozen plums and used them to make 6 plum cobblers. She cut each cobbler into 7 pieces. How many plums are in each slice of cobbler?\n    \"\"\"\n    dozens_of_plums = 6\n    plums_per_dozen = 12\n    total_plums = dozens_of_plums * plums_per_dozen\n    \n    num_cobblers = 6\n    slices_per_cobbler = 7\n    total_slices = num_cobblers * slices_per_cobbler\n    \n    plums_per_slice = total_plums / total_slices\n    \n    return plums_per_slice",
    "result": 1.7142857142857142
  },
  {
    "index": 34,
    "response": "**Reasoning:**\n- Ginny starts with $25.00.\n- She spends $5.75 on a shirt, so subtract $5.75 from the initial amount: $25.00 - $5.75 = $19.25.\n- She then finds $4.50, so add $4.50 to the current amount: $19.25 + $4.50 = $23.75.\n- Later, she spends $2.25 on a snack, so subtract $2.25 from the current amount: $23.75 - $2.25 = $21.50.\n- The final amount Ginny has left is $21.50.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Ginny has $25.00. She spent $5.75 on a shirt and then found $4.50. Later, Ginny spent $2.25 on a snack. How much money does Ginny have left?\n    \"\"\"\n    initial_money = 25.00\n    shirt_cost = 5.75\n    found_money = 4.50\n    snack_cost = 2.25\n    \n    after_shirt = initial_money - shirt_cost\n    after_finding = after_shirt + found_money\n    after_snack = after_finding - snack_cost\n    \n    result = round(after_snack, 2)  # Round to 2 decimal places for currency\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Ginny has $25.00. She spent $5.75 on a shirt and then found $4.50. Later, Ginny spent $2.25 on a snack. How much money does Ginny have left?\n    \"\"\"\n    initial_money = 25.00\n    shirt_cost = 5.75\n    found_money = 4.50\n    snack_cost = 2.25\n    \n    after_shirt = initial_money - shirt_cost\n    after_finding = after_shirt + found_money\n    after_snack = after_finding - snack_cost\n    \n    result = round(after_snack, 2)  # Round to 2 decimal places for currency\n    return result",
    "result": 21.5
  },
  {
    "index": 35,
    "response": "**Reasoning:**\n1. Lucy has $720 and has six times as much money as Grace. Therefore, Grace has $720 / 6 = $120.\n2. Abby has twice as much money as Grace, so Abby has 2 * $120 = $240.\n3. To find how much more money Lucy has than Abby, subtract Abby's money from Lucy's: $720 - $240 = $480.\nAlternatively, since Lucy has 6 times Grace's money and Abby has 2 times Grace's money, the difference is (6 - 2) = 4 times Grace's money. With Grace having $120, 4 * $120 = $480.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Abby has twice as much money as Grace. Lucy has six times as much money as Grace. If Lucy has $720, how much more money does Lucy have than Abby?\n    \"\"\"\n    lucy_money = 720\n    # Lucy has 6 times Grace's money, so Grace's money is Lucy's divided by 6\n    grace_money = lucy_money / 6\n    # Abby has twice Grace's money\n    abby_money = 2 * grace_money\n    # Calculate the difference: Lucy's money minus Abby's money\n    difference = lucy_money - abby_money\n\n    return difference\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Abby has twice as much money as Grace. Lucy has six times as much money as Grace. If Lucy has $720, how much more money does Lucy have than Abby?\n    \"\"\"\n    lucy_money = 720\n    # Lucy has 6 times Grace's money, so Grace's money is Lucy's divided by 6\n    grace_money = lucy_money / 6\n    # Abby has twice Grace's money\n    abby_money = 2 * grace_money\n    # Calculate the difference: Lucy's money minus Abby's money\n    difference = lucy_money - abby_money\n\n    return difference",
    "result": 480.0
  },
  {
    "index": 36,
    "response": "**Reasoning:**\nJohn starts with 56 toy cars. He gives away 12, so we subtract 12 from the initial amount. Then he buys 24 more, so we add 24 to the result. The step-by-step calculation is:\n- Start: 56 cars\n- After giving away: 56 - 12 = 44 cars\n- After buying more: 44 + 24 = 68 cars\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John had 56 toy cars. After giving 12 toy cars to his friends and buying 24 more toy cars, how many toy cars does he have left?\n    \"\"\"\n    initial_cars = 56\n    given_away = 12\n    bought = 24\n    \n    after_giving = initial_cars - given_away\n    after_buying = after_giving + bought\n    \n    result = after_buying\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John had 56 toy cars. After giving 12 toy cars to his friends and buying 24 more toy cars, how many toy cars does he have left?\n    \"\"\"\n    initial_cars = 56\n    given_away = 12\n    bought = 24\n    \n    after_giving = initial_cars - given_away\n    after_buying = after_giving + bought\n    \n    result = after_buying\n    \n    return result",
    "result": 68
  },
  {
    "index": 37,
    "response": "**Reasoning:**\n- Peter invests $5000 at a simple annual interest rate of 8%.\n- Simple interest is calculated as \\( \\text{Interest} = \\text{Principal} \\times \\text{Rate} \\times \\text{Time} \\).\n- The principal is $5000.\n- The annual interest rate is 8%, which is 0.08 in decimal form.\n- The time period is 7 months. Since the interest rate is annual, convert months to years: \\( \\frac{7}{12} \\).\n- Calculate the interest: \\( 5000 \\times 0.08 \\times \\frac{7}{12} \\).\n- The total earnings are the interest earned, which is $233.333... or \\( \\frac{700}{3} \\).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Peter invested $5000 and received a simple annual interest rate of 8%. Calculate his total earnings after 7 months.\n    \"\"\"\n    principal = 5000\n    annual_interest_rate = 0.08  # 8% as a decimal\n    months = 7\n    time_in_years = months / 12  # Convert months to years\n    interest_earned = principal * annual_interest_rate * time_in_years\n    result = interest_earned\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Peter invested $5000 and received a simple annual interest rate of 8%. Calculate his total earnings after 7 months.\n    \"\"\"\n    principal = 5000\n    annual_interest_rate = 0.08  # 8% as a decimal\n    months = 7\n    time_in_years = months / 12  # Convert months to years\n    interest_earned = principal * annual_interest_rate * time_in_years\n    result = interest_earned\n\n    return result",
    "result": 233.33333333333334
  },
  {
    "index": 38,
    "response": "**Reasoning:**\n1. The bottle initially contains 1 liter of juice. Convert liters to milliliters: 1 liter = 1000 milliliters.\n2. He drank 250 milliliters, so subtract this from the initial amount: 1000 mL - 250 mL = 750 mL remaining.\n3. He then poured half of the remaining juice into a glass. Half of 750 mL is 375 mL, which is poured out.\n4. The juice left in the bottle is the remaining amount after pouring: 750 mL - 375 mL = 375 mL. Alternatively, since half was poured out, half remains: 750 mL / 2 = 375 mL.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    am has a bottle of juice that contains 1 liter. He drank 250 milliliters of juice and then poured half of the remaining juice into a glass. How many milliliters of juice are left in the bottle?\n    \"\"\"\n    initial_juice_ml = 1000  # Convert 1 liter to 1000 milliliters\n    drank_ml = 250\n    remaining_after_drink = initial_juice_ml - drank_ml\n    poured_out_ml = remaining_after_drink / 2\n    juice_left_ml = remaining_after_drink - poured_out_ml  # Alternatively: juice_left_ml = remaining_after_drink / 2\n    \n    return juice_left_ml\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    am has a bottle of juice that contains 1 liter. He drank 250 milliliters of juice and then poured half of the remaining juice into a glass. How many milliliters of juice are left in the bottle?\n    \"\"\"\n    initial_juice_ml = 1000  # Convert 1 liter to 1000 milliliters\n    drank_ml = 250\n    remaining_after_drink = initial_juice_ml - drank_ml\n    poured_out_ml = remaining_after_drink / 2\n    juice_left_ml = remaining_after_drink - poured_out_ml  # Alternatively: juice_left_ml = remaining_after_drink / 2\n    \n    return juice_left_ml",
    "result": 375.0
  },
  {
    "index": 39,
    "response": "**Reasoning:**\n1. Maria starts with 18 chocolates in her drawer.\n2. On Monday, she gave away 5 pieces: subtract 5 → 18 - 5 = 13\n3. The next day (Tuesday), she bought 4 chocolates and added them to the drawer: add 4 → 13 + 4 = 17\n4. Later, she gave away 2 pieces: subtract 2 → 17 - 2 = 15\n5. Finally, she took 3 chocolates home (meaning she added them to the drawer): add 3 → 15 + 3 = 18\n\nThe final count is 18 chocolates. The operations are performed sequentially: subtraction for giving away chocolates and addition for acquiring chocolates.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Maria has 18 pieces of chocolates in her drawer. On Monday, she gave away 5 pieces of chocolates and the next day she bought 4 chocolates from her friend. Later she gave away 2 pieces and took 3 chocolates home. How many pieces of chocolates does she have left in her drawer?\n    \"\"\"\n    initial_chocolates = 18\n    gave_away_monday = 5\n    bought_tuesday = 4\n    gave_away_later = 2\n    took_home = 3\n\n    after_monday = initial_chocolates - gave_away_monday\n    after_tuesday = after_monday + bought_tuesday\n    after_giving_later = after_tuesday - gave_away_later\n    final_count = after_giving_later + took_home\n\n    result = final_count\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Maria has 18 pieces of chocolates in her drawer. On Monday, she gave away 5 pieces of chocolates and the next day she bought 4 chocolates from her friend. Later she gave away 2 pieces and took 3 chocolates home. How many pieces of chocolates does she have left in her drawer?\n    \"\"\"\n    initial_chocolates = 18\n    gave_away_monday = 5\n    bought_tuesday = 4\n    gave_away_later = 2\n    took_home = 3\n\n    after_monday = initial_chocolates - gave_away_monday\n    after_tuesday = after_monday + bought_tuesday\n    after_giving_later = after_tuesday - gave_away_later\n    final_count = after_giving_later + took_home\n\n    result = final_count\n    return result",
    "result": 18
  },
  {
    "index": 40,
    "response": "**Reasoning:**\nTo solve this problem, we need to calculate the total number of petals collected by Emma and Fred. \n- Emma collected 15 roses (each with 5 petals) and 9 lilies (each with 6 petals). \n- Fred collected 12 tulips (each with 3 petals) and 6 sunflowers (each with 12 petals). \n\nSteps:\n1. Calculate petals from Emma's roses: 15 roses × 5 petals/rose = 75 petals.\n2. Calculate petals from Emma's lilies: 9 lilies × 6 petals/lily = 54 petals.\n3. Sum Emma's total petals: 75 + 54 = 129 petals.\n4. Calculate petals from Fred's tulips: 12 tulips × 3 petals/tulip = 36 petals.\n5. Calculate petals from Fred's sunflowers: 6 sunflowers × 12 petals/sunflower = 72 petals.\n6. Sum Fred's total petals: 36 + 72 = 108 petals.\n7. Combine both totals: 129 + 108 = 237 petals.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Emma and Fred went to the park to collect some flowers. Emma collected 15 roses and 9 lilies. Fred collected 12 tulips and 6 sunflowers. If each rose has 5 petals, each lily has 6 petals, each tulip has 3 petals, and each sunflower has 12 petals, how many petals did they collect in total?\n    \"\"\"\n    # Emma's flowers\n    roses_count = 15\n    roses_petals_per_flower = 5\n    lilies_count = 9\n    lilies_petals_per_flower = 6\n    \n    # Fred's flowers\n    tulips_count = 12\n    tulips_petals_per_flower = 3\n    sunflowers_count = 6\n    sunflowers_petals_per_flower = 12\n    \n    # Calculate Emma's total petals\n    emma_roses_petals = roses_count * roses_petals_per_flower\n    emma_lilies_petals = lilies_count * lilies_petals_per_flower\n    emma_total = emma_roses_petals + emma_lilies_petals\n    \n    # Calculate Fred's total petals\n    fred_tulips_petals = tulips_count * tulips_petals_per_flower\n    fred_sunflowers_petals = sunflowers_count * sunflowers_petals_per_flower\n    fred_total = fred_tulips_petals + fred_sunflowers_petals\n    \n    # Calculate combined total petals\n    total_petals = emma_total + fred_total\n    \n    return total_petals\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Emma and Fred went to the park to collect some flowers. Emma collected 15 roses and 9 lilies. Fred collected 12 tulips and 6 sunflowers. If each rose has 5 petals, each lily has 6 petals, each tulip has 3 petals, and each sunflower has 12 petals, how many petals did they collect in total?\n    \"\"\"\n    # Emma's flowers\n    roses_count = 15\n    roses_petals_per_flower = 5\n    lilies_count = 9\n    lilies_petals_per_flower = 6\n    \n    # Fred's flowers\n    tulips_count = 12\n    tulips_petals_per_flower = 3\n    sunflowers_count = 6\n    sunflowers_petals_per_flower = 12\n    \n    # Calculate Emma's total petals\n    emma_roses_petals = roses_count * roses_petals_per_flower\n    emma_lilies_petals = lilies_count * lilies_petals_per_flower\n    emma_total = emma_roses_petals + emma_lilies_petals\n    \n    # Calculate Fred's total petals\n    fred_tulips_petals = tulips_count * tulips_petals_per_flower\n    fred_sunflowers_petals = sunflowers_count * sunflowers_petals_per_flower\n    fred_total = fred_tulips_petals + fred_sunflowers_petals\n    \n    # Calculate combined total petals\n    total_petals = emma_total + fred_total\n    \n    return total_petals",
    "result": 237
  },
  {
    "index": 41,
    "response": "**Reasoning:**  \nTo solve this problem, we need to determine the number of medium hammers sold. Let's define variables based on the given relationships:  \n- Let \\( m \\) be the number of medium hammers.  \n- Since there are twice as many small hammers as medium, small hammers = \\( 2m \\).  \n- Large hammers sold are 50 more than small hammers, so large hammers = \\( 2m + 50 \\).  \n- The total number of hammers sold is 500, so:  \n  \\[\n  \\text{small} + \\text{medium} + \\text{large} = 500\n  \\]  \n  Substituting the expressions:  \n  \\[\n  2m + m + (2m + 50) = 500\n  \\]  \n  Simplify:  \n  \\[\n  5m + 50 = 500\n  \\]  \n  Subtract 50 from both sides:  \n  \\[\n  5m = 450\n  \\]  \n  Divide by 5:  \n  \\[\n  m = 90\n  \\]  \nThus, 90 medium hammers were sold. Verification:  \n- Small: \\( 2 \\times 90 = 180 \\)  \n- Large: \\( 180 + 50 = 230 \\)  \n- Total: \\( 180 + 90 + 230 = 500 \\) (correct).  \n\n**Solution:**  \n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A hardware store sells hammers in 3 different sizes: small, medium, and large. There are twice as many small hammers sold as medium hammers. There are also 50 more large hammers sold than small hammers. If the store sold a total of 500 hammers, how many medium hammers were sold?\n    \"\"\"\n    # Let m represent the number of medium hammers\n    # Small hammers: 2 * m\n    # Large hammers: 2 * m + 50\n    # Total: 2m + m + (2m + 50) = 500\n    # Simplify: 5m + 50 = 500\n    # Then: 5m = 450\n    # m = 90\n    total_hammers = 500\n    # Equation: 5m + 50 = 500 -> m = (500 - 50) / 5\n    medium_hammers = (total_hammers - 50) / 5\n    result = medium_hammers  # This is 90.0, but the problem expects a count (integer), though float is acceptable per type hint\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A hardware store sells hammers in 3 different sizes: small, medium, and large. There are twice as many small hammers sold as medium hammers. There are also 50 more large hammers sold than small hammers. If the store sold a total of 500 hammers, how many medium hammers were sold?\n    \"\"\"\n    # Let m represent the number of medium hammers\n    # Small hammers: 2 * m\n    # Large hammers: 2 * m + 50\n    # Total: 2m + m + (2m + 50) = 500\n    # Simplify: 5m + 50 = 500\n    # Then: 5m = 450\n    # m = 90\n    total_hammers = 500\n    # Equation: 5m + 50 = 500 -> m = (500 - 50) / 5\n    medium_hammers = (total_hammers - 50) / 5\n    result = medium_hammers  # This is 90.0, but the problem expects a count (integer), though float is acceptable per type hint\n\n    return result",
    "result": 90.0
  },
  {
    "index": 42,
    "response": "**Reasoning:**\nThe problem states that the probability of winning is 45%, and there are 120 players. To find the number of players expected to win, multiply the total number of players by the probability (expressed as a decimal). \n\nStep-by-step:\n1. Convert the percentage to a decimal: 45% = 45 / 100 = 0.45\n2. Multiply the decimal probability by the number of players: 0.45 × 120\n3. Calculate the result: 0.45 × 120 = 54.0\n\nSince 54.0 is a whole number, it represents exactly 54 players. The function returns this as a float since the problem involves probability and the return type is specified as float.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If the probability of winning a game is 45%, and there are 120 players, how many players will win the game?\n    \"\"\"\n    probability_percent = 45\n    total_players = 120\n    win_probability = probability_percent / 100.0\n    winners = win_probability * total_players\n    result = winners\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If the probability of winning a game is 45%, and there are 120 players, how many players will win the game?\n    \"\"\"\n    probability_percent = 45\n    total_players = 120\n    win_probability = probability_percent / 100.0\n    winners = win_probability * total_players\n    result = winners\n\n    return result",
    "result": 54.0
  },
  {
    "index": 43,
    "response": "**Reasoning:**\n- The bucket initially contains 3 liters of water.\n- An additional 1 1/2 liters of water is added. Since 1 1/2 is equivalent to 1.5 liters, this can be represented as a decimal.\n- To find the total water, add the initial amount (3 liters) to the additional amount (1.5 liters): 3 + 1.5 = 4.5 liters.\n- The result is a straightforward sum of two numerical values.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Joe filled a bucket with 3 liters of water and then added 1 1/2 liters of additional water. How many liters of water does the bucket have now?\n    \"\"\"\n    initial_water = 3.0  # liters\n    additional_water = 1.5  # liters (since 1 1/2 = 1.5)\n    total_water = initial_water + additional_water\n    result = total_water\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Joe filled a bucket with 3 liters of water and then added 1 1/2 liters of additional water. How many liters of water does the bucket have now?\n    \"\"\"\n    initial_water = 3.0  # liters\n    additional_water = 1.5  # liters (since 1 1/2 = 1.5)\n    total_water = initial_water + additional_water\n    result = total_water\n    \n    return result",
    "result": 4.5
  },
  {
    "index": 44,
    "response": "**Reasoning:**\nThe problem involves calculating the total cost for renting a car based on a daily rate and a per-mile rate. The customer rented the car for 3 days at $40 per day and drove 150 miles at $0.25 per mile. \n\nStep 1: Calculate the cost for the rental days.  \n3 days × $40/day = $120.\n\nStep 2: Calculate the cost for the miles driven.  \n150 miles × $0.25/mile = $37.50.\n\nStep 3: Add the two costs together to get the total.  \n$120 + $37.50 = $157.50.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car rental company charges $40 per day plus $0.25 per mile for renting a car. A customer rented a car for 3 days and drove 150 miles. How much did the customer pay in total?\n    \"\"\"\n    daily_rate = 40.0\n    per_mile_rate = 0.25\n    days_rented = 3\n    miles_driven = 150\n\n    total_days_cost = days_rented * daily_rate\n    total_miles_cost = miles_driven * per_mile_rate\n    total_cost = total_days_cost + total_miles_cost\n\n    return total_cost\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car rental company charges $40 per day plus $0.25 per mile for renting a car. A customer rented a car for 3 days and drove 150 miles. How much did the customer pay in total?\n    \"\"\"\n    daily_rate = 40.0\n    per_mile_rate = 0.25\n    days_rented = 3\n    miles_driven = 150\n\n    total_days_cost = days_rented * daily_rate\n    total_miles_cost = miles_driven * per_mile_rate\n    total_cost = total_days_cost + total_miles_cost\n\n    return total_cost",
    "result": 157.5
  },
  {
    "index": 45,
    "response": "**Reasoning:**\nThe problem states that John starts with 8 cartons of currants and 5 cartons of apricots. He then buys an additional 12 cartons of berries specifically for the fruit salad. To find the total number of cartons needed for the fruit salad, we add all the cartons together:  \n- Currants: 8 cartons  \n- Apricots: 5 cartons  \n- Berries: 12 cartons  \nThe calculation is: \\(8 + 5 + 12 = 25\\).  \nThus, John needs 25 cartons in total for the fruit salad.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John has 8 cartons of currants and 5 cartons of apricots. To make a fruit salad, he decides to buy another 12 cartons of berries. How many cartons will he need for the fruit salad?\n    \"\"\"\n    currants_cartons = 8\n    apricots_cartons = 5\n    berries_cartons = 12\n    \n    total_cartons = currants_cartons + apricots_cartons + berries_cartons\n    result = float(total_cartons)\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John has 8 cartons of currants and 5 cartons of apricots. To make a fruit salad, he decides to buy another 12 cartons of berries. How many cartons will he need for the fruit salad?\n    \"\"\"\n    currants_cartons = 8\n    apricots_cartons = 5\n    berries_cartons = 12\n    \n    total_cartons = currants_cartons + apricots_cartons + berries_cartons\n    result = float(total_cartons)\n    \n    return result",
    "result": 25.0
  },
  {
    "index": 46,
    "response": "**Reasoning:**\n- Greg has 75 lollipops to share equally among 4 people (including himself).\n- Since the sharing is equal, we divide the total lollipops by the number of people: 75 ÷ 4.\n- This division results in 18.75, meaning each person gets 18 whole lollipops and a quarter of another lollipop.\n- The problem does not specify that lollipops must remain whole, so fractional lollipops are acceptable in this context.\n- Thus, each person gets exactly 18.75 lollipops.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Greg had 75 lollipops. He shared the lollipops among 4 people, including himself. How many lollipops did each person get?\n    \"\"\"\n    total_lollipops = 75\n    num_people = 4\n    per_person = total_lollipops / num_people\n    return per_person\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Greg had 75 lollipops. He shared the lollipops among 4 people, including himself. How many lollipops did each person get?\n    \"\"\"\n    total_lollipops = 75\n    num_people = 4\n    per_person = total_lollipops / num_people\n    return per_person",
    "result": 18.75
  },
  {
    "index": 47,
    "response": "**Reasoning:**\n- The problem states that 4 balloons were released into the sky every hour for 6 hours, resulting in a total of 74 balloons.\n- This means that over 6 hours, \\(6 \\times 4 = 24\\) balloons were added.\n- To find the original number of balloons, subtract the added balloons from the final count: \\(74 - 24 = 50\\).\n- Verification: Starting with 50 balloons, adding 4 per hour for 6 hours gives \\(50 + (4 \\times 6) = 50 + 24 = 74\\), which matches.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    There were some balloons in the sky at first. Then 4 balloons were released into the sky every hour for 6 hours. If there were 74 balloons in the sky after that, how many balloons were in the sky originally?\n    \"\"\"\n    balloons_added = 4 * 6  # Total balloons added over 6 hours\n    final_balloons = 74\n    original_balloons = final_balloons - balloons_added  # Calculate original count\n    \n    return original_balloons\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There were some balloons in the sky at first. Then 4 balloons were released into the sky every hour for 6 hours. If there were 74 balloons in the sky after that, how many balloons were in the sky originally?\n    \"\"\"\n    balloons_added = 4 * 6  # Total balloons added over 6 hours\n    final_balloons = 74\n    original_balloons = final_balloons - balloons_added  # Calculate original count\n    \n    return original_balloons",
    "result": 50
  },
  {
    "index": 48,
    "response": "**Reasoning:**\n- The store sells ice cream at $5 per scoop.\n- Tom spends a total of $20.\n- To find the number of scoops, divide the total amount spent by the cost per scoop:  \n  **Number of scoops = Total money / Cost per scoop = $20 / $5 per scoop = 4 scoops**.\n- This is a straightforward division problem where both values are provided directly in the problem.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A store sells ice cream for $5 per scoop. If Tom spends $20, how many scoops of ice cream can he get?\n    \"\"\"\n    cost_per_scoop = 5  # dollars per scoop\n    total_money_spent = 20  # dollars\n    number_of_scoops = total_money_spent / cost_per_scoop\n    result = number_of_scoops\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A store sells ice cream for $5 per scoop. If Tom spends $20, how many scoops of ice cream can he get?\n    \"\"\"\n    cost_per_scoop = 5  # dollars per scoop\n    total_money_spent = 20  # dollars\n    number_of_scoops = total_money_spent / cost_per_scoop\n    result = number_of_scoops\n    \n    return result",
    "result": 4.0
  },
  {
    "index": 49,
    "response": "**Reasoning:**\n- The phone company charges a flat fee of $20 per month plus $0.05 per minute of usage.\n- The total bill for the month is $32.\n- To find the minutes used, subtract the flat fee from the total bill: $32 - $20 = $12.\n- This $12 represents the cost from usage. Since each minute costs $0.05, divide the usage cost by the per-minute rate: $12 / $0.05 = 240 minutes.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A phone company charges a flat fee of $20 per month and $0.05 per minute of usage. If a customer receives a phone bill of $32, how many minutes did they use their phone in that month?\n    \"\"\"\n    flat_fee = 20.0\n    total_bill = 32.0\n    cost_per_minute = 0.05\n    \n    # Calculate the cost from usage only\n    usage_cost = total_bill - flat_fee\n    \n    # Calculate minutes used\n    minutes_used = usage_cost / cost_per_minute\n    \n    result = minutes_used\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A phone company charges a flat fee of $20 per month and $0.05 per minute of usage. If a customer receives a phone bill of $32, how many minutes did they use their phone in that month?\n    \"\"\"\n    flat_fee = 20.0\n    total_bill = 32.0\n    cost_per_minute = 0.05\n    \n    # Calculate the cost from usage only\n    usage_cost = total_bill - flat_fee\n    \n    # Calculate minutes used\n    minutes_used = usage_cost / cost_per_minute\n    \n    result = minutes_used\n    return result",
    "result": 240.0
  },
  {
    "index": 50,
    "response": "**Reasoning:**\n1. The band makes $550 from the concert.\n2. The sound engineer charges $60, which must be subtracted from the total earnings.\n3. After paying the sound engineer, the remaining amount is $550 - $60 = $490.\n4. This remaining amount ($490) must be split equally among 5 band members.\n5. Each member gets $490 / 5 = $98.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If the band makes $550 from a concert and the sound engineer charges $60, how much money is left for the band members to split among themselves if there are 5 members?\n    \"\"\"\n    total_earnings = 550\n    sound_engineer_charge = 60\n    num_members = 5\n    \n    money_after_charge = total_earnings - sound_engineer_charge\n    per_member_share = money_after_charge / num_members\n    \n    result = per_member_share\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If the band makes $550 from a concert and the sound engineer charges $60, how much money is left for the band members to split among themselves if there are 5 members?\n    \"\"\"\n    total_earnings = 550\n    sound_engineer_charge = 60\n    num_members = 5\n    \n    money_after_charge = total_earnings - sound_engineer_charge\n    per_member_share = money_after_charge / num_members\n    \n    result = per_member_share\n    return result",
    "result": 98.0
  },
  {
    "index": 51,
    "response": "**Reasoning:**\n- We need to calculate the total number of flowers required for both large and small centerpieces.\n- There are 4 large centerpieces, each requiring 20 flowers. So, the total for large centerpieces is 4 × 20 = 80 flowers.\n- There are 12 small centerpieces, each requiring 10 flowers. So, the total for small centerpieces is 12 × 10 = 120 flowers.\n- The overall total is the sum of these two values: 80 + 120 = 200 flowers.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mr. Jackson is making centerpieces for a wedding. He needs to make 4 large centerpieces and 12 small centerpieces. The large centerpieces require 20 flowers each and the small centerpieces require 10 flowers each. How many flowers in total does he need?\n    \"\"\"\n    num_large = 4\n    flowers_per_large = 20\n    num_small = 12\n    flowers_per_small = 10\n    \n    total_large = num_large * flowers_per_large\n    total_small = num_small * flowers_per_small\n    result = total_large + total_small\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mr. Jackson is making centerpieces for a wedding. He needs to make 4 large centerpieces and 12 small centerpieces. The large centerpieces require 20 flowers each and the small centerpieces require 10 flowers each. How many flowers in total does he need?\n    \"\"\"\n    num_large = 4\n    flowers_per_large = 20\n    num_small = 12\n    flowers_per_small = 10\n    \n    total_large = num_large * flowers_per_large\n    total_small = num_small * flowers_per_small\n    result = total_large + total_small\n    \n    return result",
    "result": 200
  },
  {
    "index": 52,
    "response": "**Reasoning:**\nLinda has 3 cups of flour in total. Each batch of cookies requires 0.25 cups of flour. She has already baked 4 batches. \n\n1. **Calculate flour used for baked batches:**  \n   Flour used = 4 batches × 0.25 cups/batch = 1.0 cup.  \n2. **Calculate remaining flour:**  \n   Remaining flour = Total flour - Flour used = 3 cups - 1.0 cup = 2.0 cups.  \n3. **Calculate additional batches possible:**  \n   Additional batches = Remaining flour ÷ Flour per batch = 2.0 cups ÷ 0.25 cups/batch = 8 batches.  \n\nSince the flour amounts (3 and 0.25) are divisible, the result is a whole number. She can bake 8 more batches.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Linda is baking cookies. She has 3 cups of flour and she needs 0.25 cups of flour for each batch of cookies. If she has already baked 4 batches of cookies, how many more batches can she bake before she runs out of flour?\n    \"\"\"\n    total_flour_cups = 3.0\n    flour_per_batch_cups = 0.25\n    batches_already_baked = 4\n    \n    flour_used = batches_already_baked * flour_per_batch_cups\n    remaining_flour = total_flour_cups - flour_used\n    additional_batches = remaining_flour / flour_per_batch_cups\n    \n    result = additional_batches\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Linda is baking cookies. She has 3 cups of flour and she needs 0.25 cups of flour for each batch of cookies. If she has already baked 4 batches of cookies, how many more batches can she bake before she runs out of flour?\n    \"\"\"\n    total_flour_cups = 3.0\n    flour_per_batch_cups = 0.25\n    batches_already_baked = 4\n    \n    flour_used = batches_already_baked * flour_per_batch_cups\n    remaining_flour = total_flour_cups - flour_used\n    additional_batches = remaining_flour / flour_per_batch_cups\n    \n    result = additional_batches\n    return result",
    "result": 8.0
  },
  {
    "index": 53,
    "response": "**Reasoning:**\nThe problem states that David has 15 marbles and Jennifer has 10 marbles. To find the total number of marbles when combined, we add David's marbles to Jennifer's marbles. The calculation is straightforward: 15 + 10 = 25. Since the function signature requires a float return type, the integer result will be converted to a float (25.0) before returning.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    David has 15 marbles and Jennifer has 10 marbles. If they combine their marbles together, how many marbles do they have in total?\n    \"\"\"\n    david_marbles = 15.0  # David's marbles as float\n    jennifer_marbles = 10.0  # Jennifer's marbles as float\n    total_marbles = david_marbles + jennifer_marbles  # Sum the marbles\n    result = total_marbles  # Total marbles stored in result\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    David has 15 marbles and Jennifer has 10 marbles. If they combine their marbles together, how many marbles do they have in total?\n    \"\"\"\n    david_marbles = 15.0  # David's marbles as float\n    jennifer_marbles = 10.0  # Jennifer's marbles as float\n    total_marbles = david_marbles + jennifer_marbles  # Sum the marbles\n    result = total_marbles  # Total marbles stored in result\n    \n    return result",
    "result": 25.0
  },
  {
    "index": 54,
    "response": "**Reasoning:**\nLet Leo's height be \\( h \\) feet. According to the problem:\n- The highest point he reached is \\( 6h + 200 \\) feet.\n- The lowest point he reached is \\( h + 100 \\) feet.\n- The lowest point is 400 feet below the highest point, so the difference is \\( (6h + 200) - (h + 100) = 400 \\).\n\nSet up the equation:  \n\\( (6h + 200) - (h + 100) = 400 \\)  \n\nSimplify:  \n\\( 6h + 200 - h - 100 = 400 \\)  \n\\( 5h + 100 = 400 \\)  \n\nSolve for \\( h \\):  \n\\( 5h = 400 - 100 \\)  \n\\( 5h = 300 \\)  \n\\( h = 60 \\)  \n\nVerification:  \n- Highest point: \\( 6 \\times 60 + 200 = 560 \\) feet  \n- Lowest point: \\( 60 + 100 = 160 \\) feet  \n- Difference: \\( 560 - 160 = 400 \\) feet (matches given condition).  \n\nThus, Leo is 60 feet tall.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Leo is a climber. He climbed a mountain and the highest point he reached was six times his height plus 200 feet. \n    The lowest point he reached was 100 feet higher than his height. The lowest point was 400 feet below the highest point. \n    How tall is Leo?\n    \"\"\"\n    # The difference between highest and lowest points is 400 feet\n    # highest = 6 * height + 200\n    # lowest = height + 100\n    # Equation: (6 * height + 200) - (height + 100) = 400\n    # Simplify: 5 * height + 100 = 400\n    # Solve: 5 * height = 300 -> height = 60\n    height = 300 / 5\n    return height\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Leo is a climber. He climbed a mountain and the highest point he reached was six times his height plus 200 feet. \n    The lowest point he reached was 100 feet higher than his height. The lowest point was 400 feet below the highest point. \n    How tall is Leo?\n    \"\"\"\n    # The difference between highest and lowest points is 400 feet\n    # highest = 6 * height + 200\n    # lowest = height + 100\n    # Equation: (6 * height + 200) - (height + 100) = 400\n    # Simplify: 5 * height + 100 = 400\n    # Solve: 5 * height = 300 -> height = 60\n    height = 300 / 5\n    return height",
    "result": 60.0
  },
  {
    "index": 55,
    "response": "**Reasoning:**\nThe problem states there are 25 students in a class with a boy-to-girl ratio of 3:4. This means for every 3 boys, there are 4 girls. The total number of ratio parts is 3 + 4 = 7. To find the number of boys, calculate the fraction of the total students that are boys: (3 parts boys) / (7 total parts) multiplied by 25 students.\n\nThe exact calculation is:\n- Boys = (3/7) × 25 = 75/7 ≈ 10.714285714285714\n\nSince the number of boys must be a whole number in reality, the fractional result indicates the ratio cannot be exactly 3:4 with 25 students. However, the problem asks for the exact mathematical solution based on the given ratio and total, so we compute and return the fractional value as a float.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A class has",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A class has",
    "result": "Error:   File \"/tmp/tmpnvv0re1m.py\", line 2\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 3)\n"
  },
  {
    "index": 56,
    "response": "**Reasoning:**\nTo solve this problem, we need to calculate the weekly earnings for both Olivia and Samantha, then find the absolute difference between them. \n\n1. **Olivia's weekly earnings:**\n   - Hours worked: 35 hours/week\n   - Hourly rate: $15/hour\n   - Calculation: 35 hours × $15/hour = $525\n\n2. **Samantha's weekly earnings:**\n   - Hours worked: 45 hours/week\n   - Hourly rate: $18/hour\n   - Calculation: 45 hours × $18/hour = $810\n\n3. **Difference in earnings:**\n   - Subtract Olivia's earnings from Samantha's: $810 - $525 = $285\n   - Since the problem asks for the \"difference,\" we take the absolute value (Samantha earns more).\n\nThe difference in their weekly earnings is $285.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Olivia works 35 hours a week and earns $15 per hour. If her sister Samantha works 45 hours a week and earns $18 per hour, what is the difference in their weekly earnings?\n    \"\"\"\n    # Olivia's weekly earnings\n    olivia_hours = 35\n    olivia_rate = 15\n    olivia_earnings = olivia_hours * olivia_rate\n\n    # Samantha's weekly earnings\n    samantha_hours = 45\n    samantha_rate = 18\n    samantha_earnings = samantha_hours * samantha_rate\n\n    # Calculate the absolute difference\n    difference = abs(samantha_earnings - olivia_earnings)\n\n    return difference\n\n# Test the function\nprint(simple_math_problem())  # Output: 285.0\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Olivia works 35 hours a week and earns $15 per hour. If her sister Samantha works 45 hours a week and earns $18 per hour, what is the difference in their weekly earnings?\n    \"\"\"\n    # Olivia's weekly earnings\n    olivia_hours = 35\n    olivia_rate = 15\n    olivia_earnings = olivia_hours * olivia_rate\n\n    # Samantha's weekly earnings\n    samantha_hours = 45\n    samantha_rate = 18\n    samantha_earnings = samantha_hours * samantha_rate\n\n    # Calculate the absolute difference\n    difference = abs(samantha_earnings - olivia_earnings)\n\n    return difference\n\n# Test the function\nprint(simple_math_problem())  # Output: 285.0",
    "result": 285
  },
  {
    "index": 57,
    "response": "**Reasoning:**  \nThe problem states three key relationships:  \n1. Jack is eight times as old as Lily.  \n2. Jack is one-seventh as old as Olivia.  \n3. Olivia is 77 years old.  \n\nFirst, calculate Jack's age using Olivia's age:  \nJack = Olivia × (1/7) = 77 × (1/7) = 11 years.  \n\nNext, determine Lily's age using Jack's age:  \nJack = 8 × Lily ⇒ Lily = Jack / 8 = 11 / 8 = 1.375 years.  \n\nFinally, compute the average age of Jack and Lily:  \nAverage = (Jack + Lily) / 2 = (11 + 1.375) / 2 = 12.375 / 2 = 6.1875 years.  \n\n**Solution:**  \n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jack is eight times as old as Lily and one-seventh as old as Olivia. If Olivia is 77 years old, what is the average age of Jack and Lily?\n    \"\"\"\n    olivia_age = 77\n    jack_age = olivia_age / 7\n    lily_age = jack_age / 8\n    average_age = (jack_age + lily_age) / 2\n    result = average_age\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jack is eight times as old as Lily and one-seventh as old as Olivia. If Olivia is 77 years old, what is the average age of Jack and Lily?\n    \"\"\"\n    olivia_age = 77\n    jack_age = olivia_age / 7\n    lily_age = jack_age / 8\n    average_age = (jack_age + lily_age) / 2\n    result = average_age\n    return result",
    "result": 6.1875
  },
  {
    "index": 58,
    "response": "**Reasoning:**\nThe problem states that Emily has three times as many dogs as there are people in her family, and she has two chihuahuas. We need to find how many golden retrievers she has. Let \\( P \\) represent the number of people in her family. The total number of dogs is then \\( 3P \\). Since she has two chihuahuas, the number of golden retrievers \\( G \\) satisfies:\n\\[\n3P = 2 + G\n\\]\nSolving for \\( G \\):\n\\[\nG = 3P - 2\n\\]\n\\( G \\) must be a non-negative integer, and \\( P \\) must be a positive integer (since a family must have at least one person). The smallest possible value for \\( P \\) is 1, giving:\n\\[\nG = 3 \\times 1 - 2 = 1\n\\]\nThis is valid: with 1 person in the family, there are 3 dogs total, 2 chihuahuas, and thus 1 golden retriever. Larger family sizes would also work but are not necessary since the problem doesn't specify further. Therefore, the solution is 1 golden retriever.\n\n**Solution:**\n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Emily has three times as many dogs as there are people in her family. She has two chihuahuas. How many golden retrievers does she have?\n    \"\"\"\n    # Let P be the number of people in the family. The total dogs are 3P.\n    # She has 2 chihuahuas, so the golden retrievers G = 3P - 2.\n    # The smallest valid P is 1 (family size must be at least 1).\n    P = 1\n    golden_retrievers = 3 * P - 2\n    \n    return golden_retrievers\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Emily has three times as many dogs as there are people in her family. She has two chihuahuas. How many golden retrievers does she have?\n    \"\"\"\n    # Let P be the number of people in the family. The total dogs are 3P.\n    # She has 2 chihuahuas, so the golden retrievers G = 3P - 2.\n    # The smallest valid P is 1 (family size must be at least 1).\n    P = 1\n    golden_retrievers = 3 * P - 2\n    \n    return golden_retrievers",
    "result": 1
  },
  {
    "index": 59,
    "response": "**Reasoning:**  \nThe problem states that it takes 22 hours for the group to paint the entire building. The workers work for 11 hours per day over three days, totaling 33 hours. Since 33 hours exceed the required 22 hours, the job is completed before the end of the three days. Specifically, the building is fully painted after 22 hours, which occurs at the end of the second day (11 hours/day × 2 days = 22 hours). The third day's work is extra and not needed for this job. Therefore, no additional hours are required to finish the job after the three days.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    It takes a group of workers 22 hours to paint a building. If they work for 11 hours three days in a row, how many more hours will they need to finish the job?\n    \"\"\"\n    total_hours_required = 22.0\n    daily_hours = 11.0\n    days_worked = 3\n    \n    total_hours_worked = daily_hours * days_worked\n    remaining_hours = max(0.0, total_hours_required - total_hours_worked)\n    \n    return remaining_hours\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    It takes a group of workers 22 hours to paint a building. If they work for 11 hours three days in a row, how many more hours will they need to finish the job?\n    \"\"\"\n    total_hours_required = 22.0\n    daily_hours = 11.0\n    days_worked = 3\n    \n    total_hours_worked = daily_hours * days_worked\n    remaining_hours = max(0.0, total_hours_required - total_hours_worked)\n    \n    return remaining_hours",
    "result": 0.0
  },
  {
    "index": 60,
    "response": "**Reasoning:**\nThe problem states that Acey has 267 cupcakes and wants to split them equally among her friends. However, the number of friends is not specified. Without knowing how many friends there are, it's impossible to calculate the exact number of cupcakes each friend would get. The problem requires a numerical answer, but due to the missing information, the result is undefined. Therefore, the solution must indicate that the calculation cannot be performed with the given information.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    acey has 267 cupcakes and wants to split them equally among her friends. How many cupcakes will each of her friends get?\n    \"\"\"\n    total_cupcakes = 267\n    # The number of friends is not provided, so the result is undefined\n    result = float('nan')  # NaN represents \"Not a Number\" for undefined results\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    acey has 267 cupcakes and wants to split them equally among her friends. How many cupcakes will each of her friends get?\n    \"\"\"\n    total_cupcakes = 267\n    # The number of friends is not provided, so the result is undefined\n    result = float('nan')  # NaN represents \"Not a Number\" for undefined results\n    \n    return result",
    "result": NaN
  },
  {
    "index": 61,
    "response": "**Reasoning:**\nThe grasshopper jumps for 5 days with the following rules:\n- Day 1: 20 inches.\n- Day 2: 5 inches less than the previous day (Day 1), so 20 - 5 = 15 inches.\n- Day 3: 3 inches higher than the day before yesterday (which is Day 1), so 20 + 3 = 23 inches.\n- For subsequent days, the pattern continues:\n  - Day 4: 5 inches less than the previous day (Day 3), so 23 - 5 = 18 inches.\n  - Day 5: 3 inches higher than the day before yesterday (which is Day 3), so 23 + 3 = 26 inches.\n\nThe jumps per day are:\n- Day 1: 20 inches\n- Day 2: 15 inches\n- Day 3: 23 inches\n- Day 4: 18 inches\n- Day 5: 26 inches\n\nTotal distance = 20 + 15 + 23 + 18 + 26 = 102 inches.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A grasshopper is jumping every day. On the first day, it jumped 20 inches, on the second day, 5 inches less than the day before, and on the third day, 3 inches higher than the day before yesterday. The grasshopper jumped for 5 days. What was the total distance covered by the grasshopper in those 5 days?\n    \"\"\"\n    # Initialize a list to store the jump distances for each day\n    jumps = [0] * 5\n\n    # Day 1: 20 inches\n    jumps[0] = 20\n\n    # Calculate jumps for days 2 to 5\n    for day in range(2, 6):  # day represents the day number (1-indexed)\n        if day % 2 == 0:  # Even days (like day 2 and 4)\n            # Subtract 5 from the previous day's jump\n            jumps[day - 1] = jumps[day - 2] - 5\n        else:  # Odd days (like day 3 and 5)\n            # Add 3 to the jump from two days prior (day before yesterday)\n            jumps[day - 1] = jumps[day - 3] + 3\n\n    # Sum all jumps for the total distance\n    total_distance = sum(jumps)\n    return float(total_distance)\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A grasshopper is jumping every day. On the first day, it jumped 20 inches, on the second day, 5 inches less than the day before, and on the third day, 3 inches higher than the day before yesterday. The grasshopper jumped for 5 days. What was the total distance covered by the grasshopper in those 5 days?\n    \"\"\"\n    # Initialize a list to store the jump distances for each day\n    jumps = [0] * 5\n\n    # Day 1: 20 inches\n    jumps[0] = 20\n\n    # Calculate jumps for days 2 to 5\n    for day in range(2, 6):  # day represents the day number (1-indexed)\n        if day % 2 == 0:  # Even days (like day 2 and 4)\n            # Subtract 5 from the previous day's jump\n            jumps[day - 1] = jumps[day - 2] - 5\n        else:  # Odd days (like day 3 and 5)\n            # Add 3 to the jump from two days prior (day before yesterday)\n            jumps[day - 1] = jumps[day - 3] + 3\n\n    # Sum all jumps for the total distance\n    total_distance = sum(jumps)\n    return float(total_distance)",
    "result": 102.0
  },
  {
    "index": 62,
    "response": "**Reasoning:**\n1. Ethan has $12.\n2. Mason has five times Ethan's money: Mason = 5 × 12 = $60.\n3. Mason also has twice Landon's money, so Landon's money is Mason divided by 2: Landon = 60 / 2 = $30.\n4. Total money they have: Ethan ($12) + Mason ($60) + Landon ($30) = $102.\n5. The coin costs $230, so the additional money needed is: 230 - 102 = $128.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Landon, Mason, and Ethan have a common coin collection. A coin dealer is offering a valuable coin for $230. The three of them decide to combine their money to buy it. Ethan has $12, Mason has five times Ethan’s money, but twice Landon’s money. How much more money do they need to buy the valuable coin?\n    \"\"\"\n    ethan_money = 12\n    mason_money = 5 * ethan_money\n    landon_money = mason_money / 2\n    total_money = ethan_money + mason_money + landon_money\n    coin_cost = 230\n    additional_needed = coin_cost - total_money\n    result = additional_needed\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Landon, Mason, and Ethan have a common coin collection. A coin dealer is offering a valuable coin for $230. The three of them decide to combine their money to buy it. Ethan has $12, Mason has five times Ethan’s money, but twice Landon’s money. How much more money do they need to buy the valuable coin?\n    \"\"\"\n    ethan_money = 12\n    mason_money = 5 * ethan_money\n    landon_money = mason_money / 2\n    total_money = ethan_money + mason_money + landon_money\n    coin_cost = 230\n    additional_needed = coin_cost - total_money\n    result = additional_needed\n\n    return result",
    "result": 128.0
  },
  {
    "index": 63,
    "response": "**Reasoning:**\nTo solve this problem, we need to calculate the total volume of jam in liters that a store has. The store has 50 jars of jam, and each jar contains 750 ml of jam. \n\n1. **Calculate total jam in milliliters**:  \n   Multiply the number of jars by the volume per jar:  \n   \\(50 \\times 750 = 37,500\\) ml.\n\n2. **Convert milliliters to liters**:  \n   Since 1 liter = 1000 ml, divide the total milliliters by 1000:  \n   \\(37,500 \\div 1000 = 37.5\\) liters.\n\nThus, the store has 37.5 liters of jam.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    There are 50 jars of jam and each jar contains 750ml of jam. How many litres of jam does the store have?\n    \"\"\"\n    number_of_jars = 50\n    ml_per_jar = 750\n    \n    total_ml = number_of_jars * ml_per_jar\n    total_liters = total_ml / 1000\n    \n    return total_liters\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 50 jars of jam and each jar contains 750ml of jam. How many litres of jam does the store have?\n    \"\"\"\n    number_of_jars = 50\n    ml_per_jar = 750\n    \n    total_ml = number_of_jars * ml_per_jar\n    total_liters = total_ml / 1000\n    \n    return total_liters",
    "result": 37.5
  },
  {
    "index": 64,
    "response": "**Reasoning:**\n- There are 20 students.\n- Textbooks are twice as many as students, so textbooks = 2 * 20 = 40.\n- Textbooks make up 25% of all items. So, 40 is 25% of the total items.  \n  Total items = textbooks / 0.25 = 40 / 0.25 = 160.\n- Whiteboards make up 15% of all items.  \n  Whiteboards = 15% of total items = 0.15 * 160 = 24.\n\n**Solution:**\n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    In a classroom, there are 20 students and twice as many textbooks. Textbooks make up 25% of all items in the classroom. How many whiteboards are there if they make up 15% of all items?\n    \"\"\"\n    num_students = 20\n    num_textbooks = 2 * num_students\n    total_items = num_textbooks / 0.25\n    num_whiteboards = total_items * 0.15\n    \n    return int(num_whiteboards)\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    In a classroom, there are 20 students and twice as many textbooks. Textbooks make up 25% of all items in the classroom. How many whiteboards are there if they make up 15% of all items?\n    \"\"\"\n    num_students = 20\n    num_textbooks = 2 * num_students\n    total_items = num_textbooks / 0.25\n    num_whiteboards = total_items * 0.15\n    \n    return int(num_whiteboards)",
    "result": 24
  },
  {
    "index": 65,
    "response": "**Reasoning:**\nTo find the total number of stickers, calculate the stickers for each sketchbook and sum them up. Each sketchbook has 20 sheets, and the stickers per sheet are:\n- Purple: 2 stickers/sheet → 20 × 2 = 40 stickers\n- Green: 3 stickers/sheet → 20 × 3 = 60 stickers\n- Pink: 4 stickers/sheet → 20 × 4 = 80 stickers\n- Blue: 1 sticker/sheet → 20 × 1 = 20 stickers\n- Orange: 5 stickers/sheet → 20 × 5 = 100 stickers\n- Yellow: 2 stickers/sheet → 20 × 2 = 40 stickers\n\nTotal stickers = 40 + 60 + 80 + 20 + 100 + 40 = 340.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Cameron buys 6 sketchbooks, each in a different color- purple, green, pink, blue, orange, and yellow. She puts 20 sheets of paper in each sketchbook and then puts butterfly-shaped stickers on each sheet of paper. In the purple sketchbook, each sheet of paper gets 2 stickers. In the green sketchbook, each sheet of paper gets 3 stickers. In the pink sketchbook, each sheet of paper gets 4 stickers. In the blue sketchbook, each sheet of paper gets 1 sticker. In the orange sketchbook, each sheet of paper gets 5 stickers, and in the yellow sketchbook, each sheet gets 2 stickers. What is the total number of stickers Cameron uses?\n    \"\"\"\n    sheets_per_sketchbook = 20\n    stickers_per_sheet = {\n        \"purple\": 2,\n        \"green\": 3,\n        \"pink\": 4,\n        \"blue\": 1,\n        \"orange\": 5,\n        \"yellow\": 2\n    }\n    \n    total_stickers = 0\n    for color in stickers_per_sheet:\n        total_stickers += sheets_per_sketchbook * stickers_per_sheet[color]\n    \n    return total_stickers\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Cameron buys 6 sketchbooks, each in a different color- purple, green, pink, blue, orange, and yellow. She puts 20 sheets of paper in each sketchbook and then puts butterfly-shaped stickers on each sheet of paper. In the purple sketchbook, each sheet of paper gets 2 stickers. In the green sketchbook, each sheet of paper gets 3 stickers. In the pink sketchbook, each sheet of paper gets 4 stickers. In the blue sketchbook, each sheet of paper gets 1 sticker. In the orange sketchbook, each sheet of paper gets 5 stickers, and in the yellow sketchbook, each sheet gets 2 stickers. What is the total number of stickers Cameron uses?\n    \"\"\"\n    sheets_per_sketchbook = 20\n    stickers_per_sheet = {\n        \"purple\": 2,\n        \"green\": 3,\n        \"pink\": 4,\n        \"blue\": 1,\n        \"orange\": 5,\n        \"yellow\": 2\n    }\n    \n    total_stickers = 0\n    for color in stickers_per_sheet:\n        total_stickers += sheets_per_sketchbook * stickers_per_sheet[color]\n    \n    return total_stickers",
    "result": 340
  },
  {
    "index": 66,
    "response": "**Reasoning:**\nTo find the average speed of the train, we use the formula:  \n**Average Speed = Total Distance / Total Time**  \n\nGiven:  \n- First segment: 100 miles traveled in 2 hours  \n- Second segment: 120 miles traveled in 3 hours  \n\nStep-by-step calculation:  \n1. **Total Distance** = 100 miles + 120 miles = 220 miles  \n2. **Total Time** = 2 hours + 3 hours = 5 hours  \n3. **Average Speed** = 220 miles / 5 hours = 44 miles per hour  \n\nThus, the average speed is 44 mph.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A train travels 100 miles in 2 hours and 120 miles in 3 hours. What is the average speed of the train?\n    \"\"\"\n    # Define distances for each segment\n    distance_first = 100  # miles\n    distance_second = 120  # miles\n    \n    # Define times for each segment\n    time_first = 2  # hours\n    time_second = 3  # hours\n    \n    # Calculate total distance and total time\n    total_distance = distance_first + distance_second\n    total_time = time_first + time_second\n    \n    # Compute average speed (total distance / total time)\n    average_speed = total_distance / total_time\n    \n    return average_speed\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A train travels 100 miles in 2 hours and 120 miles in 3 hours. What is the average speed of the train?\n    \"\"\"\n    # Define distances for each segment\n    distance_first = 100  # miles\n    distance_second = 120  # miles\n    \n    # Define times for each segment\n    time_first = 2  # hours\n    time_second = 3  # hours\n    \n    # Calculate total distance and total time\n    total_distance = distance_first + distance_second\n    total_time = time_first + time_second\n    \n    # Compute average speed (total distance / total time)\n    average_speed = total_distance / total_time\n    \n    return average_speed",
    "result": 44.0
  },
  {
    "index": 67,
    "response": "**Reasoning:**\nThe problem states that Sona goes on a 20-day trip with 3 different excursions, each lasting 5 days. To find the days she spends not on an excursion:\n1. Calculate the total excursion days: 3 excursions × 5 days each = 15 days.\n2. Subtract the total excursion days from the total trip days: 20 days - 15 days = 5 days.\nThe excursions are described as \"different\" and no overlap is indicated, so they are assumed to be non-overlapping. Thus, Sona spends 5 days not on an excursion.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    After her exams, Sona goes on a 20-day trip. She goes on 3 different excursions during the trip which each last for 5 days. How many days does Sona spend NOT on an excursion?\n    \"\"\"\n    total_trip_days = 20\n    number_of_excursions = 3\n    days_per_excursion = 5\n    \n    total_excursion_days = number_of_excursions * days_per_excursion\n    non_excursion_days = total_trip_days - total_excursion_days\n    \n    result = non_excursion_days\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    After her exams, Sona goes on a 20-day trip. She goes on 3 different excursions during the trip which each last for 5 days. How many days does Sona spend NOT on an excursion?\n    \"\"\"\n    total_trip_days = 20\n    number_of_excursions = 3\n    days_per_excursion = 5\n    \n    total_excursion_days = number_of_excursions * days_per_excursion\n    non_excursion_days = total_trip_days - total_excursion_days\n    \n    result = non_excursion_days\n    return result",
    "result": 5
  },
  {
    "index": 68,
    "response": "**Reasoning:**\nThe problem states that 1 cake requires 1.5 cups of flour. To find the total flour needed for 4 cakes, multiply the flour per cake by the number of cakes:  \n1.5 cups/cake × 4 cakes = 6 cups.  \nThis is a direct multiplication problem without additional complexity.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A chef uses 1.5 cups of flour to bake a cake. If he wants to make 4 cakes, how many cups of flour will he need?\n    \"\"\"\n    cups_per_cake = 1.5\n    number_of_cakes = 4\n    total_cups_needed = cups_per_cake * number_of_cakes\n    result = total_cups_needed\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A chef uses 1.5 cups of flour to bake a cake. If he wants to make 4 cakes, how many cups of flour will he need?\n    \"\"\"\n    cups_per_cake = 1.5\n    number_of_cakes = 4\n    total_cups_needed = cups_per_cake * number_of_cakes\n    result = total_cups_needed\n    \n    return result",
    "result": 6.0
  },
  {
    "index": 69,
    "response": "**Reasoning:**\n- Initially, there are 3 rabbits and 3 squirrels.\n- One squirrel chases away two rabbits. This means:\n  - The squirrel remains in the backyard (squirrel count unchanged: 3).\n  - Two rabbits leave, reducing the rabbit count to 3 - 2 = 1.\n- After this, the total number of animals is 3 squirrels + 1 rabbit = 4.\n- The fraction of animals that are squirrels is 3 squirrels out of 4 total animals, which is 3/4 or 0.75.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Samuel sees 3 rabbits and 3 squirrels in his backyard. Later, one squirrel chases away two rabbits. What fraction of the animals in Samuel's backyard are squirrels now?\n    \"\"\"\n    initial_rabbits = 3\n    initial_squirrels = 3\n    \n    # One squirrel chases away two rabbits: squirrels remain, rabbits decrease by 2\n    remaining_rabbits = initial_rabbits - 2\n    remaining_squirrels = initial_squirrels  # The squirrel that chased stays\n    \n    total_animals = remaining_rabbits + remaining_squirrels\n    squirrel_fraction = remaining_squirrels / total_animals\n    \n    return squirrel_fraction\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Samuel sees 3 rabbits and 3 squirrels in his backyard. Later, one squirrel chases away two rabbits. What fraction of the animals in Samuel's backyard are squirrels now?\n    \"\"\"\n    initial_rabbits = 3\n    initial_squirrels = 3\n    \n    # One squirrel chases away two rabbits: squirrels remain, rabbits decrease by 2\n    remaining_rabbits = initial_rabbits - 2\n    remaining_squirrels = initial_squirrels  # The squirrel that chased stays\n    \n    total_animals = remaining_rabbits + remaining_squirrels\n    squirrel_fraction = remaining_squirrels / total_animals\n    \n    return squirrel_fraction",
    "result": 0.75
  },
  {
    "index": 70,
    "response": "**Reasoning:**\nKristy starts with $200. She spends money on three items: a phone case for $63, a book for $18, and coffee for $31. To find how much money she has left:\n1. Calculate the total amount spent: $63 + $18 + $31\n2. Subtract the total spent from the initial amount: $200 - total spent\n\nStep-by-step calculation:\n- Total spent = 63 + 18 = 81, then 81 + 31 = 112\n- Money left = 200 - 112 = 88\n\nTherefore, Kristy has $88 left.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Kristy had $200 to start. After spending $63 on a phone case, $18 on a new book, and $31 on a coffee, how much money does Kristy have left?\n    \"\"\"\n    initial_money = 200\n    phone_case_cost = 63\n    book_cost = 18\n    coffee_cost = 31\n    \n    total_spent = phone_case_cost + book_cost + coffee_cost\n    remaining_money = initial_money - total_spent\n    \n    result = float(remaining_money)\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Kristy had $200 to start. After spending $63 on a phone case, $18 on a new book, and $31 on a coffee, how much money does Kristy have left?\n    \"\"\"\n    initial_money = 200\n    phone_case_cost = 63\n    book_cost = 18\n    coffee_cost = 31\n    \n    total_spent = phone_case_cost + book_cost + coffee_cost\n    remaining_money = initial_money - total_spent\n    \n    result = float(remaining_money)\n    return result",
    "result": 88.0
  },
  {
    "index": 71,
    "response": "**Reasoning:**\nTo determine how many pieces of dinnerware each child receives, we first calculate the total number of dinnerware pieces. Mrs. Adams has 8 plates, 3 bowls, and 10 cups. Adding these together: 8 + 3 + 10 = 21 pieces. She distributes these 21 pieces equally among her 8 grandchildren. Since the dinnerware pieces are distributed in total (not by type), we divide the total pieces by the number of children: 21 / 8 = 2.625. This means each child receives 2.625 pieces on average, even though in practice, the distribution may involve whole pieces with some children receiving slightly more or less due to the remainder.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"Mrs. Adams has 8 plates, 3 bowls, and 10 cups she wants to distribute among 8 of her grandchildren. How many pieces of dinnerware will each child receive?\"\"\"\n    num_plates = 8\n    num_bowls = 3\n    num_cups = 10\n    num_children = 8\n    \n    total_pieces = num_plates + num_bowls + num_cups\n    pieces_per_child = total_pieces / num_children\n    \n    return pieces_per_child\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"Mrs. Adams has 8 plates, 3 bowls, and 10 cups she wants to distribute among 8 of her grandchildren. How many pieces of dinnerware will each child receive?\"\"\"\n    num_plates = 8\n    num_bowls = 3\n    num_cups = 10\n    num_children = 8\n    \n    total_pieces = num_plates + num_bowls + num_cups\n    pieces_per_child = total_pieces / num_children\n    \n    return pieces_per_child",
    "result": 2.625
  },
  {
    "index": 72,
    "response": "**Reasoning:**\n1. The recipe makes 12 cookies using 1/4 cup of sugar.  \n2. To find the sugar per cookie: \\( \\frac{1/4}{12} = \\frac{1}{48} \\) cup per cookie.  \n3. For 36 cookies, the sugar needed is \\( 36 \\times \\frac{1}{48} = \\frac{36}{48} = \\frac{3}{4} \\) cup.  \n4. Sofia has 2 cups of sugar. After using \\( \\frac{3}{4} \\) cup, the remaining sugar is \\( 2 - \\frac{3}{4} = \\frac{8}{4} - \\frac{3}{4} = \\frac{5}{4} = 1.25 \\) cups.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sofia is baking cookies for her friends. She has a recipe that makes 12 cookies and uses 1/4 cup of sugar. \n    She wants to make 36 cookies and has 2 cups of sugar. How much sugar will she have left after making the cookies?\n    \"\"\"\n    cookies_per_batch = 12\n    sugar_per_batch = 0.25  # 1/4 cup\n    desired_cookies = 36\n    available_sugar = 2.0\n    \n    batches_needed = desired_cookies / cookies_per_batch\n    sugar_needed = batches_needed * sugar_per_batch\n    sugar_left = available_sugar - sugar_needed\n    \n    return sugar_left\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sofia is baking cookies for her friends. She has a recipe that makes 12 cookies and uses 1/4 cup of sugar. \n    She wants to make 36 cookies and has 2 cups of sugar. How much sugar will she have left after making the cookies?\n    \"\"\"\n    cookies_per_batch = 12\n    sugar_per_batch = 0.25  # 1/4 cup\n    desired_cookies = 36\n    available_sugar = 2.0\n    \n    batches_needed = desired_cookies / cookies_per_batch\n    sugar_needed = batches_needed * sugar_per_batch\n    sugar_left = available_sugar - sugar_needed\n    \n    return sugar_left",
    "result": 1.25
  },
  {
    "index": 73,
    "response": "**Reasoning:**\nTo find the car's average speed in miles per hour, we use the formula for average speed:  \n**Average Speed = Total Distance / Total Time**.  \n\nGiven:\n- Total Distance = 120 miles  \n- Total Time = 2 hours  \n\nSubstitute the values into the formula:  \nAverage Speed = 120 miles / 2 hours = 60 miles per hour.  \n\nThus, the car's average speed is 60 mph.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car drives 120 miles in 2 hours. What is the car's average speed in miles per hour?\n    \"\"\"\n    total_distance_miles = 120\n    total_time_hours = 2\n    average_speed_mph = total_distance_miles / total_time_hours\n    result = average_speed_mph\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car drives 120 miles in 2 hours. What is the car's average speed in miles per hour?\n    \"\"\"\n    total_distance_miles = 120\n    total_time_hours = 2\n    average_speed_mph = total_distance_miles / total_time_hours\n    result = average_speed_mph\n    \n    return result",
    "result": 60.0
  },
  {
    "index": 74,
    "response": "**Reasoning:**\n1. Brandon's weekly pay is $250.\n2. He spends 20% of this pay on gas, so the gas cost is 0.20 * $250 = $50.\n3. After buying gas, the leftover money is $250 - $50 = $200.\n4. He saves 40% of the leftover money, so the savings are 0.40 * $200 = $80.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Brandon spends 20% of his weekly pay of $250 on gas. He saves 40% of the leftover money. How much money does he save each week after buying gas?\n    \"\"\"\n    weekly_pay = 250\n    gas_percentage = 0.20\n    savings_percentage = 0.40\n    \n    gas_cost = weekly_pay * gas_percentage\n    leftover_money = weekly_pay - gas_cost\n    savings = leftover_money * savings_percentage\n    \n    return savings\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Brandon spends 20% of his weekly pay of $250 on gas. He saves 40% of the leftover money. How much money does he save each week after buying gas?\n    \"\"\"\n    weekly_pay = 250\n    gas_percentage = 0.20\n    savings_percentage = 0.40\n    \n    gas_cost = weekly_pay * gas_percentage\n    leftover_money = weekly_pay - gas_cost\n    savings = leftover_money * savings_percentage\n    \n    return savings",
    "result": 80.0
  },
  {
    "index": 75,
    "response": "**Reasoning:**\n- Initially, there are 27 students in the classroom.\n- 3 students leave, so the number of students remaining is \\( 27 - 3 = 24 \\).\n- To find the percentage of students remaining, divide the number of remaining students by the initial total and multiply by 100: \\( \\frac{24}{27} \\times 100 \\).\n- This simplifies to approximately 88.888...%, but we will compute it exactly without rounding.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    There were a total of 27 students in the classroom. If 3 students left the classroom, what percentage of students was left?\n    \"\"\"\n    total_students = 27\n    students_left = 3\n    remaining_students = total_students - students_left\n    percentage_remaining = (remaining_students / total_students) * 100\n    result = percentage_remaining\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There were a total of 27 students in the classroom. If 3 students left the classroom, what percentage of students was left?\n    \"\"\"\n    total_students = 27\n    students_left = 3\n    remaining_students = total_students - students_left\n    percentage_remaining = (remaining_students / total_students) * 100\n    result = percentage_remaining\n    \n    return result",
    "result": 88.88888888888889
  },
  {
    "index": 76,
    "response": "**Reasoning:**\nJohn has 96 erasers and wants to divide them equally into groups of 4. To find the number of groups, we divide the total number of erasers by the size of each group. So, we calculate 96 divided by 4. \n\nStep-by-step:\n1. Total erasers = 96\n2. Erasers per group = 4\n3. Number of groups = Total erasers ÷ Erasers per group = 96 ÷ 4\n4. 96 ÷ 4 = 24\n\nThus, John made 24 groups.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John had 96 erasers and decided to divide them equally into groups of 4. How many groups did he make?\n    \"\"\"\n    total_erasers = 96\n    erasers_per_group = 4\n    number_of_groups = total_erasers / erasers_per_group\n    result = number_of_groups\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John had 96 erasers and decided to divide them equally into groups of 4. How many groups did he make?\n    \"\"\"\n    total_erasers = 96\n    erasers_per_group = 4\n    number_of_groups = total_erasers / erasers_per_group\n    result = number_of_groups\n    \n    return result",
    "result": 24.0
  },
  {
    "index": 77,
    "response": "**Reasoning:**\nGiven that the area of a circle is \\(16\\pi\\), we use the area formula for a circle, \\(A = \\pi r^2\\), to find the radius \\(r\\).\n\n1. Set up the equation: \\(\\pi r^2 = 16\\pi\\).\n2. Solve for \\(r^2\\) by dividing both sides by \\(\\pi\\): \\(r^2 = 16\\).\n3. Take the positive square root to find the radius: \\(r = 4\\).\n\nNext, use the circumference formula for a circle, \\(C = 2\\pi r\\), to find the circumference.\n4. Substitute \\(r = 4\\): \\(C = 2\\pi \\times 4 = 8\\pi\\).\n\nThe exact circumference is \\(8\\pi\\). In Python, we compute this numerically by multiplying 8 by the value of \\(\\pi\\) from the math module.\n\n**Solution:**\n```python\nimport math\n\ndef simple_math_problem() -> float:\n    \"\"\"\n    If the area of a circle is 16π, what is the circumference of the circle?\n    \"\"\"\n    area = 16 * math.pi\n    radius = math.sqrt(area / math.pi)\n    circumference = 2 * math.pi * radius\n    \n    return circumference\n```",
    "code": "import math\n\ndef simple_math_problem() -> float:\n    \"\"\"\n    If the area of a circle is 16π, what is the circumference of the circle?\n    \"\"\"\n    area = 16 * math.pi\n    radius = math.sqrt(area / math.pi)\n    circumference = 2 * math.pi * radius\n    \n    return circumference",
    "result": 25.132741228718345
  },
  {
    "index": 78,
    "response": "**Reasoning:**\n- Spencer starts with 2 lbs of beef and buys 3 more lbs, so the total beef is 2 + 3 = 5 lbs.\n- Each lb of beef yields 4 burgers, so the total number of burgers is 5 lbs * 4 burgers/lb = 20 burgers.\n- He needs 2 burgers per guest, so the number of guests is 20 burgers / 2 burgers/guest = 10 guests.\n- The information about salt and pepper (1 tsp each for every 4 burgers) is part of the recipe but does not affect the number of guests that can be served, as the question only asks about the beef constraint. Therefore, it is not used in the calculation.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Spencer wants to host a barbecue party. He has 2 lbs of beef in his fridge and buys 3 more lbs of beef. Each lb of beef yields 4 burgers. He needs 2 burgers per guest. The recipe calls for 1 tsp of salt and 1 tsp of pepper for every 4 burgers. How many guests can he serve with the beef he has?\n    \"\"\"\n    initial_beef_lbs = 2\n    additional_beef_lbs = 3\n    total_beef_lbs = initial_beef_lbs + additional_beef_lbs\n    \n    burgers_per_lb = 4\n    total_burgers = total_beef_lbs * burgers_per_lb\n    \n    burgers_per_guest = 2\n    number_of_guests = total_burgers / burgers_per_guest\n    \n    result = number_of_guests\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Spencer wants to host a barbecue party. He has 2 lbs of beef in his fridge and buys 3 more lbs of beef. Each lb of beef yields 4 burgers. He needs 2 burgers per guest. The recipe calls for 1 tsp of salt and 1 tsp of pepper for every 4 burgers. How many guests can he serve with the beef he has?\n    \"\"\"\n    initial_beef_lbs = 2\n    additional_beef_lbs = 3\n    total_beef_lbs = initial_beef_lbs + additional_beef_lbs\n    \n    burgers_per_lb = 4\n    total_burgers = total_beef_lbs * burgers_per_lb\n    \n    burgers_per_guest = 2\n    number_of_guests = total_burgers / burgers_per_guest\n    \n    result = number_of_guests\n    \n    return result",
    "result": 10.0
  },
  {
    "index": 79,
    "response": "**Reasoning:**\nThe problem consists of two separate questions. The first question is about David's savings from his commission. The steps are:\n1. Calculate David's earnings: 5% commission on $7500 sales → 0.05 × 7500\n2. Calculate savings: 35% of his earnings → 0.35 × (earnings)\n\nThe second question is about the toy store's green ball sales. The steps are:\n1. Calculate revenue from red balls: 15 balls × $3/ball = $45\n2. Subtract from total revenue to find green balls revenue: $75 - $45 = $30\n3. Calculate number of green balls: $30 ÷ $5/ball = 6 balls\n\nHowever, the function must return a single float value. Since the first question asks for a monetary amount (float) and the second asks for a count (integer), the solution focuses on the first question as it aligns with the float return type. The answer to the first question is $131.25.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    David sells sports equipment and earns a commission of 5% on all sales. This week, he sold $7500 worth of equipment, and he wants to save 35% of his earnings. How much money will he save? The toy store sells red balls for $3 and green balls for $5. They made $75 in ball sales. If they sold 15 red balls, how many green balls did they sell?\n    \"\"\"\n    total_sales = 7500\n    commission_rate = 0.05  # 5% commission\n    savings_rate = 0.35     # 35% savings rate\n    \n    earnings = total_sales * commission_rate\n    savings = earnings * savings_rate\n    \n    result = savings\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    David sells sports equipment and earns a commission of 5% on all sales. This week, he sold $7500 worth of equipment, and he wants to save 35% of his earnings. How much money will he save? The toy store sells red balls for $3 and green balls for $5. They made $75 in ball sales. If they sold 15 red balls, how many green balls did they sell?\n    \"\"\"\n    total_sales = 7500\n    commission_rate = 0.05  # 5% commission\n    savings_rate = 0.35     # 35% savings rate\n    \n    earnings = total_sales * commission_rate\n    savings = earnings * savings_rate\n    \n    result = savings\n    \n    return result",
    "result": 131.25
  },
  {
    "index": 80,
    "response": "**Reasoning:**\nLuke has 7 sandwiches to share equally among his 4 children. To find how many sandwiches each child gets, we divide the total number of sandwiches (7) by the number of children (4). This results in 7 ÷ 4 = 1.75 sandwiches per child. Since the problem doesn't specify whole sandwiches or any restrictions, fractional sandwiches are acceptable.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"Luke has 7 sandwiches to share among his 4 children. How many sandwiches will each child get?\"\"\"\n    total_sandwiches = 7\n    number_of_children = 4\n    sandwiches_per_child = total_sandwiches / number_of_children\n    result = sandwiches_per_child\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"Luke has 7 sandwiches to share among his 4 children. How many sandwiches will each child get?\"\"\"\n    total_sandwiches = 7\n    number_of_children = 4\n    sandwiches_per_child = total_sandwiches / number_of_children\n    result = sandwiches_per_child\n    \n    return result",
    "result": 1.75
  },
  {
    "index": 81,
    "response": "**Reasoning:**\n1. The problem states there are 3 times as many cats as dogs.\n2. It also provides that there are 24 cats.\n3. Let \\( d \\) represent the number of dogs.\n4. According to the relationship, cats = 3 × dogs, so \\( 24 = 3 \\times d \\).\n5. Solve for \\( d \\) by dividing both sides by 3: \\( d = \\frac{24}{3} \\).\n6. Thus, \\( d = 8 \\), meaning there are 8 dogs.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In a park, there are 3 times as many cats as dogs. If there are 24 cats, how many dogs are there?\n    \"\"\"\n    number_of_cats = 24\n    cats_to_dogs_ratio = 3  # Cats are 3 times the number of dogs\n    number_of_dogs = number_of_cats / cats_to_dogs_ratio\n    result = number_of_dogs\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In a park, there are 3 times as many cats as dogs. If there are 24 cats, how many dogs are there?\n    \"\"\"\n    number_of_cats = 24\n    cats_to_dogs_ratio = 3  # Cats are 3 times the number of dogs\n    number_of_dogs = number_of_cats / cats_to_dogs_ratio\n    result = number_of_dogs\n    \n    return result",
    "result": 8.0
  },
  {
    "index": 82,
    "response": "**Reasoning:**\n- Tom gave 3 apples to John, so John has 3 apples.\n- Tom gave 4 apples to Katie, so Katie has 4 apples.\n- John and Katie together ate one apple, meaning one apple is consumed from their combined apples.\n- The apples left with John and Katie are the sum of their apples minus the one eaten: 3 + 4 - 1 = 6.\n- The problem asks \"how many apples are left?\" which, in context, refers to the remaining apples with John and Katie after eating, as Tom is no longer involved after giving the apples away. No initial number of apples for Tom is given or needed, as the focus is on the apples distributed and consumed.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Tom gave three apples to John, and then gave four to Katie. John and Katie together ate one apple. How many apples are left?\n    \"\"\"\n    apples_given_to_john = 3\n    apples_given_to_katie = 4\n    apples_eaten = 1\n    apples_left_with_john_and_katie = apples_given_to_john + apples_given_to_katie - apples_eaten\n    result = apples_left_with_john_and_katie\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Tom gave three apples to John, and then gave four to Katie. John and Katie together ate one apple. How many apples are left?\n    \"\"\"\n    apples_given_to_john = 3\n    apples_given_to_katie = 4\n    apples_eaten = 1\n    apples_left_with_john_and_katie = apples_given_to_john + apples_given_to_katie - apples_eaten\n    result = apples_left_with_john_and_katie\n\n    return result",
    "result": 6
  },
  {
    "index": 83,
    "response": "**Reasoning:**\nTo solve this problem, we need to calculate the total distance traveled by a car that moves at two different speeds for specified durations. The distance traveled in each segment is computed by multiplying the time by the speed. The total distance is the sum of the distances from both segments.\n\n1. **First segment**:  \n   - Time = 8 hours  \n   - Speed = 60 km/h  \n   - Distance = \\(8 \\times 60 = 480\\) km  \n\n2. **Second segment**:  \n   - Time = 4 hours  \n   - Speed = 75 km/h  \n   - Distance = \\(4 \\times 75 = 300\\) km  \n\n3. **Total distance**:  \n   - Sum of both segments: \\(480 + 300 = 780\\) km  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car travels 8 hours at 60 km/h and the next 4 hours at 75 km/h. What is the total distance traveled by the car?\n    \"\"\"\n    first_segment_time_hours = 8\n    first_segment_speed_kmh = 60\n    first_segment_distance_km = first_segment_time_hours * first_segment_speed_kmh\n\n    second_segment_time_hours = 4\n    second_segment_speed_kmh = 75\n    second_segment_distance_km = second_segment_time_hours * second_segment_speed_kmh\n\n    total_distance_km = first_segment_distance_km + second_segment_distance_km\n\n    return total_distance_km\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car travels 8 hours at 60 km/h and the next 4 hours at 75 km/h. What is the total distance traveled by the car?\n    \"\"\"\n    first_segment_time_hours = 8\n    first_segment_speed_kmh = 60\n    first_segment_distance_km = first_segment_time_hours * first_segment_speed_kmh\n\n    second_segment_time_hours = 4\n    second_segment_speed_kmh = 75\n    second_segment_distance_km = second_segment_time_hours * second_segment_speed_kmh\n\n    total_distance_km = first_segment_distance_km + second_segment_distance_km\n\n    return total_distance_km",
    "result": 780
  },
  {
    "index": 84,
    "response": "**Reasoning:**\nThe problem states that the TV's price was \"3/8 times less\" a year ago compared to now. This means the price a year ago was the current price minus 3/8 of the current price. Mathematically, if the current price is \\( P \\), then the price a year ago is \\( P - \\frac{3}{8}P = \\frac{5}{8}P \\).\n\nGiven that the TV cost $1200 a year ago, we have:\n\\[\n\\frac{5}{8}P = 1200\n\\]\n\nSolving for \\( P \\) (current price):\n\\[\nP = 1200 \\times \\frac{8}{5}\n\\]\n\nAfter finding \\( P \\), the cost of 6 televisions at the current price is \\( 6 \\times P \\).\n\nStep-by-step calculation:\n1. Calculate current price for one TV: \\( 1200 \\times \\frac{8}{5} = 1920 \\)\n2. Multiply by 6: \\( 6 \\times 1920 = 11520 \\)\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If a TV's price was 3/8 times less a year ago compared to now, and it cost $1200 a year ago, what would be the cost of 6 televisions now?\n    \"\"\"\n    old_price_per_tv = 1200\n    # The old price is (1 - 3/8) = 5/8 of the current price\n    # So current price = old_price / (5/8) = old_price * (8/5)\n    current_price_per_tv = old_price_per_tv * (8 / 5)\n    num_televisions = 6\n    total_cost = num_televisions * current_price_per_tv\n    result = total_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a TV's price was 3/8 times less a year ago compared to now, and it cost $1200 a year ago, what would be the cost of 6 televisions now?\n    \"\"\"\n    old_price_per_tv = 1200\n    # The old price is (1 - 3/8) = 5/8 of the current price\n    # So current price = old_price / (5/8) = old_price * (8/5)\n    current_price_per_tv = old_price_per_tv * (8 / 5)\n    num_televisions = 6\n    total_cost = num_televisions * current_price_per_tv\n    result = total_cost\n\n    return result",
    "result": 11520.0
  },
  {
    "index": 85,
    "response": "**Reasoning:**\n1. The shirt costs $35.\n2. A 10% discount means Jack pays only 90% of the original price (100% - 10% = 90%).\n3. Calculate 90% of $35: 35 × 0.90 = 31.50.\n4. Jack will pay $31.50 for the shirt after the discount.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jack wants to buy a new shirt for $35. The store has a 10% discount. How much will Jack pay for the shirt?\n    \"\"\"\n    original_price = 35.0\n    discount_percent = 10.0\n    discount_decimal = discount_percent / 100.0\n    discounted_price = original_price * (1 - discount_decimal)\n    result = round(discounted_price, 2)  # Ensure proper rounding to cents\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jack wants to buy a new shirt for $35. The store has a 10% discount. How much will Jack pay for the shirt?\n    \"\"\"\n    original_price = 35.0\n    discount_percent = 10.0\n    discount_decimal = discount_percent / 100.0\n    discounted_price = original_price * (1 - discount_decimal)\n    result = round(discounted_price, 2)  # Ensure proper rounding to cents\n    \n    return result",
    "result": 31.5
  },
  {
    "index": 86,
    "response": "### Reasoning:\nTo solve this problem, we need to determine the total number of blueberries removed from all cupcakes in the bakery. The bakery has 12 trays, each containing 9 cupcakes. Each cupcake originally has 3 blueberries, but the chef removes 2 blueberries from each cupcake.\n\n1. **Calculate the total number of cupcakes**:\n   - Since there are 12 trays and each tray has 9 cupcakes, multiply these values:\n     - Total cupcakes = 12 trays × 9 cupcakes/tray = 108 cupcakes.\n\n2. **Calculate the total blueberries removed**:\n   - The chef removes 2 blueberries from each cupcake. Multiply the total number of cupcakes by the blueberries removed per cupcake:\n     - Total blueberries removed = 108 cupcakes × 2 blueberries/cupcake = 216 blueberries.\n\nThe problem does not require finding the original number of blueberries or the remaining blueberries, so we directly compute the removal based on the given values. The result is an integer, but as per the problem format, it will be returned as a float.\n\n### Solution:\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In a bakery, there are 12 trays. Each tray has 9 cupcakes and each cupcake has 3 blueberries. A chef removes 2 blueberries from each cupcake. How many blueberries were removed from the bakery?\n    \"\"\"\n    num_trays = 12\n    num_cupcakes_per_tray = 9\n    blueberries_removed_per_cupcake = 2\n    \n    total_cupcakes = num_trays * num_cupcakes_per_tray\n    total_blueberries_removed = total_cupcakes * blueberries_removed_per_cupcake\n    \n    result = float(total_blueberries_removed)\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In a bakery, there are 12 trays. Each tray has 9 cupcakes and each cupcake has 3 blueberries. A chef removes 2 blueberries from each cupcake. How many blueberries were removed from the bakery?\n    \"\"\"\n    num_trays = 12\n    num_cupcakes_per_tray = 9\n    blueberries_removed_per_cupcake = 2\n    \n    total_cupcakes = num_trays * num_cupcakes_per_tray\n    total_blueberries_removed = total_cupcakes * blueberries_removed_per_cupcake\n    \n    result = float(total_blueberries_removed)\n    return result",
    "result": 216.0
  },
  {
    "index": 87,
    "response": "**Reasoning:**\nThe problem requires calculating the total flour needed to make both brownies and cake. The brownie recipe uses 2 cups of flour, and the cake recipe uses 3 cups of flour. To find the total flour required, simply add these two amounts together: 2 cups + 3 cups = 5 cups. The result is a straightforward sum of the two given values.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A recipe for brownies requires 2 cups of flour and a recipe for cake requires 3 cups of flour. If someone wants to make both, how much flour do they need altogether?\n    \"\"\"\n    flour_brownies = 2\n    flour_cake = 3\n    total_flour = flour_brownies + flour_cake\n    result = float(total_flour)\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A recipe for brownies requires 2 cups of flour and a recipe for cake requires 3 cups of flour. If someone wants to make both, how much flour do they need altogether?\n    \"\"\"\n    flour_brownies = 2\n    flour_cake = 3\n    total_flour = flour_brownies + flour_cake\n    result = float(total_flour)\n\n    return result",
    "result": 5.0
  },
  {
    "index": 88,
    "response": "**Reasoning:**  \nLisa has a 20L barrel of water and a 3L bucket. Each time she fills the bucket, she removes 3L from the barrel. To determine how many times she must fill the bucket to empty the barrel:  \n- Divide 20L by 3L: \\( 20 \\div 3 = 6 \\) full buckets with a remainder of 2L.  \n- After 6 fills, \\( 6 \\times 3 = 18L \\) are removed, leaving 2L in the barrel.  \n- A 7th fill is needed to remove the remaining 2L (even though the bucket won't be completely full).  \n- Thus, Lisa must fill the bucket 7 times to empty the barrel.  \n\n**Solution:**  \n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Lisa has a full 20L barrel of water. She needs to fill a bucket that holds 3L of water. How many times will she need to fill the bucket to empty out the barrel of water?\n    \"\"\"\n    barrel_volume_liters = 20.0\n    bucket_capacity_liters = 3.0\n    \n    # Calculate the number of bucket fills required\n    full_fills = barrel_volume_liters // bucket_capacity_liters\n    remainder = barrel_volume_liters % bucket_capacity_liters\n    \n    # If there's any remainder, an additional fill is needed\n    fills_needed = full_fills + (1 if remainder > 0 else 0)\n    \n    result = fills_needed\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Lisa has a full 20L barrel of water. She needs to fill a bucket that holds 3L of water. How many times will she need to fill the bucket to empty out the barrel of water?\n    \"\"\"\n    barrel_volume_liters = 20.0\n    bucket_capacity_liters = 3.0\n    \n    # Calculate the number of bucket fills required\n    full_fills = barrel_volume_liters // bucket_capacity_liters\n    remainder = barrel_volume_liters % bucket_capacity_liters\n    \n    # If there's any remainder, an additional fill is needed\n    fills_needed = full_fills + (1 if remainder > 0 else 0)\n    \n    result = fills_needed\n    return result",
    "result": 7.0
  },
  {
    "index": 89,
    "response": "**Reasoning:**\nTom lost 10 pounds, which represents 20% of his original weight. This means that 20% (or 0.20) of his original weight equals 10 pounds. To find the original weight, we can set up the equation:  \n**original_weight × 0.20 = 10**  \nSolving for the original weight:  \n**original_weight = 10 ÷ 0.20**  \n**original_weight = 50 pounds**  \n\nThis calculation shows that Tom's original weight was 50 pounds, since 20% of 50 is indeed 10 pounds.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Tom lost 10 pounds, which is 20% of his original weight. What was Tom's original weight?\n    \"\"\"\n    pounds_lost = 10\n    percentage_lost = 0.20  # 20% expressed as a decimal\n    original_weight = pounds_lost / percentage_lost\n\n    return original_weight\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Tom lost 10 pounds, which is 20% of his original weight. What was Tom's original weight?\n    \"\"\"\n    pounds_lost = 10\n    percentage_lost = 0.20  # 20% expressed as a decimal\n    original_weight = pounds_lost / percentage_lost\n\n    return original_weight",
    "result": 50.0
  },
  {
    "index": 90,
    "response": "**Reasoning:**\n1. Jenna missed 4 questions out of 20 total questions.\n2. Therefore, the number of questions she got correct is 20 - 4 = 16.\n3. Each question is worth 5 points, so her total points earned are 16 * 5 = 80.\n4. The maximum possible points are 20 questions * 5 points each = 100.\n5. Her percentage grade is calculated as (points earned / maximum points) * 100 = (80 / 100) * 100 = 80%.\n6. The result should be returned as a float (80.0).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    On a math quiz, there were 20 questions worth 5 points each. If Jenna missed 4 questions, what was her percentage grade?\n    \"\"\"\n    total_questions = 20\n    questions_missed = 4\n    points_per_question = 5\n    \n    questions_correct = total_questions - questions_missed\n    points_earned = questions_correct * points_per_question\n    max_possible_points = total_questions * points_per_question\n    percentage_grade = (points_earned / max_possible_points) * 100\n    \n    result = percentage_grade\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    On a math quiz, there were 20 questions worth 5 points each. If Jenna missed 4 questions, what was her percentage grade?\n    \"\"\"\n    total_questions = 20\n    questions_missed = 4\n    points_per_question = 5\n    \n    questions_correct = total_questions - questions_missed\n    points_earned = questions_correct * points_per_question\n    max_possible_points = total_questions * points_per_question\n    percentage_grade = (points_earned / max_possible_points) * 100\n    \n    result = percentage_grade\n    return result",
    "result": 80.0
  },
  {
    "index": 91,
    "response": "**Reasoning:**\nJack starts with 16 marbles. He loses 4 marbles, leaving him with 16 - 4 = 12 marbles. He then trades 3 marbles for 2 stickers, so now he has 12 - 3 = 9 marbles left and 2 stickers. The goal is to have 10 stickers in total. Since he currently has 2 stickers, he needs 10 - 2 = 8 more stickers. The problem asks for the number of additional stickers needed, regardless of how they are obtained, so we do not consider further marble trades.\n\n**Solution:**\n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Jack has 16 marbles. He lost 4 of them and traded 3 of them for 2 stickers. How many more stickers does he need to have 10 stickers in total?\n    \"\"\"\n    initial_marbles = 16\n    lost_marbles = 4\n    marbles_after_loss = initial_marbles - lost_marbles\n    \n    traded_marbles = 3\n    stickers_received = 2\n    current_stickers = stickers_received  # He now has these stickers\n    \n    target_stickers = 10\n    additional_stickers_needed = target_stickers - current_stickers\n    \n    return additional_stickers_needed\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Jack has 16 marbles. He lost 4 of them and traded 3 of them for 2 stickers. How many more stickers does he need to have 10 stickers in total?\n    \"\"\"\n    initial_marbles = 16\n    lost_marbles = 4\n    marbles_after_loss = initial_marbles - lost_marbles\n    \n    traded_marbles = 3\n    stickers_received = 2\n    current_stickers = stickers_received  # He now has these stickers\n    \n    target_stickers = 10\n    additional_stickers_needed = target_stickers - current_stickers\n    \n    return additional_stickers_needed",
    "result": 8
  },
  {
    "index": 92,
    "response": "**Reasoning:**\n- Mary eats 1 pound of fish.\n- She eats five times as much shrimp as fish, so 5 pounds of shrimp (5 × 1 pound).\n- Fish has 750 calories per pound, so the fish contributes 1 × 750 = 750 calories.\n- Shrimp has 1/8 the calories of fish per pound, so shrimp calories per pound = 750 × (1/8) = 93.75 calories.\n- The shrimp contributes 5 pounds × 93.75 calories/pound = 468.75 calories.\n- Total calories = calories from fish + calories from shrimp = 750 + 468.75 = 1218.75 calories.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mary eats 1 pound of fish and five times as much shrimp. If fish has 750 calories per pound and shrimp has 1/8 that many calories, how many calories did she eat in total?\n    \"\"\"\n    pounds_of_fish = 1\n    calories_per_pound_fish = 750\n    fish_calories = pounds_of_fish * calories_per_pound_fish\n    \n    pounds_of_shrimp = 5 * pounds_of_fish  # five times the fish amount\n    calories_per_pound_shrimp = calories_per_pound_fish * (1/8)\n    shrimp_calories = pounds_of_shrimp * calories_per_pound_shrimp\n    \n    total_calories = fish_calories + shrimp_calories\n    \n    return total_calories\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mary eats 1 pound of fish and five times as much shrimp. If fish has 750 calories per pound and shrimp has 1/8 that many calories, how many calories did she eat in total?\n    \"\"\"\n    pounds_of_fish = 1\n    calories_per_pound_fish = 750\n    fish_calories = pounds_of_fish * calories_per_pound_fish\n    \n    pounds_of_shrimp = 5 * pounds_of_fish  # five times the fish amount\n    calories_per_pound_shrimp = calories_per_pound_fish * (1/8)\n    shrimp_calories = pounds_of_shrimp * calories_per_pound_shrimp\n    \n    total_calories = fish_calories + shrimp_calories\n    \n    return total_calories",
    "result": 1218.75
  },
  {
    "index": 93,
    "response": "**Reasoning:**\nThe problem states:\n1. San has 3 times as many apples as Tom.\n2. San has 4 less apples than Harry.\n3. Harry has 25 apples.\n4. We need to find how many apples Susan has.\n\nFirst, note that \"San\" and \"Susan\" likely refer to the same person, as the names are similar and the problem context suggests a single individual. Therefore, we'll solve for San/Susan.\n\nGiven:\n- Harry has 25 apples.\n- San has 4 less than Harry, so San's apples = Harry's apples - 4.\n\nWe can directly calculate San's apples using Harry's count:\n- San's apples = 25 - 4 = 21.\n\nThe information about Tom (San having 3 times Tom's apples) is not needed to find San's count, as we have a direct relationship with Harry. Thus, Susan (San) has 21 apples.\n\n**Solution:**\n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    san has 3 times as many apples as Tom and 4 less than Harry. If Harry has 25 apples, how many does Susan have?\n    \"\"\"\n    harry_apples = 25\n    susan_apples = harry_apples - 4  # San/Susan has 4 less than Harry\n\n    result = susan_apples\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    san has 3 times as many apples as Tom and 4 less than Harry. If Harry has 25 apples, how many does Susan have?\n    \"\"\"\n    harry_apples = 25\n    susan_apples = harry_apples - 4  # San/Susan has 4 less than Harry\n\n    result = susan_apples\n    return result",
    "result": 21
  },
  {
    "index": 94,
    "response": "**Reasoning:**\nThe problem presents two scenarios. The first scenario describes Jack driving for 1 hour at 25 mph and then 0.5 hours at 20 mph. However, the question specifically asks for the distance traveled in an alternative scenario: driving for 0.75 hours at 25 mph. \n\nThe first scenario is irrelevant to the question since the problem asks exclusively about the alternative scenario. To solve the problem, we only need to calculate the distance for the alternative scenario using the formula:  \n**distance = speed × time**  \n\nGiven:\n- Speed = 25 mph  \n- Time = 0.75 hours  \n\nCalculation:  \nDistance = 25 mph × 0.75 hours = 18.75 miles  \n\nThus, the answer is 18.75 miles.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If Jack drives a motorboat for 1 hour at 25 mph and then 0.5 hours at 20 mph, how far would he travel if he had driven for 0.75 hours at 25 mph?\n    \"\"\"\n    speed_mph = 25  # Speed in miles per hour\n    time_hours = 0.75  # Time in hours\n    distance_miles = speed_mph * time_hours  # Distance = speed × time\n    result = distance_miles\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If Jack drives a motorboat for 1 hour at 25 mph and then 0.5 hours at 20 mph, how far would he travel if he had driven for 0.75 hours at 25 mph?\n    \"\"\"\n    speed_mph = 25  # Speed in miles per hour\n    time_hours = 0.75  # Time in hours\n    distance_miles = speed_mph * time_hours  # Distance = speed × time\n    result = distance_miles\n    \n    return result",
    "result": 18.75
  },
  {
    "index": 95,
    "response": "**Reasoning:**\n- The test has a total of 60 questions.\n- Each question is worth 2 points.\n- To find the total marks for a perfect score, multiply the number of questions by the points per question: 60 × 2.\n- The calculation is straightforward: 60 × 2 = 120.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A teacher conducts a test that has a total of 60 questions. Each question has 2 points. If a student answers all the questions correctly, how many total marks will the student score?\n    \"\"\"\n    total_questions = 60\n    points_per_question = 2\n    total_marks = total_questions * points_per_question\n    result = total_marks\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A teacher conducts a test that has a total of 60 questions. Each question has 2 points. If a student answers all the questions correctly, how many total marks will the student score?\n    \"\"\"\n    total_questions = 60\n    points_per_question = 2\n    total_marks = total_questions * points_per_question\n    result = total_marks\n\n    return result",
    "result": 120
  },
  {
    "index": 96,
    "response": "**Reasoning:**\nThe problem requires calculating the area of a rectangular room given its dimensions. The room measures 25 feet by 30 feet. The area of a rectangle is found by multiplying its length by its width. Therefore, the area is calculated as 25 feet × 30 feet. Performing this multiplication gives 750 square feet. The solution involves basic arithmetic multiplication of the two dimensions.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A room measures 25 feet by 30 feet. What is the area of the room (in square feet)?\n    \"\"\"\n    length_feet = 25\n    width_feet = 30\n    area_square_feet = length_feet * width_feet\n    result = area_square_feet\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A room measures 25 feet by 30 feet. What is the area of the room (in square feet)?\n    \"\"\"\n    length_feet = 25\n    width_feet = 30\n    area_square_feet = length_feet * width_feet\n    result = area_square_feet\n    \n    return result",
    "result": 750
  },
  {
    "index": 97,
    "response": "**Reasoning:**\n- The problem requires a 10:1 ratio of flour to yeast, meaning for every 10 cups of flour, 1 cup of yeast is needed.\n- Given 12 cups of flour, we calculate the yeast amount using the proportion: yeast = (flour amount × yeast ratio part) / flour ratio part.\n- Substitute the values: yeast = (12 cups flour × 1 part yeast) / 10 parts flour = 1.2 cups.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Martin and Ann are making a pizza for dinner, the ingredients they need require a 10:1 ratio of flour to yeast. If they need 12 cups of flour, how many cups of yeast are needed?\n    \"\"\"\n    flour_needed = 12  # cups of flour\n    flour_ratio = 10   # parts of flour in the ratio\n    yeast_ratio = 1    # parts of yeast in the ratio\n    \n    yeast_needed = (flour_needed * yeast_ratio) / flour_ratio\n    \n    return yeast_needed\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Martin and Ann are making a pizza for dinner, the ingredients they need require a 10:1 ratio of flour to yeast. If they need 12 cups of flour, how many cups of yeast are needed?\n    \"\"\"\n    flour_needed = 12  # cups of flour\n    flour_ratio = 10   # parts of flour in the ratio\n    yeast_ratio = 1    # parts of yeast in the ratio\n    \n    yeast_needed = (flour_needed * yeast_ratio) / flour_ratio\n    \n    return yeast_needed",
    "result": 1.2
  },
  {
    "index": 98,
    "response": "**Reasoning:**\n1. Nina painted 16 pictures initially.\n2. She sold 8 of them, so the remaining pictures are 16 - 8 = 8.\n3. She then framed these 8 remaining pictures and hung them equally on two walls.\n4. To find how many pictures are on each wall, divide the remaining pictures by the number of walls: 8 ÷ 2 = 4.\n5. Therefore, Nina hung 4 pictures on each wall.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Nina painted 16 pictures and sold eight of them at an art fair. She then framed the remaining pictures and hung them on two walls with the same number of pictures on each wall. How many pictures did Nina hang on each wall?\n    \"\"\"\n    total_painted = 16\n    sold = 8\n    remaining_pictures = total_painted - sold\n    number_of_walls = 2\n    pictures_per_wall = remaining_pictures / number_of_walls\n    \n    return pictures_per_wall\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Nina painted 16 pictures and sold eight of them at an art fair. She then framed the remaining pictures and hung them on two walls with the same number of pictures on each wall. How many pictures did Nina hang on each wall?\n    \"\"\"\n    total_painted = 16\n    sold = 8\n    remaining_pictures = total_painted - sold\n    number_of_walls = 2\n    pictures_per_wall = remaining_pictures / number_of_walls\n    \n    return pictures_per_wall",
    "result": 4.0
  },
  {
    "index": 99,
    "response": "**Reasoning:**\nThe problem states that 6 books cost $120. To find the cost of 18 books, determine the cost per book and then multiply by 18. Alternatively, recognize that 18 books is exactly 3 times 6 books (since 18 ÷ 6 = 3). Thus, the cost for 18 books is 3 times the cost for 6 books.  \nStep-by-step:  \n1. Calculate cost per book: $120 ÷ 6 = $20 per book  \n2. Multiply by 18: $20 × 18 = $360  \nOr directly: $120 × (18 ÷ 6) = $120 × 3 = $360  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If 6 books cost $120, how much would be the cost of 18 books?\n    \"\"\"\n    cost_for_6_books = 120\n    number_of_books_given = 6\n    desired_number_of_books = 18\n    \n    cost_per_book = cost_for_6_books / number_of_books_given\n    total_cost = cost_per_book * desired_number_of_books\n    \n    return total_cost\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If 6 books cost $120, how much would be the cost of 18 books?\n    \"\"\"\n    cost_for_6_books = 120\n    number_of_books_given = 6\n    desired_number_of_books = 18\n    \n    cost_per_book = cost_for_6_books / number_of_books_given\n    total_cost = cost_per_book * desired_number_of_books\n    \n    return total_cost",
    "result": 360.0
  }
]