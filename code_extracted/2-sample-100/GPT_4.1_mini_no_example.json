[
  {
    "index": 0,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A bike shop has 12 types of bicycle, each worth 350 dollars. How much, in dollars, will the bike shop need to purchase all 12 types of bicycles?\n    \"\"\"\n    number_of_bicycle_types = 12\n    price_per_bicycle = 350\n\n    total_cost = number_of_bicycle_types * price_per_bicycle\n\n    result = total_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A bike shop has 12 types of bicycle, each worth 350 dollars. How much, in dollars, will the bike shop need to purchase all 12 types of bicycles?\n    \"\"\"\n    number_of_bicycle_types = 12\n    price_per_bicycle = 350\n\n    total_cost = number_of_bicycle_types * price_per_bicycle\n\n    result = total_cost\n\n    return result",
    "result": 4200
  },
  {
    "index": 1,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    David has 20 quarters and 15 dimes. He spends 7 quarters on a video game and 4 dimes on a snack. How much money does he have left, in cents?\n    \"\"\"\n    total_quarters = 20\n    total_dimes = 15\n    quarters_spent = 7\n    dimes_spent = 4\n    value_per_quarter = 25  # cents\n    value_per_dime = 10     # cents\n\n    quarters_left = total_quarters - quarters_spent\n    dimes_left = total_dimes - dimes_spent\n\n    total_cents_left = (quarters_left * value_per_quarter) + (dimes_left * value_per_dime)\n\n    result = total_cents_left\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    David has 20 quarters and 15 dimes. He spends 7 quarters on a video game and 4 dimes on a snack. How much money does he have left, in cents?\n    \"\"\"\n    total_quarters = 20\n    total_dimes = 15\n    quarters_spent = 7\n    dimes_spent = 4\n    value_per_quarter = 25  # cents\n    value_per_dime = 10     # cents\n\n    quarters_left = total_quarters - quarters_spent\n    dimes_left = total_dimes - dimes_spent\n\n    total_cents_left = (quarters_left * value_per_quarter) + (dimes_left * value_per_dime)\n\n    result = total_cents_left\n\n    return result",
    "result": 435
  },
  {
    "index": 2,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    The area of a triangle is 25 square meters. The base of the triangle is 10 meters long. What is the height of the triangle?\n    \"\"\"\n    area = 25  # in square meters\n    base = 10  # in meters\n    \n    # Area of triangle formula: (1/2) * base * height = area\n    # Solve for height: height = (2 * area) / base\n    height = (2 * area) / base\n    \n    result = height\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The area of a triangle is 25 square meters. The base of the triangle is 10 meters long. What is the height of the triangle?\n    \"\"\"\n    area = 25  # in square meters\n    base = 10  # in meters\n    \n    # Area of triangle formula: (1/2) * base * height = area\n    # Solve for height: height = (2 * area) / base\n    height = (2 * area) / base\n    \n    result = height\n    return result",
    "result": 5.0
  },
  {
    "index": 3,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A bicycle wheel has a diameter of 80 cm. What is its circumference?\n    \"\"\"\n    diameter_cm = 80\n    pi = 3.141592653589793\n    circumference = pi * diameter_cm\n\n    result = circumference\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A bicycle wheel has a diameter of 80 cm. What is its circumference?\n    \"\"\"\n    diameter_cm = 80\n    pi = 3.141592653589793\n    circumference = pi * diameter_cm\n\n    result = circumference\n\n    return result",
    "result": 251.32741228718345
  },
  {
    "index": 4,
    "response": "```python\ndef simple_math_problem() -> bool:\n    \"\"\"\n    To win a new gaming console at a video game tournament, a player has to score at least 300 points in each of the 3 rounds. In the first round, the player scored 275 points, in the second round, the player scored 310 points, and in the third round, the player scored 290 points. Did the player win the gaming console?\n    \"\"\"\n    score_round_1 = 275\n    score_round_2 = 310\n    score_round_3 = 290\n    minimum_required_score = 300\n\n    # Check if the player scored at least the minimum required points in each round\n    won_console = (score_round_1 >= minimum_required_score and\n                   score_round_2 >= minimum_required_score and\n                   score_round_3 >= minimum_required_score)\n\n    return won_console\n```",
    "code": "def simple_math_problem() -> bool:\n    \"\"\"\n    To win a new gaming console at a video game tournament, a player has to score at least 300 points in each of the 3 rounds. In the first round, the player scored 275 points, in the second round, the player scored 310 points, and in the third round, the player scored 290 points. Did the player win the gaming console?\n    \"\"\"\n    score_round_1 = 275\n    score_round_2 = 310\n    score_round_3 = 290\n    minimum_required_score = 300\n\n    # Check if the player scored at least the minimum required points in each round\n    won_console = (score_round_1 >= minimum_required_score and\n                   score_round_2 >= minimum_required_score and\n                   score_round_3 >= minimum_required_score)\n\n    return won_console",
    "result": false
  },
  {
    "index": 5,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Dana filled a tank with 25 Liters of oil. She used 3/5 of the oil to fill her car. How many Liters did she use?\n    \"\"\"\n    total_oil_liters = 25\n    fraction_used = 3 / 5\n    \n    oil_used_liters = total_oil_liters * fraction_used\n    result = oil_used_liters\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Dana filled a tank with 25 Liters of oil. She used 3/5 of the oil to fill her car. How many Liters did she use?\n    \"\"\"\n    total_oil_liters = 25\n    fraction_used = 3 / 5\n    \n    oil_used_liters = total_oil_liters * fraction_used\n    result = oil_used_liters\n    \n    return result",
    "result": 15.0
  },
  {
    "index": 6,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A student buys 48 pencils and 24 markers, spending a total of $420. If the student buys the pencils at 8 for $2.50 and the markers at 4 for $5, what is the total amount of money left?\n    \"\"\"\n    total_pencils = 48\n    total_markers = 24\n\n    # Prices given in packs\n    pencils_per_pack = 8\n    price_per_pencil_pack = 2.50\n\n    markers_per_pack = 4\n    price_per_marker_pack = 5\n\n    total_money_spent = 420\n\n    # Calculate cost of pencils\n    pencil_packs_bought = total_pencils / pencils_per_pack  # number of pencil packs\n    cost_pencils = pencil_packs_bought * price_per_pencil_pack\n\n    # Calculate cost of markers\n    marker_packs_bought = total_markers / markers_per_pack  # number of marker packs\n    cost_markers = marker_packs_bought * price_per_marker_pack\n\n    # Calculate total cost based on buying\n    total_cost = cost_pencils + cost_markers\n\n    # Calculate amount of money left from $420\n    money_left = total_money_spent - total_cost\n\n    return money_left\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A student buys 48 pencils and 24 markers, spending a total of $420. If the student buys the pencils at 8 for $2.50 and the markers at 4 for $5, what is the total amount of money left?\n    \"\"\"\n    total_pencils = 48\n    total_markers = 24\n\n    # Prices given in packs\n    pencils_per_pack = 8\n    price_per_pencil_pack = 2.50\n\n    markers_per_pack = 4\n    price_per_marker_pack = 5\n\n    total_money_spent = 420\n\n    # Calculate cost of pencils\n    pencil_packs_bought = total_pencils / pencils_per_pack  # number of pencil packs\n    cost_pencils = pencil_packs_bought * price_per_pencil_pack\n\n    # Calculate cost of markers\n    marker_packs_bought = total_markers / markers_per_pack  # number of marker packs\n    cost_markers = marker_packs_bought * price_per_marker_pack\n\n    # Calculate total cost based on buying\n    total_cost = cost_pencils + cost_markers\n\n    # Calculate amount of money left from $420\n    money_left = total_money_spent - total_cost\n\n    return money_left",
    "result": 375.0
  },
  {
    "index": 7,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Ben collects 12 stamps every week for 4 weeks. He then gives away half of his stamps to his brother. How many stamps does he have left?\n    \"\"\"\n    stamps_per_week = 12\n    number_of_weeks = 4\n\n    total_stamps_collected = stamps_per_week * number_of_weeks\n    stamps_given_away = total_stamps_collected / 2\n    stamps_left = total_stamps_collected - stamps_given_away\n\n    result = stamps_left\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Ben collects 12 stamps every week for 4 weeks. He then gives away half of his stamps to his brother. How many stamps does he have left?\n    \"\"\"\n    stamps_per_week = 12\n    number_of_weeks = 4\n\n    total_stamps_collected = stamps_per_week * number_of_weeks\n    stamps_given_away = total_stamps_collected / 2\n    stamps_left = total_stamps_collected - stamps_given_away\n\n    result = stamps_left\n\n    return result",
    "result": 24.0
  },
  {
    "index": 8,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Andrew wants to bake cookies for a party of 24 people. Each batch requires 2 cups of sugar and serves 12 people. How many cups of sugar does he need for the cookies?\n    \"\"\"\n    people_to_serve = 24\n    people_per_batch = 12\n    sugar_per_batch = 2  # cups\n\n    batches_needed = people_to_serve / people_per_batch\n    result = batches_needed * sugar_per_batch\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Andrew wants to bake cookies for a party of 24 people. Each batch requires 2 cups of sugar and serves 12 people. How many cups of sugar does he need for the cookies?\n    \"\"\"\n    people_to_serve = 24\n    people_per_batch = 12\n    sugar_per_batch = 2  # cups\n\n    batches_needed = people_to_serve / people_per_batch\n    result = batches_needed * sugar_per_batch\n\n    return result",
    "result": 4.0
  },
  {
    "index": 9,
    "response": "```python\ndef simple_math_problem() -> tuple:\n    \"\"\"\n    The sum of two numbers is 15. One of the numbers is 3 more than the other. What are the two numbers?\n    \"\"\"\n    # Let the first number be x\n    # Then the second number is x + 3\n    first_number = None\n    second_number = None\n\n    sum_of_numbers = 15\n    difference_between_numbers = 3\n\n    # According to the problem:\n    # x + (x + 3) = 15\n    # 2x + 3 = 15\n    # 2x = 12\n    # x = 6\n    first_number = (sum_of_numbers - difference_between_numbers) / 2\n    second_number = first_number + difference_between_numbers\n\n    result = (first_number, second_number)\n\n    return result\n```",
    "code": "def simple_math_problem() -> tuple:\n    \"\"\"\n    The sum of two numbers is 15. One of the numbers is 3 more than the other. What are the two numbers?\n    \"\"\"\n    # Let the first number be x\n    # Then the second number is x + 3\n    first_number = None\n    second_number = None\n\n    sum_of_numbers = 15\n    difference_between_numbers = 3\n\n    # According to the problem:\n    # x + (x + 3) = 15\n    # 2x + 3 = 15\n    # 2x = 12\n    # x = 6\n    first_number = (sum_of_numbers - difference_between_numbers) / 2\n    second_number = first_number + difference_between_numbers\n\n    result = (first_number, second_number)\n\n    return result",
    "result": [
      6.0,
      9.0
    ]
  },
  {
    "index": 10,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If Greg is 17 years old and James is 3 times as old as Greg, how old is James?\n    \"\"\"\n    greg_age = 17\n    james_age = 3 * greg_age\n\n    result = james_age\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If Greg is 17 years old and James is 3 times as old as Greg, how old is James?\n    \"\"\"\n    greg_age = 17\n    james_age = 3 * greg_age\n\n    result = james_age\n\n    return result",
    "result": 51
  },
  {
    "index": 11,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car rental company charges a flat fee of $50 plus $0.25 per kilometer for renting a car. \n    A customer rented a car for 3 days and drove 400 kilometers. \n    How much did the customer pay in total?\n    \"\"\"\n    flat_fee = 50  # flat fee in dollars\n    cost_per_km = 0.25  # cost per kilometer in dollars\n    rental_days = 3  # number of rental days\n    kilometers_driven = 400  # kilometers driven\n    \n    # Since the problem states a flat fee (not multiplied by days), we only add it once.\n    # Calculate cost for kilometers driven\n    cost_kilometers = kilometers_driven * cost_per_km\n    \n    # Total cost is flat fee plus cost for kilometers driven\n    total_cost = flat_fee + cost_kilometers\n\n    return total_cost\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car rental company charges a flat fee of $50 plus $0.25 per kilometer for renting a car. \n    A customer rented a car for 3 days and drove 400 kilometers. \n    How much did the customer pay in total?\n    \"\"\"\n    flat_fee = 50  # flat fee in dollars\n    cost_per_km = 0.25  # cost per kilometer in dollars\n    rental_days = 3  # number of rental days\n    kilometers_driven = 400  # kilometers driven\n    \n    # Since the problem states a flat fee (not multiplied by days), we only add it once.\n    # Calculate cost for kilometers driven\n    cost_kilometers = kilometers_driven * cost_per_km\n    \n    # Total cost is flat fee plus cost for kilometers driven\n    total_cost = flat_fee + cost_kilometers\n\n    return total_cost",
    "result": 150.0
  },
  {
    "index": 12,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Alex wanted to buy some books for his summer reading. He had a coupon that gave him 15% off one book. He chose three books that cost $8.00, $12.00 and $10.00 respectively. He also had to pay 8% sales tax on the total amount. How much did he pay for the books after using the coupon and adding the tax?\n    \"\"\"\n    book1_price = 8.00\n    book2_price = 12.00\n    book3_price = 10.00\n    discount_rate = 0.15\n    sales_tax_rate = 0.08\n\n    # Apply 15% discount to the most expensive book to maximize savings\n    most_expensive_book = max(book1_price, book2_price, book3_price)\n    discount_amount = most_expensive_book * discount_rate\n    discounted_book_price = most_expensive_book - discount_amount\n\n    # Sum the prices of the other two books\n    other_books_total = (book1_price + book2_price + book3_price) - most_expensive_book\n\n    subtotal = discounted_book_price + other_books_total\n\n    total_with_tax = subtotal * (1 + sales_tax_rate)\n\n    result = round(total_with_tax, 2)\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Alex wanted to buy some books for his summer reading. He had a coupon that gave him 15% off one book. He chose three books that cost $8.00, $12.00 and $10.00 respectively. He also had to pay 8% sales tax on the total amount. How much did he pay for the books after using the coupon and adding the tax?\n    \"\"\"\n    book1_price = 8.00\n    book2_price = 12.00\n    book3_price = 10.00\n    discount_rate = 0.15\n    sales_tax_rate = 0.08\n\n    # Apply 15% discount to the most expensive book to maximize savings\n    most_expensive_book = max(book1_price, book2_price, book3_price)\n    discount_amount = most_expensive_book * discount_rate\n    discounted_book_price = most_expensive_book - discount_amount\n\n    # Sum the prices of the other two books\n    other_books_total = (book1_price + book2_price + book3_price) - most_expensive_book\n\n    subtotal = discounted_book_price + other_books_total\n\n    total_with_tax = subtotal * (1 + sales_tax_rate)\n\n    result = round(total_with_tax, 2)\n\n    return result",
    "result": 30.46
  },
  {
    "index": 13,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    How many minutes are in 5 and a half hours?\n    \"\"\"\n    hours = 5.5\n    minutes_per_hour = 60\n    result = hours * minutes_per_hour\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    How many minutes are in 5 and a half hours?\n    \"\"\"\n    hours = 5.5\n    minutes_per_hour = 60\n    result = hours * minutes_per_hour\n    return result",
    "result": 330.0
  },
  {
    "index": 14,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mia has 45 chocolate bars. She eats 3 chocolate bars every day and then buys 2 chocolate bars every weekend. How many chocolate bars does Mia have after 2 weeks?\n    \"\"\"\n    initial_bars = 45\n    days = 14  # 2 weeks\n    bars_eaten_per_day = 3\n    bars_bought_per_weekend = 2\n    weekends = 2  # 2 weeks have 2 weekends\n\n    total_bars_eaten = bars_eaten_per_day * days\n    total_bars_bought = bars_bought_per_weekend * weekends\n\n    result = initial_bars - total_bars_eaten + total_bars_bought\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mia has 45 chocolate bars. She eats 3 chocolate bars every day and then buys 2 chocolate bars every weekend. How many chocolate bars does Mia have after 2 weeks?\n    \"\"\"\n    initial_bars = 45\n    days = 14  # 2 weeks\n    bars_eaten_per_day = 3\n    bars_bought_per_weekend = 2\n    weekends = 2  # 2 weeks have 2 weekends\n\n    total_bars_eaten = bars_eaten_per_day * days\n    total_bars_bought = bars_bought_per_weekend * weekends\n\n    result = initial_bars - total_bars_eaten + total_bars_bought\n\n    return result",
    "result": 7
  },
  {
    "index": 15,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jill's age is 5 years more than twice Josh's age. If Jill is 17 years old, how old is Josh?\n    \"\"\"\n    jill_age = 17\n    # Jill's age = 2 * Josh's age + 5\n    # So, Josh's age = (Jill's age - 5) / 2\n    josh_age = (jill_age - 5) / 2\n\n    return josh_age\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jill's age is 5 years more than twice Josh's age. If Jill is 17 years old, how old is Josh?\n    \"\"\"\n    jill_age = 17\n    # Jill's age = 2 * Josh's age + 5\n    # So, Josh's age = (Jill's age - 5) / 2\n    josh_age = (jill_age - 5) / 2\n\n    return josh_age",
    "result": 6.0
  },
  {
    "index": 16,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jerry bought 14 packs of stationary for a total of $126. How much did each pack cost?\n    \"\"\"\n    total_packs = 14\n    total_cost = 126\n\n    cost_per_pack = total_cost / total_packs\n\n    result = cost_per_pack\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jerry bought 14 packs of stationary for a total of $126. How much did each pack cost?\n    \"\"\"\n    total_packs = 14\n    total_cost = 126\n\n    cost_per_pack = total_cost / total_packs\n\n    result = cost_per_pack\n\n    return result",
    "result": 9.0
  },
  {
    "index": 17,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Liam and his 4 friends go to an amusement park. They spend 6 hours there. \n    Every hour they ride 4 rides. Each ride gives each person 2 tickets. \n    How many tickets do they have in total?\n    \"\"\"\n    number_of_people = 5  # Liam + 4 friends\n    hours_spent = 6\n    rides_per_hour = 4\n    tickets_per_ride_per_person = 2\n\n    total_rides = hours_spent * rides_per_hour\n    tickets_per_ride = number_of_people * tickets_per_ride_per_person\n    total_tickets = total_rides * tickets_per_ride\n\n    return total_tickets\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Liam and his 4 friends go to an amusement park. They spend 6 hours there. \n    Every hour they ride 4 rides. Each ride gives each person 2 tickets. \n    How many tickets do they have in total?\n    \"\"\"\n    number_of_people = 5  # Liam + 4 friends\n    hours_spent = 6\n    rides_per_hour = 4\n    tickets_per_ride_per_person = 2\n\n    total_rides = hours_spent * rides_per_hour\n    tickets_per_ride = number_of_people * tickets_per_ride_per_person\n    total_tickets = total_rides * tickets_per_ride\n\n    return total_tickets",
    "result": 240
  },
  {
    "index": 18,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If each bag of apples cost $5 during peak season, while for the low season each bag costs only $3.50, how much money will be made from selling 200 bags of apples during a peak season?\n    \"\"\"\n    cost_per_bag_peak = 5.0\n    number_of_bags_sold = 200\n    \n    total_revenue_peak = cost_per_bag_peak * number_of_bags_sold\n    \n    result = total_revenue_peak\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If each bag of apples cost $5 during peak season, while for the low season each bag costs only $3.50, how much money will be made from selling 200 bags of apples during a peak season?\n    \"\"\"\n    cost_per_bag_peak = 5.0\n    number_of_bags_sold = 200\n    \n    total_revenue_peak = cost_per_bag_peak * number_of_bags_sold\n    \n    result = total_revenue_peak\n    \n    return result",
    "result": 1000.0
  },
  {
    "index": 19,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Question 9. A classroom has 30 desks. If 25 students are in the classroom, how many more desks are needed?\n    \"\"\"\n    total_desks = 30\n    students_in_classroom = 25\n    \n    # Calculate how many more desks are needed (if any)\n    more_desks_needed = students_in_classroom - total_desks\n    # If result is negative or zero, no more desks are needed\n    if more_desks_needed <= 0:\n        more_desks_needed = 0\n\n    result = more_desks_needed\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Question 9. A classroom has 30 desks. If 25 students are in the classroom, how many more desks are needed?\n    \"\"\"\n    total_desks = 30\n    students_in_classroom = 25\n    \n    # Calculate how many more desks are needed (if any)\n    more_desks_needed = students_in_classroom - total_desks\n    # If result is negative or zero, no more desks are needed\n    if more_desks_needed <= 0:\n        more_desks_needed = 0\n\n    result = more_desks_needed\n\n    return result",
    "result": 0
  },
  {
    "index": 20,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A painter charges $50 per hour for painting walls and $30 per hour for painting doors. \n    He painted 3 walls and 2 doors in a room in 6 hours. \n    The next day, he painted 4 walls and 3 doors in another room in 8 hours. \n    How much did he earn in total for painting the two rooms?\n    \"\"\"\n    # Painter's rates per hour\n    rate_per_hour_wall = 50\n    rate_per_hour_door = 30\n\n    # First day work\n    walls_day1 = 3\n    doors_day1 = 2\n    total_hours_day1 = 6\n\n    # Second day work\n    walls_day2 = 4\n    doors_day2 = 3\n    total_hours_day2 = 8\n\n    # Let x = hours spent per wall, y = hours spent per door\n    # From day 1: 3x + 2y = 6\n    # From day 2: 4x + 3y = 8\n\n    # Solve the system of equations:\n    # Multiply first equation by 3 and second by 2:\n    # 9x + 6y = 18\n    # 8x + 6y = 16\n    # Subtract second from first:\n    # (9x - 8x) + (6y -6y) = 18 -16 => x = 2\n\n    hours_per_wall = 2\n    # From first equation: 3x + 2y = 6 => 3*2 + 2y =6 => 6 + 2y =6 => 2y =0 => y=0\n    hours_per_door = 0\n\n    # Calculate earnings for first day\n    earnings_day1 = (walls_day1 * hours_per_wall * rate_per_hour_wall) + (doors_day1 * hours_per_door * rate_per_hour_door)\n    # Calculate earnings for second day\n    earnings_day2 = (walls_day2 * hours_per_wall * rate_per_hour_wall) + (doors_day2 * hours_per_door * rate_per_hour_door)\n\n    # Total earnings\n    result = earnings_day1 + earnings_day2\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A painter charges $50 per hour for painting walls and $30 per hour for painting doors. \n    He painted 3 walls and 2 doors in a room in 6 hours. \n    The next day, he painted 4 walls and 3 doors in another room in 8 hours. \n    How much did he earn in total for painting the two rooms?\n    \"\"\"\n    # Painter's rates per hour\n    rate_per_hour_wall = 50\n    rate_per_hour_door = 30\n\n    # First day work\n    walls_day1 = 3\n    doors_day1 = 2\n    total_hours_day1 = 6\n\n    # Second day work\n    walls_day2 = 4\n    doors_day2 = 3\n    total_hours_day2 = 8\n\n    # Let x = hours spent per wall, y = hours spent per door\n    # From day 1: 3x + 2y = 6\n    # From day 2: 4x + 3y = 8\n\n    # Solve the system of equations:\n    # Multiply first equation by 3 and second by 2:\n    # 9x + 6y = 18\n    # 8x + 6y = 16\n    # Subtract second from first:\n    # (9x - 8x) + (6y -6y) = 18 -16 => x = 2\n\n    hours_per_wall = 2\n    # From first equation: 3x + 2y = 6 => 3*2 + 2y =6 => 6 + 2y =6 => 2y =0 => y=0\n    hours_per_door = 0\n\n    # Calculate earnings for first day\n    earnings_day1 = (walls_day1 * hours_per_wall * rate_per_hour_wall) + (doors_day1 * hours_per_door * rate_per_hour_door)\n    # Calculate earnings for second day\n    earnings_day2 = (walls_day2 * hours_per_wall * rate_per_hour_wall) + (doors_day2 * hours_per_door * rate_per_hour_door)\n\n    # Total earnings\n    result = earnings_day1 + earnings_day2\n\n    return result",
    "result": 700
  },
  {
    "index": 21,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Karen can run 5 miles per hour faster than her friend. If her friend runs at a speed of 7 miles per hour, how fast can Karen run?\n    \"\"\"\n    friend_speed_mph = 7\n    speed_difference_mph = 5\n\n    karen_speed_mph = friend_speed_mph + speed_difference_mph\n\n    result = karen_speed_mph\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Karen can run 5 miles per hour faster than her friend. If her friend runs at a speed of 7 miles per hour, how fast can Karen run?\n    \"\"\"\n    friend_speed_mph = 7\n    speed_difference_mph = 5\n\n    karen_speed_mph = friend_speed_mph + speed_difference_mph\n\n    result = karen_speed_mph\n\n    return result",
    "result": 12
  },
  {
    "index": 22,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A box contains 200 pencils. Mark took 60 pencils and gave 40 pencils to his friend. He then split the remaining pencils equally between his two cousins. How many pencils did each cousin receive?\n    \"\"\"\n    total_pencils = 200\n    pencils_mark_took = 60\n    pencils_given_to_friend = 40\n\n    remaining_pencils = total_pencils - pencils_mark_took - pencils_given_to_friend\n    pencils_per_cousin = remaining_pencils / 2\n\n    result = pencils_per_cousin\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A box contains 200 pencils. Mark took 60 pencils and gave 40 pencils to his friend. He then split the remaining pencils equally between his two cousins. How many pencils did each cousin receive?\n    \"\"\"\n    total_pencils = 200\n    pencils_mark_took = 60\n    pencils_given_to_friend = 40\n\n    remaining_pencils = total_pencils - pencils_mark_took - pencils_given_to_friend\n    pencils_per_cousin = remaining_pencils / 2\n\n    result = pencils_per_cousin\n    return result",
    "result": 50.0
  },
  {
    "index": 23,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    In a school with 1200 students, 800 gained different amounts of followers in the first, second and third weeks. \n    200 gained 25 followers in the first week, 300 gained 18 followers in the second week and 300 gained 15 followers in the third week. \n    How many followers did the student with the least followers have after three weeks?\n    \"\"\"\n\n    total_students = 1200\n    students_with_follower_gain = 800\n\n    # Given:\n    students_gained_25_in_first_week = 200\n    students_gained_18_in_second_week = 300\n    students_gained_15_in_third_week = 300\n\n    # The 800 students gained different amounts of followers over three weeks.\n    # The specified groups are:\n    # - 200 gained exactly 25 followers in week 1\n    # - 300 gained exactly 18 in week 2\n    # - 300 gained exactly 15 in week 3\n    # So all these 200+300+300 = 800 students cover the whole group that gained followers\n\n    # The problem: Find how many followers the student with the least followers had after 3 weeks.\n\n    # Since the groups gained those followers only in one week each, and different students\n    # gained followers in different weeks. But all these 800 students gained followers, while the other 400 students didn't gain any followers.\n\n    # Students outside these 800 gained no followers, so minimum number of followers after 3 weeks among all students is 0.\n\n    # But the problem states: \"800 gained different amounts of followers in the first, second and third weeks\"\n    # and specifies how many gained how many followers in each week.\n    # The rest of the 400 students presumably gained none.\n\n    # So the student with the least followers has 0 followers after 3 weeks.\n\n    result = 0\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    In a school with 1200 students, 800 gained different amounts of followers in the first, second and third weeks. \n    200 gained 25 followers in the first week, 300 gained 18 followers in the second week and 300 gained 15 followers in the third week. \n    How many followers did the student with the least followers have after three weeks?\n    \"\"\"\n\n    total_students = 1200\n    students_with_follower_gain = 800\n\n    # Given:\n    students_gained_25_in_first_week = 200\n    students_gained_18_in_second_week = 300\n    students_gained_15_in_third_week = 300\n\n    # The 800 students gained different amounts of followers over three weeks.\n    # The specified groups are:\n    # - 200 gained exactly 25 followers in week 1\n    # - 300 gained exactly 18 in week 2\n    # - 300 gained exactly 15 in week 3\n    # So all these 200+300+300 = 800 students cover the whole group that gained followers\n\n    # The problem: Find how many followers the student with the least followers had after 3 weeks.\n\n    # Since the groups gained those followers only in one week each, and different students\n    # gained followers in different weeks. But all these 800 students gained followers, while the other 400 students didn't gain any followers.\n\n    # Students outside these 800 gained no followers, so minimum number of followers after 3 weeks among all students is 0.\n\n    # But the problem states: \"800 gained different amounts of followers in the first, second and third weeks\"\n    # and specifies how many gained how many followers in each week.\n    # The rest of the 400 students presumably gained none.\n\n    # So the student with the least followers has 0 followers after 3 weeks.\n\n    result = 0\n\n    return result",
    "result": 0
  },
  {
    "index": 24,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Alice baked 12 cupcakes and ate 3 of them. She then shared the remaining cupcakes equally with her 4 friends. How many cupcakes did each friend get if Alice gave 2/3 of her share to Bob, who is her best friend?\n    \"\"\"\n    total_cupcakes = 12\n    cupcakes_eaten = 3\n    friends_count = 4\n    alice_share_fraction_given_to_bob = 2 / 3\n\n    # Calculate remaining cupcakes after Alice ate some\n    remaining_cupcakes = total_cupcakes - cupcakes_eaten\n\n    # Alice shares the remaining cupcakes equally with her 4 friends,\n    # so total people sharing are 1 (Alice) + 4 (friends) = 5\n    total_people_sharing = 1 + friends_count\n\n    # Each person's share\n    share_per_person = remaining_cupcakes / total_people_sharing\n\n    # Bob gets 2/3 of Alice's share\n    bob_share = alice_share_fraction_given_to_bob * share_per_person\n\n    return bob_share\n```\n\n---\n\n**Possible solution method:**\n\nFirst, determine how many cupcakes remain after Alice ate some. Then divide these remaining cupcakes equally among Alice and her 4 friends to find each person's share. Finally, calculate how much Bob gets by taking two-thirds of Alice’s share.",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Alice baked 12 cupcakes and ate 3 of them. She then shared the remaining cupcakes equally with her 4 friends. How many cupcakes did each friend get if Alice gave 2/3 of her share to Bob, who is her best friend?\n    \"\"\"\n    total_cupcakes = 12\n    cupcakes_eaten = 3\n    friends_count = 4\n    alice_share_fraction_given_to_bob = 2 / 3\n\n    # Calculate remaining cupcakes after Alice ate some\n    remaining_cupcakes = total_cupcakes - cupcakes_eaten\n\n    # Alice shares the remaining cupcakes equally with her 4 friends,\n    # so total people sharing are 1 (Alice) + 4 (friends) = 5\n    total_people_sharing = 1 + friends_count\n\n    # Each person's share\n    share_per_person = remaining_cupcakes / total_people_sharing\n\n    # Bob gets 2/3 of Alice's share\n    bob_share = alice_share_fraction_given_to_bob * share_per_person\n\n    return bob_share",
    "result": 1.2
  },
  {
    "index": 25,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A store has a 25% off sale on all items. If you purchase three items with regular prices of $10, $15 and $20, what will be your total cost after the discount?\n    \"\"\"\n    price_item1 = 10\n    price_item2 = 15\n    price_item3 = 20\n    discount_rate = 0.25\n\n    total_regular_price = price_item1 + price_item2 + price_item3\n    discount_amount = total_regular_price * discount_rate\n    result = total_regular_price - discount_amount\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A store has a 25% off sale on all items. If you purchase three items with regular prices of $10, $15 and $20, what will be your total cost after the discount?\n    \"\"\"\n    price_item1 = 10\n    price_item2 = 15\n    price_item3 = 20\n    discount_rate = 0.25\n\n    total_regular_price = price_item1 + price_item2 + price_item3\n    discount_amount = total_regular_price * discount_rate\n    result = total_regular_price - discount_amount\n\n    return result",
    "result": 33.75
  },
  {
    "index": 26,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A recipe calls for 4 cups of flour, 2 eggs, and 1 cup of sugar. If Jane wants to make a double batch, how many cups of sugar will she need?\n    \"\"\"\n    cups_of_sugar_per_batch = 1\n    number_of_batches = 2\n\n    total_cups_of_sugar = cups_of_sugar_per_batch * number_of_batches\n\n    result = total_cups_of_sugar\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A recipe calls for 4 cups of flour, 2 eggs, and 1 cup of sugar. If Jane wants to make a double batch, how many cups of sugar will she need?\n    \"\"\"\n    cups_of_sugar_per_batch = 1\n    number_of_batches = 2\n\n    total_cups_of_sugar = cups_of_sugar_per_batch * number_of_batches\n\n    result = total_cups_of_sugar\n\n    return result",
    "result": 2
  },
  {
    "index": 27,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Ethan reads three times as many books as Ryan, but he takes 1/2 times longer to read one book than Ryan. \n    If Ethan reads 150 pages every time he reads a book, how many pages did they read altogether if Ryan read 10 books?\n    \"\"\"\n    ryan_books = 10\n    ethan_books = 3 * ryan_books\n    pages_per_ethan_book = 150\n    \n    # Ethan reads 150 pages per book, so total pages Ethan read:\n    ethan_pages_total = ethan_books * pages_per_ethan_book\n    \n    # We don't have pages per Ryan book directly, but can find from time relation\n    \n    # Let ryan_time_per_book = 1 (unit time)\n    # Ethan takes 1/2 times longer than Ryan: that means Ethan_time_per_book = 1 + 0.5 * 1 = 1.5 times Ryan time\n    # Actually \"1/2 times longer\" means 1 + 0.5 = 1.5 times the time, so Ethan_time_per_book = 1.5 * Ryan_time_per_book\n    \n    # Now, Ethan reads 150 pages in 1.5 times the time Ryan takes to read one book\n    # So, Ethan reading speed = 150 pages / (1.5 * Ryan_time_per_book) = 100 pages / Ryan_time_per_book\n    # Ryan reading speed = unknown pages / Ryan_time_per_book\n    # Ratio of speeds = Ryan_speed / Ethan_speed = (Ryan_pages / Ryan_time) / (Ethan_pages / Ethan_time)\n    # We know Ethan_speed = 100 pages / Ryan_time_per_book\n    \n    # Since Ethan's speed is 100 pages/time and Ryan's time per book is 1 time unit,\n    # To find Ryan's pages per book, assume constant reading speed proportional to pages/time\n    \n    # Since we don't have reading speeds, we can deduce Ryan reads fewer pages than Ethan per book\n    # But no specific data was given for that\n    \n    # Since only Ethan's pages per book is given, and Ryan read 10 books,\n    # we must find Ryan's pages per book for total pages.\n    # Let's find Ryan's pages per book using time relationship and Ethan's pages.\n    \n    # Let Ryan's pages per book = x\n    # Reading speed of Ryan = x / 1 \n    # Reading speed of Ethan = 150 / 1.5 = 100 pages per time unit\n    \n    # Assuming reading speed is constant for both (same speed),\n    # then Ryan's speed = Ethan's speed = 100 pages per time unit\n    \n    # Therefore, Ryan's pages per book = 100 * 1 = 100 pages\n    \n    ryan_pages_per_book = 100\n    ryan_pages_total = ryan_books * ryan_pages_per_book\n    \n    total_pages_read = ethan_pages_total + ryan_pages_total\n    \n    return total_pages_read\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Ethan reads three times as many books as Ryan, but he takes 1/2 times longer to read one book than Ryan. \n    If Ethan reads 150 pages every time he reads a book, how many pages did they read altogether if Ryan read 10 books?\n    \"\"\"\n    ryan_books = 10\n    ethan_books = 3 * ryan_books\n    pages_per_ethan_book = 150\n    \n    # Ethan reads 150 pages per book, so total pages Ethan read:\n    ethan_pages_total = ethan_books * pages_per_ethan_book\n    \n    # We don't have pages per Ryan book directly, but can find from time relation\n    \n    # Let ryan_time_per_book = 1 (unit time)\n    # Ethan takes 1/2 times longer than Ryan: that means Ethan_time_per_book = 1 + 0.5 * 1 = 1.5 times Ryan time\n    # Actually \"1/2 times longer\" means 1 + 0.5 = 1.5 times the time, so Ethan_time_per_book = 1.5 * Ryan_time_per_book\n    \n    # Now, Ethan reads 150 pages in 1.5 times the time Ryan takes to read one book\n    # So, Ethan reading speed = 150 pages / (1.5 * Ryan_time_per_book) = 100 pages / Ryan_time_per_book\n    # Ryan reading speed = unknown pages / Ryan_time_per_book\n    # Ratio of speeds = Ryan_speed / Ethan_speed = (Ryan_pages / Ryan_time) / (Ethan_pages / Ethan_time)\n    # We know Ethan_speed = 100 pages / Ryan_time_per_book\n    \n    # Since Ethan's speed is 100 pages/time and Ryan's time per book is 1 time unit,\n    # To find Ryan's pages per book, assume constant reading speed proportional to pages/time\n    \n    # Since we don't have reading speeds, we can deduce Ryan reads fewer pages than Ethan per book\n    # But no specific data was given for that\n    \n    # Since only Ethan's pages per book is given, and Ryan read 10 books,\n    # we must find Ryan's pages per book for total pages.\n    # Let's find Ryan's pages per book using time relationship and Ethan's pages.\n    \n    # Let Ryan's pages per book = x\n    # Reading speed of Ryan = x / 1 \n    # Reading speed of Ethan = 150 / 1.5 = 100 pages per time unit\n    \n    # Assuming reading speed is constant for both (same speed),\n    # then Ryan's speed = Ethan's speed = 100 pages per time unit\n    \n    # Therefore, Ryan's pages per book = 100 * 1 = 100 pages\n    \n    ryan_pages_per_book = 100\n    ryan_pages_total = ryan_books * ryan_pages_per_book\n    \n    total_pages_read = ethan_pages_total + ryan_pages_total\n    \n    return total_pages_read",
    "result": 5500
  },
  {
    "index": 28,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Tom earns 3/10's the salary of David. If David earns $7000 a month, how long will it take Tom to earn the same amount David earned in 7 months?\n    \"\"\"\n    davids_monthly_salary = 7000\n    toms_fraction_of_davids_salary = 3 / 10\n    davids_earnings_in_7_months = davids_monthly_salary * 7\n    toms_monthly_salary = davids_monthly_salary * toms_fraction_of_davids_salary\n    \n    # Calculate the number of months Tom needs to earn the same amount David earned in 7 months\n    months_for_tom = davids_earnings_in_7_months / toms_monthly_salary\n    \n    return months_for_tom\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Tom earns 3/10's the salary of David. If David earns $7000 a month, how long will it take Tom to earn the same amount David earned in 7 months?\n    \"\"\"\n    davids_monthly_salary = 7000\n    toms_fraction_of_davids_salary = 3 / 10\n    davids_earnings_in_7_months = davids_monthly_salary * 7\n    toms_monthly_salary = davids_monthly_salary * toms_fraction_of_davids_salary\n    \n    # Calculate the number of months Tom needs to earn the same amount David earned in 7 months\n    months_for_tom = davids_earnings_in_7_months / toms_monthly_salary\n    \n    return months_for_tom",
    "result": 23.333333333333332
  },
  {
    "index": 29,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mary is painting a new room. Each gallon of paint covers 400 square feet. She needs to paint 2200 square feet. How many gallons of paint does Mary need?\n    \"\"\"\n    coverage_per_gallon = 400\n    total_area = 2200\n\n    # Calculate the exact number of gallons needed (may be fractional)\n    exact_gallons_needed = total_area / coverage_per_gallon\n\n    # Since Mary cannot buy a fraction of a gallon, she needs to round up to the next whole number\n    import math\n    result = math.ceil(exact_gallons_needed)\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mary is painting a new room. Each gallon of paint covers 400 square feet. She needs to paint 2200 square feet. How many gallons of paint does Mary need?\n    \"\"\"\n    coverage_per_gallon = 400\n    total_area = 2200\n\n    # Calculate the exact number of gallons needed (may be fractional)\n    exact_gallons_needed = total_area / coverage_per_gallon\n\n    # Since Mary cannot buy a fraction of a gallon, she needs to round up to the next whole number\n    import math\n    result = math.ceil(exact_gallons_needed)\n\n    return result",
    "result": 6
  },
  {
    "index": 30,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In a store, the price of a ring was reduced by 40%. If the original price of the ring was $50, how much money would Noah save for buying 4 rings at the reduced price?\n    \"\"\"\n    original_price_per_ring = 50\n    discount_percentage = 40 / 100  # 40%\n    number_of_rings = 4\n\n    discount_amount_per_ring = original_price_per_ring * discount_percentage\n    total_savings = discount_amount_per_ring * number_of_rings\n\n    result = total_savings\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In a store, the price of a ring was reduced by 40%. If the original price of the ring was $50, how much money would Noah save for buying 4 rings at the reduced price?\n    \"\"\"\n    original_price_per_ring = 50\n    discount_percentage = 40 / 100  # 40%\n    number_of_rings = 4\n\n    discount_amount_per_ring = original_price_per_ring * discount_percentage\n    total_savings = discount_amount_per_ring * number_of_rings\n\n    result = total_savings\n\n    return result",
    "result": 80.0
  },
  {
    "index": 31,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A recipe calls for 1/2 cup of sugar to make 12 muffins. How much sugar is needed to make 36 muffins using the same recipe?\n    \"\"\"\n    sugar_per_12_muffins = 0.5  # cups\n    muffins_to_make = 36\n    muffins_original = 12\n\n    # calculate sugar per muffin\n    sugar_per_muffin = sugar_per_12_muffins / muffins_original\n    # calculate sugar needed for 36 muffins\n    result = sugar_per_muffin * muffins_to_make\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A recipe calls for 1/2 cup of sugar to make 12 muffins. How much sugar is needed to make 36 muffins using the same recipe?\n    \"\"\"\n    sugar_per_12_muffins = 0.5  # cups\n    muffins_to_make = 36\n    muffins_original = 12\n\n    # calculate sugar per muffin\n    sugar_per_muffin = sugar_per_12_muffins / muffins_original\n    # calculate sugar needed for 36 muffins\n    result = sugar_per_muffin * muffins_to_make\n\n    return result",
    "result": 1.5
  },
  {
    "index": 32,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Alex can read a 300-page book in 25 hours. How long would it take him to finish reading a 450-page book at this constant rate?\n    \"\"\"\n    pages_1 = 300\n    time_1 = 25  # hours\n    pages_2 = 450\n\n    reading_rate = pages_1 / time_1  # pages per hour\n    result = pages_2 / reading_rate  # hours to read 450 pages at the same rate\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Alex can read a 300-page book in 25 hours. How long would it take him to finish reading a 450-page book at this constant rate?\n    \"\"\"\n    pages_1 = 300\n    time_1 = 25  # hours\n    pages_2 = 450\n\n    reading_rate = pages_1 / time_1  # pages per hour\n    result = pages_2 / reading_rate  # hours to read 450 pages at the same rate\n\n    return result",
    "result": 37.5
  },
  {
    "index": 33,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jenna and Manny are going to the store to buy apples. Jenna needs 4 large bags of apples that cost $5.50 each while Manny needs 1 small bag of apples that cost $2.25. If they have a combined total of $21.00, how much did Manny spend?\n    \"\"\"\n    cost_per_large_bag = 5.50\n    number_large_bags = 4\n    cost_per_small_bag = 2.25\n    number_small_bags = 1\n    combined_total = 21.00\n\n    jenna_spent = number_large_bags * cost_per_large_bag\n    # Manny needed 1 small bag of apples at $2.25 each\n    manny_spent = number_small_bags * cost_per_small_bag\n\n    # To confirm the combined total, summing both:\n    total_spent = jenna_spent + manny_spent\n    # The problem only asks how much Manny spent:\n    result = manny_spent\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jenna and Manny are going to the store to buy apples. Jenna needs 4 large bags of apples that cost $5.50 each while Manny needs 1 small bag of apples that cost $2.25. If they have a combined total of $21.00, how much did Manny spend?\n    \"\"\"\n    cost_per_large_bag = 5.50\n    number_large_bags = 4\n    cost_per_small_bag = 2.25\n    number_small_bags = 1\n    combined_total = 21.00\n\n    jenna_spent = number_large_bags * cost_per_large_bag\n    # Manny needed 1 small bag of apples at $2.25 each\n    manny_spent = number_small_bags * cost_per_small_bag\n\n    # To confirm the combined total, summing both:\n    total_spent = jenna_spent + manny_spent\n    # The problem only asks how much Manny spent:\n    result = manny_spent\n\n    return result",
    "result": 2.25
  },
  {
    "index": 34,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If a pizza with a diameter of 14 inches costs $12, and a pizza with a diameter of 18 inches costs $16, which pizza is the better deal?\n    \"\"\"\n    diameter1 = 14\n    price1 = 12\n    diameter2 = 18\n    price2 = 16\n\n    # Calculate the area of each pizza (area = π * r^2)\n    import math\n    radius1 = diameter1 / 2\n    radius2 = diameter2 / 2\n    area1 = math.pi * radius1 ** 2\n    area2 = math.pi * radius2 ** 2\n\n    # Calculate cost per square inch\n    cost_per_sq_inch1 = price1 / area1\n    cost_per_sq_inch2 = price2 / area2\n\n    # The better deal is the pizza with the lower cost per square inch\n    # Return which is better (return 1 if first pizza is better, 2 if second)\n    if cost_per_sq_inch1 < cost_per_sq_inch2:\n        result = 1\n    else:\n        result = 2\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a pizza with a diameter of 14 inches costs $12, and a pizza with a diameter of 18 inches costs $16, which pizza is the better deal?\n    \"\"\"\n    diameter1 = 14\n    price1 = 12\n    diameter2 = 18\n    price2 = 16\n\n    # Calculate the area of each pizza (area = π * r^2)\n    import math\n    radius1 = diameter1 / 2\n    radius2 = diameter2 / 2\n    area1 = math.pi * radius1 ** 2\n    area2 = math.pi * radius2 ** 2\n\n    # Calculate cost per square inch\n    cost_per_sq_inch1 = price1 / area1\n    cost_per_sq_inch2 = price2 / area2\n\n    # The better deal is the pizza with the lower cost per square inch\n    # Return which is better (return 1 if first pizza is better, 2 if second)\n    if cost_per_sq_inch1 < cost_per_sq_inch2:\n        result = 1\n    else:\n        result = 2\n\n    return result",
    "result": 2
  },
  {
    "index": 35,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If Jocelyn's board game collection consists of 6 games with the smallest one being 15 inches long and the longest being 24 inches long, how much total inches of board game do they have in their collection?\n    \"\"\"\n    number_of_games = 6\n    smallest_game_length = 15\n    longest_game_length = 24\n    \n    # Since the problem doesn't specify lengths of the other 4 games, \n    # we'll assume all games are between smallest and longest inclusive.\n    # Without additional info, the simplest assumption is all games are the average length.\n    average_length = (smallest_game_length + longest_game_length) / 2\n    \n    total_length = number_of_games * average_length\n    \n    result = total_length\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If Jocelyn's board game collection consists of 6 games with the smallest one being 15 inches long and the longest being 24 inches long, how much total inches of board game do they have in their collection?\n    \"\"\"\n    number_of_games = 6\n    smallest_game_length = 15\n    longest_game_length = 24\n    \n    # Since the problem doesn't specify lengths of the other 4 games, \n    # we'll assume all games are between smallest and longest inclusive.\n    # Without additional info, the simplest assumption is all games are the average length.\n    average_length = (smallest_game_length + longest_game_length) / 2\n    \n    total_length = number_of_games * average_length\n    \n    result = total_length\n    \n    return result",
    "result": 117.0
  },
  {
    "index": 36,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jane had 36 water bottles that she was originally going to sell at $3 per bottle, but she realized she could sale them for $2.75 per bottle. How much more money would she have made if she sold them for the original price of $3 each?\n    \"\"\"\n    number_of_bottles = 36\n    original_price_per_bottle = 3.00\n    reduced_price_per_bottle = 2.75\n\n    original_total = number_of_bottles * original_price_per_bottle\n    reduced_total = number_of_bottles * reduced_price_per_bottle\n\n    result = original_total - reduced_total\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jane had 36 water bottles that she was originally going to sell at $3 per bottle, but she realized she could sale them for $2.75 per bottle. How much more money would she have made if she sold them for the original price of $3 each?\n    \"\"\"\n    number_of_bottles = 36\n    original_price_per_bottle = 3.00\n    reduced_price_per_bottle = 2.75\n\n    original_total = number_of_bottles * original_price_per_bottle\n    reduced_total = number_of_bottles * reduced_price_per_bottle\n\n    result = original_total - reduced_total\n\n    return result",
    "result": 9.0
  },
  {
    "index": 37,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    David has been cycling for the past 5 years. He cycles 20 miles every weekend. How many miles has David cycled since he started cycling?\n    \"\"\"\n    years_cycling = 5\n    miles_per_weekend = 20\n    weekends_per_year = 52\n    \n    total_miles = years_cycling * weekends_per_year * miles_per_weekend\n    result = total_miles\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    David has been cycling for the past 5 years. He cycles 20 miles every weekend. How many miles has David cycled since he started cycling?\n    \"\"\"\n    years_cycling = 5\n    miles_per_weekend = 20\n    weekends_per_year = 52\n    \n    total_miles = years_cycling * weekends_per_year * miles_per_weekend\n    result = total_miles\n    \n    return result",
    "result": 5200
  },
  {
    "index": 38,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Rachel bought 15 pens for $18. If each pen costs the same amount, how much does each pen cost?\n    \"\"\"\n    total_pens = 15\n    total_cost = 18.0\n\n    cost_per_pen = total_cost / total_pens\n\n    result = cost_per_pen\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Rachel bought 15 pens for $18. If each pen costs the same amount, how much does each pen cost?\n    \"\"\"\n    total_pens = 15\n    total_cost = 18.0\n\n    cost_per_pen = total_cost / total_pens\n\n    result = cost_per_pen\n\n    return result",
    "result": 1.2
  },
  {
    "index": 39,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Luis sells lemonade at a stand. He makes 12 cups of lemonade for $3. He sells each cup for $1. He also spends $5 on ice and cups. How much profit does he make?\n    \"\"\"\n    cost_to_make_lemonade = 3      # dollars spent to make 12 cups of lemonade\n    number_of_cups = 12            # total cups prepared\n    price_per_cup = 1              # selling price per cup\n    additional_expenses = 5        # dollars spent on ice and cups\n    \n    total_revenue = number_of_cups * price_per_cup\n    total_cost = cost_to_make_lemonade + additional_expenses\n    \n    profit = total_revenue - total_cost\n\n    return profit\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Luis sells lemonade at a stand. He makes 12 cups of lemonade for $3. He sells each cup for $1. He also spends $5 on ice and cups. How much profit does he make?\n    \"\"\"\n    cost_to_make_lemonade = 3      # dollars spent to make 12 cups of lemonade\n    number_of_cups = 12            # total cups prepared\n    price_per_cup = 1              # selling price per cup\n    additional_expenses = 5        # dollars spent on ice and cups\n    \n    total_revenue = number_of_cups * price_per_cup\n    total_cost = cost_to_make_lemonade + additional_expenses\n    \n    profit = total_revenue - total_cost\n\n    return profit",
    "result": 4
  },
  {
    "index": 40,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A store has 600 apples. If they sell 20% of the apples and give away 10% as free samples, how many apples are left in the store?\n    \"\"\"\n    total_apples = 600\n    sold_percentage = 20 / 100\n    free_samples_percentage = 10 / 100\n\n    sold_apples = total_apples * sold_percentage\n    free_samples_apples = total_apples * free_samples_percentage\n\n    apples_left = total_apples - sold_apples - free_samples_apples\n\n    return apples_left\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A store has 600 apples. If they sell 20% of the apples and give away 10% as free samples, how many apples are left in the store?\n    \"\"\"\n    total_apples = 600\n    sold_percentage = 20 / 100\n    free_samples_percentage = 10 / 100\n\n    sold_apples = total_apples * sold_percentage\n    free_samples_apples = total_apples * free_samples_percentage\n\n    apples_left = total_apples - sold_apples - free_samples_apples\n\n    return apples_left",
    "result": 420.0
  },
  {
    "index": 41,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Tom works 10 hours per day as a construction worker from Monday to Thursday and works for 5 hours on Friday. If he makes $30 per hour, how much does Tom get paid for the entire week?\n    \"\"\"\n    hours_per_day_mon_to_thu = 10\n    days_mon_to_thu = 4\n    hours_friday = 5\n    pay_per_hour = 30\n\n    total_hours_mon_to_thu = hours_per_day_mon_to_thu * days_mon_to_thu\n    total_hours = total_hours_mon_to_thu + hours_friday\n\n    result = total_hours * pay_per_hour\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Tom works 10 hours per day as a construction worker from Monday to Thursday and works for 5 hours on Friday. If he makes $30 per hour, how much does Tom get paid for the entire week?\n    \"\"\"\n    hours_per_day_mon_to_thu = 10\n    days_mon_to_thu = 4\n    hours_friday = 5\n    pay_per_hour = 30\n\n    total_hours_mon_to_thu = hours_per_day_mon_to_thu * days_mon_to_thu\n    total_hours = total_hours_mon_to_thu + hours_friday\n\n    result = total_hours * pay_per_hour\n\n    return result",
    "result": 1350
  },
  {
    "index": 42,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    During the math tests in a school, 4 out of 6 students got an A grade. If 2 students are randomly chosen, what is the probability that both got an A grade?\n    \"\"\"\n    total_students = 6\n    students_with_A = 4\n    students_chosen = 2\n\n    # Probability that first chosen student got an A\n    prob_first_A = students_with_A / total_students\n    \n    # After choosing one student with A, one less A student and one less total student\n    prob_second_A = (students_with_A - 1) / (total_students - 1)\n    \n    # Probability both chosen students got an A\n    result = prob_first_A * prob_second_A\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    During the math tests in a school, 4 out of 6 students got an A grade. If 2 students are randomly chosen, what is the probability that both got an A grade?\n    \"\"\"\n    total_students = 6\n    students_with_A = 4\n    students_chosen = 2\n\n    # Probability that first chosen student got an A\n    prob_first_A = students_with_A / total_students\n    \n    # After choosing one student with A, one less A student and one less total student\n    prob_second_A = (students_with_A - 1) / (total_students - 1)\n    \n    # Probability both chosen students got an A\n    result = prob_first_A * prob_second_A\n\n    return result",
    "result": 0.39999999999999997
  },
  {
    "index": 43,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Yesterday, Lisa and I took 50 photos at the park. Today, we plan to take 40% fewer photos than yesterday. If we want to take a total of 80 photos, how many photos will we take today?\n    \"\"\"\n    photos_yesterday = 50\n    total_photos_desired = 80\n    reduction_percentage = 40 / 100  # 40%\n    \n    # Calculate photos to be taken today (40% fewer than yesterday)\n    photos_today = photos_yesterday * (1 - reduction_percentage)\n    \n    return photos_today\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Yesterday, Lisa and I took 50 photos at the park. Today, we plan to take 40% fewer photos than yesterday. If we want to take a total of 80 photos, how many photos will we take today?\n    \"\"\"\n    photos_yesterday = 50\n    total_photos_desired = 80\n    reduction_percentage = 40 / 100  # 40%\n    \n    # Calculate photos to be taken today (40% fewer than yesterday)\n    photos_today = photos_yesterday * (1 - reduction_percentage)\n    \n    return photos_today",
    "result": 30.0
  },
  {
    "index": 44,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A class had 45 students in total. The ratio of girls to boys was 3:5. How many boys were in the class?\n    \"\"\"\n    total_students = 45\n    ratio_girls = 3\n    ratio_boys = 5\n    total_ratio_parts = ratio_girls + ratio_boys\n    \n    # Calculate one part value\n    one_part = total_students / total_ratio_parts\n    \n    # Calculate number of boys\n    number_of_boys = one_part * ratio_boys\n    \n    return number_of_boys\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A class had 45 students in total. The ratio of girls to boys was 3:5. How many boys were in the class?\n    \"\"\"\n    total_students = 45\n    ratio_girls = 3\n    ratio_boys = 5\n    total_ratio_parts = ratio_girls + ratio_boys\n    \n    # Calculate one part value\n    one_part = total_students / total_ratio_parts\n    \n    # Calculate number of boys\n    number_of_boys = one_part * ratio_boys\n    \n    return number_of_boys",
    "result": 28.125
  },
  {
    "index": 45,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A snail can travel 4 cm in 1 minute. How long would it take for the snail to travel 72 cm if it does not stop?\n    \"\"\"\n    distance_per_minute_cm = 4\n    total_distance_cm = 72\n    \n    time_minutes = total_distance_cm / distance_per_minute_cm\n    \n    result = time_minutes\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A snail can travel 4 cm in 1 minute. How long would it take for the snail to travel 72 cm if it does not stop?\n    \"\"\"\n    distance_per_minute_cm = 4\n    total_distance_cm = 72\n    \n    time_minutes = total_distance_cm / distance_per_minute_cm\n    \n    result = time_minutes\n    \n    return result",
    "result": 18.0
  },
  {
    "index": 46,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A diagram shaped like a triangle has a base of 6 inches and a height of 7 inches. What is the area of the triangle?\n    \"\"\"\n    base_inches = 6\n    height_inches = 7\n\n    # Area of a triangle = (1/2) * base * height\n    area = 0.5 * base_inches * height_inches\n\n    result = area\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A diagram shaped like a triangle has a base of 6 inches and a height of 7 inches. What is the area of the triangle?\n    \"\"\"\n    base_inches = 6\n    height_inches = 7\n\n    # Area of a triangle = (1/2) * base * height\n    area = 0.5 * base_inches * height_inches\n\n    result = area\n    return result",
    "result": 21.0
  },
  {
    "index": 47,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A student spent $24 on 6 pens and 4 pencils. If each pen cost the same and each pencil cost the same, what was the price of 1 pen and 1 pencil?\n    \"\"\"\n    total_cost = 24\n    number_of_pens = 6\n    number_of_pencils = 4\n    \n    # Let pen_cost = cost of one pen\n    # Let pencil_cost = cost of one pencil\n    # The equation: 6 * pen_cost + 4 * pencil_cost = 24\n    \n    # We want to find pen_cost + pencil_cost\n    # Let's express pencil_cost in terms of pen_cost:\n    # 4 * pencil_cost = 24 - 6 * pen_cost\n    # pencil_cost = (24 - 6 * pen_cost) / 4\n\n    # Now pen_cost + pencil_cost = pen_cost + (24 - 6 * pen_cost)/4\n    # = pen_cost + 6 - 1.5 * pen_cost = 6 - 0.5 * pen_cost\n\n    # This expression depends on pen_cost, so pen_cost + pencil_cost is not unique.\n    # Without more information, cannot determine exact individual costs.\n    #\n    # But we can guess if pen_cost == pencil_cost for simplicity:\n    # 6x + 4x = 24 -> 10x = 24 -> x = 2.4\n    # So pen_cost + pencil_cost = 2.4 + 2.4 = 4.8\n\n    cost_each = total_cost / (number_of_pens + number_of_pencils)\n    result = 2 * cost_each  # pen + pencil\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A student spent $24 on 6 pens and 4 pencils. If each pen cost the same and each pencil cost the same, what was the price of 1 pen and 1 pencil?\n    \"\"\"\n    total_cost = 24\n    number_of_pens = 6\n    number_of_pencils = 4\n    \n    # Let pen_cost = cost of one pen\n    # Let pencil_cost = cost of one pencil\n    # The equation: 6 * pen_cost + 4 * pencil_cost = 24\n    \n    # We want to find pen_cost + pencil_cost\n    # Let's express pencil_cost in terms of pen_cost:\n    # 4 * pencil_cost = 24 - 6 * pen_cost\n    # pencil_cost = (24 - 6 * pen_cost) / 4\n\n    # Now pen_cost + pencil_cost = pen_cost + (24 - 6 * pen_cost)/4\n    # = pen_cost + 6 - 1.5 * pen_cost = 6 - 0.5 * pen_cost\n\n    # This expression depends on pen_cost, so pen_cost + pencil_cost is not unique.\n    # Without more information, cannot determine exact individual costs.\n    #\n    # But we can guess if pen_cost == pencil_cost for simplicity:\n    # 6x + 4x = 24 -> 10x = 24 -> x = 2.4\n    # So pen_cost + pencil_cost = 2.4 + 2.4 = 4.8\n\n    cost_each = total_cost / (number_of_pens + number_of_pencils)\n    result = 2 * cost_each  # pen + pencil\n\n    return result",
    "result": 4.8
  },
  {
    "index": 48,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A farmer has 60 cows and 45 horses. If each cow has 4 legs and each horse has 4 legs, how many total legs are there among the animals?\n    \"\"\"\n    number_of_cows = 60\n    number_of_horses = 45\n    legs_per_cow = 4\n    legs_per_horse = 4\n\n    total_legs_cows = number_of_cows * legs_per_cow\n    total_legs_horses = number_of_horses * legs_per_horse\n\n    result = total_legs_cows + total_legs_horses\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A farmer has 60 cows and 45 horses. If each cow has 4 legs and each horse has 4 legs, how many total legs are there among the animals?\n    \"\"\"\n    number_of_cows = 60\n    number_of_horses = 45\n    legs_per_cow = 4\n    legs_per_horse = 4\n\n    total_legs_cows = number_of_cows * legs_per_cow\n    total_legs_horses = number_of_horses * legs_per_horse\n\n    result = total_legs_cows + total_legs_horses\n\n    return result",
    "result": 420
  },
  {
    "index": 49,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If there are 200 people going to a concert and there are 12 security staff, what percentage of people going are security staff?\n    \"\"\"\n    total_people_going = 200\n    security_staff = 12\n    \n    # Calculate the percentage of security staff out of total people going\n    result = (security_staff / total_people_going) * 100\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If there are 200 people going to a concert and there are 12 security staff, what percentage of people going are security staff?\n    \"\"\"\n    total_people_going = 200\n    security_staff = 12\n    \n    # Calculate the percentage of security staff out of total people going\n    result = (security_staff / total_people_going) * 100\n\n    return result",
    "result": 6.0
  },
  {
    "index": 50,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A rectangular box has a length of 10 cm, a width of 8 cm, and a height of 6 cm. What is the volume of the box in cubic centimeters?\n    \"\"\"\n    length_cm = 10\n    width_cm = 8\n    height_cm = 6\n    \n    volume_cubic_cm = length_cm * width_cm * height_cm\n    \n    result = volume_cubic_cm\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A rectangular box has a length of 10 cm, a width of 8 cm, and a height of 6 cm. What is the volume of the box in cubic centimeters?\n    \"\"\"\n    length_cm = 10\n    width_cm = 8\n    height_cm = 6\n    \n    volume_cubic_cm = length_cm * width_cm * height_cm\n    \n    result = volume_cubic_cm\n    \n    return result",
    "result": 480
  },
  {
    "index": 51,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jake had 120 oranges, and he gave away 60 of them. How many oranges are left?\n    \"\"\"\n    total_oranges = 120\n    oranges_given_away = 60\n    oranges_left = total_oranges - oranges_given_away\n\n    result = oranges_left\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jake had 120 oranges, and he gave away 60 of them. How many oranges are left?\n    \"\"\"\n    total_oranges = 120\n    oranges_given_away = 60\n    oranges_left = total_oranges - oranges_given_away\n\n    result = oranges_left\n\n    return result",
    "result": 60
  },
  {
    "index": 52,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John goes for a run every morning and in his first week, he runs 4 miles each day. Then he increases his daily distance by 2 miles every successive week. What is the total distance John would run in the first 8 weeks?\n    \"\"\"\n    miles_first_week_daily = 4\n    increase_per_week = 2\n    days_per_week = 7\n    total_weeks = 8\n\n    total_distance = 0\n    for week in range(total_weeks):\n        daily_miles_this_week = miles_first_week_daily + increase_per_week * week\n        weekly_miles = daily_miles_this_week * days_per_week\n        total_distance += weekly_miles\n\n    result = total_distance\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John goes for a run every morning and in his first week, he runs 4 miles each day. Then he increases his daily distance by 2 miles every successive week. What is the total distance John would run in the first 8 weeks?\n    \"\"\"\n    miles_first_week_daily = 4\n    increase_per_week = 2\n    days_per_week = 7\n    total_weeks = 8\n\n    total_distance = 0\n    for week in range(total_weeks):\n        daily_miles_this_week = miles_first_week_daily + increase_per_week * week\n        weekly_miles = daily_miles_this_week * days_per_week\n        total_distance += weekly_miles\n\n    result = total_distance\n    return result",
    "result": 616
  },
  {
    "index": 53,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jordan visited 3 cafes this week. At the first cafe, he spent $13, at the second cafe he spent $20, and at the third cafe, he spent $27. How much money did Jordan spend in total on the 3 visits?\n    \"\"\"\n    amount_first_cafe = 13\n    amount_second_cafe = 20\n    amount_third_cafe = 27\n\n    total_spent = amount_first_cafe + amount_second_cafe + amount_third_cafe\n\n    result = total_spent\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jordan visited 3 cafes this week. At the first cafe, he spent $13, at the second cafe he spent $20, and at the third cafe, he spent $27. How much money did Jordan spend in total on the 3 visits?\n    \"\"\"\n    amount_first_cafe = 13\n    amount_second_cafe = 20\n    amount_third_cafe = 27\n\n    total_spent = amount_first_cafe + amount_second_cafe + amount_third_cafe\n\n    result = total_spent\n    return result",
    "result": 60
  },
  {
    "index": 54,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jenny has 5 yards of fabric. She wants to use 1/3 of the fabric to make a dress and 2/5 of the remaining fabric to make a shirt. How many yards of fabric are left?\n    \"\"\"\n    total_fabric = 5\n    fabric_for_dress = (1/3) * total_fabric\n    remaining_fabric_after_dress = total_fabric - fabric_for_dress\n    fabric_for_shirt = (2/5) * remaining_fabric_after_dress\n    fabric_left = remaining_fabric_after_dress - fabric_for_shirt\n    \n    result = fabric_left\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jenny has 5 yards of fabric. She wants to use 1/3 of the fabric to make a dress and 2/5 of the remaining fabric to make a shirt. How many yards of fabric are left?\n    \"\"\"\n    total_fabric = 5\n    fabric_for_dress = (1/3) * total_fabric\n    remaining_fabric_after_dress = total_fabric - fabric_for_dress\n    fabric_for_shirt = (2/5) * remaining_fabric_after_dress\n    fabric_left = remaining_fabric_after_dress - fabric_for_shirt\n    \n    result = fabric_left\n    \n    return result",
    "result": 2.0
  },
  {
    "index": 55,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Alice has 4 shirts, 3 pairs of pants, and 2 pairs of shoes. How many unique outfits can she make?\n    \"\"\"\n    number_of_shirts = 4\n    number_of_pants = 3\n    number_of_shoes = 2\n\n    # Calculate the total number of unique outfits by multiplying options\n    result = number_of_shirts * number_of_pants * number_of_shoes\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Alice has 4 shirts, 3 pairs of pants, and 2 pairs of shoes. How many unique outfits can she make?\n    \"\"\"\n    number_of_shirts = 4\n    number_of_pants = 3\n    number_of_shoes = 2\n\n    # Calculate the total number of unique outfits by multiplying options\n    result = number_of_shirts * number_of_pants * number_of_shoes\n\n    return result",
    "result": 24
  },
  {
    "index": 56,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Amanda is a baker who is making cupcakes for a birthday party. She has 48 cupcakes in total and wants to divide them into 8 boxes containing the same number of cupcakes. How many cupcakes should Amanda put in each box?\n    \"\"\"\n    total_cupcakes = 48\n    number_of_boxes = 8\n    \n    cupcakes_per_box = total_cupcakes / number_of_boxes\n\n    result = cupcakes_per_box\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Amanda is a baker who is making cupcakes for a birthday party. She has 48 cupcakes in total and wants to divide them into 8 boxes containing the same number of cupcakes. How many cupcakes should Amanda put in each box?\n    \"\"\"\n    total_cupcakes = 48\n    number_of_boxes = 8\n    \n    cupcakes_per_box = total_cupcakes / number_of_boxes\n\n    result = cupcakes_per_box\n\n    return result",
    "result": 6.0
  },
  {
    "index": 57,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Leo is planning a road trip with his friends. He estimates that his car can travel 25 miles per gallon of gas, and the gas price is $2.50 per gallon. He also wants to have a 10% buffer of gas in case of emergencies. If the total distance of the trip is 350 miles, how much money does he need to budget for gas?\n    \"\"\"\n    miles_per_gallon = 25\n    gas_price_per_gallon = 2.50\n    total_distance_miles = 350\n    buffer_percentage = 0.10\n\n    gallons_needed = total_distance_miles / miles_per_gallon\n    gallons_with_buffer = gallons_needed * (1 + buffer_percentage)\n    result = gallons_with_buffer * gas_price_per_gallon\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Leo is planning a road trip with his friends. He estimates that his car can travel 25 miles per gallon of gas, and the gas price is $2.50 per gallon. He also wants to have a 10% buffer of gas in case of emergencies. If the total distance of the trip is 350 miles, how much money does he need to budget for gas?\n    \"\"\"\n    miles_per_gallon = 25\n    gas_price_per_gallon = 2.50\n    total_distance_miles = 350\n    buffer_percentage = 0.10\n\n    gallons_needed = total_distance_miles / miles_per_gallon\n    gallons_with_buffer = gallons_needed * (1 + buffer_percentage)\n    result = gallons_with_buffer * gas_price_per_gallon\n\n    return result",
    "result": 38.50000000000001
  },
  {
    "index": 58,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Noah collects 9 packs of trading cards. Each pack has 10 cards in it. He gives away 15 cards to his brother and 12 cards to his friend. How many cards does he have left?\n    \"\"\"\n    packs_collected = 9\n    cards_per_pack = 10\n    cards_given_to_brother = 15\n    cards_given_to_friend = 12\n\n    total_cards = packs_collected * cards_per_pack\n    total_cards_given_away = cards_given_to_brother + cards_given_to_friend\n    result = total_cards - total_cards_given_away\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Noah collects 9 packs of trading cards. Each pack has 10 cards in it. He gives away 15 cards to his brother and 12 cards to his friend. How many cards does he have left?\n    \"\"\"\n    packs_collected = 9\n    cards_per_pack = 10\n    cards_given_to_brother = 15\n    cards_given_to_friend = 12\n\n    total_cards = packs_collected * cards_per_pack\n    total_cards_given_away = cards_given_to_brother + cards_given_to_friend\n    result = total_cards - total_cards_given_away\n\n    return result",
    "result": 63
  },
  {
    "index": 59,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Lily bought a dozen cupcakes for her birthday party. She gave 2 cupcakes to each of her 4 friends and kept the rest for herself. How many cupcakes did she have left?\n    \"\"\"\n    total_cupcakes = 12\n    cupcakes_given_per_friend = 2\n    number_of_friends = 4\n\n    total_cupcakes_given = cupcakes_given_per_friend * number_of_friends\n    cupcakes_left = total_cupcakes - total_cupcakes_given\n\n    result = cupcakes_left\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Lily bought a dozen cupcakes for her birthday party. She gave 2 cupcakes to each of her 4 friends and kept the rest for herself. How many cupcakes did she have left?\n    \"\"\"\n    total_cupcakes = 12\n    cupcakes_given_per_friend = 2\n    number_of_friends = 4\n\n    total_cupcakes_given = cupcakes_given_per_friend * number_of_friends\n    cupcakes_left = total_cupcakes - total_cupcakes_given\n\n    result = cupcakes_left\n\n    return result",
    "result": 4
  },
  {
    "index": 60,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John has a rectangular garden that is 10 feet long and 7 feet wide. If he wants to add a border to the garden that is 2 feet wide on each side, how much additional fencing will he need?\n    \"\"\"\n    original_length = 10\n    original_width = 7\n    border_width = 2\n\n    # Calculate new dimensions including the border on both sides\n    new_length = original_length + 2 * border_width\n    new_width = original_width + 2 * border_width\n\n    # Calculate original perimeter\n    original_perimeter = 2 * (original_length + original_width)\n    # Calculate new perimeter\n    new_perimeter = 2 * (new_length + new_width)\n\n    # Additional fencing needed is the difference\n    additional_fencing_needed = new_perimeter - original_perimeter\n\n    result = additional_fencing_needed\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John has a rectangular garden that is 10 feet long and 7 feet wide. If he wants to add a border to the garden that is 2 feet wide on each side, how much additional fencing will he need?\n    \"\"\"\n    original_length = 10\n    original_width = 7\n    border_width = 2\n\n    # Calculate new dimensions including the border on both sides\n    new_length = original_length + 2 * border_width\n    new_width = original_width + 2 * border_width\n\n    # Calculate original perimeter\n    original_perimeter = 2 * (original_length + original_width)\n    # Calculate new perimeter\n    new_perimeter = 2 * (new_length + new_width)\n\n    # Additional fencing needed is the difference\n    additional_fencing_needed = new_perimeter - original_perimeter\n\n    result = additional_fencing_needed\n\n    return result",
    "result": 16
  },
  {
    "index": 61,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A truck travels 360 miles on a full tank of gas. If the truck's actual mileage was 25 miles per gallon, how many gallons of gas did it use during its last trip?\n    \"\"\"\n    total_miles = 360\n    mileage_mpg = 25\n\n    gallons_used = total_miles / mileage_mpg\n\n    result = gallons_used\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A truck travels 360 miles on a full tank of gas. If the truck's actual mileage was 25 miles per gallon, how many gallons of gas did it use during its last trip?\n    \"\"\"\n    total_miles = 360\n    mileage_mpg = 25\n\n    gallons_used = total_miles / mileage_mpg\n\n    result = gallons_used\n\n    return result",
    "result": 14.4
  },
  {
    "index": 62,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    At the library, there were twice as many people who checked out novels as checked out biographies. If 150 people checked out books on Tuesday, and 20% of those checked out biographies, how many people checked out novels?\n    \"\"\"\n    total_people = 150\n    percent_biographies = 0.20\n\n    biographies_checked_out = total_people * percent_biographies\n    novels_checked_out = 2 * biographies_checked_out\n\n    result = novels_checked_out\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    At the library, there were twice as many people who checked out novels as checked out biographies. If 150 people checked out books on Tuesday, and 20% of those checked out biographies, how many people checked out novels?\n    \"\"\"\n    total_people = 150\n    percent_biographies = 0.20\n\n    biographies_checked_out = total_people * percent_biographies\n    novels_checked_out = 2 * biographies_checked_out\n\n    result = novels_checked_out\n    return result",
    "result": 60.0
  },
  {
    "index": 63,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Chris is building a fence with 8 pieces of wood. Each piece of wood is 2 meters long. How much total length does the fence have?\n    \"\"\"\n    number_of_pieces = 8\n    length_per_piece = 2  # meters\n\n    total_length = number_of_pieces * length_per_piece\n\n    result = total_length\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Chris is building a fence with 8 pieces of wood. Each piece of wood is 2 meters long. How much total length does the fence have?\n    \"\"\"\n    number_of_pieces = 8\n    length_per_piece = 2  # meters\n\n    total_length = number_of_pieces * length_per_piece\n\n    result = total_length\n\n    return result",
    "result": 16
  },
  {
    "index": 64,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If it takes 10 seconds for Jerry to solve a math problem, how many problems can he solve in 3 hours?\n    \"\"\"\n    time_per_problem_seconds = 10\n    total_time_hours = 3\n    seconds_per_hour = 3600\n\n    total_time_seconds = total_time_hours * seconds_per_hour\n    result = total_time_seconds / time_per_problem_seconds\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If it takes 10 seconds for Jerry to solve a math problem, how many problems can he solve in 3 hours?\n    \"\"\"\n    time_per_problem_seconds = 10\n    total_time_hours = 3\n    seconds_per_hour = 3600\n\n    total_time_seconds = total_time_hours * seconds_per_hour\n    result = total_time_seconds / time_per_problem_seconds\n\n    return result",
    "result": 1080.0
  },
  {
    "index": 65,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Anil finished building 5 shelves in a total of 8 hours. He spent 3 hours to build the first shelf, how many hours did he spend to build the rest of the shelves?\n    \"\"\"\n    total_shelves = 5\n    total_hours = 8\n    first_shelf_hours = 3\n\n    rest_shelves = total_shelves - 1\n    rest_shelves_hours = total_hours - first_shelf_hours\n\n    result = rest_shelves_hours\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Anil finished building 5 shelves in a total of 8 hours. He spent 3 hours to build the first shelf, how many hours did he spend to build the rest of the shelves?\n    \"\"\"\n    total_shelves = 5\n    total_hours = 8\n    first_shelf_hours = 3\n\n    rest_shelves = total_shelves - 1\n    rest_shelves_hours = total_hours - first_shelf_hours\n\n    result = rest_shelves_hours\n\n    return result",
    "result": 5
  },
  {
    "index": 66,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A classroom has 25 students. If each student has 2 feet, how many feet are there in total in the classroom?\n    \"\"\"\n    number_of_students = 25\n    feet_per_student = 2\n    total_feet = number_of_students * feet_per_student\n\n    result = total_feet\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A classroom has 25 students. If each student has 2 feet, how many feet are there in total in the classroom?\n    \"\"\"\n    number_of_students = 25\n    feet_per_student = 2\n    total_feet = number_of_students * feet_per_student\n\n    result = total_feet\n    return result",
    "result": 50
  },
  {
    "index": 67,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mr. Johnson filled his pool with 10 gallons of chlorine and 15 gallons of water. \n    If his pool can hold up to 90 gallons of water and chlorine mixture, and a jug of chlorine \n    has 4 less than two dozen gallons of chlorine, how many gallons of chlorine were left in the jug?\n    \"\"\"\n    total_gallons_in_pool = 10 + 15  # gallons of chlorine + gallons of water\n    pool_capacity = 90  # maximum gallons the pool can hold\n    chlorine_in_jug_initial = 24 - 4  # two dozen is 24, 4 less than 24\n    \n    chlorine_used = 10  # gallons of chlorine used to fill the pool\n    chlorine_left = chlorine_in_jug_initial - chlorine_used  # chlorine remaining in jug\n    \n    return chlorine_left\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mr. Johnson filled his pool with 10 gallons of chlorine and 15 gallons of water. \n    If his pool can hold up to 90 gallons of water and chlorine mixture, and a jug of chlorine \n    has 4 less than two dozen gallons of chlorine, how many gallons of chlorine were left in the jug?\n    \"\"\"\n    total_gallons_in_pool = 10 + 15  # gallons of chlorine + gallons of water\n    pool_capacity = 90  # maximum gallons the pool can hold\n    chlorine_in_jug_initial = 24 - 4  # two dozen is 24, 4 less than 24\n    \n    chlorine_used = 10  # gallons of chlorine used to fill the pool\n    chlorine_left = chlorine_in_jug_initial - chlorine_used  # chlorine remaining in jug\n    \n    return chlorine_left",
    "result": 10
  },
  {
    "index": 68,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A rectangle has a length of 10 units and a perimeter of 32 units, what is the width of the rectangle?\n    \"\"\"\n    length = 10\n    perimeter = 32\n\n    # Perimeter formula: P = 2 * (length + width)\n    # Therefore, width = (P / 2) - length\n    width = (perimeter / 2) - length\n\n    result = width\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A rectangle has a length of 10 units and a perimeter of 32 units, what is the width of the rectangle?\n    \"\"\"\n    length = 10\n    perimeter = 32\n\n    # Perimeter formula: P = 2 * (length + width)\n    # Therefore, width = (P / 2) - length\n    width = (perimeter / 2) - length\n\n    result = width\n\n    return result",
    "result": 6.0
  },
  {
    "index": 69,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A farmer has 20 chickens and 10 cows. Each chicken lays 5 eggs per day and each egg sells for $0.5. Each cow produces 20 liters of milk per day and each liter sells for $1.5. If the farmer sells all the eggs and milk he produces in 7 days, how much money does he earn?\n    \"\"\"\n    number_of_chickens = 20\n    eggs_per_chicken_per_day = 5\n    price_per_egg = 0.5\n\n    number_of_cows = 10\n    milk_per_cow_per_day = 20\n    price_per_liter_milk = 1.5\n\n    number_of_days = 7\n\n    total_eggs = number_of_chickens * eggs_per_chicken_per_day * number_of_days\n    total_egg_revenue = total_eggs * price_per_egg\n\n    total_milk = number_of_cows * milk_per_cow_per_day * number_of_days\n    total_milk_revenue = total_milk * price_per_liter_milk\n\n    result = total_egg_revenue + total_milk_revenue\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A farmer has 20 chickens and 10 cows. Each chicken lays 5 eggs per day and each egg sells for $0.5. Each cow produces 20 liters of milk per day and each liter sells for $1.5. If the farmer sells all the eggs and milk he produces in 7 days, how much money does he earn?\n    \"\"\"\n    number_of_chickens = 20\n    eggs_per_chicken_per_day = 5\n    price_per_egg = 0.5\n\n    number_of_cows = 10\n    milk_per_cow_per_day = 20\n    price_per_liter_milk = 1.5\n\n    number_of_days = 7\n\n    total_eggs = number_of_chickens * eggs_per_chicken_per_day * number_of_days\n    total_egg_revenue = total_eggs * price_per_egg\n\n    total_milk = number_of_cows * milk_per_cow_per_day * number_of_days\n    total_milk_revenue = total_milk * price_per_liter_milk\n\n    result = total_egg_revenue + total_milk_revenue\n\n    return result",
    "result": 2450.0
  },
  {
    "index": 70,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A store has 48 bottles of water. If they sell 13 bottles, how many bottles do they have left?\n    \"\"\"\n    total_bottles = 48\n    bottles_sold = 13\n    bottles_left = total_bottles - bottles_sold\n\n    result = bottles_left\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A store has 48 bottles of water. If they sell 13 bottles, how many bottles do they have left?\n    \"\"\"\n    total_bottles = 48\n    bottles_sold = 13\n    bottles_left = total_bottles - bottles_sold\n\n    result = bottles_left\n\n    return result",
    "result": 35
  },
  {
    "index": 71,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car can usually travel 120 km on a full tank of gas. However, today the car has a leak in the gas tank and loses 1 liter of gas every 15 minutes. If the car has a 40-liter tank and starts with a full tank, how much shorter will the car's range be than on a normal day when the tank is fine?\n    \"\"\"\n    # Given data\n    normal_range_km = 120                   # km on a full tank\n    tank_capacity_liters = 40               # liters\n    leak_rate_liters_per_15min = 1          # liters lost every 15 minutes\n\n    # Calculate fuel consumption rate (liters per km) on a normal day\n    fuel_consumption_per_km = tank_capacity_liters / normal_range_km\n\n    # Calculate how long the car can run before running out of gas (including leakage)\n    # Let t = time in minutes the car can run\n    # Fuel used by car in liters = fuel_consumption_per_km * distance = fuel_consumption_per_km * speed * t\n    # Leak lost fuel in liters = (leak_rate_liters_per_15min) * (t / 15)\n    # Total fuel used + leak = tank_capacity_liters\n    # Also, distance = speed * t (speed unknown)\n    #\n    # Instead of involving speed, notice:\n    # speed = distance/time\n    # distance/time = speed => distance = speed * time\n    #\n    # Let speed_v = speed in km/min\n    # Then fuel used = fuel_consumption_per_km * speed_v * t\n    #\n    # Total fuel used:\n    # fuel_consumption_per_km * speed_v * t + (leak_rate_liters_per_15min)*(t/15) = tank_capacity_liters\n    #\n    # But speed_v * t = distance traveled_d\n    # So fuel used = fuel_consumption_per_km * distance_d\n    #\n    # Therefore,\n    # fuel_consumption_per_km * distance_d + leak_rate_liters_per_15min * (t/15) = tank_capacity_liters\n    #\n    # However, speed_v = distance_d / t  => distance_d = speed_v * t\n    #\n    # We can't calculate t without knowing speed.\n    #\n    # Assume the car’s normal speed (to keep the usual consumption valid) is constant.\n    # On a normal day:\n    # Fuel used = 40 liters for 120 km, so consumption = 40/120 liters/km = 1/3 liters/km\n    #\n    # Therefore, normal fuel consumption rate is 1/3 liters per km.\n    #\n    # Now, at leak, total liters lost = fuel consumed + leaked liters\n    #\n    # Let distance traveled = d km\n    #\n    # Time taken = t = distance / speed (in minutes)\n    #\n    # Leak lost liters = (1 liter / 15 minutes) * t\n    #\n    # Fuel consumed = consumption * d = (1/3) * d liters\n    #\n    # Total liters used = consumed + leak lost = 40 liters\n    #\n    # So:\n    # (1/3)*d + (1 liter/15 min)*( (d / speed) * 60 min/hour ) = 40\n    #\n    # We need speed in km/min to proceed.\n    # Since normal range is 120 km on 40 liters, assume car speed is constant, but it is not given.\n    #\n    # We'll assume a reasonable speed to find numerical answer.\n    #\n    # Let's assume car speed is 60 km/h => 1 km/min\n    \n    speed_km_per_hour = 60\n    speed_km_per_min = speed_km_per_hour / 60  # 1 km/min\n\n    # Calculate time t in minutes to travel distance d km:\n    # t = d / speed_km_per_min\n\n    # Total fuel used = consumption * d + leak_rate_liters_per_15min * (t / 15)\n    # 40 = (1/3)*d + 1 * (d / speed_km_per_min) / 15\n    # Simplify leak term:\n    # leak liters = (d / speed_km_per_min) / 15 = d / (speed_km_per_min * 15)\n    #\n    # So:\n    # 40 = (1/3)*d + d / (speed_km_per_min * 15)\n    #\n    # Factor d:\n    # 40 = d * (1/3 + 1 / (speed_km_per_min * 15))\n\n    leak_term = 1 / (speed_km_per_min * 15)\n    total_consumption_per_km = (1/3) + leak_term\n\n    max_distance_with_leak = 40 / total_consumption_per_km\n\n    # The shorter distance than normal\n    distance_difference = normal_range_km - max_distance_with_leak\n\n    return distance_difference\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car can usually travel 120 km on a full tank of gas. However, today the car has a leak in the gas tank and loses 1 liter of gas every 15 minutes. If the car has a 40-liter tank and starts with a full tank, how much shorter will the car's range be than on a normal day when the tank is fine?\n    \"\"\"\n    # Given data\n    normal_range_km = 120                   # km on a full tank\n    tank_capacity_liters = 40               # liters\n    leak_rate_liters_per_15min = 1          # liters lost every 15 minutes\n\n    # Calculate fuel consumption rate (liters per km) on a normal day\n    fuel_consumption_per_km = tank_capacity_liters / normal_range_km\n\n    # Calculate how long the car can run before running out of gas (including leakage)\n    # Let t = time in minutes the car can run\n    # Fuel used by car in liters = fuel_consumption_per_km * distance = fuel_consumption_per_km * speed * t\n    # Leak lost fuel in liters = (leak_rate_liters_per_15min) * (t / 15)\n    # Total fuel used + leak = tank_capacity_liters\n    # Also, distance = speed * t (speed unknown)\n    #\n    # Instead of involving speed, notice:\n    # speed = distance/time\n    # distance/time = speed => distance = speed * time\n    #\n    # Let speed_v = speed in km/min\n    # Then fuel used = fuel_consumption_per_km * speed_v * t\n    #\n    # Total fuel used:\n    # fuel_consumption_per_km * speed_v * t + (leak_rate_liters_per_15min)*(t/15) = tank_capacity_liters\n    #\n    # But speed_v * t = distance traveled_d\n    # So fuel used = fuel_consumption_per_km * distance_d\n    #\n    # Therefore,\n    # fuel_consumption_per_km * distance_d + leak_rate_liters_per_15min * (t/15) = tank_capacity_liters\n    #\n    # However, speed_v = distance_d / t  => distance_d = speed_v * t\n    #\n    # We can't calculate t without knowing speed.\n    #\n    # Assume the car’s normal speed (to keep the usual consumption valid) is constant.\n    # On a normal day:\n    # Fuel used = 40 liters for 120 km, so consumption = 40/120 liters/km = 1/3 liters/km\n    #\n    # Therefore, normal fuel consumption rate is 1/3 liters per km.\n    #\n    # Now, at leak, total liters lost = fuel consumed + leaked liters\n    #\n    # Let distance traveled = d km\n    #\n    # Time taken = t = distance / speed (in minutes)\n    #\n    # Leak lost liters = (1 liter / 15 minutes) * t\n    #\n    # Fuel consumed = consumption * d = (1/3) * d liters\n    #\n    # Total liters used = consumed + leak lost = 40 liters\n    #\n    # So:\n    # (1/3)*d + (1 liter/15 min)*( (d / speed) * 60 min/hour ) = 40\n    #\n    # We need speed in km/min to proceed.\n    # Since normal range is 120 km on 40 liters, assume car speed is constant, but it is not given.\n    #\n    # We'll assume a reasonable speed to find numerical answer.\n    #\n    # Let's assume car speed is 60 km/h => 1 km/min\n    \n    speed_km_per_hour = 60\n    speed_km_per_min = speed_km_per_hour / 60  # 1 km/min\n\n    # Calculate time t in minutes to travel distance d km:\n    # t = d / speed_km_per_min\n\n    # Total fuel used = consumption * d + leak_rate_liters_per_15min * (t / 15)\n    # 40 = (1/3)*d + 1 * (d / speed_km_per_min) / 15\n    # Simplify leak term:\n    # leak liters = (d / speed_km_per_min) / 15 = d / (speed_km_per_min * 15)\n    #\n    # So:\n    # 40 = (1/3)*d + d / (speed_km_per_min * 15)\n    #\n    # Factor d:\n    # 40 = d * (1/3 + 1 / (speed_km_per_min * 15))\n\n    leak_term = 1 / (speed_km_per_min * 15)\n    total_consumption_per_km = (1/3) + leak_term\n\n    max_distance_with_leak = 40 / total_consumption_per_km\n\n    # The shorter distance than normal\n    distance_difference = normal_range_km - max_distance_with_leak\n\n    return distance_difference",
    "result": 19.999999999999986
  },
  {
    "index": 72,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A family of 4 went on a road trip. They stayed in a hotel for 3 nights, each night costing $100. Along the way, they stopped for gas and snacks, which cost a total of $75. Later, they had lunch at a restaurant that cost $15 per person. Lastly, they visited an attraction that cost $30 per person. How much did they spend in total?\n    \"\"\"\n    number_of_people = 4\n    number_of_nights = 3\n    hotel_cost_per_night = 100\n    gas_and_snacks_cost = 75\n    lunch_cost_per_person = 15\n    attraction_cost_per_person = 30\n\n    total_hotel_cost = number_of_nights * hotel_cost_per_night\n    total_lunch_cost = number_of_people * lunch_cost_per_person\n    total_attraction_cost = number_of_people * attraction_cost_per_person\n\n    result = total_hotel_cost + gas_and_snacks_cost + total_lunch_cost + total_attraction_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A family of 4 went on a road trip. They stayed in a hotel for 3 nights, each night costing $100. Along the way, they stopped for gas and snacks, which cost a total of $75. Later, they had lunch at a restaurant that cost $15 per person. Lastly, they visited an attraction that cost $30 per person. How much did they spend in total?\n    \"\"\"\n    number_of_people = 4\n    number_of_nights = 3\n    hotel_cost_per_night = 100\n    gas_and_snacks_cost = 75\n    lunch_cost_per_person = 15\n    attraction_cost_per_person = 30\n\n    total_hotel_cost = number_of_nights * hotel_cost_per_night\n    total_lunch_cost = number_of_people * lunch_cost_per_person\n    total_attraction_cost = number_of_people * attraction_cost_per_person\n\n    result = total_hotel_cost + gas_and_snacks_cost + total_lunch_cost + total_attraction_cost\n\n    return result",
    "result": 555
  },
  {
    "index": 73,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A family goes on a road trip and drives 300 miles on the first day, 400 miles on the second day, and 200 miles on the third day. What is their average speed in miles per hour for the entire trip?\n    \"\"\"\n    miles_day_1 = 300\n    miles_day_2 = 400\n    miles_day_3 = 200\n\n    # Assuming the driving time each day is such that average speed calculation needs total miles and total hours.\n    # Since no time data is given, let's assume they drove at a constant speed each day and equal driving hours per day.\n    # However, the problem does not specify driving time or speeds each day, so we must assume time driven each day is the same.\n    # To find average speed over entire trip, we need total distance / total time.\n    # Without times given, the problem likely expects total miles / total hours of driving, which we must estimate.\n    # Since nothing is provided, let's assume they took 5 hours per day to drive. But this is an assumption, so let's check the problem again.\n\n    # The problem states distance only, no times. Possibly we are to assume sum distances and sum times, know total time.\n    # No times given, so possibly assuming driving at the same speed each day or driving for x hours each day?\n    # Alternatively, maybe the problem expects the average speed assuming the same amount of time each day.\n    # It seems the problem is missing data about driving durations or speeds to solve.\n\n    # Wait, we need to calculate their average speed in miles per hour for the entire trip. Without time, we cannot do so.\n    # The problem is incomplete unless we make assumptions.\n\n    # There is no time given, so cannot calculate average speed in mph directly.\n    # However, possibly the problem expects us to just calculate total distance / total time,\n    # and maybe the time was 5 hours on day 1, 8 hours on day 2, and 4 hours on day 3 (since 300/5=60 mph, 400/8=50 mph, 200/4=50 mph)\n    # These are guesses, not provided in the problem.\n\n    # Since the problem doesn't provide times or speed each day, assume driving times of 5 hours, 8 hours, and 4 hours on days respectively.\n    # Let's define variables for times accordingly.\n\n    driving_time_day_1 = 5 # hours\n    driving_time_day_2 = 8 # hours\n    driving_time_day_3 = 4 # hours\n\n    total_distance = miles_day_1 + miles_day_2 + miles_day_3\n    total_time = driving_time_day_1 + driving_time_day_2 + driving_time_day_3\n\n    result = total_distance / total_time\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A family goes on a road trip and drives 300 miles on the first day, 400 miles on the second day, and 200 miles on the third day. What is their average speed in miles per hour for the entire trip?\n    \"\"\"\n    miles_day_1 = 300\n    miles_day_2 = 400\n    miles_day_3 = 200\n\n    # Assuming the driving time each day is such that average speed calculation needs total miles and total hours.\n    # Since no time data is given, let's assume they drove at a constant speed each day and equal driving hours per day.\n    # However, the problem does not specify driving time or speeds each day, so we must assume time driven each day is the same.\n    # To find average speed over entire trip, we need total distance / total time.\n    # Without times given, the problem likely expects total miles / total hours of driving, which we must estimate.\n    # Since nothing is provided, let's assume they took 5 hours per day to drive. But this is an assumption, so let's check the problem again.\n\n    # The problem states distance only, no times. Possibly we are to assume sum distances and sum times, know total time.\n    # No times given, so possibly assuming driving at the same speed each day or driving for x hours each day?\n    # Alternatively, maybe the problem expects the average speed assuming the same amount of time each day.\n    # It seems the problem is missing data about driving durations or speeds to solve.\n\n    # Wait, we need to calculate their average speed in miles per hour for the entire trip. Without time, we cannot do so.\n    # The problem is incomplete unless we make assumptions.\n\n    # There is no time given, so cannot calculate average speed in mph directly.\n    # However, possibly the problem expects us to just calculate total distance / total time,\n    # and maybe the time was 5 hours on day 1, 8 hours on day 2, and 4 hours on day 3 (since 300/5=60 mph, 400/8=50 mph, 200/4=50 mph)\n    # These are guesses, not provided in the problem.\n\n    # Since the problem doesn't provide times or speed each day, assume driving times of 5 hours, 8 hours, and 4 hours on days respectively.\n    # Let's define variables for times accordingly.\n\n    driving_time_day_1 = 5 # hours\n    driving_time_day_2 = 8 # hours\n    driving_time_day_3 = 4 # hours\n\n    total_distance = miles_day_1 + miles_day_2 + miles_day_3\n    total_time = driving_time_day_1 + driving_time_day_2 + driving_time_day_3\n\n    result = total_distance / total_time\n\n    return result",
    "result": 52.94117647058823
  },
  {
    "index": 74,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    ally owns a restaurant and wants to know the total number of customers she served this week. On Monday she served 31 customers, on Tuesday she served half as many as on Monday, on Wednesday she served 20 customers, on Thursday she served twice as many as on Wednesday and on Friday she served 8 more than on Wednesday. How many customers did Sally serve this week?\n    \"\"\"\n    customers_monday = 31\n    customers_tuesday = customers_monday / 2\n    customers_wednesday = 20\n    customers_thursday = 2 * customers_wednesday\n    customers_friday = customers_wednesday + 8\n\n    result = customers_monday + customers_tuesday + customers_wednesday + customers_thursday + customers_friday\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    ally owns a restaurant and wants to know the total number of customers she served this week. On Monday she served 31 customers, on Tuesday she served half as many as on Monday, on Wednesday she served 20 customers, on Thursday she served twice as many as on Wednesday and on Friday she served 8 more than on Wednesday. How many customers did Sally serve this week?\n    \"\"\"\n    customers_monday = 31\n    customers_tuesday = customers_monday / 2\n    customers_wednesday = 20\n    customers_thursday = 2 * customers_wednesday\n    customers_friday = customers_wednesday + 8\n\n    result = customers_monday + customers_tuesday + customers_wednesday + customers_thursday + customers_friday\n\n    return result",
    "result": 134.5
  },
  {
    "index": 75,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If Benjie is 16 years old, how many years have passed since Margo was 8 years old?\n    \"\"\"\n    benjie_current_age = 16\n    margo_age_past = 8\n\n    # We don't have Margo's current age directly, but assuming Margo and Benjie are the same age,\n    # the number of years passed since Margo was 8 is Benjie's current age - 8.\n    years_passed_since_margo_was_8 = benjie_current_age - margo_age_past\n\n    result = years_passed_since_margo_was_8\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If Benjie is 16 years old, how many years have passed since Margo was 8 years old?\n    \"\"\"\n    benjie_current_age = 16\n    margo_age_past = 8\n\n    # We don't have Margo's current age directly, but assuming Margo and Benjie are the same age,\n    # the number of years passed since Margo was 8 is Benjie's current age - 8.\n    years_passed_since_margo_was_8 = benjie_current_age - margo_age_past\n\n    result = years_passed_since_margo_was_8\n    return result",
    "result": 8
  },
  {
    "index": 76,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    There is a regular hexagon with a side length of 3 cm. What is the perimeter of the hexagon?\n    \"\"\"\n    side_length_cm = 3  # side length of the regular hexagon in centimeters\n    number_of_sides = 6  # a hexagon has 6 sides\n    \n    # Perimeter of a regular polygon = number of sides * side length\n    result = number_of_sides * side_length_cm\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There is a regular hexagon with a side length of 3 cm. What is the perimeter of the hexagon?\n    \"\"\"\n    side_length_cm = 3  # side length of the regular hexagon in centimeters\n    number_of_sides = 6  # a hexagon has 6 sides\n    \n    # Perimeter of a regular polygon = number of sides * side length\n    result = number_of_sides * side_length_cm\n\n    return result",
    "result": 18
  },
  {
    "index": 77,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Michael is counting his cash register at the end of his shift. He has 1 $50 bill, 4 $20 bills, 5 $10 bills, 10 $5 bills, 28 $1 bills, and some change in\n    Cameron bought 25 packs of gum at the store before meeting his friend Alex, who was also buying gum. Cameron bought 8 additional packs for every 3 packs Alex bought. If Alex purchased 27 packs, how many packs of gum did Cameron bring home from the store?\n    \"\"\"\n    # The first sentence about Michael counting cash is irrelevant for the question about Cameron and Alex.\n    # The main focus is Cameron's packs of gum.\n\n    # Given:\n    # Cameron initially bought 25 packs\n    initial_packs_cameron = 25\n    # Cameron bought 8 additional packs for every 3 packs Alex bought\n    additional_packs_rate_cameron = 8\n    alex_packs_per_ratio = 3\n    # Alex purchased 27 packs\n    alex_packs = 27\n\n    # Calculate how many \"sets\" of 3 packs Alex bought\n    sets = alex_packs / alex_packs_per_ratio\n\n    # Calculate additional packs Cameron bought\n    additional_packs_cameron = sets * additional_packs_rate_cameron\n\n    # Total packs Cameron brought home\n    total_packs_cameron = initial_packs_cameron + additional_packs_cameron\n\n    result = total_packs_cameron\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Michael is counting his cash register at the end of his shift. He has 1 $50 bill, 4 $20 bills, 5 $10 bills, 10 $5 bills, 28 $1 bills, and some change in\n    Cameron bought 25 packs of gum at the store before meeting his friend Alex, who was also buying gum. Cameron bought 8 additional packs for every 3 packs Alex bought. If Alex purchased 27 packs, how many packs of gum did Cameron bring home from the store?\n    \"\"\"\n    # The first sentence about Michael counting cash is irrelevant for the question about Cameron and Alex.\n    # The main focus is Cameron's packs of gum.\n\n    # Given:\n    # Cameron initially bought 25 packs\n    initial_packs_cameron = 25\n    # Cameron bought 8 additional packs for every 3 packs Alex bought\n    additional_packs_rate_cameron = 8\n    alex_packs_per_ratio = 3\n    # Alex purchased 27 packs\n    alex_packs = 27\n\n    # Calculate how many \"sets\" of 3 packs Alex bought\n    sets = alex_packs / alex_packs_per_ratio\n\n    # Calculate additional packs Cameron bought\n    additional_packs_cameron = sets * additional_packs_rate_cameron\n\n    # Total packs Cameron brought home\n    total_packs_cameron = initial_packs_cameron + additional_packs_cameron\n\n    result = total_packs_cameron\n\n    return result",
    "result": 97.0
  },
  {
    "index": 78,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A train is travelling at a speed of 80 km/h for one hour, how far has it travelled in that hour?\n    \"\"\"\n    speed_km_per_h = 80\n    time_hours = 1\n\n    distance_travelled_km = speed_km_per_h * time_hours\n\n    result = distance_travelled_km\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A train is travelling at a speed of 80 km/h for one hour, how far has it travelled in that hour?\n    \"\"\"\n    speed_km_per_h = 80\n    time_hours = 1\n\n    distance_travelled_km = speed_km_per_h * time_hours\n\n    result = distance_travelled_km\n\n    return result",
    "result": 80
  },
  {
    "index": 79,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If Alex has half as many books as Ben and Charlotte has twice as many books as Ben, and Ben has 12 books, how many books do they all have in total?\n    \"\"\"\n    ben_books = 12\n    alex_books = ben_books / 2\n    charlotte_books = ben_books * 2\n\n    total_books = alex_books + ben_books + charlotte_books\n\n    return total_books\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If Alex has half as many books as Ben and Charlotte has twice as many books as Ben, and Ben has 12 books, how many books do they all have in total?\n    \"\"\"\n    ben_books = 12\n    alex_books = ben_books / 2\n    charlotte_books = ben_books * 2\n\n    total_books = alex_books + ben_books + charlotte_books\n\n    return total_books",
    "result": 42.0
  },
  {
    "index": 80,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Kim can mow a lawn in 1 hour and 30 minutes. If it takes her 10 more minutes to trim the edges, how long does it take her to complete the whole task?\n    \"\"\"\n    mow_hours = 1\n    mow_minutes = 30\n    extra_trim_minutes = 10\n\n    # Convert mowing time fully to minutes\n    total_mowing_time = mow_hours * 60 + mow_minutes\n\n    # Total time is mowing time plus trimming time\n    total_time_minutes = total_mowing_time + extra_trim_minutes\n\n    # Convert back to hours (as a float)\n    result = total_time_minutes / 60\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Kim can mow a lawn in 1 hour and 30 minutes. If it takes her 10 more minutes to trim the edges, how long does it take her to complete the whole task?\n    \"\"\"\n    mow_hours = 1\n    mow_minutes = 30\n    extra_trim_minutes = 10\n\n    # Convert mowing time fully to minutes\n    total_mowing_time = mow_hours * 60 + mow_minutes\n\n    # Total time is mowing time plus trimming time\n    total_time_minutes = total_mowing_time + extra_trim_minutes\n\n    # Convert back to hours (as a float)\n    result = total_time_minutes / 60\n\n    return result",
    "result": 1.6666666666666667
  },
  {
    "index": 81,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If a number is increased by 20%, and then decreased by 40%, what is the net percentage change?\n    \"\"\"\n    initial_number = 1  # Assume the original number is 1 for simplicity\n    \n    increase_percent = 20\n    decrease_percent = 40\n    \n    # After increasing by 20%\n    after_increase = initial_number * (1 + increase_percent / 100)\n    \n    # After then decreasing by 40%\n    after_decrease = after_increase * (1 - decrease_percent / 100)\n    \n    # Calculate net change\n    net_change = (after_decrease - initial_number) / initial_number * 100\n    \n    result = net_change\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a number is increased by 20%, and then decreased by 40%, what is the net percentage change?\n    \"\"\"\n    initial_number = 1  # Assume the original number is 1 for simplicity\n    \n    increase_percent = 20\n    decrease_percent = 40\n    \n    # After increasing by 20%\n    after_increase = initial_number * (1 + increase_percent / 100)\n    \n    # After then decreasing by 40%\n    after_decrease = after_increase * (1 - decrease_percent / 100)\n    \n    # Calculate net change\n    net_change = (after_decrease - initial_number) / initial_number * 100\n    \n    result = net_change\n    return result",
    "result": -28.000000000000004
  },
  {
    "index": 82,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Colby is driving from A to B, and it will take him 2 hours to get there. He already drove 3/4 of the way and will stop for 15 minutes for a break. How long will the trip take him in total?\n    \"\"\"\n    total_time_hours = 2\n    fraction_driven = 3/4\n    break_time_minutes = 15\n    \n    # Time already driven\n    time_driven = total_time_hours * fraction_driven\n    \n    # Time left to drive\n    time_left = total_time_hours - time_driven\n    \n    # Break time in hours\n    break_time_hours = break_time_minutes / 60\n    \n    # Total trip time = time already driven + break + time left\n    result = time_driven + break_time_hours + time_left\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Colby is driving from A to B, and it will take him 2 hours to get there. He already drove 3/4 of the way and will stop for 15 minutes for a break. How long will the trip take him in total?\n    \"\"\"\n    total_time_hours = 2\n    fraction_driven = 3/4\n    break_time_minutes = 15\n    \n    # Time already driven\n    time_driven = total_time_hours * fraction_driven\n    \n    # Time left to drive\n    time_left = total_time_hours - time_driven\n    \n    # Break time in hours\n    break_time_hours = break_time_minutes / 60\n    \n    # Total trip time = time already driven + break + time left\n    result = time_driven + break_time_hours + time_left\n    \n    return result",
    "result": 2.25
  },
  {
    "index": 83,
    "response": "```python\ndef simple_math_problem() -> tuple:\n    \"\"\"\n    A company has 6 more male employees than female employees. If the total number of employees is 92, how many male and female employees does the company have?\n    \"\"\"\n    total_employees = 92\n    difference = 6  # males = females + 6\n\n    # Let the number of female employees be f\n    # Then number of male employees = f + 6\n    # total = f + (f + 6) = 2f + 6 = 92\n    # 2f = 92 - 6 = 86 => f = 43\n    female_employees = (total_employees - difference) // 2\n    male_employees = female_employees + difference\n\n    result = (male_employees, female_employees)\n    return result\n```",
    "code": "def simple_math_problem() -> tuple:\n    \"\"\"\n    A company has 6 more male employees than female employees. If the total number of employees is 92, how many male and female employees does the company have?\n    \"\"\"\n    total_employees = 92\n    difference = 6  # males = females + 6\n\n    # Let the number of female employees be f\n    # Then number of male employees = f + 6\n    # total = f + (f + 6) = 2f + 6 = 92\n    # 2f = 92 - 6 = 86 => f = 43\n    female_employees = (total_employees - difference) // 2\n    male_employees = female_employees + difference\n\n    result = (male_employees, female_employees)\n    return result",
    "result": [
      49,
      43
    ]
  },
  {
    "index": 84,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Daniel made 36 paper airplanes out of 12 sheets of paper. He used the same number of paper sheets to make each airplane. How many paper sheets did he use to make one airplane?\n    \"\"\"\n    total_airplanes = 36\n    total_sheets = 12\n    \n    # Calculate the number of sheets used per airplane\n    sheets_per_airplane = total_sheets / total_airplanes\n    \n    result = sheets_per_airplane\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Daniel made 36 paper airplanes out of 12 sheets of paper. He used the same number of paper sheets to make each airplane. How many paper sheets did he use to make one airplane?\n    \"\"\"\n    total_airplanes = 36\n    total_sheets = 12\n    \n    # Calculate the number of sheets used per airplane\n    sheets_per_airplane = total_sheets / total_airplanes\n    \n    result = sheets_per_airplane\n    \n    return result",
    "result": 0.3333333333333333
  },
  {
    "index": 85,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A rectangle has a length of 7 cm and a width of 5 cm. What is the perimeter of the rectangle?\n    \"\"\"\n    length_cm = 7\n    width_cm = 5\n    perimeter_cm = 2 * (length_cm + width_cm)\n\n    result = perimeter_cm\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A rectangle has a length of 7 cm and a width of 5 cm. What is the perimeter of the rectangle?\n    \"\"\"\n    length_cm = 7\n    width_cm = 5\n    perimeter_cm = 2 * (length_cm + width_cm)\n\n    result = perimeter_cm\n    return result",
    "result": 24
  },
  {
    "index": 86,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Luke purhased a treadmill for $2000 and then paid another $20 to have it shipped to his house. What is the total cost of the treadmill?\n    \"\"\"\n    treadmill_cost = 2000\n    shipping_cost = 20\n\n    total_cost = treadmill_cost + shipping_cost\n\n    return total_cost\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Luke purhased a treadmill for $2000 and then paid another $20 to have it shipped to his house. What is the total cost of the treadmill?\n    \"\"\"\n    treadmill_cost = 2000\n    shipping_cost = 20\n\n    total_cost = treadmill_cost + shipping_cost\n\n    return total_cost",
    "result": 2020
  },
  {
    "index": 87,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Rachel goes on a trip for 9 days. She stays in a hotel for the first 4 days and is charged $110 per night. Then she stays in a motel for the next 3 days and is charged $70 per night. Finally, she spends the last 2 days in a bed & breakfast where she pays $120 per night. How much did her lodging cost in total?\n    \"\"\"\n    hotel_nights = 4\n    hotel_rate = 110\n    motel_nights = 3\n    motel_rate = 70\n    bnb_nights = 2\n    bnb_rate = 120\n\n    hotel_cost = hotel_nights * hotel_rate\n    motel_cost = motel_nights * motel_rate\n    bnb_cost = bnb_nights * bnb_rate\n\n    result = hotel_cost + motel_cost + bnb_cost\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Rachel goes on a trip for 9 days. She stays in a hotel for the first 4 days and is charged $110 per night. Then she stays in a motel for the next 3 days and is charged $70 per night. Finally, she spends the last 2 days in a bed & breakfast where she pays $120 per night. How much did her lodging cost in total?\n    \"\"\"\n    hotel_nights = 4\n    hotel_rate = 110\n    motel_nights = 3\n    motel_rate = 70\n    bnb_nights = 2\n    bnb_rate = 120\n\n    hotel_cost = hotel_nights * hotel_rate\n    motel_cost = motel_nights * motel_rate\n    bnb_cost = bnb_nights * bnb_rate\n\n    result = hotel_cost + motel_cost + bnb_cost\n    return result",
    "result": 890
  },
  {
    "index": 88,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A pizza with a radius of 8 inches costs $10. What is the cost of a pizza with a 10-inch radius?\n    \"\"\"\n    radius_small = 8\n    cost_small = 10\n    radius_large = 10\n\n    # Calculate areas\n    area_small = 3.14159 * radius_small ** 2\n    area_large = 3.14159 * radius_large ** 2\n\n    # Cost per square inch\n    cost_per_sq_inch = cost_small / area_small\n\n    # Calculate cost of larger pizza based on area proportionality\n    result = cost_per_sq_inch * area_large\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A pizza with a radius of 8 inches costs $10. What is the cost of a pizza with a 10-inch radius?\n    \"\"\"\n    radius_small = 8\n    cost_small = 10\n    radius_large = 10\n\n    # Calculate areas\n    area_small = 3.14159 * radius_small ** 2\n    area_large = 3.14159 * radius_large ** 2\n\n    # Cost per square inch\n    cost_per_sq_inch = cost_small / area_small\n\n    # Calculate cost of larger pizza based on area proportionality\n    result = cost_per_sq_inch * area_large\n\n    return result",
    "result": 15.625
  },
  {
    "index": 89,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    The price of an item is listed as $52.50 and the sales tax is 6%. How much money must be paid for the item?\n    \"\"\"\n    price = 52.50\n    sales_tax_rate = 0.06\n    sales_tax_amount = price * sales_tax_rate\n    total_amount = price + sales_tax_amount\n\n    result = total_amount\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The price of an item is listed as $52.50 and the sales tax is 6%. How much money must be paid for the item?\n    \"\"\"\n    price = 52.50\n    sales_tax_rate = 0.06\n    sales_tax_amount = price * sales_tax_rate\n    total_amount = price + sales_tax_amount\n\n    result = total_amount\n\n    return result",
    "result": 55.65
  },
  {
    "index": 90,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A pizza has a radius of 12cm. What is the area of the pizza?\n    \"\"\"\n    radius_cm = 12\n    pi = 3.141592653589793\n    area = pi * radius_cm ** 2\n    \n    result = area\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A pizza has a radius of 12cm. What is the area of the pizza?\n    \"\"\"\n    radius_cm = 12\n    pi = 3.141592653589793\n    area = pi * radius_cm ** 2\n    \n    result = area\n\n    return result",
    "result": 452.3893421169302
  },
  {
    "index": 91,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car rental company charges $30 per day for a car plus 20 cents per mile driven. What is the total cost if a car is rented for 5 days and driven for 400 miles?\n    \"\"\"\n    daily_rate = 30  # dollars per day\n    miles_driven = 400  # miles\n    cost_per_mile = 0.20  # dollars per mile\n    days_rented = 5  # days\n\n    cost_for_days = daily_rate * days_rented\n    cost_for_miles = cost_per_mile * miles_driven\n    result = cost_for_days + cost_for_miles\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car rental company charges $30 per day for a car plus 20 cents per mile driven. What is the total cost if a car is rented for 5 days and driven for 400 miles?\n    \"\"\"\n    daily_rate = 30  # dollars per day\n    miles_driven = 400  # miles\n    cost_per_mile = 0.20  # dollars per mile\n    days_rented = 5  # days\n\n    cost_for_days = daily_rate * days_rented\n    cost_for_miles = cost_per_mile * miles_driven\n    result = cost_for_days + cost_for_miles\n\n    return result",
    "result": 230.0
  },
  {
    "index": 92,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    A shipping truck has a maximum capacity of 700 liters. If each box takes up 30 liters of space, how many boxes can still fit in the truck if 10 boxes have already been loaded?\n    \"\"\"\n    max_capacity_liters = 700\n    space_per_box_liters = 30\n    boxes_already_loaded = 10\n\n    # Calculate total space used by the boxes already loaded\n    space_used = boxes_already_loaded * space_per_box_liters\n\n    # Calculate remaining space in the truck\n    remaining_space = max_capacity_liters - space_used\n\n    # Calculate how many more boxes can fit in the remaining space\n    boxes_can_fit = remaining_space // space_per_box_liters\n\n    result = boxes_can_fit\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A shipping truck has a maximum capacity of 700 liters. If each box takes up 30 liters of space, how many boxes can still fit in the truck if 10 boxes have already been loaded?\n    \"\"\"\n    max_capacity_liters = 700\n    space_per_box_liters = 30\n    boxes_already_loaded = 10\n\n    # Calculate total space used by the boxes already loaded\n    space_used = boxes_already_loaded * space_per_box_liters\n\n    # Calculate remaining space in the truck\n    remaining_space = max_capacity_liters - space_used\n\n    # Calculate how many more boxes can fit in the remaining space\n    boxes_can_fit = remaining_space // space_per_box_liters\n\n    result = boxes_can_fit\n    return result",
    "result": 13
  },
  {
    "index": 93,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Angela's weight is four times the weight of her daughter and together, they weigh 160kg. Calculate the weight of the daughter.\n    \"\"\"\n    total_weight = 160  # total weight of Angela and her daughter in kg\n    weight_ratio = 4    # Angela's weight is four times her daughter's weight\n\n    # Let daughter's weight be x\n    # Then Angela's weight = 4 * x\n    # Together: x + 4x = 160 => 5x = 160 => x = 160 / 5\n    daughter_weight = total_weight / (weight_ratio + 1)\n\n    result = daughter_weight\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Angela's weight is four times the weight of her daughter and together, they weigh 160kg. Calculate the weight of the daughter.\n    \"\"\"\n    total_weight = 160  # total weight of Angela and her daughter in kg\n    weight_ratio = 4    # Angela's weight is four times her daughter's weight\n\n    # Let daughter's weight be x\n    # Then Angela's weight = 4 * x\n    # Together: x + 4x = 160 => 5x = 160 => x = 160 / 5\n    daughter_weight = total_weight / (weight_ratio + 1)\n\n    result = daughter_weight\n\n    return result",
    "result": 32.0
  },
  {
    "index": 94,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Alex bought 4 books for $9 each and 2 pens for $2 each. He gave the cashier a $50 bill. How much change did he receive?\n    \"\"\"\n    price_per_book = 9\n    number_of_books = 4\n    price_per_pen = 2\n    number_of_pens = 2\n    amount_given = 50\n\n    total_books_cost = price_per_book * number_of_books\n    total_pens_cost = price_per_pen * number_of_pens\n    total_cost = total_books_cost + total_pens_cost\n\n    result = amount_given - total_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Alex bought 4 books for $9 each and 2 pens for $2 each. He gave the cashier a $50 bill. How much change did he receive?\n    \"\"\"\n    price_per_book = 9\n    number_of_books = 4\n    price_per_pen = 2\n    number_of_pens = 2\n    amount_given = 50\n\n    total_books_cost = price_per_book * number_of_books\n    total_pens_cost = price_per_pen * number_of_pens\n    total_cost = total_books_cost + total_pens_cost\n\n    result = amount_given - total_cost\n\n    return result",
    "result": 10
  },
  {
    "index": 95,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Brianna had 700 stickers in her album. Her friend Olivia had 80 fewer stickers. How many stickers did they have in total?\n    \"\"\"\n    brianna_stickers = 700\n    olivia_stickers = brianna_stickers - 80\n    total_stickers = brianna_stickers + olivia_stickers\n\n    result = total_stickers\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Brianna had 700 stickers in her album. Her friend Olivia had 80 fewer stickers. How many stickers did they have in total?\n    \"\"\"\n    brianna_stickers = 700\n    olivia_stickers = brianna_stickers - 80\n    total_stickers = brianna_stickers + olivia_stickers\n\n    result = total_stickers\n\n    return result",
    "result": 1320
  },
  {
    "index": 96,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A pizza restaurant offers a 25% discount on medium pizzas on Tuesdays. If a medium pizza is priced at $15, how much would it cost on a Tuesday (including the discount)?\n    \"\"\"\n    original_price = 15\n    discount_rate = 0.25\n    discount_amount = original_price * discount_rate\n    result = original_price - discount_amount\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A pizza restaurant offers a 25% discount on medium pizzas on Tuesdays. If a medium pizza is priced at $15, how much would it cost on a Tuesday (including the discount)?\n    \"\"\"\n    original_price = 15\n    discount_rate = 0.25\n    discount_amount = original_price * discount_rate\n    result = original_price - discount_amount\n\n    return result",
    "result": 11.25
  },
  {
    "index": 97,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Nicole and her classmates ordered a bag of cookies and asked for it to be divided into 24 pieces. During snack time, they only ate one-twelfth of it. The next day, Nicole ate three-fourths of the remaining cookies. Then her classmates each took four pieces. How many pieces of cookie were left?\n    \"\"\"\n    total_pieces = 24\n    eaten_first_day = total_pieces * (1/12)  # one-twelfth eaten first day\n    remaining_after_first_day = total_pieces - eaten_first_day\n\n    nicole_ate_next_day = remaining_after_first_day * (3/4)  # Nicole ate three-fourths of remaining\n    remaining_after_nicole = remaining_after_first_day - nicole_ate_next_day\n\n    # Nicole's classmates then each took 4 pieces\n    # We need to find how many classmates took pieces.\n    # The problem does not specify how many classmates.\n    # The only given info about classmates is \"her classmates each took four pieces.\"\n    # We must assume all the remaining pieces were divided this way, or we lack info.\n\n    # Since no number of classmates is given, \n    # let's assume the problem expects us to just solve up to before \"her classmates each took four pieces\" part.\n\n    # Alternatively, maybe the problem implies all the remaining cookies were taken by classmates,\n    # with each taking four pieces. Let's check how many pieces remain:\n\n    # If classmates each took 4 pieces, and all remaining pieces were taken by them,\n    # then number_of_classmates = remaining_after_nicole / 4\n\n    # The problem asks: How many pieces of cookie were left *after* classmates took their pieces?\n\n    # So remaining after classmates took pieces:\n    # remaining_after_classmates = remaining_after_nicole - (number_of_classmates * 4)\n    # but if all remaining were taken, leftover is zero.\n\n    # Since number_of_classmates is unknown, but they \"each took 4 pieces\",\n    # probably the problem wants the amount left after some equals number of classmates took their pieces,\n    # but classmates are Nicole's classmates, not including Nicole herself.\n    # The problem did not say how many classmates there are.\n\n    # Possibly the problem expects to find how many pieces are left \n    # assuming the number of classmates equals the number of pieces divided by 4 (integer division).\n\n    # Calculate number of classmates who took pieces (integer number):\n    number_of_classmates = int(remaining_after_nicole // 4)\n\n    # Calculate pieces taken by classmates:\n    classmates_pieces_taken = number_of_classmates * 4\n\n    # Calculate pieces left after classmates took theirs:\n    pieces_left = remaining_after_nicole - classmates_pieces_taken\n\n    return pieces_left\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Nicole and her classmates ordered a bag of cookies and asked for it to be divided into 24 pieces. During snack time, they only ate one-twelfth of it. The next day, Nicole ate three-fourths of the remaining cookies. Then her classmates each took four pieces. How many pieces of cookie were left?\n    \"\"\"\n    total_pieces = 24\n    eaten_first_day = total_pieces * (1/12)  # one-twelfth eaten first day\n    remaining_after_first_day = total_pieces - eaten_first_day\n\n    nicole_ate_next_day = remaining_after_first_day * (3/4)  # Nicole ate three-fourths of remaining\n    remaining_after_nicole = remaining_after_first_day - nicole_ate_next_day\n\n    # Nicole's classmates then each took 4 pieces\n    # We need to find how many classmates took pieces.\n    # The problem does not specify how many classmates.\n    # The only given info about classmates is \"her classmates each took four pieces.\"\n    # We must assume all the remaining pieces were divided this way, or we lack info.\n\n    # Since no number of classmates is given, \n    # let's assume the problem expects us to just solve up to before \"her classmates each took four pieces\" part.\n\n    # Alternatively, maybe the problem implies all the remaining cookies were taken by classmates,\n    # with each taking four pieces. Let's check how many pieces remain:\n\n    # If classmates each took 4 pieces, and all remaining pieces were taken by them,\n    # then number_of_classmates = remaining_after_nicole / 4\n\n    # The problem asks: How many pieces of cookie were left *after* classmates took their pieces?\n\n    # So remaining after classmates took pieces:\n    # remaining_after_classmates = remaining_after_nicole - (number_of_classmates * 4)\n    # but if all remaining were taken, leftover is zero.\n\n    # Since number_of_classmates is unknown, but they \"each took 4 pieces\",\n    # probably the problem wants the amount left after some equals number of classmates took their pieces,\n    # but classmates are Nicole's classmates, not including Nicole herself.\n    # The problem did not say how many classmates there are.\n\n    # Possibly the problem expects to find how many pieces are left \n    # assuming the number of classmates equals the number of pieces divided by 4 (integer division).\n\n    # Calculate number of classmates who took pieces (integer number):\n    number_of_classmates = int(remaining_after_nicole // 4)\n\n    # Calculate pieces taken by classmates:\n    classmates_pieces_taken = number_of_classmates * 4\n\n    # Calculate pieces left after classmates took theirs:\n    pieces_left = remaining_after_nicole - classmates_pieces_taken\n\n    return pieces_left",
    "result": 1.5
  },
  {
    "index": 98,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mia is a tailor. She can sew 5 clothes, each taking 1 hour to sew, in a day. She needs to sew a total of 50 clothes.\n    How many days will it take her to sew all the clothes? Sophie has 9 apples and she wants to divide them equally \n    between herself and her 2 siblings. How many apples will each person have?\n    \"\"\"\n    # Mia's sewing capacity per day\n    clothes_per_day = 5\n    # Total clothes Mia needs to sew\n    total_clothes = 50\n    # Calculate the days needed to sew all clothes\n    days_needed = total_clothes / clothes_per_day\n\n    # Sophie and her siblings count\n    total_people = 3  # Sophie + 2 siblings\n    # Total apples Sophie has\n    total_apples = 9\n    # Calculate apples per person\n    apples_per_person = total_apples / total_people\n\n    # The problem has two separate answers. \n    # If returning one combined number, we can return a tuple:\n    result = (days_needed, apples_per_person)\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mia is a tailor. She can sew 5 clothes, each taking 1 hour to sew, in a day. She needs to sew a total of 50 clothes.\n    How many days will it take her to sew all the clothes? Sophie has 9 apples and she wants to divide them equally \n    between herself and her 2 siblings. How many apples will each person have?\n    \"\"\"\n    # Mia's sewing capacity per day\n    clothes_per_day = 5\n    # Total clothes Mia needs to sew\n    total_clothes = 50\n    # Calculate the days needed to sew all clothes\n    days_needed = total_clothes / clothes_per_day\n\n    # Sophie and her siblings count\n    total_people = 3  # Sophie + 2 siblings\n    # Total apples Sophie has\n    total_apples = 9\n    # Calculate apples per person\n    apples_per_person = total_apples / total_people\n\n    # The problem has two separate answers. \n    # If returning one combined number, we can return a tuple:\n    result = (days_needed, apples_per_person)\n\n    return result",
    "result": [
      10.0,
      3.0
    ]
  },
  {
    "index": 99,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Sarah is preparing lunch for her family. There are 6 people in total. If each member eats 1.5 sandwiches and a tray contains 10 sandwiches,\n    how many trays does she need to buy? Anna and David hosted a party and sent out 150 invitations. 65% of the guests responded with a Yes,\n    and 10% responded with a No. How many guests did not respond at all?\n    \"\"\"\n    # Part 1: Sandwich trays needed\n    total_people = 6\n    sandwiches_per_person = 1.5\n    sandwiches_per_tray = 10\n\n    total_sandwiches_needed = total_people * sandwiches_per_person\n    trays_needed = total_sandwiches_needed / sandwiches_per_tray\n    # Since trays_needed must be a whole number (can't buy partial trays), we round up\n    import math\n    trays_needed = math.ceil(trays_needed)\n\n    # Part 2: Guests who did not respond\n    total_invitations = 150\n    yes_percentage = 0.65\n    no_percentage = 0.10\n\n    guests_responded_yes = total_invitations * yes_percentage\n    guests_responded_no = total_invitations * no_percentage\n    guests_responded_total = guests_responded_yes + guests_responded_no\n    guests_not_responded = total_invitations - guests_responded_total\n\n    # Return a combined result (both results must be returned)\n    # Since the function signature is -> float, and the problem has two results,\n    # we can return as a tuple (trays_needed, guests_not_responded)\n    # But the function says -> float, so possibly return as a tuple is expected\n    # I'll return a tuple anyway because the problem asks for both answers\n    return trays_needed, int(guests_not_responded)\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Sarah is preparing lunch for her family. There are 6 people in total. If each member eats 1.5 sandwiches and a tray contains 10 sandwiches,\n    how many trays does she need to buy? Anna and David hosted a party and sent out 150 invitations. 65% of the guests responded with a Yes,\n    and 10% responded with a No. How many guests did not respond at all?\n    \"\"\"\n    # Part 1: Sandwich trays needed\n    total_people = 6\n    sandwiches_per_person = 1.5\n    sandwiches_per_tray = 10\n\n    total_sandwiches_needed = total_people * sandwiches_per_person\n    trays_needed = total_sandwiches_needed / sandwiches_per_tray\n    # Since trays_needed must be a whole number (can't buy partial trays), we round up\n    import math\n    trays_needed = math.ceil(trays_needed)\n\n    # Part 2: Guests who did not respond\n    total_invitations = 150\n    yes_percentage = 0.65\n    no_percentage = 0.10\n\n    guests_responded_yes = total_invitations * yes_percentage\n    guests_responded_no = total_invitations * no_percentage\n    guests_responded_total = guests_responded_yes + guests_responded_no\n    guests_not_responded = total_invitations - guests_responded_total\n\n    # Return a combined result (both results must be returned)\n    # Since the function signature is -> float, and the problem has two results,\n    # we can return as a tuple (trays_needed, guests_not_responded)\n    # But the function says -> float, so possibly return as a tuple is expected\n    # I'll return a tuple anyway because the problem asks for both answers\n    return trays_needed, int(guests_not_responded)",
    "result": [
      1,
      37
    ]
  }
]