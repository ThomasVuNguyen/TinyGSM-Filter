[
  {
    "index": 0,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    There are 216 tiles in a room. 12 of these tiles are black and the rest are white. What is the ratio of black tiles to white tiles?\n    \"\"\"\n    total_tiles = 216\n    black_tiles = 12\n    white_tiles = total_tiles - black_tiles\n\n    ratio_black_to_white = black_tiles / white_tiles\n\n    return ratio_black_to_white\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 216 tiles in a room. 12 of these tiles are black and the rest are white. What is the ratio of black tiles to white tiles?\n    \"\"\"\n    total_tiles = 216\n    black_tiles = 12\n    white_tiles = total_tiles - black_tiles\n\n    ratio_black_to_white = black_tiles / white_tiles\n\n    return ratio_black_to_white",
    "result": 0.058823529411764705
  },
  {
    "index": 1,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A train travels at 110 kilometers per hour for 7 hours on a journey from city A to city B. If the distance between the two cities is 770 kilometers, how long will it take the train to complete the journey at an average speed of 95 kilometers per hour?\n    \"\"\"\n    # Given values\n    distance_km = 770  # distance between city A and city B in kilometers\n    average_speed_kmh = 95  # average speed in kilometers per hour\n\n    # Calculate the time to complete the journey at the new average speed\n    time_hours = distance_km / average_speed_kmh\n\n    return time_hours\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A train travels at 110 kilometers per hour for 7 hours on a journey from city A to city B. If the distance between the two cities is 770 kilometers, how long will it take the train to complete the journey at an average speed of 95 kilometers per hour?\n    \"\"\"\n    # Given values\n    distance_km = 770  # distance between city A and city B in kilometers\n    average_speed_kmh = 95  # average speed in kilometers per hour\n\n    # Calculate the time to complete the journey at the new average speed\n    time_hours = distance_km / average_speed_kmh\n\n    return time_hours",
    "result": 8.105263157894736
  },
  {
    "index": 2,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Alex takes a new vitamin which increases his energy by 20%. He then reduces his coffee intake by 25% which increases his energy by an additional 10%. If his original energy level was 100, what is his new energy level?\n    \"\"\"\n    original_energy = 100\n    vitamin_increase_pct = 20 / 100  # 20%\n    coffee_reduction_pct = 25 / 100  # 25%, although this is described, the direct effect on energy is +10%\n    coffee_energy_increase_pct = 10 / 100  # 10%\n    \n    # After vitamin increase\n    energy_after_vitamin = original_energy * (1 + vitamin_increase_pct)\n    \n    # After coffee reduction increase\n    energy_after_coffee = energy_after_vitamin * (1 + coffee_energy_increase_pct)\n    \n    result = energy_after_coffee\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Alex takes a new vitamin which increases his energy by 20%. He then reduces his coffee intake by 25% which increases his energy by an additional 10%. If his original energy level was 100, what is his new energy level?\n    \"\"\"\n    original_energy = 100\n    vitamin_increase_pct = 20 / 100  # 20%\n    coffee_reduction_pct = 25 / 100  # 25%, although this is described, the direct effect on energy is +10%\n    coffee_energy_increase_pct = 10 / 100  # 10%\n    \n    # After vitamin increase\n    energy_after_vitamin = original_energy * (1 + vitamin_increase_pct)\n    \n    # After coffee reduction increase\n    energy_after_coffee = energy_after_vitamin * (1 + coffee_energy_increase_pct)\n    \n    result = energy_after_coffee\n    return result",
    "result": 132.0
  },
  {
    "index": 3,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Dr. Wilson has 300 horses where 3/4 are stallions and the rest are mares. Only three-fifths of those mares can produce foals. How many horses does Dr. Wilson have that cannot produce foals?\n    \"\"\"\n    total_horses = 300\n    fraction_stallions = 3/4\n    stallions = total_horses * fraction_stallions\n    mares = total_horses - stallions\n    fraction_mares_can_produce = 3/5\n    mares_that_can_produce = mares * fraction_mares_can_produce\n    mares_that_cannot_produce = mares - mares_that_can_produce\n    # Stallions cannot produce foals\n    stallions_cannot_produce = stallions\n    \n    result = stallions_cannot_produce + mares_that_cannot_produce\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Dr. Wilson has 300 horses where 3/4 are stallions and the rest are mares. Only three-fifths of those mares can produce foals. How many horses does Dr. Wilson have that cannot produce foals?\n    \"\"\"\n    total_horses = 300\n    fraction_stallions = 3/4\n    stallions = total_horses * fraction_stallions\n    mares = total_horses - stallions\n    fraction_mares_can_produce = 3/5\n    mares_that_can_produce = mares * fraction_mares_can_produce\n    mares_that_cannot_produce = mares - mares_that_can_produce\n    # Stallions cannot produce foals\n    stallions_cannot_produce = stallions\n    \n    result = stallions_cannot_produce + mares_that_cannot_produce\n    \n    return result",
    "result": 255.0
  },
  {
    "index": 4,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Sara is throwing a party and wants to buy cups for her guests. Each pack of cups has 24 cups in it, and she expects 90 guests at the party. How many packs of cups should Sara buy?\n    \"\"\"\n    cups_per_pack = 24\n    expected_guests = 90\n\n    # Calculate the minimum packs needed so there are enough cups for each guest\n    packs_needed = expected_guests / cups_per_pack\n\n    # Since partial packs cannot be bought, round up to the next whole pack\n    import math\n    result = math.ceil(packs_needed)\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Sara is throwing a party and wants to buy cups for her guests. Each pack of cups has 24 cups in it, and she expects 90 guests at the party. How many packs of cups should Sara buy?\n    \"\"\"\n    cups_per_pack = 24\n    expected_guests = 90\n\n    # Calculate the minimum packs needed so there are enough cups for each guest\n    packs_needed = expected_guests / cups_per_pack\n\n    # Since partial packs cannot be bought, round up to the next whole pack\n    import math\n    result = math.ceil(packs_needed)\n\n    return result",
    "result": 4
  },
  {
    "index": 5,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    David has 9 identical coins and he spends 3 of them on a candy. If the candy costs 25 cents and each coin is worth 10 cents, how much money does David have left?\n    \"\"\"\n    total_coins = 9\n    coins_spent = 3\n    candy_cost = 25  # in cents\n    coin_value = 10  # in cents\n\n    # Calculate total money initially\n    total_money_initial = total_coins * coin_value  # in cents\n\n    # Calculate money spent on the candy\n    money_spent = coins_spent * coin_value  # in cents\n\n    # Calculate money left after buying the candy\n    money_left_cents = total_money_initial - money_spent\n\n    # Convert cents to dollars\n    result = money_left_cents / 100\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    David has 9 identical coins and he spends 3 of them on a candy. If the candy costs 25 cents and each coin is worth 10 cents, how much money does David have left?\n    \"\"\"\n    total_coins = 9\n    coins_spent = 3\n    candy_cost = 25  # in cents\n    coin_value = 10  # in cents\n\n    # Calculate total money initially\n    total_money_initial = total_coins * coin_value  # in cents\n\n    # Calculate money spent on the candy\n    money_spent = coins_spent * coin_value  # in cents\n\n    # Calculate money left after buying the candy\n    money_left_cents = total_money_initial - money_spent\n\n    # Convert cents to dollars\n    result = money_left_cents / 100\n\n    return result",
    "result": 0.6
  },
  {
    "index": 6,
    "response": "```python\ndef simple_math_problem() -> tuple:\n    \"\"\"\n    A farmer has a total of 105 rabbits and chickens on his farm. He counts 290 legs, how many of each animal are there?\n    \"\"\"\n    total_animals = 105\n    total_legs = 290\n    \n    # Let c = number of chickens, r = number of rabbits\n    # Chickens have 2 legs, rabbits have 4 legs\n    # Equations:\n    # c + r = 105\n    # 2c + 4r = 290\n    \n    # From the first equation: c = 105 - r\n    # Substitute into second equation:\n    # 2(105 - r) + 4r = 290\n    # 210 - 2r + 4r = 290\n    # 210 + 2r = 290\n    # 2r = 290 - 210\n    # 2r = 80\n    # r = 40\n    \n    rabbits = 40\n    chickens = total_animals - rabbits\n    \n    result = (chickens, rabbits)\n    \n    return result\n```",
    "code": "def simple_math_problem() -> tuple:\n    \"\"\"\n    A farmer has a total of 105 rabbits and chickens on his farm. He counts 290 legs, how many of each animal are there?\n    \"\"\"\n    total_animals = 105\n    total_legs = 290\n    \n    # Let c = number of chickens, r = number of rabbits\n    # Chickens have 2 legs, rabbits have 4 legs\n    # Equations:\n    # c + r = 105\n    # 2c + 4r = 290\n    \n    # From the first equation: c = 105 - r\n    # Substitute into second equation:\n    # 2(105 - r) + 4r = 290\n    # 210 - 2r + 4r = 290\n    # 210 + 2r = 290\n    # 2r = 290 - 210\n    # 2r = 80\n    # r = 40\n    \n    rabbits = 40\n    chickens = total_animals - rabbits\n    \n    result = (chickens, rabbits)\n    \n    return result",
    "result": [
      65,
      40
    ]
  },
  {
    "index": 7,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jim purchased 140 ice cream cones at $1.50 each. How much money did Jim spend on the ice cream cones?\n    \"\"\"\n    number_of_cones = 140\n    price_per_cone = 1.50\n    total_cost = number_of_cones * price_per_cone\n\n    result = total_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jim purchased 140 ice cream cones at $1.50 each. How much money did Jim spend on the ice cream cones?\n    \"\"\"\n    number_of_cones = 140\n    price_per_cone = 1.50\n    total_cost = number_of_cones * price_per_cone\n\n    result = total_cost\n\n    return result",
    "result": 210.0
  },
  {
    "index": 8,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mrs. Huang has a bucket with 2 quarts of water in it. How many gallons of water does Mrs. Huang have?\n    \"\"\"\n    quarts_of_water = 2\n    quarts_per_gallon = 4  # There are 4 quarts in 1 gallon\n\n    gallons_of_water = quarts_of_water / quarts_per_gallon\n\n    result = gallons_of_water\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mrs. Huang has a bucket with 2 quarts of water in it. How many gallons of water does Mrs. Huang have?\n    \"\"\"\n    quarts_of_water = 2\n    quarts_per_gallon = 4  # There are 4 quarts in 1 gallon\n\n    gallons_of_water = quarts_of_water / quarts_per_gallon\n\n    result = gallons_of_water\n    return result",
    "result": 0.5
  },
  {
    "index": 9,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    After releasing a new game, there were 100 players on the first day. When player statistics were checked after a week, it was observed that the number of players had increased by a number four times more than the first day. If there were 500 more players in the game after another 2 days, how many players had played in total? Farmer Jack and farmer Jill breed chickens for a living. On average, Jack breeds four less than the triple of Jill’s chickens per day, while Jill breeds five more chickens per day than the number of days in a month. How many chickens does Jack breed per month?\n    \"\"\"\n\n    # Part 1: Game players\n    players_first_day = 100\n    days_in_week = 7\n\n    # After a week, number of players increased by a number four times more than the first day's number.\n    # \"increased by a number four times more than the first day\" -> increase = 4 * players_first_day\n    increase_after_week = 4 * players_first_day\n\n    players_after_week = players_first_day + increase_after_week  # total players after a week\n\n    # After another 2 days, 500 more players joined\n    players_after_9_days = players_after_week + 500\n\n    total_players = players_after_9_days\n\n    # Part 2: Chickens bred by Jack per month\n    # Jill breeds five more than the number of days in a month per day\n    # Number of days in a month - assume 30 (typical month)\n    days_in_month = 30\n    jill_per_day = days_in_month + 5\n\n    # Jack breeds four less than triple Jill's chickens per day\n    jack_per_day = 3 * jill_per_day - 4\n\n    # Jack breeds this many chickens per month (days_in_month)\n    jack_per_month = jack_per_day * days_in_month\n\n    return total_players, jack_per_month\n```\n",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    After releasing a new game, there were 100 players on the first day. When player statistics were checked after a week, it was observed that the number of players had increased by a number four times more than the first day. If there were 500 more players in the game after another 2 days, how many players had played in total? Farmer Jack and farmer Jill breed chickens for a living. On average, Jack breeds four less than the triple of Jill’s chickens per day, while Jill breeds five more chickens per day than the number of days in a month. How many chickens does Jack breed per month?\n    \"\"\"\n\n    # Part 1: Game players\n    players_first_day = 100\n    days_in_week = 7\n\n    # After a week, number of players increased by a number four times more than the first day's number.\n    # \"increased by a number four times more than the first day\" -> increase = 4 * players_first_day\n    increase_after_week = 4 * players_first_day\n\n    players_after_week = players_first_day + increase_after_week  # total players after a week\n\n    # After another 2 days, 500 more players joined\n    players_after_9_days = players_after_week + 500\n\n    total_players = players_after_9_days\n\n    # Part 2: Chickens bred by Jack per month\n    # Jill breeds five more than the number of days in a month per day\n    # Number of days in a month - assume 30 (typical month)\n    days_in_month = 30\n    jill_per_day = days_in_month + 5\n\n    # Jack breeds four less than triple Jill's chickens per day\n    jack_per_day = 3 * jill_per_day - 4\n\n    # Jack breeds this many chickens per month (days_in_month)\n    jack_per_month = jack_per_day * days_in_month\n\n    return total_players, jack_per_month",
    "result": [
      1000,
      3030
    ]
  },
  {
    "index": 10,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Kate has eight times more candies than Leo and nine times more than Mia. If Kate has 72 candies, how many candies do Leo and Mia have together?\n    \"\"\"\n    # Kate's candies\n    kate_candies = 72\n\n    # Kate has eight times more candies than Leo\n    # \"Eight times more\" usually means Kate = Leo + 8 * Leo = 9 * Leo\n    # So Leo = Kate / 9\n    leo_candies = kate_candies / 9\n\n    # Kate has nine times more than Mia\n    # Similarly, Kate = Mia + 9 * Mia = 10 * Mia\n    # So Mia = Kate / 10\n    mia_candies = kate_candies / 10\n\n    # Total candies Leo and Mia have together\n    result = leo_candies + mia_candies\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Kate has eight times more candies than Leo and nine times more than Mia. If Kate has 72 candies, how many candies do Leo and Mia have together?\n    \"\"\"\n    # Kate's candies\n    kate_candies = 72\n\n    # Kate has eight times more candies than Leo\n    # \"Eight times more\" usually means Kate = Leo + 8 * Leo = 9 * Leo\n    # So Leo = Kate / 9\n    leo_candies = kate_candies / 9\n\n    # Kate has nine times more than Mia\n    # Similarly, Kate = Mia + 9 * Mia = 10 * Mia\n    # So Mia = Kate / 10\n    mia_candies = kate_candies / 10\n\n    # Total candies Leo and Mia have together\n    result = leo_candies + mia_candies\n\n    return result",
    "result": 15.2
  },
  {
    "index": 11,
    "response": "```python\ndef simple_math_problem() -> tuple:\n    \"\"\"\n    A farm has 300 chickens. The farm owner sells 2/3 of them to a restaurant and the rest to a grocery store. \n    If the grocery store gets 50 more chickens than the restaurant, how many chickens did each get?\n    \"\"\"\n    total_chickens = 300\n    restaurant_chickens = (2/3) * total_chickens\n    grocery_chickens = total_chickens - restaurant_chickens\n\n    # According to the problem:\n    # grocery_chickens = restaurant_chickens + 50\n    # But from direct calculation, this does not hold\n    # So let's solve the system with x = restaurant, y = grocery\n    \n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    eq1 = Eq(x + y, total_chickens)\n    eq2 = Eq(y, x + 50)\n    solution = solve((eq1, eq2), (x, y))\n    \n    restaurant = solution[x]\n    grocery = solution[y]\n\n    return restaurant, grocery\n```",
    "code": "def simple_math_problem() -> tuple:\n    \"\"\"\n    A farm has 300 chickens. The farm owner sells 2/3 of them to a restaurant and the rest to a grocery store. \n    If the grocery store gets 50 more chickens than the restaurant, how many chickens did each get?\n    \"\"\"\n    total_chickens = 300\n    restaurant_chickens = (2/3) * total_chickens\n    grocery_chickens = total_chickens - restaurant_chickens\n\n    # According to the problem:\n    # grocery_chickens = restaurant_chickens + 50\n    # But from direct calculation, this does not hold\n    # So let's solve the system with x = restaurant, y = grocery\n    \n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    eq1 = Eq(x + y, total_chickens)\n    eq2 = Eq(y, x + 50)\n    solution = solve((eq1, eq2), (x, y))\n    \n    restaurant = solution[x]\n    grocery = solution[y]\n\n    return restaurant, grocery",
    "result": "Success"
  },
  {
    "index": 12,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Victoria earns 200$ a day and has to pay 15 percent of her income to taxes, 30 percent of her income to her healthcare, and 500$ every week for her local union dues. How much money does she get to keep per week?\n    \"\"\"\n    daily_income = 200\n    tax_rate = 0.15\n    healthcare_rate = 0.30\n    weekly_union_dues = 500\n    days_per_week = 7\n\n    weekly_income = daily_income * days_per_week\n    tax_amount = weekly_income * tax_rate\n    healthcare_amount = weekly_income * healthcare_rate\n\n    money_kept = weekly_income - tax_amount - healthcare_amount - weekly_union_dues\n\n    result = money_kept\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Victoria earns 200$ a day and has to pay 15 percent of her income to taxes, 30 percent of her income to her healthcare, and 500$ every week for her local union dues. How much money does she get to keep per week?\n    \"\"\"\n    daily_income = 200\n    tax_rate = 0.15\n    healthcare_rate = 0.30\n    weekly_union_dues = 500\n    days_per_week = 7\n\n    weekly_income = daily_income * days_per_week\n    tax_amount = weekly_income * tax_rate\n    healthcare_amount = weekly_income * healthcare_rate\n\n    money_kept = weekly_income - tax_amount - healthcare_amount - weekly_union_dues\n\n    result = money_kept\n    return result",
    "result": 270.0
  },
  {
    "index": 13,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Abby and William adopted 30 dogs from the animal shelter. If 75% of the dogs found a loving home and 5% of the dogs were sent to another shelter, how many dogs did they keep in their care?\n    \"\"\"\n    total_dogs = 30\n    percent_found_homes = 0.75\n    percent_sent_other_shelter = 0.05\n\n    dogs_found_homes = total_dogs * percent_found_homes\n    dogs_sent_other_shelter = total_dogs * percent_sent_other_shelter\n\n    dogs_kept_in_care = total_dogs - dogs_found_homes - dogs_sent_other_shelter\n\n    result = dogs_kept_in_care\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Abby and William adopted 30 dogs from the animal shelter. If 75% of the dogs found a loving home and 5% of the dogs were sent to another shelter, how many dogs did they keep in their care?\n    \"\"\"\n    total_dogs = 30\n    percent_found_homes = 0.75\n    percent_sent_other_shelter = 0.05\n\n    dogs_found_homes = total_dogs * percent_found_homes\n    dogs_sent_other_shelter = total_dogs * percent_sent_other_shelter\n\n    dogs_kept_in_care = total_dogs - dogs_found_homes - dogs_sent_other_shelter\n\n    result = dogs_kept_in_care\n\n    return result",
    "result": 6.0
  },
  {
    "index": 14,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Daniel bought 7 notebooks for $1 each and 8 rulers for $3 each. How much change must he get from a $40 bill?\n    \"\"\"\n    cost_per_notebook = 1\n    number_of_notebooks = 7\n    cost_per_ruler = 3\n    number_of_rulers = 8\n    total_money_given = 40\n\n    total_cost_notebooks = cost_per_notebook * number_of_notebooks\n    total_cost_rulers = cost_per_ruler * number_of_rulers\n    total_cost = total_cost_notebooks + total_cost_rulers\n\n    change = total_money_given - total_cost\n\n    return change\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Daniel bought 7 notebooks for $1 each and 8 rulers for $3 each. How much change must he get from a $40 bill?\n    \"\"\"\n    cost_per_notebook = 1\n    number_of_notebooks = 7\n    cost_per_ruler = 3\n    number_of_rulers = 8\n    total_money_given = 40\n\n    total_cost_notebooks = cost_per_notebook * number_of_notebooks\n    total_cost_rulers = cost_per_ruler * number_of_rulers\n    total_cost = total_cost_notebooks + total_cost_rulers\n\n    change = total_money_given - total_cost\n\n    return change",
    "result": 9
  },
  {
    "index": 15,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Lily has 50 math problems to solve in one hour. She has already solved 10 problems in 10 minutes. How much time is left for her to finish the remaining problems?\n    \"\"\"\n    total_problems = 50\n    total_time_minutes = 60\n    solved_problems = 10\n    time_spent_minutes = 10\n\n    remaining_problems = total_problems - solved_problems\n    remaining_time = total_time_minutes - time_spent_minutes\n\n    # Time left for her to finish the remaining problems\n    result = remaining_time\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Lily has 50 math problems to solve in one hour. She has already solved 10 problems in 10 minutes. How much time is left for her to finish the remaining problems?\n    \"\"\"\n    total_problems = 50\n    total_time_minutes = 60\n    solved_problems = 10\n    time_spent_minutes = 10\n\n    remaining_problems = total_problems - solved_problems\n    remaining_time = total_time_minutes - time_spent_minutes\n\n    # Time left for her to finish the remaining problems\n    result = remaining_time\n    return result",
    "result": 50
  },
  {
    "index": 16,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Four friends went to a restaurant and the total bill was $350. If they decided to give a 15% tip to the waiter, how much does each person have to pay including the tip?\n    \"\"\"\n    total_bill = 350\n    tip_percentage = 0.15\n    number_of_friends = 4\n\n    tip_amount = total_bill * tip_percentage\n    total_with_tip = total_bill + tip_amount\n    result = total_with_tip / number_of_friends\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Four friends went to a restaurant and the total bill was $350. If they decided to give a 15% tip to the waiter, how much does each person have to pay including the tip?\n    \"\"\"\n    total_bill = 350\n    tip_percentage = 0.15\n    number_of_friends = 4\n\n    tip_amount = total_bill * tip_percentage\n    total_with_tip = total_bill + tip_amount\n    result = total_with_tip / number_of_friends\n\n    return result",
    "result": 100.625
  },
  {
    "index": 17,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If it costs $4.5 per mile to deliver a package and a package needs to be delivered 50 miles away from the post office, how much will it cost to deliver the package?\n    \"\"\"\n    cost_per_mile = 4.5\n    distance_miles = 50\n    \n    result = cost_per_mile * distance_miles\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If it costs $4.5 per mile to deliver a package and a package needs to be delivered 50 miles away from the post office, how much will it cost to deliver the package?\n    \"\"\"\n    cost_per_mile = 4.5\n    distance_miles = 50\n    \n    result = cost_per_mile * distance_miles\n    \n    return result",
    "result": 225.0
  },
  {
    "index": 18,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A person walked 4 km in 40 minutes. What is their average speed in km/hr?\n    \"\"\"\n    distance_km = 4\n    time_minutes = 40\n\n    time_hours = time_minutes / 60  # Convert minutes to hours\n    average_speed_kmh = distance_km / time_hours\n\n    result = average_speed_kmh\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A person walked 4 km in 40 minutes. What is their average speed in km/hr?\n    \"\"\"\n    distance_km = 4\n    time_minutes = 40\n\n    time_hours = time_minutes / 60  # Convert minutes to hours\n    average_speed_kmh = distance_km / time_hours\n\n    result = average_speed_kmh\n    return result",
    "result": 6.0
  },
  {
    "index": 19,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A carpenter used 1/3 of a board for a shelf and 3/8 of the same board for a cabinet. \n    If he used 5/12 yards for the shelf, how many yards of board did he have at first?\n    \"\"\"\n    shelf_fraction = 1/3\n    shelf_used_yards = 5/12\n\n    # Let total_board be the total yards of the board\n    # Since shelf_fraction * total_board = shelf_used_yards\n    total_board = shelf_used_yards / shelf_fraction\n\n    return total_board\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A carpenter used 1/3 of a board for a shelf and 3/8 of the same board for a cabinet. \n    If he used 5/12 yards for the shelf, how many yards of board did he have at first?\n    \"\"\"\n    shelf_fraction = 1/3\n    shelf_used_yards = 5/12\n\n    # Let total_board be the total yards of the board\n    # Since shelf_fraction * total_board = shelf_used_yards\n    total_board = shelf_used_yards / shelf_fraction\n\n    return total_board",
    "result": 1.2500000000000002
  },
  {
    "index": 20,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Max has 2 3-hour appointments today. He spends the rest of his 9-hour workday reviewing forms. \n    If he can review 50 forms per hour, how many forms does he review today?\n    \"\"\"\n    total_work_hours = 9\n    number_of_appointments = 2\n    hours_per_appointment = 3\n    forms_per_hour = 50\n\n    total_appointment_hours = number_of_appointments * hours_per_appointment\n    review_hours = total_work_hours - total_appointment_hours\n    result = review_hours * forms_per_hour\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Max has 2 3-hour appointments today. He spends the rest of his 9-hour workday reviewing forms. \n    If he can review 50 forms per hour, how many forms does he review today?\n    \"\"\"\n    total_work_hours = 9\n    number_of_appointments = 2\n    hours_per_appointment = 3\n    forms_per_hour = 50\n\n    total_appointment_hours = number_of_appointments * hours_per_appointment\n    review_hours = total_work_hours - total_appointment_hours\n    result = review_hours * forms_per_hour\n\n    return result",
    "result": 150
  },
  {
    "index": 21,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Ryan walked 2/5 of the distance to school and rode the school bus for the rest of the way. If the total distance to school is 10 kilometers, how far did Ryan walk?\n    \"\"\"\n    total_distance_km = 10\n    fraction_walked = 2 / 5\n    distance_walked = total_distance_km * fraction_walked\n\n    result = distance_walked\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Ryan walked 2/5 of the distance to school and rode the school bus for the rest of the way. If the total distance to school is 10 kilometers, how far did Ryan walk?\n    \"\"\"\n    total_distance_km = 10\n    fraction_walked = 2 / 5\n    distance_walked = total_distance_km * fraction_walked\n\n    result = distance_walked\n\n    return result",
    "result": 4.0
  },
  {
    "index": 22,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If a company can produce 120 widgets per hour, and they need to produce 3600 widgets, how many hours will it take to complete the order?\n    \"\"\"\n    widgets_per_hour = 120\n    total_widgets = 3600\n    \n    hours_needed = total_widgets / widgets_per_hour\n    \n    result = hours_needed\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a company can produce 120 widgets per hour, and they need to produce 3600 widgets, how many hours will it take to complete the order?\n    \"\"\"\n    widgets_per_hour = 120\n    total_widgets = 3600\n    \n    hours_needed = total_widgets / widgets_per_hour\n    \n    result = hours_needed\n\n    return result",
    "result": 30.0
  },
  {
    "index": 23,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jessica's bike can carry 2 people, but if she wants to take her luggage, she will only be able to fit 1/3 of that number inside. \n    If every person in a trip where Jessica had her luggage inside the bike weighed 110 pounds, and the luggage weighed 3/7 as much weight, \n    how much was the total weight the bike was carrying?\n    \"\"\"\n    max_people = 2\n    fraction_with_luggage = 1/3\n    max_people_with_luggage = max_people * fraction_with_luggage  # number of people when luggage is inside\n    \n    weight_per_person = 110\n    luggage_weight_ratio = 3/7\n    \n    luggage_weight = weight_per_person * luggage_weight_ratio\n    total_weight = max_people_with_luggage * weight_per_person + luggage_weight\n    \n    return total_weight\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jessica's bike can carry 2 people, but if she wants to take her luggage, she will only be able to fit 1/3 of that number inside. \n    If every person in a trip where Jessica had her luggage inside the bike weighed 110 pounds, and the luggage weighed 3/7 as much weight, \n    how much was the total weight the bike was carrying?\n    \"\"\"\n    max_people = 2\n    fraction_with_luggage = 1/3\n    max_people_with_luggage = max_people * fraction_with_luggage  # number of people when luggage is inside\n    \n    weight_per_person = 110\n    luggage_weight_ratio = 3/7\n    \n    luggage_weight = weight_per_person * luggage_weight_ratio\n    total_weight = max_people_with_luggage * weight_per_person + luggage_weight\n    \n    return total_weight",
    "result": 120.47619047619047
  },
  {
    "index": 24,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A delivery driver needs to deliver 12 packages. If each package costs $2.25 to deliver, how much will the total delivery cost?\n    \"\"\"\n    number_of_packages = 12\n    cost_per_package = 2.25\n\n    total_delivery_cost = number_of_packages * cost_per_package\n\n    return total_delivery_cost\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A delivery driver needs to deliver 12 packages. If each package costs $2.25 to deliver, how much will the total delivery cost?\n    \"\"\"\n    number_of_packages = 12\n    cost_per_package = 2.25\n\n    total_delivery_cost = number_of_packages * cost_per_package\n\n    return total_delivery_cost",
    "result": 27.0
  },
  {
    "index": 25,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A movie is 90 minutes long. How many hours long is the movie?\n    \"\"\"\n    total_minutes = 90\n    minutes_per_hour = 60\n    hours = total_minutes / minutes_per_hour\n\n    result = hours\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A movie is 90 minutes long. How many hours long is the movie?\n    \"\"\"\n    total_minutes = 90\n    minutes_per_hour = 60\n    hours = total_minutes / minutes_per_hour\n\n    result = hours\n\n    return result",
    "result": 1.5
  },
  {
    "index": 26,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    At the restaurant, Jack ate twice as many pizzas as salads. If he had 15 dishes in total, how many salads did he eat?\n    \"\"\"\n    total_dishes = 15\n    # Let salads = s\n    # pizzas = 2 * s\n    # s + 2s = 15 => 3s = 15 => s = 15/3\n    salads = total_dishes / 3\n    \n    result = salads\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    At the restaurant, Jack ate twice as many pizzas as salads. If he had 15 dishes in total, how many salads did he eat?\n    \"\"\"\n    total_dishes = 15\n    # Let salads = s\n    # pizzas = 2 * s\n    # s + 2s = 15 => 3s = 15 => s = 15/3\n    salads = total_dishes / 3\n    \n    result = salads\n    return result",
    "result": 5.0
  },
  {
    "index": 27,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Rachel cycled for 20km. She completed the first 5km in 10 minutes, \n    the second and third 5km in 12 minutes each. What was her average speed in (m/s) for the entire ride?\n    \"\"\"\n    # Distances in km\n    distance_first = 5\n    distance_second = 5\n    distance_third = 5\n    distance_fourth = 5\n    \n    # Times in minutes\n    time_first_min = 10\n    time_second_min = 12\n    time_third_min = 12\n    \n    # Total distance in km\n    total_distance_km = distance_first + distance_second + distance_third + distance_fourth\n    \n    # Total time in minutes (time for fourth segment is missing - \n    # Note: Problem states only the first three segments time. Fourth is not given.\n    # But problem states total ride of 20 km = four segments of 5km each.\n    # The problem only states times for first 3 segments - presumably the fourth segment time is missing/not needed.\n    # Let's re-examine:\n    # Problem: Rachel cycled for 20km. She completed the first 5km in 10 minutes,\n    # the second and third 5km in 12 minutes each. No time given for 4th 5km.\n    # Without time for 4th segment, can't calculate average for entire 20km.\n    # Could it be a typo and the ride was only 15km total?\n    # Or the \"second and third 5km in 12 minutes each\" means total 15km ride.\n    #\n    # The problem states clearly she cycled 20km.\n    # But times for only first 15 km are given.\n    # Possibly the fourth segment time not mentioned means zero or negligible time.\n    #\n    # Since no time for last 5km is given,\n    # the problem is likely to find average speed for the 15km covered in given times.\n    #\n    # Re-check problem statement:\n    # \"Rachel cycled for 20km. She completed the first 5km in 10 minutes,\n    # the second and third 5km in 12 minutes each.\"\n    #\n    # No mention of 4th segment time. So maybe the last 5km was instantaneous or omitted by mistake.\n    #\n    # We will assume she took no time for the last 5km (which is unrealistic), or problem intends only first 15km\n    #\n    # Let's assume she cycled total 20km; times given only for first 15km;\n    # so assume time for last 5km = 0, which is impossible, so maybe problem is incomplete.\n    #\n    # Alternatively, problem expects average speed over first 15km only.\n    #\n    # Following problem exactly as asked, average speed for entire ride (20 km) \n    # We can't calculate total time for 20 km because we don't know the time for the last 5km.\n    #\n    # Let's re-read problem carefully:\n    # Rachel cycled for 20km. She completed the first 5km in 10 minutes,\n    # the second and third 5km in 12 minutes each.\n    #\n    # So total of three segments accounted: 5 + 5 + 5 = 15 km.\n    #\n    # The problem wants average speed for entire 20 km. \n    # Assuming \"the second and third 5km segments in 12 minutes each\" means those are the last two 5km segments,\n    # So segment 1: 5 km = 10 min, segment 2: 5 km = 12 min, segment 3: 5 km = 12 min,\n    # and final (fourth) 5 km isn't mentioned, so must be zero or no time data.\n    #\n    # Alternatively, maybe \"the second and third 5km\" are 10km total, plus first 5 km, total 15km; \n    # maybe the total ride was just 15 km, problem has typo.\n    #\n    # Since problem explicitly states total ride 20 km and only times for first 3 segments, \n    # we must consider the last 5 km time missing and can't calculate average speed over 20 km.\n    #\n    # Possibly the problem wants to calculate average speed over 20 km assuming the last 5 km took 0 minutes,\n    # or problem wants average speed only for first 15 km.\n    #\n    # The only feasible way is to calculate average speed for first 15 km.\n    \n    total_distance_km = 15\n    \n    # Convert distances to meters\n    total_distance_m = total_distance_km * 1000  # 15,000 meters\n    \n    # Total time in minutes\n    total_time_min = time_first_min + time_second_min + time_third_min  # 10 + 12 + 12 = 34 minutes\n    \n    # Convert total time to seconds\n    total_time_s = total_time_min * 60  # 2040 seconds\n    \n    # Calculate average speed in m/s\n    result = total_distance_m / total_time_s\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Rachel cycled for 20km. She completed the first 5km in 10 minutes, \n    the second and third 5km in 12 minutes each. What was her average speed in (m/s) for the entire ride?\n    \"\"\"\n    # Distances in km\n    distance_first = 5\n    distance_second = 5\n    distance_third = 5\n    distance_fourth = 5\n    \n    # Times in minutes\n    time_first_min = 10\n    time_second_min = 12\n    time_third_min = 12\n    \n    # Total distance in km\n    total_distance_km = distance_first + distance_second + distance_third + distance_fourth\n    \n    # Total time in minutes (time for fourth segment is missing - \n    # Note: Problem states only the first three segments time. Fourth is not given.\n    # But problem states total ride of 20 km = four segments of 5km each.\n    # The problem only states times for first 3 segments - presumably the fourth segment time is missing/not needed.\n    # Let's re-examine:\n    # Problem: Rachel cycled for 20km. She completed the first 5km in 10 minutes,\n    # the second and third 5km in 12 minutes each. No time given for 4th 5km.\n    # Without time for 4th segment, can't calculate average for entire 20km.\n    # Could it be a typo and the ride was only 15km total?\n    # Or the \"second and third 5km in 12 minutes each\" means total 15km ride.\n    #\n    # The problem states clearly she cycled 20km.\n    # But times for only first 15 km are given.\n    # Possibly the fourth segment time not mentioned means zero or negligible time.\n    #\n    # Since no time for last 5km is given,\n    # the problem is likely to find average speed for the 15km covered in given times.\n    #\n    # Re-check problem statement:\n    # \"Rachel cycled for 20km. She completed the first 5km in 10 minutes,\n    # the second and third 5km in 12 minutes each.\"\n    #\n    # No mention of 4th segment time. So maybe the last 5km was instantaneous or omitted by mistake.\n    #\n    # We will assume she took no time for the last 5km (which is unrealistic), or problem intends only first 15km\n    #\n    # Let's assume she cycled total 20km; times given only for first 15km;\n    # so assume time for last 5km = 0, which is impossible, so maybe problem is incomplete.\n    #\n    # Alternatively, problem expects average speed over first 15km only.\n    #\n    # Following problem exactly as asked, average speed for entire ride (20 km) \n    # We can't calculate total time for 20 km because we don't know the time for the last 5km.\n    #\n    # Let's re-read problem carefully:\n    # Rachel cycled for 20km. She completed the first 5km in 10 minutes,\n    # the second and third 5km in 12 minutes each.\n    #\n    # So total of three segments accounted: 5 + 5 + 5 = 15 km.\n    #\n    # The problem wants average speed for entire 20 km. \n    # Assuming \"the second and third 5km segments in 12 minutes each\" means those are the last two 5km segments,\n    # So segment 1: 5 km = 10 min, segment 2: 5 km = 12 min, segment 3: 5 km = 12 min,\n    # and final (fourth) 5 km isn't mentioned, so must be zero or no time data.\n    #\n    # Alternatively, maybe \"the second and third 5km\" are 10km total, plus first 5 km, total 15km; \n    # maybe the total ride was just 15 km, problem has typo.\n    #\n    # Since problem explicitly states total ride 20 km and only times for first 3 segments, \n    # we must consider the last 5 km time missing and can't calculate average speed over 20 km.\n    #\n    # Possibly the problem wants to calculate average speed over 20 km assuming the last 5 km took 0 minutes,\n    # or problem wants average speed only for first 15 km.\n    #\n    # The only feasible way is to calculate average speed for first 15 km.\n    \n    total_distance_km = 15\n    \n    # Convert distances to meters\n    total_distance_m = total_distance_km * 1000  # 15,000 meters\n    \n    # Total time in minutes\n    total_time_min = time_first_min + time_second_min + time_third_min  # 10 + 12 + 12 = 34 minutes\n    \n    # Convert total time to seconds\n    total_time_s = total_time_min * 60  # 2040 seconds\n    \n    # Calculate average speed in m/s\n    result = total_distance_m / total_time_s\n    \n    return result",
    "result": 7.352941176470588
  },
  {
    "index": 28,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If the ratio of dogs to cats in a shelter is 3:5, and there are 60 cats in the shelter, how many dogs are in the shelter?\n    \"\"\"\n    ratio_dogs = 3\n    ratio_cats = 5\n    total_cats = 60\n    \n    # Calculate the number of dogs based on the ratio\n    dogs = (ratio_dogs / ratio_cats) * total_cats\n    \n    result = dogs\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If the ratio of dogs to cats in a shelter is 3:5, and there are 60 cats in the shelter, how many dogs are in the shelter?\n    \"\"\"\n    ratio_dogs = 3\n    ratio_cats = 5\n    total_cats = 60\n    \n    # Calculate the number of dogs based on the ratio\n    dogs = (ratio_dogs / ratio_cats) * total_cats\n    \n    result = dogs\n    return result",
    "result": 36.0
  },
  {
    "index": 29,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sam invested $5000 into a savings account with a 3.5% annual interest rate. How much money will be in the account after 5 years if the interest is compounded annually?\n    \"\"\"\n    principal = 5000  # Initial investment in dollars\n    annual_interest_rate = 3.5 / 100  # Convert percentage to decimal\n    years = 5\n\n    # Compound interest formula A = P(1 + r)^t\n    amount = principal * (1 + annual_interest_rate) ** years\n\n    result = amount\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sam invested $5000 into a savings account with a 3.5% annual interest rate. How much money will be in the account after 5 years if the interest is compounded annually?\n    \"\"\"\n    principal = 5000  # Initial investment in dollars\n    annual_interest_rate = 3.5 / 100  # Convert percentage to decimal\n    years = 5\n\n    # Compound interest formula A = P(1 + r)^t\n    amount = principal * (1 + annual_interest_rate) ** years\n\n    result = amount\n\n    return result",
    "result": 5938.431528234372
  },
  {
    "index": 30,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A box contains 72 balls. If John takes one-third of the balls, Jason takes half of the remainder, and Michael takes two-thirds of what’s left, how many balls does Michael take?\n    \"\"\"\n    total_balls = 72\n    john_takes = total_balls / 3\n    remainder_after_john = total_balls - john_takes\n    jason_takes = remainder_after_john / 2\n    remainder_after_jason = remainder_after_john - jason_takes\n    michael_takes = (2/3) * remainder_after_jason\n\n    result = michael_takes\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A box contains 72 balls. If John takes one-third of the balls, Jason takes half of the remainder, and Michael takes two-thirds of what’s left, how many balls does Michael take?\n    \"\"\"\n    total_balls = 72\n    john_takes = total_balls / 3\n    remainder_after_john = total_balls - john_takes\n    jason_takes = remainder_after_john / 2\n    remainder_after_jason = remainder_after_john - jason_takes\n    michael_takes = (2/3) * remainder_after_jason\n\n    result = michael_takes\n    return result",
    "result": 16.0
  },
  {
    "index": 31,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A university is replacing all of its desks in the classrooms. There are 15 classrooms, and each classroom has 30 desks. \n    The cost of each desk is $100, and the university also wants to buy 100 extra desks for future use. \n    How much will it cost to replace all the desks and buy the extra 100?\n    \"\"\"\n    number_of_classrooms = 15\n    desks_per_classroom = 30\n    cost_per_desk = 100\n    extra_desks = 100\n\n    total_desks = (number_of_classrooms * desks_per_classroom) + extra_desks\n    total_cost = total_desks * cost_per_desk\n\n    result = total_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A university is replacing all of its desks in the classrooms. There are 15 classrooms, and each classroom has 30 desks. \n    The cost of each desk is $100, and the university also wants to buy 100 extra desks for future use. \n    How much will it cost to replace all the desks and buy the extra 100?\n    \"\"\"\n    number_of_classrooms = 15\n    desks_per_classroom = 30\n    cost_per_desk = 100\n    extra_desks = 100\n\n    total_desks = (number_of_classrooms * desks_per_classroom) + extra_desks\n    total_cost = total_desks * cost_per_desk\n\n    result = total_cost\n\n    return result",
    "result": 55000
  },
  {
    "index": 32,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A store offers a 20% discount on all items. If a shirt costs $30 before the discount, what is its discounted price?\n    \"\"\"\n    original_price = 30\n    discount_rate = 20 / 100  # 20% discount\n    discount_amount = original_price * discount_rate\n    result = original_price - discount_amount\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A store offers a 20% discount on all items. If a shirt costs $30 before the discount, what is its discounted price?\n    \"\"\"\n    original_price = 30\n    discount_rate = 20 / 100  # 20% discount\n    discount_amount = original_price * discount_rate\n    result = original_price - discount_amount\n\n    return result",
    "result": 24.0
  },
  {
    "index": 33,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Bella makes bracelets for her friends. She uses 3 beads for each small bracelet, 4 beads for each medium bracelet, and 5 beads for each large bracelet. She has a total of 112 beads. If she makes 8 small bracelets and 12 medium bracelets, how many large bracelets can she make?\n    \"\"\"\n    beads_per_small = 3\n    beads_per_medium = 4\n    beads_per_large = 5\n    total_beads = 112\n    small_bracelets = 8\n    medium_bracelets = 12\n    \n    beads_used_small = beads_per_small * small_bracelets\n    beads_used_medium = beads_per_medium * medium_bracelets\n    beads_used_so_far = beads_used_small + beads_used_medium\n    \n    remaining_beads = total_beads - beads_used_so_far\n    \n    result = remaining_beads // beads_per_large  # integer division since number of bracelets must be whole\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Bella makes bracelets for her friends. She uses 3 beads for each small bracelet, 4 beads for each medium bracelet, and 5 beads for each large bracelet. She has a total of 112 beads. If she makes 8 small bracelets and 12 medium bracelets, how many large bracelets can she make?\n    \"\"\"\n    beads_per_small = 3\n    beads_per_medium = 4\n    beads_per_large = 5\n    total_beads = 112\n    small_bracelets = 8\n    medium_bracelets = 12\n    \n    beads_used_small = beads_per_small * small_bracelets\n    beads_used_medium = beads_per_medium * medium_bracelets\n    beads_used_so_far = beads_used_small + beads_used_medium\n    \n    remaining_beads = total_beads - beads_used_so_far\n    \n    result = remaining_beads // beads_per_large  # integer division since number of bracelets must be whole\n    \n    return result",
    "result": 8
  },
  {
    "index": 34,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Ella has 5 bags of candies, each of which contains 20 candies. She gives away 4 candies to each of her 8 friends. How many candies does she have left?\n    \"\"\"\n    bags = 5\n    candies_per_bag = 20\n    candies_per_friend = 4\n    number_of_friends = 8\n\n    total_candies = bags * candies_per_bag\n    total_given_away = candies_per_friend * number_of_friends\n    result = total_candies - total_given_away\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Ella has 5 bags of candies, each of which contains 20 candies. She gives away 4 candies to each of her 8 friends. How many candies does she have left?\n    \"\"\"\n    bags = 5\n    candies_per_bag = 20\n    candies_per_friend = 4\n    number_of_friends = 8\n\n    total_candies = bags * candies_per_bag\n    total_given_away = candies_per_friend * number_of_friends\n    result = total_candies - total_given_away\n\n    return result",
    "result": 68
  },
  {
    "index": 35,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If a restaurant has a 20% tip, and the meal cost 50 dollars, what is the total cost including tip?\n    \"\"\"\n    meal_cost = 50\n    tip_percentage = 20 / 100  # converting percentage to decimal\n    tip_amount = meal_cost * tip_percentage\n    total_cost = meal_cost + tip_amount\n\n    result = total_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a restaurant has a 20% tip, and the meal cost 50 dollars, what is the total cost including tip?\n    \"\"\"\n    meal_cost = 50\n    tip_percentage = 20 / 100  # converting percentage to decimal\n    tip_amount = meal_cost * tip_percentage\n    total_cost = meal_cost + tip_amount\n\n    result = total_cost\n\n    return result",
    "result": 60.0
  },
  {
    "index": 36,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A group of friends went on a road trip and visited different cities. John visited 7 cities, Samantha visited 11 cities, and Alex visited 14 cities. They all visited 2 of the same cities, but every other city they visited was different. How many different cities did they visit?\n    \"\"\"\n    john_cities = 7\n    samantha_cities = 11\n    alex_cities = 14\n    common_cities = 2\n\n    # Total cities visited is sum of all visited minus the duplicates counted multiple times\n    # Because 2 cities visited by all three are counted thrice,\n    # but should only be counted once.\n    total_cities = (john_cities + samantha_cities + alex_cities) - 2 * common_cities\n\n    result = total_cities\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A group of friends went on a road trip and visited different cities. John visited 7 cities, Samantha visited 11 cities, and Alex visited 14 cities. They all visited 2 of the same cities, but every other city they visited was different. How many different cities did they visit?\n    \"\"\"\n    john_cities = 7\n    samantha_cities = 11\n    alex_cities = 14\n    common_cities = 2\n\n    # Total cities visited is sum of all visited minus the duplicates counted multiple times\n    # Because 2 cities visited by all three are counted thrice,\n    # but should only be counted once.\n    total_cities = (john_cities + samantha_cities + alex_cities) - 2 * common_cities\n\n    result = total_cities\n    return result",
    "result": 28
  },
  {
    "index": 37,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A box of chocolates costs $12.50. If you want to buy 8 boxes of chocolates, how much will it cost you?\n    \"\"\"\n    cost_per_box = 12.50\n    number_of_boxes = 8\n    total_cost = cost_per_box * number_of_boxes\n\n    result = total_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A box of chocolates costs $12.50. If you want to buy 8 boxes of chocolates, how much will it cost you?\n    \"\"\"\n    cost_per_box = 12.50\n    number_of_boxes = 8\n    total_cost = cost_per_box * number_of_boxes\n\n    result = total_cost\n\n    return result",
    "result": 100.0
  },
  {
    "index": 38,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Polly, the parrot, can say 2 words a day when the sunlight hours are 10 or less, \n    but she can say 3 words a day when the sunlight hours are more than 10. \n    How many words can she say over 60 days if the sunlight hours are 10 or less for half of the time \n    and more than 10 for the other half of the time?\n    \"\"\"\n    total_days = 60\n    half_days = total_days / 2  # days with sunlight hours 10 or less and more than 10\n\n    words_per_day_10_or_less = 2\n    words_per_day_more_than_10 = 3\n\n    words_10_or_less = words_per_day_10_or_less * half_days\n    words_more_than_10 = words_per_day_more_than_10 * half_days\n\n    result = words_10_or_less + words_more_than_10\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Polly, the parrot, can say 2 words a day when the sunlight hours are 10 or less, \n    but she can say 3 words a day when the sunlight hours are more than 10. \n    How many words can she say over 60 days if the sunlight hours are 10 or less for half of the time \n    and more than 10 for the other half of the time?\n    \"\"\"\n    total_days = 60\n    half_days = total_days / 2  # days with sunlight hours 10 or less and more than 10\n\n    words_per_day_10_or_less = 2\n    words_per_day_more_than_10 = 3\n\n    words_10_or_less = words_per_day_10_or_less * half_days\n    words_more_than_10 = words_per_day_more_than_10 * half_days\n\n    result = words_10_or_less + words_more_than_10\n\n    return result",
    "result": 150.0
  },
  {
    "index": 39,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car's bumper is one-tenth the length of the car. If a car is 16 feet long, calculate the length of the rest of the car minus the bumper.\n    \"\"\"\n    car_length = 16  # total length of the car in feet\n    bumper_length = car_length / 10  # bumper is one-tenth the length of the car\n    rest_of_car_length = car_length - bumper_length  # length of the rest of the car minus the bumper\n    \n    result = rest_of_car_length\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car's bumper is one-tenth the length of the car. If a car is 16 feet long, calculate the length of the rest of the car minus the bumper.\n    \"\"\"\n    car_length = 16  # total length of the car in feet\n    bumper_length = car_length / 10  # bumper is one-tenth the length of the car\n    rest_of_car_length = car_length - bumper_length  # length of the rest of the car minus the bumper\n    \n    result = rest_of_car_length\n    \n    return result",
    "result": 14.4
  },
  {
    "index": 40,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Lily wants to buy a jacket that costs $80 and a pair of jeans that costs $50. She has a coupon that gives her 20% off any item that costs more than $60. How much does she save by using the coupon?\n    \"\"\"\n    jacket_price = 80\n    jeans_price = 50\n    discount_rate = 0.20\n\n    # Only the jacket qualifies for the discount because it costs more than $60\n    jacket_discount = jacket_price * discount_rate if jacket_price > 60 else 0\n    jeans_discount = jeans_price * discount_rate if jeans_price > 60 else 0\n\n    total_savings = jacket_discount + jeans_discount\n    result = total_savings\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Lily wants to buy a jacket that costs $80 and a pair of jeans that costs $50. She has a coupon that gives her 20% off any item that costs more than $60. How much does she save by using the coupon?\n    \"\"\"\n    jacket_price = 80\n    jeans_price = 50\n    discount_rate = 0.20\n\n    # Only the jacket qualifies for the discount because it costs more than $60\n    jacket_discount = jacket_price * discount_rate if jacket_price > 60 else 0\n    jeans_discount = jeans_price * discount_rate if jeans_price > 60 else 0\n\n    total_savings = jacket_discount + jeans_discount\n    result = total_savings\n\n    return result",
    "result": 16.0
  },
  {
    "index": 41,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jack the goat has 12 horns. The other goat, Jill, has 1/2 the amount of horns as Jack. The final goat, Billy, has triple the amount of horns as Jill. How many horns are there?\n    \"\"\"\n    jacks_horns = 12\n    jills_horns = jacks_horns / 2\n    billys_horns = jills_horns * 3\n    total_horns = jacks_horns + jills_horns + billys_horns\n\n    return total_horns\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jack the goat has 12 horns. The other goat, Jill, has 1/2 the amount of horns as Jack. The final goat, Billy, has triple the amount of horns as Jill. How many horns are there?\n    \"\"\"\n    jacks_horns = 12\n    jills_horns = jacks_horns / 2\n    billys_horns = jills_horns * 3\n    total_horns = jacks_horns + jills_horns + billys_horns\n\n    return total_horns",
    "result": 36.0
  },
  {
    "index": 42,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Emily has 3400 stickers. She wants to give 10% of her stickers to her friend. How many stickers will she have left?\n    \"\"\"\n    total_stickers = 3400\n    percent_to_give = 10\n\n    stickers_to_give = (percent_to_give / 100) * total_stickers\n    stickers_left = total_stickers - stickers_to_give\n\n    result = stickers_left\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Emily has 3400 stickers. She wants to give 10% of her stickers to her friend. How many stickers will she have left?\n    \"\"\"\n    total_stickers = 3400\n    percent_to_give = 10\n\n    stickers_to_give = (percent_to_give / 100) * total_stickers\n    stickers_left = total_stickers - stickers_to_give\n\n    result = stickers_left\n\n    return result",
    "result": 3060.0
  },
  {
    "index": 43,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A toy store has 15 dolls and 10 teddy bears. How many toys are there in total?\n    \"\"\"\n    number_of_dolls = 15\n    number_of_teddy_bears = 10\n    total_toys = number_of_dolls + number_of_teddy_bears\n    \n    result = total_toys\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A toy store has 15 dolls and 10 teddy bears. How many toys are there in total?\n    \"\"\"\n    number_of_dolls = 15\n    number_of_teddy_bears = 10\n    total_toys = number_of_dolls + number_of_teddy_bears\n    \n    result = total_toys\n    \n    return result",
    "result": 25
  },
  {
    "index": 44,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mason filled some lunch boxes with sandwiches. There were 4 sandwiches in each box but 1 sandwich was not placed in a box. He gave away 8 boxes to his friends and he has 5 boxes with him. How many sandwiches did Mason have in the beginning?\n    \"\"\"\n    sandwiches_per_box = 4\n    boxes_given_away = 8\n    boxes_with_mason = 5\n    leftover_sandwiches = 1\n\n    total_boxes = boxes_given_away + boxes_with_mason\n    sandwiches_in_boxes = sandwiches_per_box * total_boxes\n    result = sandwiches_in_boxes + leftover_sandwiches\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mason filled some lunch boxes with sandwiches. There were 4 sandwiches in each box but 1 sandwich was not placed in a box. He gave away 8 boxes to his friends and he has 5 boxes with him. How many sandwiches did Mason have in the beginning?\n    \"\"\"\n    sandwiches_per_box = 4\n    boxes_given_away = 8\n    boxes_with_mason = 5\n    leftover_sandwiches = 1\n\n    total_boxes = boxes_given_away + boxes_with_mason\n    sandwiches_in_boxes = sandwiches_per_box * total_boxes\n    result = sandwiches_in_boxes + leftover_sandwiches\n\n    return result",
    "result": 53
  },
  {
    "index": 45,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    There are 25 students in a class. 60% of the students are girls. How many boys are there in the class?\n    \"\"\"\n    total_students = 25\n    percent_girls = 60 / 100  # converting percentage to decimal\n    number_of_girls = total_students * percent_girls\n    number_of_boys = total_students - number_of_girls\n\n    return number_of_boys\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 25 students in a class. 60% of the students are girls. How many boys are there in the class?\n    \"\"\"\n    total_students = 25\n    percent_girls = 60 / 100  # converting percentage to decimal\n    number_of_girls = total_students * percent_girls\n    number_of_boys = total_students - number_of_girls\n\n    return number_of_boys",
    "result": 10.0
  },
  {
    "index": 46,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Kevin likes to bake cookies for his friends. He can make 24 cookies in one batch, which takes him 15 minutes to prepare, 10 minutes to bake, and 5 minutes to cool. He wants to make 144 cookies for a party. How long will it take him to bake all the cookies?\n    \"\"\"\n    cookies_per_batch = 24\n    total_cookies = 144\n\n    prep_time_per_batch = 15  # minutes\n    bake_time_per_batch = 10  # minutes\n    cool_time_per_batch = 5   # minutes\n\n    batches_needed = total_cookies / cookies_per_batch\n\n    time_per_batch = prep_time_per_batch + bake_time_per_batch + cool_time_per_batch\n\n    total_time = batches_needed * time_per_batch\n\n    return total_time\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Kevin likes to bake cookies for his friends. He can make 24 cookies in one batch, which takes him 15 minutes to prepare, 10 minutes to bake, and 5 minutes to cool. He wants to make 144 cookies for a party. How long will it take him to bake all the cookies?\n    \"\"\"\n    cookies_per_batch = 24\n    total_cookies = 144\n\n    prep_time_per_batch = 15  # minutes\n    bake_time_per_batch = 10  # minutes\n    cool_time_per_batch = 5   # minutes\n\n    batches_needed = total_cookies / cookies_per_batch\n\n    time_per_batch = prep_time_per_batch + bake_time_per_batch + cool_time_per_batch\n\n    total_time = batches_needed * time_per_batch\n\n    return total_time",
    "result": 180.0
  },
  {
    "index": 47,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A tree's roots are one-fifth its height. If the tree is 30 feet tall, calculate the length of the tree minus the roots.\n    \"\"\"\n    tree_height = 30\n    roots_length = tree_height / 5\n    length_minus_roots = tree_height - roots_length\n\n    result = length_minus_roots\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A tree's roots are one-fifth its height. If the tree is 30 feet tall, calculate the length of the tree minus the roots.\n    \"\"\"\n    tree_height = 30\n    roots_length = tree_height / 5\n    length_minus_roots = tree_height - roots_length\n\n    result = length_minus_roots\n\n    return result",
    "result": 24.0
  },
  {
    "index": 48,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    In a zoo, there are 15 lions with four paws each and 10 giraffes with four hooves each. \n    If the zookeeper notices that 20% of the lions and 40% of the giraffes have injured one of their legs, \n    how many healthy legs do the animals have in total?\n    \"\"\"\n    number_of_lions = 15\n    paws_per_lion = 4\n    number_of_giraffes = 10\n    hooves_per_giraffe = 4\n    \n    injured_lion_percentage = 0.20\n    injured_giraffe_percentage = 0.40\n\n    # Total legs for each species\n    total_lion_legs = number_of_lions * paws_per_lion\n    total_giraffe_legs = number_of_giraffes * hooves_per_giraffe\n\n    # Number of lions and giraffes with injured legs\n    injured_lions = number_of_lions * injured_lion_percentage\n    injured_giraffes = number_of_giraffes * injured_giraffe_percentage\n\n    # Each injured animal has 1 injured leg\n    injured_lion_legs = injured_lions * 1\n    injured_giraffe_legs = injured_giraffes * 1\n\n    # Calculate healthy legs (total legs - injured legs)\n    healthy_lion_legs = total_lion_legs - injured_lion_legs\n    healthy_giraffe_legs = total_giraffe_legs - injured_giraffe_legs\n\n    result = int(healthy_lion_legs + healthy_giraffe_legs)\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    In a zoo, there are 15 lions with four paws each and 10 giraffes with four hooves each. \n    If the zookeeper notices that 20% of the lions and 40% of the giraffes have injured one of their legs, \n    how many healthy legs do the animals have in total?\n    \"\"\"\n    number_of_lions = 15\n    paws_per_lion = 4\n    number_of_giraffes = 10\n    hooves_per_giraffe = 4\n    \n    injured_lion_percentage = 0.20\n    injured_giraffe_percentage = 0.40\n\n    # Total legs for each species\n    total_lion_legs = number_of_lions * paws_per_lion\n    total_giraffe_legs = number_of_giraffes * hooves_per_giraffe\n\n    # Number of lions and giraffes with injured legs\n    injured_lions = number_of_lions * injured_lion_percentage\n    injured_giraffes = number_of_giraffes * injured_giraffe_percentage\n\n    # Each injured animal has 1 injured leg\n    injured_lion_legs = injured_lions * 1\n    injured_giraffe_legs = injured_giraffes * 1\n\n    # Calculate healthy legs (total legs - injured legs)\n    healthy_lion_legs = total_lion_legs - injured_lion_legs\n    healthy_giraffe_legs = total_giraffe_legs - injured_giraffe_legs\n\n    result = int(healthy_lion_legs + healthy_giraffe_legs)\n\n    return result",
    "result": 93
  },
  {
    "index": 49,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    George had 8 cubes and stuck them together, cuboid style, creating a solid. \n    He cut them in half diagonally, creating 16 identical triangular pieces. \n    He then cut those cuboid pieces in half, creating 32 triangular pieces of equal sizes. \n    How many faces did the original solid have before cutting it?\n    \"\"\"\n    # Number of cubes stuck together (cuboid style)\n    number_of_cubes = 8\n    \n    # These 8 cubes form a rectangular cuboid (3D solid made by joining cubes)\n    # The total solid before cutting is one cuboid made of 8 unit cubes.\n    \n    # The shape formed by 8 cubes stuck together cuboid style can only be a 2x2x2 cube cuboid.\n    # Number of faces of one cube = 6\n    \n    # The important note: the original solid is a larger cuboid of dimensions 2x2x2 unit cubes.\n    length = 2\n    width = 2\n    height = 2\n    \n    # Number of faces on a cuboid is always 6, regardless of size.\n    # So the original solid before cutting has 6 faces.\n    result = 6\n    \n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    George had 8 cubes and stuck them together, cuboid style, creating a solid. \n    He cut them in half diagonally, creating 16 identical triangular pieces. \n    He then cut those cuboid pieces in half, creating 32 triangular pieces of equal sizes. \n    How many faces did the original solid have before cutting it?\n    \"\"\"\n    # Number of cubes stuck together (cuboid style)\n    number_of_cubes = 8\n    \n    # These 8 cubes form a rectangular cuboid (3D solid made by joining cubes)\n    # The total solid before cutting is one cuboid made of 8 unit cubes.\n    \n    # The shape formed by 8 cubes stuck together cuboid style can only be a 2x2x2 cube cuboid.\n    # Number of faces of one cube = 6\n    \n    # The important note: the original solid is a larger cuboid of dimensions 2x2x2 unit cubes.\n    length = 2\n    width = 2\n    height = 2\n    \n    # Number of faces on a cuboid is always 6, regardless of size.\n    # So the original solid before cutting has 6 faces.\n    result = 6\n    \n    return result",
    "result": 6
  },
  {
    "index": 50,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    There are 40 students in a class. If the ratio of boys to girls is 3:2, how many boys are in the class?\n    \"\"\"\n    total_students = 40\n    ratio_boys = 3\n    ratio_girls = 2\n    ratio_total = ratio_boys + ratio_girls\n\n    # Calculate the number of boys based on the ratio\n    boys = (ratio_boys / ratio_total) * total_students\n\n    result = boys\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 40 students in a class. If the ratio of boys to girls is 3:2, how many boys are in the class?\n    \"\"\"\n    total_students = 40\n    ratio_boys = 3\n    ratio_girls = 2\n    ratio_total = ratio_boys + ratio_girls\n\n    # Calculate the number of boys based on the ratio\n    boys = (ratio_boys / ratio_total) * total_students\n\n    result = boys\n    return result",
    "result": 24.0
  },
  {
    "index": 51,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If Emma had $30 and spent 3/10 of it for a toy, how much money did she spend for the toy?\n    \"\"\"\n    total_money = 30\n    fraction_spent = 3 / 10\n    amount_spent = total_money * fraction_spent\n\n    result = amount_spent\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If Emma had $30 and spent 3/10 of it for a toy, how much money did she spend for the toy?\n    \"\"\"\n    total_money = 30\n    fraction_spent = 3 / 10\n    amount_spent = total_money * fraction_spent\n\n    result = amount_spent\n    return result",
    "result": 9.0
  },
  {
    "index": 52,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Wendy has $50.00 on her credit card. If she leaves any balance on her card at the end of the month, she is charged 14% interest. How much will she owe if she makes no payment?\n    \"\"\"\n    balance = 50.00\n    interest_rate = 0.14\n    interest = balance * interest_rate\n    result = balance + interest\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Wendy has $50.00 on her credit card. If she leaves any balance on her card at the end of the month, she is charged 14% interest. How much will she owe if she makes no payment?\n    \"\"\"\n    balance = 50.00\n    interest_rate = 0.14\n    interest = balance * interest_rate\n    result = balance + interest\n\n    return result",
    "result": 57.0
  },
  {
    "index": 53,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A restaurant's monthly expenses include a rent of $600, a water bill of $250 and salaries that add up to $5500. If the restaurant expects to serve 1000 dishes a month, how much does it cost per dish to cover these expenses?\n    \"\"\"\n    rent = 600\n    water_bill = 250\n    salaries = 5500\n    total_dishes = 1000\n\n    total_expenses = rent + water_bill + salaries\n    cost_per_dish = total_expenses / total_dishes\n\n    result = cost_per_dish\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A restaurant's monthly expenses include a rent of $600, a water bill of $250 and salaries that add up to $5500. If the restaurant expects to serve 1000 dishes a month, how much does it cost per dish to cover these expenses?\n    \"\"\"\n    rent = 600\n    water_bill = 250\n    salaries = 5500\n    total_dishes = 1000\n\n    total_expenses = rent + water_bill + salaries\n    cost_per_dish = total_expenses / total_dishes\n\n    result = cost_per_dish\n\n    return result",
    "result": 6.35
  },
  {
    "index": 54,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jamie and Sarah went to a hair salon to get haircuts. The total cost for both haircuts came out to be $80, and Jamie left a tip of 20%. Sarah thought the hairstylist did a great job, and she decided to leave a 30% tip. What was Sarah's tip?\n    \"\"\"\n    total_cost = 80\n    jamie_tip_percent = 0.20\n    sarah_tip_percent = 0.30\n    \n    # Let j be Jamie's haircut cost, s be Sarah's haircut cost\n    # j + s = 80\n    # jamie's tip: j * 0.20\n    # sarah's tip: s * 0.30\n    #\n    # We don't know individual haircut costs, but we do know that\n    # the total tip plus haircuts is just sum of individual costs and tips.\n    #\n    # However, only given total cost for haircuts (80),\n    # and that Jamie left a 20% tip (on their haircut),\n    # Sarah left 30% tip (on her haircut).\n    #\n    # We assume total haircut cost = Jamie's haircut + Sarah's haircut\n    # Since Jamie left tip 20% of Jamie's haircut, Sarah left tip 30% of Sarah's haircut.\n    #\n    # No other info, so likely both haircuts cost the same?\n    # The problem does not say prices are different.\n    # But we only want Sarah's tip, can't find exact haircut costs.\n    #\n    # The problem is ambiguous because we don't know the split of $80.\n    #\n    # Another way: Since Jamie left a tip of 20% of Jamie's haircut and Sarah left 30% tip of Sarah's haircut\n    # but combined haircuts cost $80, no information about individual haircut cost.\n    #\n    # So maybe the problem expects us to assume haircuts are equal: each haircut is 40.\n    \n    jamie_haircut_cost = total_cost / 2\n    sarah_haircut_cost = total_cost - jamie_haircut_cost\n    \n    sarah_tip = sarah_haircut_cost * sarah_tip_percent\n    \n    result = sarah_tip\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jamie and Sarah went to a hair salon to get haircuts. The total cost for both haircuts came out to be $80, and Jamie left a tip of 20%. Sarah thought the hairstylist did a great job, and she decided to leave a 30% tip. What was Sarah's tip?\n    \"\"\"\n    total_cost = 80\n    jamie_tip_percent = 0.20\n    sarah_tip_percent = 0.30\n    \n    # Let j be Jamie's haircut cost, s be Sarah's haircut cost\n    # j + s = 80\n    # jamie's tip: j * 0.20\n    # sarah's tip: s * 0.30\n    #\n    # We don't know individual haircut costs, but we do know that\n    # the total tip plus haircuts is just sum of individual costs and tips.\n    #\n    # However, only given total cost for haircuts (80),\n    # and that Jamie left a 20% tip (on their haircut),\n    # Sarah left 30% tip (on her haircut).\n    #\n    # We assume total haircut cost = Jamie's haircut + Sarah's haircut\n    # Since Jamie left tip 20% of Jamie's haircut, Sarah left tip 30% of Sarah's haircut.\n    #\n    # No other info, so likely both haircuts cost the same?\n    # The problem does not say prices are different.\n    # But we only want Sarah's tip, can't find exact haircut costs.\n    #\n    # The problem is ambiguous because we don't know the split of $80.\n    #\n    # Another way: Since Jamie left a tip of 20% of Jamie's haircut and Sarah left 30% tip of Sarah's haircut\n    # but combined haircuts cost $80, no information about individual haircut cost.\n    #\n    # So maybe the problem expects us to assume haircuts are equal: each haircut is 40.\n    \n    jamie_haircut_cost = total_cost / 2\n    sarah_haircut_cost = total_cost - jamie_haircut_cost\n    \n    sarah_tip = sarah_haircut_cost * sarah_tip_percent\n    \n    result = sarah_tip\n    \n    return result",
    "result": 12.0
  },
  {
    "index": 55,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car travels 120 kilometers in 2 hours. If the car consumes 6 liters of gas per 100 kilometers, how much gas does the car use for the whole trip?\n    \"\"\"\n    distance_km = 120\n    consumption_liters_per_100km = 6\n\n    gas_used = (consumption_liters_per_100km / 100) * distance_km\n\n    return gas_used\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car travels 120 kilometers in 2 hours. If the car consumes 6 liters of gas per 100 kilometers, how much gas does the car use for the whole trip?\n    \"\"\"\n    distance_km = 120\n    consumption_liters_per_100km = 6\n\n    gas_used = (consumption_liters_per_100km / 100) * distance_km\n\n    return gas_used",
    "result": 7.199999999999999
  },
  {
    "index": 56,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A company has 5 employees. Each employee earns $20 per hour and works for 8 hours a day. How much does the company spend on paying their employees for one week?\n    \"\"\"\n    number_of_employees = 5\n    hourly_wage = 20\n    hours_per_day = 8\n    days_per_week = 5  # assuming a 5-day work week\n\n    daily_pay_per_employee = hourly_wage * hours_per_day\n    weekly_pay_per_employee = daily_pay_per_employee * days_per_week\n    total_weekly_pay = number_of_employees * weekly_pay_per_employee\n\n    result = total_weekly_pay\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A company has 5 employees. Each employee earns $20 per hour and works for 8 hours a day. How much does the company spend on paying their employees for one week?\n    \"\"\"\n    number_of_employees = 5\n    hourly_wage = 20\n    hours_per_day = 8\n    days_per_week = 5  # assuming a 5-day work week\n\n    daily_pay_per_employee = hourly_wage * hours_per_day\n    weekly_pay_per_employee = daily_pay_per_employee * days_per_week\n    total_weekly_pay = number_of_employees * weekly_pay_per_employee\n\n    result = total_weekly_pay\n\n    return result",
    "result": 4000
  },
  {
    "index": 57,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Angus has 45 soccer balls. He gives a third of them to his brother. He then gives another half of the remaining soccer balls away. How many soccer balls does Angus have left?\n    \"\"\"\n    total_soccer_balls = 45\n    given_to_brother = total_soccer_balls / 3\n    remaining_after_brother = total_soccer_balls - given_to_brother\n    given_away_after = remaining_after_brother / 2\n    result = remaining_after_brother - given_away_after\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Angus has 45 soccer balls. He gives a third of them to his brother. He then gives another half of the remaining soccer balls away. How many soccer balls does Angus have left?\n    \"\"\"\n    total_soccer_balls = 45\n    given_to_brother = total_soccer_balls / 3\n    remaining_after_brother = total_soccer_balls - given_to_brother\n    given_away_after = remaining_after_brother / 2\n    result = remaining_after_brother - given_away_after\n\n    return result",
    "result": 15.0
  },
  {
    "index": 58,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sarah went grocery shopping and bought 6 boxes of cereal. Each box contains 8 cereal bars. Sarah ate 1/2 of the cereal bars and gave the other half to her friends. How many cereal bars did Sarah have left?\n    \"\"\"\n    boxes_of_cereal = 6\n    bars_per_box = 8\n    total_cereal_bars = boxes_of_cereal * bars_per_box\n    half_of_cereal_bars = total_cereal_bars / 2\n    # Sarah ate half, so the other half is given to friends\n    # Sarah has no cereal bars left after eating and giving away\n    cereal_bars_left = total_cereal_bars - total_cereal_bars  # 0 bars left\n    \n    # However, the problem specifically asks: \"How many cereal bars did Sarah have left?\"\n    # After eating half and giving the other half away, she has none left.\n    \n    cereal_bars_left = 0\n    \n    return cereal_bars_left\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sarah went grocery shopping and bought 6 boxes of cereal. Each box contains 8 cereal bars. Sarah ate 1/2 of the cereal bars and gave the other half to her friends. How many cereal bars did Sarah have left?\n    \"\"\"\n    boxes_of_cereal = 6\n    bars_per_box = 8\n    total_cereal_bars = boxes_of_cereal * bars_per_box\n    half_of_cereal_bars = total_cereal_bars / 2\n    # Sarah ate half, so the other half is given to friends\n    # Sarah has no cereal bars left after eating and giving away\n    cereal_bars_left = total_cereal_bars - total_cereal_bars  # 0 bars left\n    \n    # However, the problem specifically asks: \"How many cereal bars did Sarah have left?\"\n    # After eating half and giving the other half away, she has none left.\n    \n    cereal_bars_left = 0\n    \n    return cereal_bars_left",
    "result": 0
  },
  {
    "index": 59,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Susan can buy 3 apples for $2.50. How much will it cost her to buy 24 apples?\n    \"\"\"\n    price_for_3_apples = 2.50\n    number_of_apples_susan_wants = 24\n    apples_per_unit_price = 3\n\n    # Calculate price per apple\n    price_per_apple = price_for_3_apples / apples_per_unit_price\n\n    # Calculate total cost for 24 apples\n    result = price_per_apple * number_of_apples_susan_wants\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Susan can buy 3 apples for $2.50. How much will it cost her to buy 24 apples?\n    \"\"\"\n    price_for_3_apples = 2.50\n    number_of_apples_susan_wants = 24\n    apples_per_unit_price = 3\n\n    # Calculate price per apple\n    price_per_apple = price_for_3_apples / apples_per_unit_price\n\n    # Calculate total cost for 24 apples\n    result = price_per_apple * number_of_apples_susan_wants\n\n    return result",
    "result": 20.0
  },
  {
    "index": 60,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    The ratio of boys to girls in a school is 2:5. If there are 1000 girls, how many boys are there in the school?\n    \"\"\"\n    boys_ratio = 2\n    girls_ratio = 5\n    total_girls = 1000\n\n    # Find the value of one part in the ratio\n    one_part = total_girls / girls_ratio\n\n    # Calculate number of boys\n    number_of_boys = boys_ratio * one_part\n\n    result = number_of_boys\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The ratio of boys to girls in a school is 2:5. If there are 1000 girls, how many boys are there in the school?\n    \"\"\"\n    boys_ratio = 2\n    girls_ratio = 5\n    total_girls = 1000\n\n    # Find the value of one part in the ratio\n    one_part = total_girls / girls_ratio\n\n    # Calculate number of boys\n    number_of_boys = boys_ratio * one_part\n\n    result = number_of_boys\n    return result",
    "result": 400.0
  },
  {
    "index": 61,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Emily is working towards her degree and needs to complete 90 credits. Each class is 4 credits. How many classes does she need to take to complete her degree?\n    \"\"\"\n    total_credits_needed = 90\n    credits_per_class = 4\n    classes_needed = total_credits_needed / credits_per_class\n\n    return classes_needed\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Emily is working towards her degree and needs to complete 90 credits. Each class is 4 credits. How many classes does she need to take to complete her degree?\n    \"\"\"\n    total_credits_needed = 90\n    credits_per_class = 4\n    classes_needed = total_credits_needed / credits_per_class\n\n    return classes_needed",
    "result": 22.5
  },
  {
    "index": 62,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car travels 240 miles on 10 gallons of gasoline. How far can the car travel on 15 gallons of gasoline?\n    \"\"\"\n    miles_traveled = 240\n    gallons_used = 10\n    gallons_available = 15\n\n    miles_per_gallon = miles_traveled / gallons_used\n    result = miles_per_gallon * gallons_available\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car travels 240 miles on 10 gallons of gasoline. How far can the car travel on 15 gallons of gasoline?\n    \"\"\"\n    miles_traveled = 240\n    gallons_used = 10\n    gallons_available = 15\n\n    miles_per_gallon = miles_traveled / gallons_used\n    result = miles_per_gallon * gallons_available\n\n    return result",
    "result": 360.0
  },
  {
    "index": 63,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    An amusement park has 4 times as many roller coasters as water rides, and 5 more water rides than ferris wheels. If there are 32 rides total, how many ferris wheels are there?\n    \"\"\"\n    # Let:\n    # f = number of ferris wheels\n    # w = number of water rides\n    # r = number of roller coasters\n    \n    # Given:\n    # r = 4 * w\n    # w = f + 5\n    # Total rides = r + w + f = 32\n    \n    # Substitute:\n    # (4 * w) + w + f = 32\n    # 4w + w + f = 32 => 5w + f = 32\n    # Since w = f + 5 => 5(f + 5) + f = 32\n    # 5f + 25 + f = 32\n    # 6f + 25 = 32\n    # 6f = 7\n    # f = 7 / 6\n    \n    f = 7 / 6\n    \n    return f\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    An amusement park has 4 times as many roller coasters as water rides, and 5 more water rides than ferris wheels. If there are 32 rides total, how many ferris wheels are there?\n    \"\"\"\n    # Let:\n    # f = number of ferris wheels\n    # w = number of water rides\n    # r = number of roller coasters\n    \n    # Given:\n    # r = 4 * w\n    # w = f + 5\n    # Total rides = r + w + f = 32\n    \n    # Substitute:\n    # (4 * w) + w + f = 32\n    # 4w + w + f = 32 => 5w + f = 32\n    # Since w = f + 5 => 5(f + 5) + f = 32\n    # 5f + 25 + f = 32\n    # 6f + 25 = 32\n    # 6f = 7\n    # f = 7 / 6\n    \n    f = 7 / 6\n    \n    return f",
    "result": 1.1666666666666667
  },
  {
    "index": 64,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Joe has a hot tub that he wants to keep at a temperature of 102 degrees F. If Joe accidentally leaves the hot tub uncovered for 5 hours, causing the temperature to drop by 4 degrees F per hour, and then covers it and turns on the heating, which raises the temperature by 3 degrees F per hour, how long will it take for the hot tub to reach 102 degrees F again?\n    \"\"\"\n    desired_temperature = 102\n    drop_rate_per_hour = 4\n    hours_uncovered = 5\n    heat_rate_per_hour = 3\n\n    # Temperature after being uncovered 5 hours\n    temperature_after_drop = desired_temperature - drop_rate_per_hour * hours_uncovered\n\n    # Amount of degrees needed to heat back to desired temperature\n    degrees_to_heat = desired_temperature - temperature_after_drop\n\n    # Time needed to heat back up\n    time_to_heat = degrees_to_heat / heat_rate_per_hour\n\n    result = time_to_heat\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Joe has a hot tub that he wants to keep at a temperature of 102 degrees F. If Joe accidentally leaves the hot tub uncovered for 5 hours, causing the temperature to drop by 4 degrees F per hour, and then covers it and turns on the heating, which raises the temperature by 3 degrees F per hour, how long will it take for the hot tub to reach 102 degrees F again?\n    \"\"\"\n    desired_temperature = 102\n    drop_rate_per_hour = 4\n    hours_uncovered = 5\n    heat_rate_per_hour = 3\n\n    # Temperature after being uncovered 5 hours\n    temperature_after_drop = desired_temperature - drop_rate_per_hour * hours_uncovered\n\n    # Amount of degrees needed to heat back to desired temperature\n    degrees_to_heat = desired_temperature - temperature_after_drop\n\n    # Time needed to heat back up\n    time_to_heat = degrees_to_heat / heat_rate_per_hour\n\n    result = time_to_heat\n\n    return result",
    "result": 6.666666666666667
  },
  {
    "index": 65,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If 2 books cost $30, how much would 5 books cost?\n    \"\"\"\n    cost_for_two_books = 30\n    number_of_books = 2\n    cost_per_book = cost_for_two_books / number_of_books\n\n    desired_number_of_books = 5\n    cost_for_five_books = cost_per_book * desired_number_of_books\n\n    result = cost_for_five_books\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If 2 books cost $30, how much would 5 books cost?\n    \"\"\"\n    cost_for_two_books = 30\n    number_of_books = 2\n    cost_per_book = cost_for_two_books / number_of_books\n\n    desired_number_of_books = 5\n    cost_for_five_books = cost_per_book * desired_number_of_books\n\n    result = cost_for_five_books\n\n    return result",
    "result": 75.0
  },
  {
    "index": 66,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A box of donuts has 24 donuts. If each donut has 300 calories, how many calories are in the box of donuts?\n    \"\"\"\n    number_of_donuts = 24\n    calories_per_donut = 300\n\n    total_calories = number_of_donuts * calories_per_donut\n\n    result = total_calories\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A box of donuts has 24 donuts. If each donut has 300 calories, how many calories are in the box of donuts?\n    \"\"\"\n    number_of_donuts = 24\n    calories_per_donut = 300\n\n    total_calories = number_of_donuts * calories_per_donut\n\n    result = total_calories\n\n    return result",
    "result": 7200
  },
  {
    "index": 67,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Maria buys 24 packs of pencils at the store. Each pack contains 12 pencils and costs $3. She wants to sell the pencils at school for $0.50 each. How much money will she make if she sells all the pencils?\n    \"\"\"\n    packs_bought = 24\n    pencils_per_pack = 12\n    cost_per_pack = 3\n    selling_price_per_pencil = 0.50\n\n    total_pencils = packs_bought * pencils_per_pack\n    total_cost = packs_bought * cost_per_pack\n    total_revenue = total_pencils * selling_price_per_pencil\n    profit = total_revenue - total_cost\n\n    return profit\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Maria buys 24 packs of pencils at the store. Each pack contains 12 pencils and costs $3. She wants to sell the pencils at school for $0.50 each. How much money will she make if she sells all the pencils?\n    \"\"\"\n    packs_bought = 24\n    pencils_per_pack = 12\n    cost_per_pack = 3\n    selling_price_per_pencil = 0.50\n\n    total_pencils = packs_bought * pencils_per_pack\n    total_cost = packs_bought * cost_per_pack\n    total_revenue = total_pencils * selling_price_per_pencil\n    profit = total_revenue - total_cost\n\n    return profit",
    "result": 72.0
  },
  {
    "index": 68,
    "response": "```python\ndef simple_math_problem() -> tuple:\n    \"\"\"\n    Ava is designing custom pillows for her 20 clients, who all have different color preferences. Each pillow takes her 45 minutes to sew. How long will it take her to sew all the pillows? 10 years ago, the sum of Babar and his brother's ages was 40. If Babar's age is 28 now, how old will his brother be in 5 years?\n    \"\"\"\n    # Part 1: Sewing pillows time\n    number_of_clients = 20\n    time_per_pillow_minutes = 45\n    total_time_minutes = number_of_clients * time_per_pillow_minutes\n    \n    # Part 2: Babar and brother's ages\n    babar_age_now = 28\n    sum_ages_10_years_ago = 40\n    \n    # Let brother_age_now = x\n    # 10 years ago: (babar_age_now - 10) + (brother_age_now - 10) = 40\n    # =>  (28 - 10) + (brother_age_now - 10) = 40\n    # => 18 + brother_age_now - 10 = 40\n    # => brother_age_now + 8 = 40\n    # => brother_age_now = 40 - 8 = 32\n    \n    brother_age_now = 40 - (babar_age_now - 10) - 10\n    # Simplify as above:\n    brother_age_now = 40 - (28 - 10) - 10  # But this evaluates oddly, better do step by step from eq\n    \n    brother_age_now = 40 - (babar_age_now - 10)\n    brother_age_now += 10  # Add 10 years because 10 years ago subtract 10 from brother age\n    \n    # Actually better to do the calculation without confusion:\n    # Let b = brother_age_now\n    # (babar_age_now - 10) + (b - 10) = 40\n    # (28 - 10) + (b - 10) = 40\n    # 18 + b - 10 = 40\n    # b + 8 = 40\n    # b = 32\n    brother_age_now = 32\n    \n    brother_age_in_5_years = brother_age_now + 5\n    \n    # return both results\n    return total_time_minutes, brother_age_in_5_years\n```",
    "code": "def simple_math_problem() -> tuple:\n    \"\"\"\n    Ava is designing custom pillows for her 20 clients, who all have different color preferences. Each pillow takes her 45 minutes to sew. How long will it take her to sew all the pillows? 10 years ago, the sum of Babar and his brother's ages was 40. If Babar's age is 28 now, how old will his brother be in 5 years?\n    \"\"\"\n    # Part 1: Sewing pillows time\n    number_of_clients = 20\n    time_per_pillow_minutes = 45\n    total_time_minutes = number_of_clients * time_per_pillow_minutes\n    \n    # Part 2: Babar and brother's ages\n    babar_age_now = 28\n    sum_ages_10_years_ago = 40\n    \n    # Let brother_age_now = x\n    # 10 years ago: (babar_age_now - 10) + (brother_age_now - 10) = 40\n    # =>  (28 - 10) + (brother_age_now - 10) = 40\n    # => 18 + brother_age_now - 10 = 40\n    # => brother_age_now + 8 = 40\n    # => brother_age_now = 40 - 8 = 32\n    \n    brother_age_now = 40 - (babar_age_now - 10) - 10\n    # Simplify as above:\n    brother_age_now = 40 - (28 - 10) - 10  # But this evaluates oddly, better do step by step from eq\n    \n    brother_age_now = 40 - (babar_age_now - 10)\n    brother_age_now += 10  # Add 10 years because 10 years ago subtract 10 from brother age\n    \n    # Actually better to do the calculation without confusion:\n    # Let b = brother_age_now\n    # (babar_age_now - 10) + (b - 10) = 40\n    # (28 - 10) + (b - 10) = 40\n    # 18 + b - 10 = 40\n    # b + 8 = 40\n    # b = 32\n    brother_age_now = 32\n    \n    brother_age_in_5_years = brother_age_now + 5\n    \n    # return both results\n    return total_time_minutes, brother_age_in_5_years",
    "result": [
      900,
      37
    ]
  },
  {
    "index": 69,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    ve and his sister had $100.00 to purchase school supplies. Steve spent $5 for a calculator and $3.50 for a ruler. How much money did his sister have left to spend?\n    \"\"\"\n    total_money = 100.00\n    steve_calculator_cost = 5.00\n    steve_ruler_cost = 3.50\n\n    steve_total_spent = steve_calculator_cost + steve_ruler_cost\n    sister_money_left = total_money - steve_total_spent\n\n    result = sister_money_left\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    ve and his sister had $100.00 to purchase school supplies. Steve spent $5 for a calculator and $3.50 for a ruler. How much money did his sister have left to spend?\n    \"\"\"\n    total_money = 100.00\n    steve_calculator_cost = 5.00\n    steve_ruler_cost = 3.50\n\n    steve_total_spent = steve_calculator_cost + steve_ruler_cost\n    sister_money_left = total_money - steve_total_spent\n\n    result = sister_money_left\n    return result",
    "result": 91.5
  },
  {
    "index": 70,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A person drinks 5 cups of water per day. If there are 4 weeks in a month, how many cups does this person drink in a month when considering a week has 7 days?\n    \"\"\"\n    cups_per_day = 5\n    days_per_week = 7\n    weeks_per_month = 4\n\n    days_per_month = days_per_week * weeks_per_month\n    result = cups_per_day * days_per_month\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A person drinks 5 cups of water per day. If there are 4 weeks in a month, how many cups does this person drink in a month when considering a week has 7 days?\n    \"\"\"\n    cups_per_day = 5\n    days_per_week = 7\n    weeks_per_month = 4\n\n    days_per_month = days_per_week * weeks_per_month\n    result = cups_per_day * days_per_month\n\n    return result",
    "result": 140
  },
  {
    "index": 71,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A company paid a total of $6000 to its 4 employees. If the employees were paid equally, how much was each employee paid?\n    \"\"\"\n    total_payment = 6000\n    number_of_employees = 4\n    \n    payment_per_employee = total_payment / number_of_employees\n    \n    result = payment_per_employee\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A company paid a total of $6000 to its 4 employees. If the employees were paid equally, how much was each employee paid?\n    \"\"\"\n    total_payment = 6000\n    number_of_employees = 4\n    \n    payment_per_employee = total_payment / number_of_employees\n    \n    result = payment_per_employee\n    \n    return result",
    "result": 1500.0
  },
  {
    "index": 72,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sarah is trying to win a sushi eating contest. Each sushi roll is 2 ounces. The winner ate 80 ounces last year. How many sushi rolls does Sarah have to eat to beat last year's winner?\n    \"\"\"\n    ounces_per_roll = 2\n    last_year_winner_ounces = 80\n    \n    # To beat last year's winner, Sarah must eat more than 80 ounces\n    ounces_to_beat = last_year_winner_ounces + 1\n    \n    # Calculate the number of rolls Sarah has to eat\n    rolls_to_beat = ounces_to_beat / ounces_per_roll\n    \n    return rolls_to_beat\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sarah is trying to win a sushi eating contest. Each sushi roll is 2 ounces. The winner ate 80 ounces last year. How many sushi rolls does Sarah have to eat to beat last year's winner?\n    \"\"\"\n    ounces_per_roll = 2\n    last_year_winner_ounces = 80\n    \n    # To beat last year's winner, Sarah must eat more than 80 ounces\n    ounces_to_beat = last_year_winner_ounces + 1\n    \n    # Calculate the number of rolls Sarah has to eat\n    rolls_to_beat = ounces_to_beat / ounces_per_roll\n    \n    return rolls_to_beat",
    "result": 40.5
  },
  {
    "index": 73,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A rectangle has sides 6cm and 8cm. What is the perimeter of the rectangle?\n    \"\"\"\n    side_length_1 = 6  # in cm\n    side_length_2 = 8  # in cm\n\n    # Perimeter of a rectangle is 2 times the sum of its sides\n    perimeter = 2 * (side_length_1 + side_length_2)\n\n    result = perimeter\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A rectangle has sides 6cm and 8cm. What is the perimeter of the rectangle?\n    \"\"\"\n    side_length_1 = 6  # in cm\n    side_length_2 = 8  # in cm\n\n    # Perimeter of a rectangle is 2 times the sum of its sides\n    perimeter = 2 * (side_length_1 + side_length_2)\n\n    result = perimeter\n    return result",
    "result": 28
  },
  {
    "index": 74,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A marathon race has a maximum time of 4 hours. If the race starts at 8 am, at what time will the race end?\n    \"\"\"\n    race_start_hour = 8  # 8 am\n    max_race_duration_hours = 4  # 4 hours\n\n    race_end_hour = race_start_hour + max_race_duration_hours\n\n    return race_end_hour\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A marathon race has a maximum time of 4 hours. If the race starts at 8 am, at what time will the race end?\n    \"\"\"\n    race_start_hour = 8  # 8 am\n    max_race_duration_hours = 4  # 4 hours\n\n    race_end_hour = race_start_hour + max_race_duration_hours\n\n    return race_end_hour",
    "result": 12
  },
  {
    "index": 75,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jenna and Mary went shopping together. Mary spent $25. If Jenna spent one third as much as Mary, how much money did they spend in total?\n    \"\"\"\n    mary_spent = 25\n    jenna_spent = mary_spent / 3\n    total_spent = mary_spent + jenna_spent\n\n    result = total_spent\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jenna and Mary went shopping together. Mary spent $25. If Jenna spent one third as much as Mary, how much money did they spend in total?\n    \"\"\"\n    mary_spent = 25\n    jenna_spent = mary_spent / 3\n    total_spent = mary_spent + jenna_spent\n\n    result = total_spent\n\n    return result",
    "result": 33.333333333333336
  },
  {
    "index": 76,
    "response": "```python\ndef simple_math_problem() -> tuple:\n    \"\"\"\n    A restaurant has 75 slices of pizza and wants to divide them equally among 9 tables. How many slices will each table get, and how many slices will be remaining?\n    \"\"\"\n    total_slices = 75\n    number_of_tables = 9\n\n    slices_per_table = total_slices // number_of_tables\n    remaining_slices = total_slices % number_of_tables\n    \n    result = (slices_per_table, remaining_slices)\n\n    return result\n```",
    "code": "def simple_math_problem() -> tuple:\n    \"\"\"\n    A restaurant has 75 slices of pizza and wants to divide them equally among 9 tables. How many slices will each table get, and how many slices will be remaining?\n    \"\"\"\n    total_slices = 75\n    number_of_tables = 9\n\n    slices_per_table = total_slices // number_of_tables\n    remaining_slices = total_slices % number_of_tables\n    \n    result = (slices_per_table, remaining_slices)\n\n    return result",
    "result": [
      8,
      3
    ]
  },
  {
    "index": 77,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Zoe is 81 years old. Her granddaughter Amy is currently one-ninth her age. The mother of Amy - Beth, is six times her age. How old is Beth?\n    \"\"\"\n    zoe_age = 81\n    amy_age = zoe_age / 9\n    beth_age = amy_age * 6\n\n    result = beth_age\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Zoe is 81 years old. Her granddaughter Amy is currently one-ninth her age. The mother of Amy - Beth, is six times her age. How old is Beth?\n    \"\"\"\n    zoe_age = 81\n    amy_age = zoe_age / 9\n    beth_age = amy_age * 6\n\n    result = beth_age\n\n    return result",
    "result": 54.0
  },
  {
    "index": 78,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In a classroom, there are some toys. Three fourths of the toys are cars, while one third of the cars are blue. If 630 cars are blue, how many toys are there in the classroom?\n    \"\"\"\n    blue_cars = 630\n    fraction_blue_of_cars = 1/3\n    fraction_cars_of_toys = 3/4\n\n    # Total cars = blue cars / fraction of cars that are blue\n    total_cars = blue_cars / fraction_blue_of_cars\n\n    # Total toys = total cars / fraction of toys that are cars\n    total_toys = total_cars / fraction_cars_of_toys\n\n    result = total_toys\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In a classroom, there are some toys. Three fourths of the toys are cars, while one third of the cars are blue. If 630 cars are blue, how many toys are there in the classroom?\n    \"\"\"\n    blue_cars = 630\n    fraction_blue_of_cars = 1/3\n    fraction_cars_of_toys = 3/4\n\n    # Total cars = blue cars / fraction of cars that are blue\n    total_cars = blue_cars / fraction_blue_of_cars\n\n    # Total toys = total cars / fraction of toys that are cars\n    total_toys = total_cars / fraction_cars_of_toys\n\n    result = total_toys\n\n    return result",
    "result": 2520.0
  },
  {
    "index": 79,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In 8 years, Lucy will be twice her brother's age. If Lucy's brother is now 7, how old is Lucy now?\n    \"\"\"\n    brothers_current_age = 7\n    years_from_now = 8\n\n    # Lucy's age in 8 years will be twice her brother's age in 8 years\n    brothers_age_in_8_years = brothers_current_age + years_from_now\n    lucys_age_in_8_years = 2 * brothers_age_in_8_years\n\n    # To find Lucy's current age, subtract 8 years from her age in 8 years\n    lucys_current_age = lucys_age_in_8_years - years_from_now\n\n    result = lucys_current_age\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In 8 years, Lucy will be twice her brother's age. If Lucy's brother is now 7, how old is Lucy now?\n    \"\"\"\n    brothers_current_age = 7\n    years_from_now = 8\n\n    # Lucy's age in 8 years will be twice her brother's age in 8 years\n    brothers_age_in_8_years = brothers_current_age + years_from_now\n    lucys_age_in_8_years = 2 * brothers_age_in_8_years\n\n    # To find Lucy's current age, subtract 8 years from her age in 8 years\n    lucys_current_age = lucys_age_in_8_years - years_from_now\n\n    result = lucys_current_age\n    return result",
    "result": 22
  },
  {
    "index": 80,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Two numbers, when added give a sum of 39 and their difference is 15. What is the smaller of the two numbers?\n    \"\"\"\n    sum_of_numbers = 39\n    difference_of_numbers = 15\n\n    # Let the two numbers be x (smaller) and y (larger)\n    # x + y = 39\n    # y - x = 15\n\n    # From the two equations:\n    # y = x + 15\n    # Substitute in the first equation:\n    # x + (x + 15) = 39\n    # 2x + 15 = 39\n    # 2x = 39 - 15\n    # 2x = 24\n    # x = 24 / 2 = 12\n\n    smaller_number = (sum_of_numbers - difference_of_numbers) / 2\n\n    result = smaller_number\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Two numbers, when added give a sum of 39 and their difference is 15. What is the smaller of the two numbers?\n    \"\"\"\n    sum_of_numbers = 39\n    difference_of_numbers = 15\n\n    # Let the two numbers be x (smaller) and y (larger)\n    # x + y = 39\n    # y - x = 15\n\n    # From the two equations:\n    # y = x + 15\n    # Substitute in the first equation:\n    # x + (x + 15) = 39\n    # 2x + 15 = 39\n    # 2x = 39 - 15\n    # 2x = 24\n    # x = 24 / 2 = 12\n\n    smaller_number = (sum_of_numbers - difference_of_numbers) / 2\n\n    result = smaller_number\n\n    return result",
    "result": 12.0
  },
  {
    "index": 81,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    There are 50 toys in a box. If 3/5 of them are dolls, how many toys are not dolls?\n    \"\"\"\n    total_toys = 50\n    fraction_dolls = 3 / 5\n    number_dolls = total_toys * fraction_dolls\n    number_not_dolls = total_toys - number_dolls\n\n    result = number_not_dolls\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 50 toys in a box. If 3/5 of them are dolls, how many toys are not dolls?\n    \"\"\"\n    total_toys = 50\n    fraction_dolls = 3 / 5\n    number_dolls = total_toys * fraction_dolls\n    number_not_dolls = total_toys - number_dolls\n\n    result = number_not_dolls\n\n    return result",
    "result": 20.0
  },
  {
    "index": 82,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Dana makes a sandwich that is 6 parts bread, 4 parts ham and 2 parts cheese. If the sandwich weighs 24 ounces, how many ounces of cheese does it contain?\n    \"\"\"\n    parts_bread = 6\n    parts_ham = 4\n    parts_cheese = 2\n    total_weight = 24\n\n    total_parts = parts_bread + parts_ham + parts_cheese\n    weight_per_part = total_weight / total_parts\n    result = parts_cheese * weight_per_part\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Dana makes a sandwich that is 6 parts bread, 4 parts ham and 2 parts cheese. If the sandwich weighs 24 ounces, how many ounces of cheese does it contain?\n    \"\"\"\n    parts_bread = 6\n    parts_ham = 4\n    parts_cheese = 2\n    total_weight = 24\n\n    total_parts = parts_bread + parts_ham + parts_cheese\n    weight_per_part = total_weight / total_parts\n    result = parts_cheese * weight_per_part\n\n    return result",
    "result": 4.0
  },
  {
    "index": 83,
    "response": "```python\ndef simple_math_problem() -> tuple:\n    \"\"\"\n    Cole has $10 more money than Dana. If Cole has $80, and they decide to spend $30 each on a gift, how much money does each have left?\n    \"\"\"\n    cole_money = 80\n    dana_money = cole_money - 10  # Since Cole has $10 more than Dana\n    \n    cole_spent = 30\n    dana_spent = 30\n    \n    cole_left = cole_money - cole_spent\n    dana_left = dana_money - dana_spent\n    \n    result = (cole_left, dana_left)\n    \n    return result\n```",
    "code": "def simple_math_problem() -> tuple:\n    \"\"\"\n    Cole has $10 more money than Dana. If Cole has $80, and they decide to spend $30 each on a gift, how much money does each have left?\n    \"\"\"\n    cole_money = 80\n    dana_money = cole_money - 10  # Since Cole has $10 more than Dana\n    \n    cole_spent = 30\n    dana_spent = 30\n    \n    cole_left = cole_money - cole_spent\n    dana_left = dana_money - dana_spent\n    \n    result = (cole_left, dana_left)\n    \n    return result",
    "result": [
      50,
      40
    ]
  },
  {
    "index": 84,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Paul needs to deliver 12 gallons of gasoline. Each gas canister holds 2 gallons. How many canisters does Paul need to deliver the 12 gallons of gas?\n    \"\"\"\n    total_gallons = 12\n    gallons_per_canister = 2\n    \n    canisters_needed = total_gallons / gallons_per_canister\n    \n    result = canisters_needed\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Paul needs to deliver 12 gallons of gasoline. Each gas canister holds 2 gallons. How many canisters does Paul need to deliver the 12 gallons of gas?\n    \"\"\"\n    total_gallons = 12\n    gallons_per_canister = 2\n    \n    canisters_needed = total_gallons / gallons_per_canister\n    \n    result = canisters_needed\n    \n    return result",
    "result": 6.0
  },
  {
    "index": 85,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A 4-liter bottle of juice costs 12 dollars. Bob wants to buy enough juice for his family of five,\n    who each drink 250 milliliters of juice per day. How much money will he spend on juice in a week?\n    \"\"\"\n    cost_per_bottle = 12  # dollars\n    bottle_volume_liters = 4  # liters\n    family_members = 5\n    daily_juice_per_person_ml = 250  # milliliters\n    days_in_week = 7\n\n    total_daily_juice_ml = family_members * daily_juice_per_person_ml\n    total_weekly_juice_ml = total_daily_juice_ml * days_in_week\n\n    # Convert bottle volume to milliliters\n    bottle_volume_ml = bottle_volume_liters * 1000\n\n    # Calculate the number of bottles needed (round up since partial bottles can't be bought)\n    import math\n    bottles_needed = math.ceil(total_weekly_juice_ml / bottle_volume_ml)\n\n    result = bottles_needed * cost_per_bottle\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A 4-liter bottle of juice costs 12 dollars. Bob wants to buy enough juice for his family of five,\n    who each drink 250 milliliters of juice per day. How much money will he spend on juice in a week?\n    \"\"\"\n    cost_per_bottle = 12  # dollars\n    bottle_volume_liters = 4  # liters\n    family_members = 5\n    daily_juice_per_person_ml = 250  # milliliters\n    days_in_week = 7\n\n    total_daily_juice_ml = family_members * daily_juice_per_person_ml\n    total_weekly_juice_ml = total_daily_juice_ml * days_in_week\n\n    # Convert bottle volume to milliliters\n    bottle_volume_ml = bottle_volume_liters * 1000\n\n    # Calculate the number of bottles needed (round up since partial bottles can't be bought)\n    import math\n    bottles_needed = math.ceil(total_weekly_juice_ml / bottle_volume_ml)\n\n    result = bottles_needed * cost_per_bottle\n\n    return result",
    "result": 36
  },
  {
    "index": 86,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Christina and her sister drove 3 hours and the cost was $45. Six times the cost of the trip was the same as the cost for 7 candy bars, how much is the cost of each candy bar?\n    \"\"\"\n    cost_of_trip = 45  # cost in dollars\n    six_times_cost = 6 * cost_of_trip  # 6 times the cost of the trip\n    number_of_candy_bars = 7  # number of candy bars\n    \n    cost_per_candy_bar = six_times_cost / number_of_candy_bars  # cost per candy bar in dollars\n    \n    result = cost_per_candy_bar\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Christina and her sister drove 3 hours and the cost was $45. Six times the cost of the trip was the same as the cost for 7 candy bars, how much is the cost of each candy bar?\n    \"\"\"\n    cost_of_trip = 45  # cost in dollars\n    six_times_cost = 6 * cost_of_trip  # 6 times the cost of the trip\n    number_of_candy_bars = 7  # number of candy bars\n    \n    cost_per_candy_bar = six_times_cost / number_of_candy_bars  # cost per candy bar in dollars\n    \n    result = cost_per_candy_bar\n    \n    return result",
    "result": 38.57142857142857
  },
  {
    "index": 87,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A kite in the shape of a triangle has a base of 10 feet and a height of 18 feet. What is the area of the kite?\n    \"\"\"\n    base_length = 10  # feet\n    height_length = 18  # feet\n    \n    # Area of a triangle = (1/2) * base * height\n    area = 0.5 * base_length * height_length\n    \n    result = area\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A kite in the shape of a triangle has a base of 10 feet and a height of 18 feet. What is the area of the kite?\n    \"\"\"\n    base_length = 10  # feet\n    height_length = 18  # feet\n    \n    # Area of a triangle = (1/2) * base * height\n    area = 0.5 * base_length * height_length\n    \n    result = area\n    return result",
    "result": 90.0
  },
  {
    "index": 88,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A candy store sold 15 bags of gummies and 10 bags of jellybeans. Each bag of gummies contains 30 pieces and each bag of jellybeans contains 20 pieces. How many pieces of candy were sold in total?\n    \"\"\"\n    bags_of_gummies = 15\n    bags_of_jellybeans = 10\n    pieces_per_bag_gummies = 30\n    pieces_per_bag_jellybeans = 20\n\n    total_gummies = bags_of_gummies * pieces_per_bag_gummies\n    total_jellybeans = bags_of_jellybeans * pieces_per_bag_jellybeans\n    result = total_gummies + total_jellybeans\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A candy store sold 15 bags of gummies and 10 bags of jellybeans. Each bag of gummies contains 30 pieces and each bag of jellybeans contains 20 pieces. How many pieces of candy were sold in total?\n    \"\"\"\n    bags_of_gummies = 15\n    bags_of_jellybeans = 10\n    pieces_per_bag_gummies = 30\n    pieces_per_bag_jellybeans = 20\n\n    total_gummies = bags_of_gummies * pieces_per_bag_gummies\n    total_jellybeans = bags_of_jellybeans * pieces_per_bag_jellybeans\n    result = total_gummies + total_jellybeans\n\n    return result",
    "result": 650
  },
  {
    "index": 89,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A fruit stand sold 50 more apples than oranges. If they sold a total of 200 fruits, how many oranges were sold?\n    \"\"\"\n    total_fruits = 200\n    difference_apples_oranges = 50\n\n    # Let oranges = x\n    # Then apples = x + 50\n    # total_fruits = apples + oranges = x + (x + 50) = 2x + 50\n    # Solve for x:\n    oranges = (total_fruits - difference_apples_oranges) / 2\n\n    result = oranges\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A fruit stand sold 50 more apples than oranges. If they sold a total of 200 fruits, how many oranges were sold?\n    \"\"\"\n    total_fruits = 200\n    difference_apples_oranges = 50\n\n    # Let oranges = x\n    # Then apples = x + 50\n    # total_fruits = apples + oranges = x + (x + 50) = 2x + 50\n    # Solve for x:\n    oranges = (total_fruits - difference_apples_oranges) / 2\n\n    result = oranges\n    return result",
    "result": 75.0
  },
  {
    "index": 90,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A trapezoidal garden has a longer side of 20 feet, a shorter side of 14 feet, and a height of 7 feet. What is the area of the trapezoidal garden?\n    \"\"\"\n    longer_side = 20\n    shorter_side = 14\n    height = 7\n    \n    # Area of trapezoid = 0.5 * (sum of parallel sides) * height\n    area = 0.5 * (longer_side + shorter_side) * height\n    \n    return area\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A trapezoidal garden has a longer side of 20 feet, a shorter side of 14 feet, and a height of 7 feet. What is the area of the trapezoidal garden?\n    \"\"\"\n    longer_side = 20\n    shorter_side = 14\n    height = 7\n    \n    # Area of trapezoid = 0.5 * (sum of parallel sides) * height\n    area = 0.5 * (longer_side + shorter_side) * height\n    \n    return area",
    "result": 119.0
  },
  {
    "index": 91,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If a book has 256 pages and you want to finish it in 32 days, how many pages do you need to read each day?\n    \"\"\"\n    total_pages = 256\n    total_days = 32\n\n    pages_per_day = total_pages / total_days\n\n    result = pages_per_day\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a book has 256 pages and you want to finish it in 32 days, how many pages do you need to read each day?\n    \"\"\"\n    total_pages = 256\n    total_days = 32\n\n    pages_per_day = total_pages / total_days\n\n    result = pages_per_day\n\n    return result",
    "result": 8.0
  },
  {
    "index": 92,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Ben and Lisa love collecting stickers and trading them with each other. Ben has 80 stickers, 2/5 of which are animal stickers. Lisa has 60 stickers, 3/4 of which are animal stickers. They decide to trade some of their animal stickers with each other, so that they both have the same number of animal stickers. How many animal stickers do they trade in total?\n    \"\"\"\n    ben_total_stickers = 80\n    ben_animal_fraction = 2/5\n    lisa_total_stickers = 60\n    lisa_animal_fraction = 3/4\n\n    ben_animal_stickers = ben_total_stickers * ben_animal_fraction\n    lisa_animal_stickers = lisa_total_stickers * lisa_animal_fraction\n\n    # They want the same number of animal stickers after trading.\n    # Let x be the number of animal stickers Ben gives to Lisa.\n    # Then Ben has (ben_animal_stickers - x)\n    # Lisa has (lisa_animal_stickers + x)\n    # Set equal: ben_animal_stickers - x = lisa_animal_stickers + x\n    # Solve for x:\n    x = (ben_animal_stickers - lisa_animal_stickers) / 2\n\n    # The total traded is x (from Ben to Lisa) plus x (from Lisa to Ben),\n    # but the problem states they trade some animal stickers so that both have same count.\n    # Actually, only the difference is traded to balance.\n    # Since Ben is giving x animal stickers to Lisa,\n    # but Lisa is trading animal stickers to Ben as well, so actually the minimal exchange\n    # is x stickers from Ben to Lisa (or if x is negative, Lisa to Ben).\n    #\n    # But since they both trade to have the same number,\n    # the total count traded is 2 * abs(x) (both give this many).\n    # However, the problem says \"trade some of their animal stickers with each other\",\n    # which implies a swap to balance.\n    #\n    # More logically, they exchange x from Ben to Lisa and x from Lisa to Ben to balance,\n    # the minimal total number of animal stickers traded is 2 * abs(x).\n    #\n    # But let's see the direction of x:\n    # If x > 0, Ben gives to Lisa x stickers, Lisa gives to Ben x stickers?\n    # This would keep counts same as before.\n    # Actually, only one side needs to give animal stickers to another to equalize counts.\n    #\n    # The correct interpretation:\n    # If Ben has more animal stickers initially, he gives away some to Lisa.\n    # Lisa gives no animal stickers to Ben in this trade, so total traded = x.\n    #\n    # So the total number of animal stickers traded is abs(x).\n\n    total_animal_stickers_traded = abs(x)\n\n    return total_animal_stickers_traded\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Ben and Lisa love collecting stickers and trading them with each other. Ben has 80 stickers, 2/5 of which are animal stickers. Lisa has 60 stickers, 3/4 of which are animal stickers. They decide to trade some of their animal stickers with each other, so that they both have the same number of animal stickers. How many animal stickers do they trade in total?\n    \"\"\"\n    ben_total_stickers = 80\n    ben_animal_fraction = 2/5\n    lisa_total_stickers = 60\n    lisa_animal_fraction = 3/4\n\n    ben_animal_stickers = ben_total_stickers * ben_animal_fraction\n    lisa_animal_stickers = lisa_total_stickers * lisa_animal_fraction\n\n    # They want the same number of animal stickers after trading.\n    # Let x be the number of animal stickers Ben gives to Lisa.\n    # Then Ben has (ben_animal_stickers - x)\n    # Lisa has (lisa_animal_stickers + x)\n    # Set equal: ben_animal_stickers - x = lisa_animal_stickers + x\n    # Solve for x:\n    x = (ben_animal_stickers - lisa_animal_stickers) / 2\n\n    # The total traded is x (from Ben to Lisa) plus x (from Lisa to Ben),\n    # but the problem states they trade some animal stickers so that both have same count.\n    # Actually, only the difference is traded to balance.\n    # Since Ben is giving x animal stickers to Lisa,\n    # but Lisa is trading animal stickers to Ben as well, so actually the minimal exchange\n    # is x stickers from Ben to Lisa (or if x is negative, Lisa to Ben).\n    #\n    # But since they both trade to have the same number,\n    # the total count traded is 2 * abs(x) (both give this many).\n    # However, the problem says \"trade some of their animal stickers with each other\",\n    # which implies a swap to balance.\n    #\n    # More logically, they exchange x from Ben to Lisa and x from Lisa to Ben to balance,\n    # the minimal total number of animal stickers traded is 2 * abs(x).\n    #\n    # But let's see the direction of x:\n    # If x > 0, Ben gives to Lisa x stickers, Lisa gives to Ben x stickers?\n    # This would keep counts same as before.\n    # Actually, only one side needs to give animal stickers to another to equalize counts.\n    #\n    # The correct interpretation:\n    # If Ben has more animal stickers initially, he gives away some to Lisa.\n    # Lisa gives no animal stickers to Ben in this trade, so total traded = x.\n    #\n    # So the total number of animal stickers traded is abs(x).\n\n    total_animal_stickers_traded = abs(x)\n\n    return total_animal_stickers_traded",
    "result": 6.5
  },
  {
    "index": 93,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Kevin is baking cupcakes for his birthday party. He has a recipe that makes 24 cupcakes and uses 3 cups of flour, 2 cups of sugar, 4 eggs, and 1 cup of milk. He wants to make 36 cupcakes and has 9 cups of flour, 6 cups of sugar, 12 eggs, and 3 cups of milk. How many cups of sugar will he have left after making the cupcakes?\n    \"\"\"\n    cupcakes_per_recipe = 24\n    sugar_per_recipe = 2  # cups\n    desired_cupcakes = 36\n    available_sugar = 6  # cups\n\n    # Calculate how many times the recipe needs to be made\n    times_to_make = desired_cupcakes / cupcakes_per_recipe  # 36/24 = 1.5\n\n    # Calculate the amount of sugar needed\n    sugar_needed = sugar_per_recipe * times_to_make  # 2 * 1.5 = 3\n\n    # Calculate sugar left after using the needed amount\n    sugar_left = available_sugar - sugar_needed  # 6 - 3 = 3\n\n    return sugar_left\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Kevin is baking cupcakes for his birthday party. He has a recipe that makes 24 cupcakes and uses 3 cups of flour, 2 cups of sugar, 4 eggs, and 1 cup of milk. He wants to make 36 cupcakes and has 9 cups of flour, 6 cups of sugar, 12 eggs, and 3 cups of milk. How many cups of sugar will he have left after making the cupcakes?\n    \"\"\"\n    cupcakes_per_recipe = 24\n    sugar_per_recipe = 2  # cups\n    desired_cupcakes = 36\n    available_sugar = 6  # cups\n\n    # Calculate how many times the recipe needs to be made\n    times_to_make = desired_cupcakes / cupcakes_per_recipe  # 36/24 = 1.5\n\n    # Calculate the amount of sugar needed\n    sugar_needed = sugar_per_recipe * times_to_make  # 2 * 1.5 = 3\n\n    # Calculate sugar left after using the needed amount\n    sugar_left = available_sugar - sugar_needed  # 6 - 3 = 3\n\n    return sugar_left",
    "result": 3.0
  },
  {
    "index": 94,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Tommy has a 18-hour road trip. He stops for lunch every 3 hours and for a break every hour and a half. If each stop takes 15 minutes, how many hours will his road trip become?\n    \"\"\"\n    total_trip_hours = 18\n    \n    # Number of lunch stops (every 3 hours, not counting the start)\n    lunch_stop_interval = 3\n    # Lunch stops occur at hours 3,6,9,12,15,18 - but if trip ends exactly at 18, do we count the stop at the end?\n    # Usually if he stops every 3 hours, and trip is 18 hours, stops at 3,6,9,12,15,18\n    # Need to check if stopping at the end counts as additional time.\n    # Usually break stops are taken during the trip, not after finished. Hence the stop at 18th hour may not be needed.\n    # Let's assume he doesn't stop once he reaches the destination.\n    # So stops at 3,6,9,12,15 only\n\n    lunch_stops = total_trip_hours // lunch_stop_interval\n    if total_trip_hours % lunch_stop_interval == 0:\n        lunch_stops -= 1  # no stop at the very end\n    \n    # Number of break stops (every 1.5 hours)\n    break_stop_interval = 1.5\n    break_stops = total_trip_hours // break_stop_interval\n    if total_trip_hours % break_stop_interval == 0:\n        break_stops -= 1  # no stop at very end\n    \n    # Each stop takes 15 minutes -> 0.25 hours\n    stop_duration_hours = 15 / 60\n    \n    total_stops = lunch_stops + break_stops\n    total_stop_time = total_stops * stop_duration_hours\n    \n    # Total trip time including stops\n    result = total_trip_hours + total_stop_time\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Tommy has a 18-hour road trip. He stops for lunch every 3 hours and for a break every hour and a half. If each stop takes 15 minutes, how many hours will his road trip become?\n    \"\"\"\n    total_trip_hours = 18\n    \n    # Number of lunch stops (every 3 hours, not counting the start)\n    lunch_stop_interval = 3\n    # Lunch stops occur at hours 3,6,9,12,15,18 - but if trip ends exactly at 18, do we count the stop at the end?\n    # Usually if he stops every 3 hours, and trip is 18 hours, stops at 3,6,9,12,15,18\n    # Need to check if stopping at the end counts as additional time.\n    # Usually break stops are taken during the trip, not after finished. Hence the stop at 18th hour may not be needed.\n    # Let's assume he doesn't stop once he reaches the destination.\n    # So stops at 3,6,9,12,15 only\n\n    lunch_stops = total_trip_hours // lunch_stop_interval\n    if total_trip_hours % lunch_stop_interval == 0:\n        lunch_stops -= 1  # no stop at the very end\n    \n    # Number of break stops (every 1.5 hours)\n    break_stop_interval = 1.5\n    break_stops = total_trip_hours // break_stop_interval\n    if total_trip_hours % break_stop_interval == 0:\n        break_stops -= 1  # no stop at very end\n    \n    # Each stop takes 15 minutes -> 0.25 hours\n    stop_duration_hours = 15 / 60\n    \n    total_stops = lunch_stops + break_stops\n    total_stop_time = total_stops * stop_duration_hours\n    \n    # Total trip time including stops\n    result = total_trip_hours + total_stop_time\n    \n    return result",
    "result": 22.0
  },
  {
    "index": 95,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Ben has 48 candies. He gives away 25% of them to his friends, and then eats 20% of the remaining candies. How many candies does he have left?\n    \"\"\"\n    total_candies = 48\n    given_away = total_candies * 0.25\n    remaining_after_giving = total_candies - given_away\n    eaten = remaining_after_giving * 0.20\n    candies_left = remaining_after_giving - eaten\n    \n    result = candies_left\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Ben has 48 candies. He gives away 25% of them to his friends, and then eats 20% of the remaining candies. How many candies does he have left?\n    \"\"\"\n    total_candies = 48\n    given_away = total_candies * 0.25\n    remaining_after_giving = total_candies - given_away\n    eaten = remaining_after_giving * 0.20\n    candies_left = remaining_after_giving - eaten\n    \n    result = candies_left\n    return result",
    "result": 28.8
  },
  {
    "index": 96,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Scott had 72 chess pieces in his toy box. He used 18 pieces to play chess and donated 15 pieces to a charity. How many pieces were left in Scott's toy box?\n    \"\"\"\n    total_pieces = 72\n    pieces_used = 18\n    pieces_donated = 15\n    \n    pieces_left = total_pieces - pieces_used - pieces_donated\n    \n    result = pieces_left\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Scott had 72 chess pieces in his toy box. He used 18 pieces to play chess and donated 15 pieces to a charity. How many pieces were left in Scott's toy box?\n    \"\"\"\n    total_pieces = 72\n    pieces_used = 18\n    pieces_donated = 15\n    \n    pieces_left = total_pieces - pieces_used - pieces_donated\n    \n    result = pieces_left\n    \n    return result",
    "result": 39
  },
  {
    "index": 97,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Misha and Juan want to put carpet in their living room which is 5 meters by 10 meters. Carpet squares are sold in packs of 6 and each square is 0.5 meters wide. How many packages of carpet squares should they buy?\n    \"\"\"\n    length_meters = 10\n    width_meters = 5\n    square_side_meters = 0.5\n    squares_per_package = 6\n\n    # Calculate area of the living room\n    room_area_sqm = length_meters * width_meters\n\n    # Calculate area of one carpet square\n    square_area_sqm = square_side_meters * square_side_meters\n\n    # Calculate total number of squares needed (round up because partial squares are not possible)\n    import math\n    total_squares_needed = math.ceil(room_area_sqm / square_area_sqm)\n\n    # Calculate number of packages needed (round up)\n    packages_needed = math.ceil(total_squares_needed / squares_per_package)\n    \n    return packages_needed\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Misha and Juan want to put carpet in their living room which is 5 meters by 10 meters. Carpet squares are sold in packs of 6 and each square is 0.5 meters wide. How many packages of carpet squares should they buy?\n    \"\"\"\n    length_meters = 10\n    width_meters = 5\n    square_side_meters = 0.5\n    squares_per_package = 6\n\n    # Calculate area of the living room\n    room_area_sqm = length_meters * width_meters\n\n    # Calculate area of one carpet square\n    square_area_sqm = square_side_meters * square_side_meters\n\n    # Calculate total number of squares needed (round up because partial squares are not possible)\n    import math\n    total_squares_needed = math.ceil(room_area_sqm / square_area_sqm)\n\n    # Calculate number of packages needed (round up)\n    packages_needed = math.ceil(total_squares_needed / squares_per_package)\n    \n    return packages_needed",
    "result": 34
  },
  {
    "index": 98,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Kevin wants to buy a new laptop that costs $800. He can save $50 per week from his allowance and he has $200 in his bank account. He also plans to sell his old laptop for $150. How many weeks does he need to save up for the new laptop?\n    \"\"\"\n    laptop_cost = 800\n    weekly_saving = 50\n    current_savings = 200\n    old_laptop_sale = 150\n\n    total_money_available = current_savings + old_laptop_sale\n    amount_needed = laptop_cost - total_money_available\n\n    # Calculate weeks needed; if amount_needed <= 0, no weeks needed\n    if amount_needed <= 0:\n        weeks_needed = 0\n    else:\n        weeks_needed = amount_needed / weekly_saving\n\n    return weeks_needed\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Kevin wants to buy a new laptop that costs $800. He can save $50 per week from his allowance and he has $200 in his bank account. He also plans to sell his old laptop for $150. How many weeks does he need to save up for the new laptop?\n    \"\"\"\n    laptop_cost = 800\n    weekly_saving = 50\n    current_savings = 200\n    old_laptop_sale = 150\n\n    total_money_available = current_savings + old_laptop_sale\n    amount_needed = laptop_cost - total_money_available\n\n    # Calculate weeks needed; if amount_needed <= 0, no weeks needed\n    if amount_needed <= 0:\n        weeks_needed = 0\n    else:\n        weeks_needed = amount_needed / weekly_saving\n\n    return weeks_needed",
    "result": 9.0
  },
  {
    "index": 99,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Josh bought 5 books at the bookstore for $25 each. If the store charged him an additional fee of 10%, how much did Josh end up paying in total?\n    \"\"\"\n    number_of_books = 5\n    price_per_book = 25\n    additional_fee_rate = 0.10\n\n    total_price_before_fee = number_of_books * price_per_book\n    additional_fee = total_price_before_fee * additional_fee_rate\n    result = total_price_before_fee + additional_fee\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Josh bought 5 books at the bookstore for $25 each. If the store charged him an additional fee of 10%, how much did Josh end up paying in total?\n    \"\"\"\n    number_of_books = 5\n    price_per_book = 25\n    additional_fee_rate = 0.10\n\n    total_price_before_fee = number_of_books * price_per_book\n    additional_fee = total_price_before_fee * additional_fee_rate\n    result = total_price_before_fee + additional_fee\n\n    return result",
    "result": 137.5
  }
]