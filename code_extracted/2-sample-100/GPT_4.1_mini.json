[
  {
    "index": 0,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Samantha purchases 3 orchids at 50 dollars each, and only keeps one for herself. What is the total cost of the orchid she keeps? Marie uses a 15-minute shower every day for 2 weeks. If her shower uses 1.5 gallons of water per minute, how much water does she use in those 2 weeks?\n    \"\"\"\n    # Part 1: Samantha's orchid cost\n    price_per_orchid = 50\n    orchids_purchased = 3\n    orchids_kept = 1\n    total_cost_single_orchid = price_per_orchid * orchids_kept\n\n    # Part 2: Marie's water usage\n    minutes_per_shower = 15\n    days_in_two_weeks = 14\n    water_per_minute = 1.5\n    total_shower_minutes = minutes_per_shower * days_in_two_weeks\n    total_water_used = total_shower_minutes * water_per_minute\n\n    # Combined result as a tuple (orchid cost, water usage)\n    result = (total_cost_single_orchid, total_water_used)\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Samantha purchases 3 orchids at 50 dollars each, and only keeps one for herself. What is the total cost of the orchid she keeps? Marie uses a 15-minute shower every day for 2 weeks. If her shower uses 1.5 gallons of water per minute, how much water does she use in those 2 weeks?\n    \"\"\"\n    # Part 1: Samantha's orchid cost\n    price_per_orchid = 50\n    orchids_purchased = 3\n    orchids_kept = 1\n    total_cost_single_orchid = price_per_orchid * orchids_kept\n\n    # Part 2: Marie's water usage\n    minutes_per_shower = 15\n    days_in_two_weeks = 14\n    water_per_minute = 1.5\n    total_shower_minutes = minutes_per_shower * days_in_two_weeks\n    total_water_used = total_shower_minutes * water_per_minute\n\n    # Combined result as a tuple (orchid cost, water usage)\n    result = (total_cost_single_orchid, total_water_used)\n\n    return result",
    "result": [
      50,
      315.0
    ]
  },
  {
    "index": 1,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Karen takes 6 hours to paint a house, while Joe takes 4 hours to paint the same house. How long will it take for Karen and Joe to paint the house working together?\n    \"\"\"\n    karen_time_hours = 6\n    joe_time_hours = 4\n    \n    # Calculate their work rates (houses per hour)\n    karen_rate = 1 / karen_time_hours\n    joe_rate = 1 / joe_time_hours\n    \n    # Combined work rate\n    combined_rate = karen_rate + joe_rate\n    \n    # Time to paint one house working together\n    result = 1 / combined_rate\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Karen takes 6 hours to paint a house, while Joe takes 4 hours to paint the same house. How long will it take for Karen and Joe to paint the house working together?\n    \"\"\"\n    karen_time_hours = 6\n    joe_time_hours = 4\n    \n    # Calculate their work rates (houses per hour)\n    karen_rate = 1 / karen_time_hours\n    joe_rate = 1 / joe_time_hours\n    \n    # Combined work rate\n    combined_rate = karen_rate + joe_rate\n    \n    # Time to paint one house working together\n    result = 1 / combined_rate\n\n    return result",
    "result": 2.4000000000000004
  },
  {
    "index": 2,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    During a day, a pharmacy sold 238 packs of gum at $0.75 each and 54 bottles of water at $1.25 each. How much did the pharmacy earn?\n    \"\"\"\n    packs_gum_sold = 238\n    price_per_pack_gum = 0.75\n\n    bottles_water_sold = 54\n    price_per_bottle_water = 1.25\n\n    total_gum_earnings = packs_gum_sold * price_per_pack_gum\n    total_water_earnings = bottles_water_sold * price_per_bottle_water\n\n    result = total_gum_earnings + total_water_earnings\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    During a day, a pharmacy sold 238 packs of gum at $0.75 each and 54 bottles of water at $1.25 each. How much did the pharmacy earn?\n    \"\"\"\n    packs_gum_sold = 238\n    price_per_pack_gum = 0.75\n\n    bottles_water_sold = 54\n    price_per_bottle_water = 1.25\n\n    total_gum_earnings = packs_gum_sold * price_per_pack_gum\n    total_water_earnings = bottles_water_sold * price_per_bottle_water\n\n    result = total_gum_earnings + total_water_earnings\n\n    return result",
    "result": 246.0
  },
  {
    "index": 3,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jamie opened her own store in March, and her net profit for the month was $6000. Her expenses for the month totaled $900. How much was her gross profit for the month?\n    \"\"\"\n    net_profit = 6000\n    expenses = 900\n    gross_profit = net_profit + expenses\n    result = gross_profit\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jamie opened her own store in March, and her net profit for the month was $6000. Her expenses for the month totaled $900. How much was her gross profit for the month?\n    \"\"\"\n    net_profit = 6000\n    expenses = 900\n    gross_profit = net_profit + expenses\n    result = gross_profit\n\n    return result",
    "result": 6900
  },
  {
    "index": 4,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mr. Lopez sells coffee for $3 per cup and pays $1.5 for each cup of coffee he buys from a roaster. He also pays $0.5 for each cup for cream and sugar. If he sells 100 cups of coffee in a day, what is his gross margin?\n    \"\"\"\n    price_per_cup = 3.0\n    cost_roaster_per_cup = 1.5\n    cost_cream_sugar_per_cup = 0.5\n    cups_sold = 100\n\n    revenue = price_per_cup * cups_sold\n    cost_total_per_cup = cost_roaster_per_cup + cost_cream_sugar_per_cup\n    total_cost = cost_total_per_cup * cups_sold\n\n    gross_margin = revenue - total_cost\n    result = gross_margin\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mr. Lopez sells coffee for $3 per cup and pays $1.5 for each cup of coffee he buys from a roaster. He also pays $0.5 for each cup for cream and sugar. If he sells 100 cups of coffee in a day, what is his gross margin?\n    \"\"\"\n    price_per_cup = 3.0\n    cost_roaster_per_cup = 1.5\n    cost_cream_sugar_per_cup = 0.5\n    cups_sold = 100\n\n    revenue = price_per_cup * cups_sold\n    cost_total_per_cup = cost_roaster_per_cup + cost_cream_sugar_per_cup\n    total_cost = cost_total_per_cup * cups_sold\n\n    gross_margin = revenue - total_cost\n    result = gross_margin\n\n    return result",
    "result": 100.0
  },
  {
    "index": 5,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jason is baking cookies for a fundraiser. He can make 2 dozen cookies in 1 hour. If he wants to bake 200 cookies, how many hours will he need to bake for?\n    \"\"\"\n    cookies_per_hour = 2 * 12  # 2 dozen cookies per hour\n    cookies_needed = 200\n    hours_needed = cookies_needed / cookies_per_hour\n    result = hours_needed\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jason is baking cookies for a fundraiser. He can make 2 dozen cookies in 1 hour. If he wants to bake 200 cookies, how many hours will he need to bake for?\n    \"\"\"\n    cookies_per_hour = 2 * 12  # 2 dozen cookies per hour\n    cookies_needed = 200\n    hours_needed = cookies_needed / cookies_per_hour\n    result = hours_needed\n\n    return result",
    "result": 8.333333333333334
  },
  {
    "index": 6,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A pool is 30 feet long and 20 feet wide. If the water in the pool is 6 feet deep, what is the volume of the water in the pool in cubic feet?\n    \"\"\"\n    pool_length = 30\n    pool_width = 20\n    water_depth = 6\n    \n    volume = pool_length * pool_width * water_depth\n    result = volume\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A pool is 30 feet long and 20 feet wide. If the water in the pool is 6 feet deep, what is the volume of the water in the pool in cubic feet?\n    \"\"\"\n    pool_length = 30\n    pool_width = 20\n    water_depth = 6\n    \n    volume = pool_length * pool_width * water_depth\n    result = volume\n    \n    return result",
    "result": 3600
  },
  {
    "index": 7,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    A bag contains 108 marbles. If 3/4 of the marbles are red and the rest are blue, how many blue marbles are there?\n    \"\"\"\n    total_marbles = 108\n    red_fraction = 3/4\n    red_marbles = total_marbles * red_fraction\n    blue_marbles = total_marbles - red_marbles\n    result = int(blue_marbles)\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A bag contains 108 marbles. If 3/4 of the marbles are red and the rest are blue, how many blue marbles are there?\n    \"\"\"\n    total_marbles = 108\n    red_fraction = 3/4\n    red_marbles = total_marbles * red_fraction\n    blue_marbles = total_marbles - red_marbles\n    result = int(blue_marbles)\n\n    return result",
    "result": 27
  },
  {
    "index": 8,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Ben buys candies in jars and bags. Each jar has 8 candies. Each bag has 10 candies. Ben gives away 3 jars and 2 bags of candies to his friends. How many candies does Ben have left if he originally bought 7 jars and 9 bags?\n    \"\"\"\n    candies_per_jar = 8\n    candies_per_bag = 10\n    jars_bought = 7\n    bags_bought = 9\n    jars_given_away = 3\n    bags_given_away = 2\n\n    total_candies_bought = jars_bought * candies_per_jar + bags_bought * candies_per_bag\n    total_candies_given_away = jars_given_away * candies_per_jar + bags_given_away * candies_per_bag\n    candies_left = total_candies_bought - total_candies_given_away\n\n    result = candies_left\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Ben buys candies in jars and bags. Each jar has 8 candies. Each bag has 10 candies. Ben gives away 3 jars and 2 bags of candies to his friends. How many candies does Ben have left if he originally bought 7 jars and 9 bags?\n    \"\"\"\n    candies_per_jar = 8\n    candies_per_bag = 10\n    jars_bought = 7\n    bags_bought = 9\n    jars_given_away = 3\n    bags_given_away = 2\n\n    total_candies_bought = jars_bought * candies_per_jar + bags_bought * candies_per_bag\n    total_candies_given_away = jars_given_away * candies_per_jar + bags_given_away * candies_per_bag\n    candies_left = total_candies_bought - total_candies_given_away\n\n    result = candies_left\n\n    return result",
    "result": 102
  },
  {
    "index": 9,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sam drove at a speed of 50 km/h for 2 hours and then 60 km/h for 3 hours. How far did Sam drive in total?\n    \"\"\"\n    speed_first_part = 50  # km/h\n    time_first_part = 2    # hours\n    speed_second_part = 60 # km/h\n    time_second_part = 3   # hours\n\n    distance_first_part = speed_first_part * time_first_part\n    distance_second_part = speed_second_part * time_second_part\n    total_distance = distance_first_part + distance_second_part\n    result = total_distance\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sam drove at a speed of 50 km/h for 2 hours and then 60 km/h for 3 hours. How far did Sam drive in total?\n    \"\"\"\n    speed_first_part = 50  # km/h\n    time_first_part = 2    # hours\n    speed_second_part = 60 # km/h\n    time_second_part = 3   # hours\n\n    distance_first_part = speed_first_part * time_first_part\n    distance_second_part = speed_second_part * time_second_part\n    total_distance = distance_first_part + distance_second_part\n    result = total_distance\n\n    return result",
    "result": 280
  },
  {
    "index": 10,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Amy has four coins in her piggy bank, two quarters and two dimes. Every month, she adds one more quarter and two more dimes, but she also spends one quarter and one dime on candy. How much money will she have in her piggy bank in six months?\n    \"\"\"\n    initial_quarters = 2\n    initial_dimes = 2\n\n    # Each month:\n    # Add: 1 quarter, 2 dimes\n    # Spend: 1 quarter, 1 dime\n    # Net monthly change:\n    net_quarter_change_per_month = 1 - 1  # 0 quarters per month\n    net_dime_change_per_month = 2 - 1     # 1 dime per month\n\n    months = 6\n\n    final_quarters = initial_quarters + net_quarter_change_per_month * months\n    final_dimes = initial_dimes + net_dime_change_per_month * months\n\n    # Value in dollars\n    quarter_value = 0.25\n    dime_value = 0.10\n\n    total_value = final_quarters * quarter_value + final_dimes * dime_value\n    result = total_value\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Amy has four coins in her piggy bank, two quarters and two dimes. Every month, she adds one more quarter and two more dimes, but she also spends one quarter and one dime on candy. How much money will she have in her piggy bank in six months?\n    \"\"\"\n    initial_quarters = 2\n    initial_dimes = 2\n\n    # Each month:\n    # Add: 1 quarter, 2 dimes\n    # Spend: 1 quarter, 1 dime\n    # Net monthly change:\n    net_quarter_change_per_month = 1 - 1  # 0 quarters per month\n    net_dime_change_per_month = 2 - 1     # 1 dime per month\n\n    months = 6\n\n    final_quarters = initial_quarters + net_quarter_change_per_month * months\n    final_dimes = initial_dimes + net_dime_change_per_month * months\n\n    # Value in dollars\n    quarter_value = 0.25\n    dime_value = 0.10\n\n    total_value = final_quarters * quarter_value + final_dimes * dime_value\n    result = total_value\n\n    return result",
    "result": 1.3
  },
  {
    "index": 11,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Kevin watched movies for 3 hours. He uses $1.25 for every 20 minutes of movie time. How much money did he spend, in dollars?\n    \"\"\"\n    hours_watched = 3\n    cost_per_20_minutes = 1.25\n    \n    minutes_watched = hours_watched * 60\n    number_of_20_min_segments = minutes_watched / 20\n    total_cost = number_of_20_min_segments * cost_per_20_minutes\n    \n    result = total_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Kevin watched movies for 3 hours. He uses $1.25 for every 20 minutes of movie time. How much money did he spend, in dollars?\n    \"\"\"\n    hours_watched = 3\n    cost_per_20_minutes = 1.25\n    \n    minutes_watched = hours_watched * 60\n    number_of_20_min_segments = minutes_watched / 20\n    total_cost = number_of_20_min_segments * cost_per_20_minutes\n    \n    result = total_cost\n\n    return result",
    "result": 11.25
  },
  {
    "index": 12,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Susan wants to make brownies. She needs 2 cups of sugar for a single batch and she wants to make 5 batches. If a bag of sugar costs $3 for 5 cups, how much will Susan spend?\n    \"\"\"\n    cups_per_batch = 2\n    number_of_batches = 5\n    cups_per_bag = 5\n    cost_per_bag = 3\n\n    total_cups_needed = cups_per_batch * number_of_batches\n    bags_needed = total_cups_needed / cups_per_bag\n    total_cost = bags_needed * cost_per_bag\n\n    result = total_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Susan wants to make brownies. She needs 2 cups of sugar for a single batch and she wants to make 5 batches. If a bag of sugar costs $3 for 5 cups, how much will Susan spend?\n    \"\"\"\n    cups_per_batch = 2\n    number_of_batches = 5\n    cups_per_bag = 5\n    cost_per_bag = 3\n\n    total_cups_needed = cups_per_batch * number_of_batches\n    bags_needed = total_cups_needed / cups_per_bag\n    total_cost = bags_needed * cost_per_bag\n\n    result = total_cost\n\n    return result",
    "result": 6.0
  },
  {
    "index": 13,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sarah bought a new phone and accessories for $900. She returned a phone case that cost $50 and a screen protector that cost $20. She sold a charger that cost 20% more than the screen protector she returned for 70% of its original price. How much did she spend on her phone and accessories?\n    \"\"\"\n    total_initial = 900\n    phone_case_returned = 50\n    screen_protector_returned = 20\n    charger_original = screen_protector_returned * 1.2\n    charger_sold_price = charger_original * 0.7\n    \n    # Money returned from returns and sale\n    total_returned = phone_case_returned + screen_protector_returned + charger_sold_price\n    \n    # Final amount spent is initial minus returned money\n    result = total_initial - total_returned\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sarah bought a new phone and accessories for $900. She returned a phone case that cost $50 and a screen protector that cost $20. She sold a charger that cost 20% more than the screen protector she returned for 70% of its original price. How much did she spend on her phone and accessories?\n    \"\"\"\n    total_initial = 900\n    phone_case_returned = 50\n    screen_protector_returned = 20\n    charger_original = screen_protector_returned * 1.2\n    charger_sold_price = charger_original * 0.7\n    \n    # Money returned from returns and sale\n    total_returned = phone_case_returned + screen_protector_returned + charger_sold_price\n    \n    # Final amount spent is initial minus returned money\n    result = total_initial - total_returned\n    \n    return result",
    "result": 813.2
  },
  {
    "index": 14,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A box contains 2500 paper clips. If each clip weighs 1.5g, what is the total weight of all the clips in the box?\n    \"\"\"\n    number_of_clips = 2500\n    weight_per_clip = 1.5  # grams\n    total_weight = number_of_clips * weight_per_clip\n    result = total_weight\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A box contains 2500 paper clips. If each clip weighs 1.5g, what is the total weight of all the clips in the box?\n    \"\"\"\n    number_of_clips = 2500\n    weight_per_clip = 1.5  # grams\n    total_weight = number_of_clips * weight_per_clip\n    result = total_weight\n\n    return result",
    "result": 3750.0
  },
  {
    "index": 15,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John has three times as much money as Sandy. If Sandy has $200, how much does John have?\n    \"\"\"\n    sandy_money = 200\n    john_money = 3 * sandy_money\n    result = john_money\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John has three times as much money as Sandy. If Sandy has $200, how much does John have?\n    \"\"\"\n    sandy_money = 200\n    john_money = 3 * sandy_money\n    result = john_money\n\n    return result",
    "result": 600
  },
  {
    "index": 16,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mason had $80 and his friend Logan had one-fourth of the money he had. On Halloween, their dad gave each of them an equal amount of money so that they had a total of $140. How much did their dad give each of them?\n    \"\"\"\n    mason_money = 80\n    logan_money = mason_money / 4\n    total_money_after_gift = 140\n    \n    # Let x be the amount their dad gave each of them\n    # Then: (mason_money + x) + (logan_money + x) = total_money_after_gift\n    # => mason_money + logan_money + 2*x = total_money_after_gift\n    x = (total_money_after_gift - (mason_money + logan_money)) / 2\n    \n    result = x\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mason had $80 and his friend Logan had one-fourth of the money he had. On Halloween, their dad gave each of them an equal amount of money so that they had a total of $140. How much did their dad give each of them?\n    \"\"\"\n    mason_money = 80\n    logan_money = mason_money / 4\n    total_money_after_gift = 140\n    \n    # Let x be the amount their dad gave each of them\n    # Then: (mason_money + x) + (logan_money + x) = total_money_after_gift\n    # => mason_money + logan_money + 2*x = total_money_after_gift\n    x = (total_money_after_gift - (mason_money + logan_money)) / 2\n    \n    result = x\n    return result",
    "result": 20.0
  },
  {
    "index": 17,
    "response": "def simple_math_problem() -> int:\n    \"\"\"\n    Marcus is painting a room with a ceiling height of 3 m. He'll be using a roller with an effective width of 50 cm. How many times will he need to pass the roller to cover the whole ceiling?\n    \"\"\"\n    ceiling_height_m = 3\n    roller_width_cm = 50\n\n    # Convert roller width to meters\n    roller_width_m = roller_width_cm / 100\n\n    # Number of passes needed to cover the 3 m width ceiling\n    passes = ceiling_height_m / roller_width_m\n\n    # Since partial passes are not possible, round up to nearest whole number\n    import math\n    result = math.ceil(passes)\n\n    return result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Marcus is painting a room with a ceiling height of 3 m. He'll be using a roller with an effective width of 50 cm. How many times will he need to pass the roller to cover the whole ceiling?\n    \"\"\"\n    ceiling_height_m = 3\n    roller_width_cm = 50\n\n    # Convert roller width to meters\n    roller_width_m = roller_width_cm / 100\n\n    # Number of passes needed to cover the 3 m width ceiling\n    passes = ceiling_height_m / roller_width_m\n\n    # Since partial passes are not possible, round up to nearest whole number\n    import math\n    result = math.ceil(passes)\n\n    return result",
    "result": 6
  },
  {
    "index": 18,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Kevin works at a bakery. He makes 24 cupcakes in an hour and uses 3 eggs for every 4 cupcakes. He also sells each cupcake for $2.50 and buys a dozen eggs for $3.00. How much money does he earn in 4 hours after paying for the eggs?\n    \"\"\"\n    cupcakes_per_hour = 24\n    hours_worked = 4\n    egg_ratio_eggs = 3\n    egg_ratio_cupcakes = 4\n    price_per_cupcake = 2.50\n    price_per_dozen_eggs = 3.00\n    eggs_per_dozen = 12\n\n    total_cupcakes = cupcakes_per_hour * hours_worked\n    total_eggs_needed = (total_cupcakes / egg_ratio_cupcakes) * egg_ratio_eggs\n\n    dozens_eggs_needed = total_eggs_needed / eggs_per_dozen\n    cost_eggs = dozens_eggs_needed * price_per_dozen_eggs\n\n    revenue = total_cupcakes * price_per_cupcake\n\n    result = revenue - cost_eggs\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Kevin works at a bakery. He makes 24 cupcakes in an hour and uses 3 eggs for every 4 cupcakes. He also sells each cupcake for $2.50 and buys a dozen eggs for $3.00. How much money does he earn in 4 hours after paying for the eggs?\n    \"\"\"\n    cupcakes_per_hour = 24\n    hours_worked = 4\n    egg_ratio_eggs = 3\n    egg_ratio_cupcakes = 4\n    price_per_cupcake = 2.50\n    price_per_dozen_eggs = 3.00\n    eggs_per_dozen = 12\n\n    total_cupcakes = cupcakes_per_hour * hours_worked\n    total_eggs_needed = (total_cupcakes / egg_ratio_cupcakes) * egg_ratio_eggs\n\n    dozens_eggs_needed = total_eggs_needed / eggs_per_dozen\n    cost_eggs = dozens_eggs_needed * price_per_dozen_eggs\n\n    revenue = total_cupcakes * price_per_cupcake\n\n    result = revenue - cost_eggs\n\n    return result",
    "result": 222.0
  },
  {
    "index": 19,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Linda made a trip of 95 miles using 5 gallons of gasoline. How many miles can she travel using one gallon of gasoline?\n    \"\"\"\n    total_miles = 95\n    gallons_used = 5\n    miles_per_gallon = total_miles / gallons_used\n    result = miles_per_gallon\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Linda made a trip of 95 miles using 5 gallons of gasoline. How many miles can she travel using one gallon of gasoline?\n    \"\"\"\n    total_miles = 95\n    gallons_used = 5\n    miles_per_gallon = total_miles / gallons_used\n    result = miles_per_gallon\n\n    return result",
    "result": 19.0
  },
  {
    "index": 20,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A grocery store needs to distribute 96 boxes of cereal across 12 stores. How many boxes does each store get?\n    \"\"\"\n    total_boxes = 96\n    number_of_stores = 12\n    boxes_per_store = total_boxes / number_of_stores\n    result = boxes_per_store\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A grocery store needs to distribute 96 boxes of cereal across 12 stores. How many boxes does each store get?\n    \"\"\"\n    total_boxes = 96\n    number_of_stores = 12\n    boxes_per_store = total_boxes / number_of_stores\n    result = boxes_per_store\n\n    return result",
    "result": 8.0
  },
  {
    "index": 21,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    There are 90 beads in a necklace. One third of them are black, one fifth of them are white, and the rest are colorful. How many beads are colorful?\n    \"\"\"\n    total_beads = 90\n    black_beads = total_beads / 3\n    white_beads = total_beads / 5\n    colorful_beads = total_beads - black_beads - white_beads\n    result = int(colorful_beads)\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    There are 90 beads in a necklace. One third of them are black, one fifth of them are white, and the rest are colorful. How many beads are colorful?\n    \"\"\"\n    total_beads = 90\n    black_beads = total_beads / 3\n    white_beads = total_beads / 5\n    colorful_beads = total_beads - black_beads - white_beads\n    result = int(colorful_beads)\n\n    return result",
    "result": 42
  },
  {
    "index": 22,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John bought 12 pens with 30 pages each and 6 pencils with 15 pages each. He spent $24 total. What was the average cost in cents per page?\n    \"\"\"\n    pens_count = 12\n    pages_per_pen = 30\n    pencils_count = 6\n    pages_per_pencil = 15\n    total_spent_dollars = 24\n\n    total_pages = pens_count * pages_per_pen + pencils_count * pages_per_pencil\n    total_spent_cents = total_spent_dollars * 100\n    average_cost_per_page_cents = total_spent_cents / total_pages\n\n    result = average_cost_per_page_cents\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John bought 12 pens with 30 pages each and 6 pencils with 15 pages each. He spent $24 total. What was the average cost in cents per page?\n    \"\"\"\n    pens_count = 12\n    pages_per_pen = 30\n    pencils_count = 6\n    pages_per_pencil = 15\n    total_spent_dollars = 24\n\n    total_pages = pens_count * pages_per_pen + pencils_count * pages_per_pencil\n    total_spent_cents = total_spent_dollars * 100\n    average_cost_per_page_cents = total_spent_cents / total_pages\n\n    result = average_cost_per_page_cents\n\n    return result",
    "result": 5.333333333333333
  },
  {
    "index": 23,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    John wants to complete an average of 5 tasks per day over the next week. On Monday he completed 7 tasks. On Tuesday he completed 4 tasks. On Wednesday he completed 6 tasks. On Thursday he completed 3 tasks. On Friday he completed 5 tasks. How many tasks does he need to complete on Saturday and Sunday to meet his goal?\n    \"\"\"\n    average_tasks_per_day = 5\n    days_in_week = 7\n\n    # Tasks completed from Monday to Friday\n    tasks_monday = 7\n    tasks_tuesday = 4\n    tasks_wednesday = 6\n    tasks_thursday = 3\n    tasks_friday = 5\n\n    total_tasks_needed = average_tasks_per_day * days_in_week\n    tasks_completed_so_far = (\n        tasks_monday + tasks_tuesday + tasks_wednesday + tasks_thursday + tasks_friday\n    )\n    tasks_needed_weekend = total_tasks_needed - tasks_completed_so_far\n\n    result = tasks_needed_weekend\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    John wants to complete an average of 5 tasks per day over the next week. On Monday he completed 7 tasks. On Tuesday he completed 4 tasks. On Wednesday he completed 6 tasks. On Thursday he completed 3 tasks. On Friday he completed 5 tasks. How many tasks does he need to complete on Saturday and Sunday to meet his goal?\n    \"\"\"\n    average_tasks_per_day = 5\n    days_in_week = 7\n\n    # Tasks completed from Monday to Friday\n    tasks_monday = 7\n    tasks_tuesday = 4\n    tasks_wednesday = 6\n    tasks_thursday = 3\n    tasks_friday = 5\n\n    total_tasks_needed = average_tasks_per_day * days_in_week\n    tasks_completed_so_far = (\n        tasks_monday + tasks_tuesday + tasks_wednesday + tasks_thursday + tasks_friday\n    )\n    tasks_needed_weekend = total_tasks_needed - tasks_completed_so_far\n\n    result = tasks_needed_weekend\n\n    return result",
    "result": 10
  },
  {
    "index": 24,
    "response": "```python\ndef simple_math_problem() -> tuple:\n    \"\"\"\n    The sum of two numbers is 30. If one number is four times the other, what are the numbers?\n    \"\"\"\n    total_sum = 30\n    # Let the smaller number be x\n    # Then the other number is 4 * x\n    # x + 4x = 30 -> 5x = 30 -> x = 6\n    smaller_number = total_sum / 5\n    larger_number = 4 * smaller_number\n    result = (smaller_number, larger_number)\n\n    return result\n```",
    "code": "def simple_math_problem() -> tuple:\n    \"\"\"\n    The sum of two numbers is 30. If one number is four times the other, what are the numbers?\n    \"\"\"\n    total_sum = 30\n    # Let the smaller number be x\n    # Then the other number is 4 * x\n    # x + 4x = 30 -> 5x = 30 -> x = 6\n    smaller_number = total_sum / 5\n    larger_number = 4 * smaller_number\n    result = (smaller_number, larger_number)\n\n    return result",
    "result": [
      6.0,
      24.0
    ]
  },
  {
    "index": 25,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A runner ran laps on a track that's 400 m in length. If the runner completed 10 laps, what was the total distance ran?\n    \"\"\"\n    track_length_meters = 400\n    laps_completed = 10\n    total_distance_meters = track_length_meters * laps_completed\n    result = total_distance_meters\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A runner ran laps on a track that's 400 m in length. If the runner completed 10 laps, what was the total distance ran?\n    \"\"\"\n    track_length_meters = 400\n    laps_completed = 10\n    total_distance_meters = track_length_meters * laps_completed\n    result = total_distance_meters\n\n    return result",
    "result": 4000
  },
  {
    "index": 26,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Ms. Williams' fourth grade class is on a field trip to the park. The park has 6 playgrounds and each playground has 3 swings. Each swing can fit 2 students at a time. If the class divided into 6 groups and each group went to a different playground, how many students could swing at the same time in total?\n    \"\"\"\n    playgrounds = 6\n    swings_per_playground = 3\n    students_per_swing = 2\n    \n    total_swings = playgrounds * swings_per_playground\n    total_students_swinging = total_swings * students_per_swing\n    result = total_students_swinging\n    \n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Ms. Williams' fourth grade class is on a field trip to the park. The park has 6 playgrounds and each playground has 3 swings. Each swing can fit 2 students at a time. If the class divided into 6 groups and each group went to a different playground, how many students could swing at the same time in total?\n    \"\"\"\n    playgrounds = 6\n    swings_per_playground = 3\n    students_per_swing = 2\n    \n    total_swings = playgrounds * swings_per_playground\n    total_students_swinging = total_swings * students_per_swing\n    result = total_students_swinging\n    \n    return result",
    "result": 36
  },
  {
    "index": 27,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If a road is 24 meters wide and 56 meters long, how many square meters is it?\n    \"\"\"\n    road_width_meters = 24\n    road_length_meters = 56\n    area_square_meters = road_width_meters * road_length_meters\n    result = area_square_meters\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a road is 24 meters wide and 56 meters long, how many square meters is it?\n    \"\"\"\n    road_width_meters = 24\n    road_length_meters = 56\n    area_square_meters = road_width_meters * road_length_meters\n    result = area_square_meters\n\n    return result",
    "result": 1344
  },
  {
    "index": 28,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A store had sales of $10,000. If the profit margin is 25%, what is the profit earned by the store?\n    \"\"\"\n    sales = 10000\n    profit_margin = 0.25\n    profit = sales * profit_margin\n    result = profit\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A store had sales of $10,000. If the profit margin is 25%, what is the profit earned by the store?\n    \"\"\"\n    sales = 10000\n    profit_margin = 0.25\n    profit = sales * profit_margin\n    result = profit\n\n    return result",
    "result": 2500.0
  },
  {
    "index": 29,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    A store sells 2000 toys, and 30% of them are cars, 40% are dolls, and the rest are stuffed animals. If there are 360 cars and 400 dolls, how many stuffed animals are there?\n    \"\"\"\n    total_toys = 2000\n    percent_cars = 0.30\n    percent_dolls = 0.40\n\n    # Given numbers for cars and dolls do not match the percentages exactly\n    cars_given = 360\n    dolls_given = 400\n\n    # Calculate the remaining toys as stuffed animals based on given numbers\n    stuffed_animals = total_toys - cars_given - dolls_given\n    result = stuffed_animals\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A store sells 2000 toys, and 30% of them are cars, 40% are dolls, and the rest are stuffed animals. If there are 360 cars and 400 dolls, how many stuffed animals are there?\n    \"\"\"\n    total_toys = 2000\n    percent_cars = 0.30\n    percent_dolls = 0.40\n\n    # Given numbers for cars and dolls do not match the percentages exactly\n    cars_given = 360\n    dolls_given = 400\n\n    # Calculate the remaining toys as stuffed animals based on given numbers\n    stuffed_animals = total_toys - cars_given - dolls_given\n    result = stuffed_animals\n\n    return result",
    "result": 1240
  },
  {
    "index": 30,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    There were 800 candies in one jar. Rachel equally distributed the candies among her 8 friends. Rachel changed her mind and asked each of her friends to give her 20 candies. How many candies does each friend have now?\n    \"\"\"\n    total_candies = 800\n    number_of_friends = 8\n\n    candies_per_friend_initial = total_candies // number_of_friends\n    candies_given_back = 20\n\n    candies_per_friend_now = candies_per_friend_initial - candies_given_back\n    result = candies_per_friend_now\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    There were 800 candies in one jar. Rachel equally distributed the candies among her 8 friends. Rachel changed her mind and asked each of her friends to give her 20 candies. How many candies does each friend have now?\n    \"\"\"\n    total_candies = 800\n    number_of_friends = 8\n\n    candies_per_friend_initial = total_candies // number_of_friends\n    candies_given_back = 20\n\n    candies_per_friend_now = candies_per_friend_initial - candies_given_back\n    result = candies_per_friend_now\n\n    return result",
    "result": 80
  },
  {
    "index": 31,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A company sells a product at a price of $10 per unit. Every month, the company's fixed costs are $3000 and they have variable costs of $4 per unit. How many units should the company sell each month to break even?\n    \"\"\"\n    price_per_unit = 10\n    fixed_costs = 3000\n    variable_costs_per_unit = 4\n    \n    # Break-even point occurs when total revenue = total costs\n    # total revenue = price_per_unit * units_sold\n    # total costs = fixed_costs + variable_costs_per_unit * units_sold\n    # So, solve for units_sold:\n    # price_per_unit * units_sold = fixed_costs + variable_costs_per_unit * units_sold\n    # (price_per_unit - variable_costs_per_unit) * units_sold = fixed_costs\n    # units_sold = fixed_costs / (price_per_unit - variable_costs_per_unit)\n    \n    units_to_break_even = fixed_costs / (price_per_unit - variable_costs_per_unit)\n    result = units_to_break_even\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A company sells a product at a price of $10 per unit. Every month, the company's fixed costs are $3000 and they have variable costs of $4 per unit. How many units should the company sell each month to break even?\n    \"\"\"\n    price_per_unit = 10\n    fixed_costs = 3000\n    variable_costs_per_unit = 4\n    \n    # Break-even point occurs when total revenue = total costs\n    # total revenue = price_per_unit * units_sold\n    # total costs = fixed_costs + variable_costs_per_unit * units_sold\n    # So, solve for units_sold:\n    # price_per_unit * units_sold = fixed_costs + variable_costs_per_unit * units_sold\n    # (price_per_unit - variable_costs_per_unit) * units_sold = fixed_costs\n    # units_sold = fixed_costs / (price_per_unit - variable_costs_per_unit)\n    \n    units_to_break_even = fixed_costs / (price_per_unit - variable_costs_per_unit)\n    result = units_to_break_even\n\n    return result",
    "result": 500.0
  },
  {
    "index": 32,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Maria is preparing for a flight and needs to make sure her luggage is not overweight. Her suitcase can hold up to 50kg and she has 4 items to pack. She has 2 bags of shoes, each weighing 5kg, a bag of clothes weighing 15kg, and a bag of gifts weighing 10kg. In total, how much weight does Maria need to leave out of her suitcase to avoid paying an overweight fee?\n    \"\"\"\n    suitcase_capacity_kg = 50\n    weight_shoes_each_kg = 5\n    number_of_shoes_bags = 2\n    weight_clothes_kg = 15\n    weight_gifts_kg = 10\n\n    total_weight = (weight_shoes_each_kg * number_of_shoes_bags) + weight_clothes_kg + weight_gifts_kg\n    overweight = total_weight - suitcase_capacity_kg\n\n    # If not overweight, Maria does not need to leave any weight out\n    result = overweight if overweight > 0 else 0\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Maria is preparing for a flight and needs to make sure her luggage is not overweight. Her suitcase can hold up to 50kg and she has 4 items to pack. She has 2 bags of shoes, each weighing 5kg, a bag of clothes weighing 15kg, and a bag of gifts weighing 10kg. In total, how much weight does Maria need to leave out of her suitcase to avoid paying an overweight fee?\n    \"\"\"\n    suitcase_capacity_kg = 50\n    weight_shoes_each_kg = 5\n    number_of_shoes_bags = 2\n    weight_clothes_kg = 15\n    weight_gifts_kg = 10\n\n    total_weight = (weight_shoes_each_kg * number_of_shoes_bags) + weight_clothes_kg + weight_gifts_kg\n    overweight = total_weight - suitcase_capacity_kg\n\n    # If not overweight, Maria does not need to leave any weight out\n    result = overweight if overweight > 0 else 0\n\n    return result",
    "result": 0
  },
  {
    "index": 33,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    The leak in Samantha's ceiling drips 5 drops a minute into a bucket. Each drop is 40 ml, and the bucket has a capacity of 10 liters. How much time will it take for the bucket to be full?\n    \"\"\"\n    drops_per_minute = 5\n    volume_per_drop_ml = 40\n    bucket_capacity_liters = 10\n\n    # Convert bucket capacity to milliliters (1 liter = 1000 ml)\n    bucket_capacity_ml = bucket_capacity_liters * 1000\n\n    # Calculate total volume collected per minute in milliliters\n    volume_per_minute_ml = drops_per_minute * volume_per_drop_ml\n\n    # Calculate time taken to fill the bucket (in minutes)\n    time_to_fill_minutes = bucket_capacity_ml / volume_per_minute_ml\n\n    result = time_to_fill_minutes\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The leak in Samantha's ceiling drips 5 drops a minute into a bucket. Each drop is 40 ml, and the bucket has a capacity of 10 liters. How much time will it take for the bucket to be full?\n    \"\"\"\n    drops_per_minute = 5\n    volume_per_drop_ml = 40\n    bucket_capacity_liters = 10\n\n    # Convert bucket capacity to milliliters (1 liter = 1000 ml)\n    bucket_capacity_ml = bucket_capacity_liters * 1000\n\n    # Calculate total volume collected per minute in milliliters\n    volume_per_minute_ml = drops_per_minute * volume_per_drop_ml\n\n    # Calculate time taken to fill the bucket (in minutes)\n    time_to_fill_minutes = bucket_capacity_ml / volume_per_minute_ml\n\n    result = time_to_fill_minutes\n\n    return result",
    "result": 50.0
  },
  {
    "index": 34,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A recipe calls for 2 cups of flour for every 3 cups of sugar. If there are 6 cups of flour, how much sugar is required?\n    \"\"\"\n    flour_per_ratio = 2\n    sugar_per_ratio = 3\n    flour_available = 6\n\n    # Calculate the multiplier based on available flour\n    multiplier = flour_available / flour_per_ratio\n\n    # Calculate required sugar using the multiplier\n    sugar_required = sugar_per_ratio * multiplier\n\n    result = sugar_required\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A recipe calls for 2 cups of flour for every 3 cups of sugar. If there are 6 cups of flour, how much sugar is required?\n    \"\"\"\n    flour_per_ratio = 2\n    sugar_per_ratio = 3\n    flour_available = 6\n\n    # Calculate the multiplier based on available flour\n    multiplier = flour_available / flour_per_ratio\n\n    # Calculate required sugar using the multiplier\n    sugar_required = sugar_per_ratio * multiplier\n\n    result = sugar_required\n\n    return result",
    "result": 9.0
  },
  {
    "index": 35,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Mrs. Lee baked 8 pies and cut each pie into 6 slices. She gave 3 slices to each of her 4 children and kept the rest for herself. How many slices of pie did Mrs. Lee have left?\n    \"\"\"\n    pies_baked = 8\n    slices_per_pie = 6\n    children = 4\n    slices_per_child = 3\n    \n    total_slices = pies_baked * slices_per_pie\n    slices_given = children * slices_per_child\n    slices_left = total_slices - slices_given\n    result = slices_left\n    \n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Mrs. Lee baked 8 pies and cut each pie into 6 slices. She gave 3 slices to each of her 4 children and kept the rest for herself. How many slices of pie did Mrs. Lee have left?\n    \"\"\"\n    pies_baked = 8\n    slices_per_pie = 6\n    children = 4\n    slices_per_child = 3\n    \n    total_slices = pies_baked * slices_per_pie\n    slices_given = children * slices_per_child\n    slices_left = total_slices - slices_given\n    result = slices_left\n    \n    return result",
    "result": 36
  },
  {
    "index": 36,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Leo is saving money for a new bike. He starts with 100 dollars and gets 20 dollars every week from his allowance. The bike costs 300 dollars. How many weeks does he need to save money for?\n    \"\"\"\n    starting_money = 100\n    weekly_allowance = 20\n    bike_cost = 300\n\n    amount_needed = bike_cost - starting_money\n    weeks_needed = amount_needed / weekly_allowance\n\n    result = int(weeks_needed) if weeks_needed == int(weeks_needed) else int(weeks_needed) + 1\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Leo is saving money for a new bike. He starts with 100 dollars and gets 20 dollars every week from his allowance. The bike costs 300 dollars. How many weeks does he need to save money for?\n    \"\"\"\n    starting_money = 100\n    weekly_allowance = 20\n    bike_cost = 300\n\n    amount_needed = bike_cost - starting_money\n    weeks_needed = amount_needed / weekly_allowance\n\n    result = int(weeks_needed) if weeks_needed == int(weeks_needed) else int(weeks_needed) + 1\n\n    return result",
    "result": 10
  },
  {
    "index": 37,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A store has a sale where all items are 25% off. If a shirt costs $20 and a pair of jeans costs $50, what is the total cost of buying 3 shirts and 2 jeans at the discounted prices?\n    \"\"\"\n    original_price_shirt = 20\n    original_price_jeans = 50\n    discount_rate = 0.25\n\n    discounted_price_shirt = original_price_shirt * (1 - discount_rate)\n    discounted_price_jeans = original_price_jeans * (1 - discount_rate)\n\n    number_of_shirts = 3\n    number_of_jeans = 2\n\n    total_cost_shirts = number_of_shirts * discounted_price_shirt\n    total_cost_jeans = number_of_jeans * discounted_price_jeans\n\n    result = total_cost_shirts + total_cost_jeans\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A store has a sale where all items are 25% off. If a shirt costs $20 and a pair of jeans costs $50, what is the total cost of buying 3 shirts and 2 jeans at the discounted prices?\n    \"\"\"\n    original_price_shirt = 20\n    original_price_jeans = 50\n    discount_rate = 0.25\n\n    discounted_price_shirt = original_price_shirt * (1 - discount_rate)\n    discounted_price_jeans = original_price_jeans * (1 - discount_rate)\n\n    number_of_shirts = 3\n    number_of_jeans = 2\n\n    total_cost_shirts = number_of_shirts * discounted_price_shirt\n    total_cost_jeans = number_of_jeans * discounted_price_jeans\n\n    result = total_cost_shirts + total_cost_jeans\n\n    return result",
    "result": 120.0
  },
  {
    "index": 38,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Henry likes to jog for 30 minutes every day. If he runs at a speed of 8 kilometers per hour, how many kilometers does he run in a week?\n    \"\"\"\n    minutes_jog_per_day = 30\n    speed_kmh = 8\n    days_per_week = 7\n\n    hours_jog_per_day = minutes_jog_per_day / 60\n    distance_per_day = speed_kmh * hours_jog_per_day\n    distance_per_week = distance_per_day * days_per_week\n\n    result = distance_per_week\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Henry likes to jog for 30 minutes every day. If he runs at a speed of 8 kilometers per hour, how many kilometers does he run in a week?\n    \"\"\"\n    minutes_jog_per_day = 30\n    speed_kmh = 8\n    days_per_week = 7\n\n    hours_jog_per_day = minutes_jog_per_day / 60\n    distance_per_day = speed_kmh * hours_jog_per_day\n    distance_per_week = distance_per_day * days_per_week\n\n    result = distance_per_week\n\n    return result",
    "result": 28.0
  },
  {
    "index": 39,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Jack and Jill both drove from home to the supermarket, Jack took 30 minutes driving at a speed of 30 miles per hour, while Jill only took 25 minutes driving at a speed 40 miles per hour. How much farther did Jack drive than Jill?\n    \"\"\"\n    jack_time_minutes = 30\n    jack_speed_mph = 30\n    jill_time_minutes = 25\n    jill_speed_mph = 40\n\n    # Convert time from minutes to hours for distance calculation\n    jack_time_hours = jack_time_minutes / 60\n    jill_time_hours = jill_time_minutes / 60\n\n    # Calculate distances\n    jack_distance = jack_speed_mph * jack_time_hours\n    jill_distance = jill_speed_mph * jill_time_hours\n\n    # Calculate how much farther Jack drove than Jill\n    distance_difference = jack_distance - jill_distance\n    result = distance_difference\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jack and Jill both drove from home to the supermarket, Jack took 30 minutes driving at a speed of 30 miles per hour, while Jill only took 25 minutes driving at a speed 40 miles per hour. How much farther did Jack drive than Jill?\n    \"\"\"\n    jack_time_minutes = 30\n    jack_speed_mph = 30\n    jill_time_minutes = 25\n    jill_speed_mph = 40\n\n    # Convert time from minutes to hours for distance calculation\n    jack_time_hours = jack_time_minutes / 60\n    jill_time_hours = jill_time_minutes / 60\n\n    # Calculate distances\n    jack_distance = jack_speed_mph * jack_time_hours\n    jill_distance = jill_speed_mph * jill_time_hours\n\n    # Calculate how much farther Jack drove than Jill\n    distance_difference = jack_distance - jill_distance\n    result = distance_difference\n\n    return result",
    "result": -1.6666666666666679
  },
  {
    "index": 40,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Rachel wants to take the fastest train route to get to New York. One route is 300 miles at an average speed of 100 MPH while another route is 400 miles at an average speed of 80 MPH. How long will her trip take if she chooses the quickest route?\n    \"\"\"\n    distance_route1 = 300\n    speed_route1 = 100\n    distance_route2 = 400\n    speed_route2 = 80\n\n    time_route1 = distance_route1 / speed_route1\n    time_route2 = distance_route2 / speed_route2\n\n    quickest_time = min(time_route1, time_route2)\n    result = quickest_time\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Rachel wants to take the fastest train route to get to New York. One route is 300 miles at an average speed of 100 MPH while another route is 400 miles at an average speed of 80 MPH. How long will her trip take if she chooses the quickest route?\n    \"\"\"\n    distance_route1 = 300\n    speed_route1 = 100\n    distance_route2 = 400\n    speed_route2 = 80\n\n    time_route1 = distance_route1 / speed_route1\n    time_route2 = distance_route2 / speed_route2\n\n    quickest_time = min(time_route1, time_route2)\n    result = quickest_time\n\n    return result",
    "result": 3.0
  },
  {
    "index": 41,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A school has 500 students and 40 teachers. What is the ratio of students to teachers?\n    \"\"\"\n    number_of_students = 500\n    number_of_teachers = 40\n    ratio_students_to_teachers = number_of_students / number_of_teachers\n    result = ratio_students_to_teachers\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A school has 500 students and 40 teachers. What is the ratio of students to teachers?\n    \"\"\"\n    number_of_students = 500\n    number_of_teachers = 40\n    ratio_students_to_teachers = number_of_students / number_of_teachers\n    result = ratio_students_to_teachers\n\n    return result",
    "result": 12.5
  },
  {
    "index": 42,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Sophia and her friend Isaac decided to start a plant collection. Sophia has 20 plants, 3/4 of which are cacti.\n    Isaac has half as many cacti as Sophia and 10 fewer succulents than Sophia. How many plants in total do the two have?\n    \"\"\"\n    sophia_total_plants = 20\n    sophia_cacti = (3/4) * sophia_total_plants\n    sophia_succulents = sophia_total_plants - sophia_cacti\n\n    isaac_cacti = sophia_cacti / 2\n    isaac_succulents = sophia_succulents - 10\n\n    isaac_total_plants = isaac_cacti + isaac_succulents\n    total_plants = sophia_total_plants + isaac_total_plants\n\n    result = int(total_plants)\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Sophia and her friend Isaac decided to start a plant collection. Sophia has 20 plants, 3/4 of which are cacti.\n    Isaac has half as many cacti as Sophia and 10 fewer succulents than Sophia. How many plants in total do the two have?\n    \"\"\"\n    sophia_total_plants = 20\n    sophia_cacti = (3/4) * sophia_total_plants\n    sophia_succulents = sophia_total_plants - sophia_cacti\n\n    isaac_cacti = sophia_cacti / 2\n    isaac_succulents = sophia_succulents - 10\n\n    isaac_total_plants = isaac_cacti + isaac_succulents\n    total_plants = sophia_total_plants + isaac_total_plants\n\n    result = int(total_plants)\n    return result",
    "result": 22
  },
  {
    "index": 43,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Sarah has 2 times the amount of pencils as Jane. If Jane has 8 pencils, how many pencils does Sarah have?\n    \"\"\"\n    pencils_jane = 8\n    pencils_sarah = 2 * pencils_jane\n    result = pencils_sarah\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Sarah has 2 times the amount of pencils as Jane. If Jane has 8 pencils, how many pencils does Sarah have?\n    \"\"\"\n    pencils_jane = 8\n    pencils_sarah = 2 * pencils_jane\n    result = pencils_sarah\n\n    return result",
    "result": 16
  },
  {
    "index": 44,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If a square has a perimeter of 40 cm, what is the length of one of its sides?\n    \"\"\"\n    perimeter = 40  # in cm\n    number_of_sides = 4\n    side_length = perimeter / number_of_sides\n    result = side_length\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a square has a perimeter of 40 cm, what is the length of one of its sides?\n    \"\"\"\n    perimeter = 40  # in cm\n    number_of_sides = 4\n    side_length = perimeter / number_of_sides\n    result = side_length\n\n    return result",
    "result": 10.0
  },
  {
    "index": 45,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    A company can produce 6 cars per hour. If it takes 4 hours to produce 18 cars, how many more cars should be produced in the next 2 hours to speed up production?\n    \"\"\"\n    production_rate_per_hour = 6\n    hours_worked = 4\n    cars_produced = 18\n    \n    # Expected cars produced in 4 hours at normal rate\n    expected_cars_normal = production_rate_per_hour * hours_worked  # 6 * 4 = 24\n    \n    # The company produced fewer cars: 18 instead of 24\n    # So they are behind by:\n    cars_behind = expected_cars_normal - cars_produced  # 24 - 18 = 6\n    \n    # In the next 2 hours, at normal rate, they would produce:\n    cars_next_2_hours_normal = production_rate_per_hour * 2  # 6 * 2 =12\n    \n    # To speed up production (catch up and go faster), they should produce the normal 12 plus the 6 behind:\n    cars_to_produce_next_2_hours = cars_next_2_hours_normal + cars_behind  # 12 + 6 = 18\n    \n    # Number of more cars than normal in next 2 hours = 18 - 12 = 6\n    result = cars_to_produce_next_2_hours - cars_next_2_hours_normal\n    \n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A company can produce 6 cars per hour. If it takes 4 hours to produce 18 cars, how many more cars should be produced in the next 2 hours to speed up production?\n    \"\"\"\n    production_rate_per_hour = 6\n    hours_worked = 4\n    cars_produced = 18\n    \n    # Expected cars produced in 4 hours at normal rate\n    expected_cars_normal = production_rate_per_hour * hours_worked  # 6 * 4 = 24\n    \n    # The company produced fewer cars: 18 instead of 24\n    # So they are behind by:\n    cars_behind = expected_cars_normal - cars_produced  # 24 - 18 = 6\n    \n    # In the next 2 hours, at normal rate, they would produce:\n    cars_next_2_hours_normal = production_rate_per_hour * 2  # 6 * 2 =12\n    \n    # To speed up production (catch up and go faster), they should produce the normal 12 plus the 6 behind:\n    cars_to_produce_next_2_hours = cars_next_2_hours_normal + cars_behind  # 12 + 6 = 18\n    \n    # Number of more cars than normal in next 2 hours = 18 - 12 = 6\n    result = cars_to_produce_next_2_hours - cars_next_2_hours_normal\n    \n    return result",
    "result": 6
  },
  {
    "index": 46,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    A family was planning their Christmas party and bought 6 bottles of champagne. Each bottle had 8 glasses of champagne. How many glasses of champagne did the family have in total?\n    \"\"\"\n    bottlesBought = 6\n    glassesPerBottle = 8\n    totalGlasses = bottlesBought * glassesPerBottle\n    result = totalGlasses\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A family was planning their Christmas party and bought 6 bottles of champagne. Each bottle had 8 glasses of champagne. How many glasses of champagne did the family have in total?\n    \"\"\"\n    bottlesBought = 6\n    glassesPerBottle = 8\n    totalGlasses = bottlesBought * glassesPerBottle\n    result = totalGlasses\n\n    return result",
    "result": 48
  },
  {
    "index": 47,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Martin wants to fill a wheelbarrow with soil. He currently has 2 buckets of soil that each contain 5 liters of soil. How many additional buckets of soil does he need to fill the wheelbarrow with 10 liters of soil?\n    \"\"\"\n    total_soil_required = 10  # liters\n    buckets_current = 2\n    soil_per_bucket = 5  # liters\n    \n    soil_current = buckets_current * soil_per_bucket\n    soil_needed = total_soil_required - soil_current\n    \n    # number of additional buckets needed\n    additional_buckets_needed = soil_needed / soil_per_bucket\n    \n    result = additional_buckets_needed\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Martin wants to fill a wheelbarrow with soil. He currently has 2 buckets of soil that each contain 5 liters of soil. How many additional buckets of soil does he need to fill the wheelbarrow with 10 liters of soil?\n    \"\"\"\n    total_soil_required = 10  # liters\n    buckets_current = 2\n    soil_per_bucket = 5  # liters\n    \n    soil_current = buckets_current * soil_per_bucket\n    soil_needed = total_soil_required - soil_current\n    \n    # number of additional buckets needed\n    additional_buckets_needed = soil_needed / soil_per_bucket\n    \n    result = additional_buckets_needed\n    \n    return result",
    "result": 0.0
  },
  {
    "index": 48,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A cube has a volume of 729 cm³. Calculate the surface area of the cube.\n    \"\"\"\n    volume = 729  # in cm^3\n    # volume of a cube = side^3, so side = volume^(1/3)\n    side_length = volume ** (1/3)\n    # surface area of a cube = 6 * side^2\n    surface_area = 6 * (side_length ** 2)\n    result = surface_area\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A cube has a volume of 729 cm³. Calculate the surface area of the cube.\n    \"\"\"\n    volume = 729  # in cm^3\n    # volume of a cube = side^3, so side = volume^(1/3)\n    side_length = volume ** (1/3)\n    # surface area of a cube = 6 * side^2\n    surface_area = 6 * (side_length ** 2)\n    result = surface_area\n\n    return result",
    "result": 485.99999999999983
  },
  {
    "index": 49,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If a can of soda costs 50 cents, how much do 10 cans of soda cost, including tax (6%)?\n    \"\"\"\n    cost_per_can = 0.50\n    number_of_cans = 10\n    tax_rate = 0.06\n\n    subtotal = cost_per_can * number_of_cans\n    tax_amount = subtotal * tax_rate\n    total_cost = subtotal + tax_amount\n\n    result = total_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a can of soda costs 50 cents, how much do 10 cans of soda cost, including tax (6%)?\n    \"\"\"\n    cost_per_can = 0.50\n    number_of_cans = 10\n    tax_rate = 0.06\n\n    subtotal = cost_per_can * number_of_cans\n    tax_amount = subtotal * tax_rate\n    total_cost = subtotal + tax_amount\n\n    result = total_cost\n\n    return result",
    "result": 5.3
  },
  {
    "index": 50,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    If a train travels 200 km in 4 hours, what is its average speed in km/h?\n    \"\"\"\n    distance_km = 200\n    time_hours = 4\n    average_speed_kmh = distance_km / time_hours\n    result = average_speed_kmh\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a train travels 200 km in 4 hours, what is its average speed in km/h?\n    \"\"\"\n    distance_km = 200\n    time_hours = 4\n    average_speed_kmh = distance_km / time_hours\n    result = average_speed_kmh\n\n    return result",
    "result": 50.0
  },
  {
    "index": 51,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car rental company rented out 80 cars yesterday. Three times as many cars were rented out today. If all of these cars must be returned within one week, how many cars must be returned per day to meet the deadline?\n    \"\"\"\n    cars_rented_yesterday = 80\n    cars_rented_today = 3 * cars_rented_yesterday\n    total_cars_rented = cars_rented_yesterday + cars_rented_today\n    days_in_week = 7\n    cars_returned_per_day = total_cars_rented / days_in_week\n    result = cars_returned_per_day\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car rental company rented out 80 cars yesterday. Three times as many cars were rented out today. If all of these cars must be returned within one week, how many cars must be returned per day to meet the deadline?\n    \"\"\"\n    cars_rented_yesterday = 80\n    cars_rented_today = 3 * cars_rented_yesterday\n    total_cars_rented = cars_rented_yesterday + cars_rented_today\n    days_in_week = 7\n    cars_returned_per_day = total_cars_rented / days_in_week\n    result = cars_returned_per_day\n\n    return result",
    "result": 45.714285714285715
  },
  {
    "index": 52,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Steven harvested 50 apples from his orchard last year, but this year due to a harsh winter he was only able to harvest a quarter. If Steven wants to make four times as many apple pies as last year and the grocery store sells apples for $0.50 each, how much would Steven have to spend?\n    \"\"\"\n    apples_last_year = 50\n    apples_this_year = apples_last_year / 4  # only a quarter harvested this year\n    pies_multiplier = 4  # wants to make 4 times as many pies as last year\n\n    # Assuming each pie requires the same number of apples as last year\n    apples_needed_for_one_pie_last_year = apples_last_year  # total apples harvested last year = apples used last year for pie making\n    # However, this interpretation could be apples_last_year = total harvested apples, not pies\n    # The problem is ambiguous about how many apples per pie, so assume pies made last year used all apples harvested last year.\n    # Then apples per pie last year = apples_last_year / pies_last_year\n    # But pies_last_year is unknown. Instead, assume 1 pie used apples_last_year.\n    # The problem asks cost for apples needed to make 4 times as many pies as last year.\n    # So we need apples for 4 times pies last year.\n    # If last year number of pies is unknown, but apples harvested last year is total apples for those pies.\n    # Then apples needed this year = apples_last_year * 4 (for four times the pies)\n    \n    apples_needed = apples_last_year * pies_multiplier\n\n    # Steven already harvested only a quarter of apples this year\n    apples_shortfall = apples_needed - apples_this_year\n    if apples_shortfall < 0:\n        apples_shortfall = 0  # no need to buy apples if harvest suffices\n\n    apple_price = 0.50\n    result = apples_shortfall * apple_price\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Steven harvested 50 apples from his orchard last year, but this year due to a harsh winter he was only able to harvest a quarter. If Steven wants to make four times as many apple pies as last year and the grocery store sells apples for $0.50 each, how much would Steven have to spend?\n    \"\"\"\n    apples_last_year = 50\n    apples_this_year = apples_last_year / 4  # only a quarter harvested this year\n    pies_multiplier = 4  # wants to make 4 times as many pies as last year\n\n    # Assuming each pie requires the same number of apples as last year\n    apples_needed_for_one_pie_last_year = apples_last_year  # total apples harvested last year = apples used last year for pie making\n    # However, this interpretation could be apples_last_year = total harvested apples, not pies\n    # The problem is ambiguous about how many apples per pie, so assume pies made last year used all apples harvested last year.\n    # Then apples per pie last year = apples_last_year / pies_last_year\n    # But pies_last_year is unknown. Instead, assume 1 pie used apples_last_year.\n    # The problem asks cost for apples needed to make 4 times as many pies as last year.\n    # So we need apples for 4 times pies last year.\n    # If last year number of pies is unknown, but apples harvested last year is total apples for those pies.\n    # Then apples needed this year = apples_last_year * 4 (for four times the pies)\n    \n    apples_needed = apples_last_year * pies_multiplier\n\n    # Steven already harvested only a quarter of apples this year\n    apples_shortfall = apples_needed - apples_this_year\n    if apples_shortfall < 0:\n        apples_shortfall = 0  # no need to buy apples if harvest suffices\n\n    apple_price = 0.50\n    result = apples_shortfall * apple_price\n\n    return result",
    "result": 93.75
  },
  {
    "index": 53,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A supermarket sells 20 bags of rice each day. Each bag weighs 10 pounds. How many tons of rice does the supermarket sell per week?\n    \"\"\"\n    bags_sold_per_day = 20\n    weight_per_bag_pounds = 10\n    days_per_week = 7\n    pounds_per_ton = 2000  # US short ton\n\n    total_pounds_per_week = bags_sold_per_day * weight_per_bag_pounds * days_per_week\n\n    result = total_pounds_per_week / pounds_per_ton\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A supermarket sells 20 bags of rice each day. Each bag weighs 10 pounds. How many tons of rice does the supermarket sell per week?\n    \"\"\"\n    bags_sold_per_day = 20\n    weight_per_bag_pounds = 10\n    days_per_week = 7\n    pounds_per_ton = 2000  # US short ton\n\n    total_pounds_per_week = bags_sold_per_day * weight_per_bag_pounds * days_per_week\n\n    result = total_pounds_per_week / pounds_per_ton\n\n    return result",
    "result": 0.7
  },
  {
    "index": 54,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If a car travels a distance of 52 miles in 1 hour and 30 minutes, how many seconds will it take for the car to travel 12 miles?\n    \"\"\"\n    distance_miles = 52\n    time_hours = 1 + 30/60  # 1 hour 30 minutes = 1.5 hours\n    target_distance_miles = 12\n\n    speed_mph = distance_miles / time_hours  # miles per hour\n    time_hours_for_12_miles = target_distance_miles / speed_mph\n    time_seconds_for_12_miles = time_hours_for_12_miles * 3600  # convert hours to seconds\n\n    result = time_seconds_for_12_miles\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a car travels a distance of 52 miles in 1 hour and 30 minutes, how many seconds will it take for the car to travel 12 miles?\n    \"\"\"\n    distance_miles = 52\n    time_hours = 1 + 30/60  # 1 hour 30 minutes = 1.5 hours\n    target_distance_miles = 12\n\n    speed_mph = distance_miles / time_hours  # miles per hour\n    time_hours_for_12_miles = target_distance_miles / speed_mph\n    time_seconds_for_12_miles = time_hours_for_12_miles * 3600  # convert hours to seconds\n\n    result = time_seconds_for_12_miles\n\n    return result",
    "result": 1246.1538461538464
  },
  {
    "index": 55,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car travels 60 miles per hour. How many minutes will it take to travel 45 miles?\n    \"\"\"\n    speed_mph = 60\n    distance_miles = 45\n    time_hours = distance_miles / speed_mph\n    time_minutes = time_hours * 60\n    result = time_minutes\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car travels 60 miles per hour. How many minutes will it take to travel 45 miles?\n    \"\"\"\n    speed_mph = 60\n    distance_miles = 45\n    time_hours = distance_miles / speed_mph\n    time_minutes = time_hours * 60\n    result = time_minutes\n\n    return result",
    "result": 45.0
  },
  {
    "index": 56,
    "response": "def simple_math_problem() -> int:\n    \"\"\"\n    Mary wants to make a table cloth for her dining room table which is rectangular and measures 6ft by 9ft. The material comes in 7 ft wide rolls and she wants to sew together identical pieces, what is the minimum number of pieces she needs?\n    \"\"\"\n    table_length = 9  # feet\n    table_width = 6   # feet\n    fabric_width = 7  # feet\n    \n    # Mary wants to sew identical pieces to cover the 6ft x 9ft table.\n    # The fabric is 7 ft wide, so each piece's width must be <= 7 ft.\n    # The pieces must be identical.\n    #\n    # We need to cover a 6 ft width and 9 ft length.\n    #\n    # Because fabric width is 7ft, one piece's width can be max 7 ft.\n    # Since table width is 6 ft, we can choose piece width as <= 6 ft to fit width.\n    # Similarly, length pieces must be arranged to cover 9ft length.\n    #\n    # We want to sew identical pieces to cover 6 x 9. Pieces must be rectangular and identical.\n    #\n    # Since fabric width is 7 ft, we can cut fabric width-wise pieces of length along 9ft or 6ft.\n    #\n    # To minimize the number of pieces, the strategy is:\n    # - Each piece will be cut along fabric width (7 ft) and some length.\n    # - The pieces must be identical.\n    #\n    # Let's consider two orientations:\n    # 1) Pieces laid along table width: pieces dimension w x l where w <= 7, l is some length to cover 9 ft.\n    #    Then number of pieces = (table_width / w) * number of pieces to cover length 9 ft.\n    #\n    # 2) Pieces laid along table length: pieces dimension w x l where w<=7, l is some length to cover 6 ft.\n    #\n    # Since fabric width = 7 ft, which is greater than table width 6 ft, we can cut pieces width-wise as 6 ft.\n    # Then pieces dimension: 6 ft width x variable length.\n    #\n    # To cover length 9 ft, cut pieces of length = some divisor of 9.\n    # Since pieces must be identical, piece length must divide 9 exactly.\n    #\n    # So possible piece lengths dividing 9 ft: 1, 3, 9\n    #\n    # Number of pieces = total length (9 ft) / piece length.\n    # Let's try piece length = 9 ft (one piece): 6 x 9 piece fits fabric width and length, and requires 1 piece.\n    # But fabric width is 7 ft, so can we cut 6x9 piece from fabric width 7 ft rolls?\n    # Fabric roll width is 7 ft, so 6 ft width piece fits.\n    # Length of piece is 9 ft, which is unlimited (fabric can be any length).\n    # So one piece measuring 6x9 ft, cut from 7 ft width fabric roll of length 9 ft, is possible.\n    #\n    # So minimal number of pieces is 1.\n    \n    result = 1\n\n    return result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Mary wants to make a table cloth for her dining room table which is rectangular and measures 6ft by 9ft. The material comes in 7 ft wide rolls and she wants to sew together identical pieces, what is the minimum number of pieces she needs?\n    \"\"\"\n    table_length = 9  # feet\n    table_width = 6   # feet\n    fabric_width = 7  # feet\n    \n    # Mary wants to sew identical pieces to cover the 6ft x 9ft table.\n    # The fabric is 7 ft wide, so each piece's width must be <= 7 ft.\n    # The pieces must be identical.\n    #\n    # We need to cover a 6 ft width and 9 ft length.\n    #\n    # Because fabric width is 7ft, one piece's width can be max 7 ft.\n    # Since table width is 6 ft, we can choose piece width as <= 6 ft to fit width.\n    # Similarly, length pieces must be arranged to cover 9ft length.\n    #\n    # We want to sew identical pieces to cover 6 x 9. Pieces must be rectangular and identical.\n    #\n    # Since fabric width is 7 ft, we can cut fabric width-wise pieces of length along 9ft or 6ft.\n    #\n    # To minimize the number of pieces, the strategy is:\n    # - Each piece will be cut along fabric width (7 ft) and some length.\n    # - The pieces must be identical.\n    #\n    # Let's consider two orientations:\n    # 1) Pieces laid along table width: pieces dimension w x l where w <= 7, l is some length to cover 9 ft.\n    #    Then number of pieces = (table_width / w) * number of pieces to cover length 9 ft.\n    #\n    # 2) Pieces laid along table length: pieces dimension w x l where w<=7, l is some length to cover 6 ft.\n    #\n    # Since fabric width = 7 ft, which is greater than table width 6 ft, we can cut pieces width-wise as 6 ft.\n    # Then pieces dimension: 6 ft width x variable length.\n    #\n    # To cover length 9 ft, cut pieces of length = some divisor of 9.\n    # Since pieces must be identical, piece length must divide 9 exactly.\n    #\n    # So possible piece lengths dividing 9 ft: 1, 3, 9\n    #\n    # Number of pieces = total length (9 ft) / piece length.\n    # Let's try piece length = 9 ft (one piece): 6 x 9 piece fits fabric width and length, and requires 1 piece.\n    # But fabric width is 7 ft, so can we cut 6x9 piece from fabric width 7 ft rolls?\n    # Fabric roll width is 7 ft, so 6 ft width piece fits.\n    # Length of piece is 9 ft, which is unlimited (fabric can be any length).\n    # So one piece measuring 6x9 ft, cut from 7 ft width fabric roll of length 9 ft, is possible.\n    #\n    # So minimal number of pieces is 1.\n    \n    result = 1\n\n    return result",
    "result": 1
  },
  {
    "index": 57,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Everett and Gabby both sprayed a fence with a garden hose. Everett sprayed for 4 hours and 30 minutes while Gabby sprayed for only 3 hours. How much longer did Everett spray the fence than Gabby?\n    \"\"\"\n    everett_hours = 4\n    everett_minutes = 30\n    gabby_hours = 3\n\n    everett_total_hours = everett_hours + (everett_minutes / 60)\n    time_difference = everett_total_hours - gabby_hours\n    result = time_difference\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Everett and Gabby both sprayed a fence with a garden hose. Everett sprayed for 4 hours and 30 minutes while Gabby sprayed for only 3 hours. How much longer did Everett spray the fence than Gabby?\n    \"\"\"\n    everett_hours = 4\n    everett_minutes = 30\n    gabby_hours = 3\n\n    everett_total_hours = everett_hours + (everett_minutes / 60)\n    time_difference = everett_total_hours - gabby_hours\n    result = time_difference\n\n    return result",
    "result": 1.5
  },
  {
    "index": 58,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Sarah wants to buy enough steel siding to cover the exterior of her house which measures 40 feet by 14 feet. \n    If the steel siding comes in pieces that measure 2 feet by 4 feet, how many pieces of siding will Sarah need \n    to cover the entire house?\n    \"\"\"\n    house_length = 40\n    house_height = 14\n    siding_length = 4\n    siding_height = 2\n\n    # Calculate the total area of the house exterior\n    house_area = house_length * house_height\n\n    # Calculate the area of one piece of siding\n    siding_area = siding_length * siding_height\n\n    # Calculate how many pieces are needed to cover the house area\n    # Use ceiling division because partial pieces count as needing a full piece\n    import math\n    pieces_needed = math.ceil(house_area / siding_area)\n\n    result = pieces_needed\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Sarah wants to buy enough steel siding to cover the exterior of her house which measures 40 feet by 14 feet. \n    If the steel siding comes in pieces that measure 2 feet by 4 feet, how many pieces of siding will Sarah need \n    to cover the entire house?\n    \"\"\"\n    house_length = 40\n    house_height = 14\n    siding_length = 4\n    siding_height = 2\n\n    # Calculate the total area of the house exterior\n    house_area = house_length * house_height\n\n    # Calculate the area of one piece of siding\n    siding_area = siding_length * siding_height\n\n    # Calculate how many pieces are needed to cover the house area\n    # Use ceiling division because partial pieces count as needing a full piece\n    import math\n    pieces_needed = math.ceil(house_area / siding_area)\n\n    result = pieces_needed\n\n    return result",
    "result": 70
  },
  {
    "index": 59,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John has a budget of $400 to spend on clothes. If he has already spent $150, how much money does he have left?\n    \"\"\"\n    total_budget = 400\n    amount_spent = 150\n    amount_left = total_budget - amount_spent\n    result = amount_left\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John has a budget of $400 to spend on clothes. If he has already spent $150, how much money does he have left?\n    \"\"\"\n    total_budget = 400\n    amount_spent = 150\n    amount_left = total_budget - amount_spent\n    result = amount_left\n\n    return result",
    "result": 250
  },
  {
    "index": 60,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A store offers a 20% discount on all items. If a customer buys a shirt that costs $25 and a pair of pants that costs $40, how much does the customer need to pay in total?\n    \"\"\"\n    shirt_price = 25\n    pants_price = 40\n    discount_rate = 0.20\n\n    total_price = shirt_price + pants_price\n    discount_amount = total_price * discount_rate\n    result = total_price - discount_amount\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A store offers a 20% discount on all items. If a customer buys a shirt that costs $25 and a pair of pants that costs $40, how much does the customer need to pay in total?\n    \"\"\"\n    shirt_price = 25\n    pants_price = 40\n    discount_rate = 0.20\n\n    total_price = shirt_price + pants_price\n    discount_amount = total_price * discount_rate\n    result = total_price - discount_amount\n\n    return result",
    "result": 52.0
  },
  {
    "index": 61,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Luke and Mia share a pizza that has 8 slices. Luke eats 3 slices and Mia eats 2 slices. They decide to save the remaining slices for later. How much pizza did they save in fractions of a whole pizza?\n    \"\"\"\n    total_slices = 8\n    slices_eaten_by_luke = 3\n    slices_eaten_by_mia = 2\n    slices_eaten_total = slices_eaten_by_luke + slices_eaten_by_mia\n    slices_saved = total_slices - slices_eaten_total\n    result = slices_saved / total_slices\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Luke and Mia share a pizza that has 8 slices. Luke eats 3 slices and Mia eats 2 slices. They decide to save the remaining slices for later. How much pizza did they save in fractions of a whole pizza?\n    \"\"\"\n    total_slices = 8\n    slices_eaten_by_luke = 3\n    slices_eaten_by_mia = 2\n    slices_eaten_total = slices_eaten_by_luke + slices_eaten_by_mia\n    slices_saved = total_slices - slices_eaten_total\n    result = slices_saved / total_slices\n\n    return result",
    "result": 0.375
  },
  {
    "index": 62,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Blaine needs to double the total amount of money he has in his wallet. He has $50 currently. How much money will Blaine have after doubling the amount?\n    \"\"\"\n    current_money = 50\n    doubled_money = current_money * 2\n    result = doubled_money\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Blaine needs to double the total amount of money he has in his wallet. He has $50 currently. How much money will Blaine have after doubling the amount?\n    \"\"\"\n    current_money = 50\n    doubled_money = current_money * 2\n    result = doubled_money\n\n    return result",
    "result": 100
  },
  {
    "index": 63,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Maria plants 9 pots of basil, 6 pots of rosemary, and 3 pots of thyme. How many more pots of basil than rosemary does she have?\n    \"\"\"\n    pots_basil = 9\n    pots_rosemary = 6\n    pots_thyme = 3\n    difference_basil_rosemary = pots_basil - pots_rosemary\n    result = difference_basil_rosemary\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Maria plants 9 pots of basil, 6 pots of rosemary, and 3 pots of thyme. How many more pots of basil than rosemary does she have?\n    \"\"\"\n    pots_basil = 9\n    pots_rosemary = 6\n    pots_thyme = 3\n    difference_basil_rosemary = pots_basil - pots_rosemary\n    result = difference_basil_rosemary\n\n    return result",
    "result": 3
  },
  {
    "index": 64,
    "response": "```python\ndef simple_math_problem() -> tuple:\n    \"\"\"\n    The difference between a number and twice another number is 8. The sum of the numbers is 26. Find the numbers.\n    \"\"\"\n    # Let the first number be x and the second number be y\n    # According to the problem:\n    # x - 2y = 8\n    # x + y = 26\n    \n    # From the second equation: x = 26 - y\n    # Substitute x in the first equation:\n    # (26 - y) - 2y = 8\n    # 26 - 3y = 8\n    # -3y = 8 - 26\n    # -3y = -18\n    # y = 6\n    \n    y = 6\n    x = 26 - y\n    \n    result = (x, y)\n    \n    return result\n```",
    "code": "def simple_math_problem() -> tuple:\n    \"\"\"\n    The difference between a number and twice another number is 8. The sum of the numbers is 26. Find the numbers.\n    \"\"\"\n    # Let the first number be x and the second number be y\n    # According to the problem:\n    # x - 2y = 8\n    # x + y = 26\n    \n    # From the second equation: x = 26 - y\n    # Substitute x in the first equation:\n    # (26 - y) - 2y = 8\n    # 26 - 3y = 8\n    # -3y = 8 - 26\n    # -3y = -18\n    # y = 6\n    \n    y = 6\n    x = 26 - y\n    \n    result = (x, y)\n    \n    return result",
    "result": [
      20,
      6
    ]
  },
  {
    "index": 65,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    In a school, there are 300 students and 30 teachers. If there is an average of 25 students in each classroom, how many classrooms are there?\n    \"\"\"\n    total_students = 300\n    average_students_per_classroom = 25\n    # Number of classrooms needed to accommodate all students\n    classrooms = total_students / average_students_per_classroom\n    # Since classrooms must be whole, round up if necessary\n    import math\n    result = math.ceil(classrooms)\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    In a school, there are 300 students and 30 teachers. If there is an average of 25 students in each classroom, how many classrooms are there?\n    \"\"\"\n    total_students = 300\n    average_students_per_classroom = 25\n    # Number of classrooms needed to accommodate all students\n    classrooms = total_students / average_students_per_classroom\n    # Since classrooms must be whole, round up if necessary\n    import math\n    result = math.ceil(classrooms)\n\n    return result",
    "result": 12
  },
  {
    "index": 66,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If a train travels at a speed of 60 miles per hour and travels for 3 hours, how far does it travel?\n    \"\"\"\n    speed_mph = 60\n    time_hours = 3\n    distance = speed_mph * time_hours\n    result = distance\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a train travels at a speed of 60 miles per hour and travels for 3 hours, how far does it travel?\n    \"\"\"\n    speed_mph = 60\n    time_hours = 3\n    distance = speed_mph * time_hours\n    result = distance\n\n    return result",
    "result": 180
  },
  {
    "index": 67,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Alex needs 19 pieces of paper and 8 pieces of ribbon to make a wreath. What is the total number of pieces that Alex needs?\n    \"\"\"\n    pieces_of_paper = 19\n    pieces_of_ribbon = 8\n    total_pieces = pieces_of_paper + pieces_of_ribbon\n    result = total_pieces\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Alex needs 19 pieces of paper and 8 pieces of ribbon to make a wreath. What is the total number of pieces that Alex needs?\n    \"\"\"\n    pieces_of_paper = 19\n    pieces_of_ribbon = 8\n    total_pieces = pieces_of_paper + pieces_of_ribbon\n    result = total_pieces\n\n    return result",
    "result": 27
  },
  {
    "index": 68,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    May has $21 and Nick has five times as much money as May. If May spends a third of her money, and Nick spends a quarter of his, how much money do they have left in total?\n    \"\"\"\n    may_money = 21\n    nick_money = 5 * may_money\n\n    may_spent = may_money / 3\n    nick_spent = nick_money / 4\n\n    may_left = may_money - may_spent\n    nick_left = nick_money - nick_spent\n\n    result = may_left + nick_left\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    May has $21 and Nick has five times as much money as May. If May spends a third of her money, and Nick spends a quarter of his, how much money do they have left in total?\n    \"\"\"\n    may_money = 21\n    nick_money = 5 * may_money\n\n    may_spent = may_money / 3\n    nick_spent = nick_money / 4\n\n    may_left = may_money - may_spent\n    nick_left = nick_money - nick_spent\n\n    result = may_left + nick_left\n\n    return result",
    "result": 92.75
  },
  {
    "index": 69,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Last month, John spent $100 on groceries, $50 on utilities and $200 on rent. This month, his groceries increase by 20%, his utilities increase by 30%, and his rent increases by $50. How much more did John pay for his expenses compared to last month?\n    \"\"\"\n    last_month_groceries = 100\n    last_month_utilities = 50\n    last_month_rent = 200\n\n    this_month_groceries = last_month_groceries * 1.20\n    this_month_utilities = last_month_utilities * 1.30\n    this_month_rent = last_month_rent + 50\n\n    last_month_total = last_month_groceries + last_month_utilities + last_month_rent\n    this_month_total = this_month_groceries + this_month_utilities + this_month_rent\n\n    result = this_month_total - last_month_total\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Last month, John spent $100 on groceries, $50 on utilities and $200 on rent. This month, his groceries increase by 20%, his utilities increase by 30%, and his rent increases by $50. How much more did John pay for his expenses compared to last month?\n    \"\"\"\n    last_month_groceries = 100\n    last_month_utilities = 50\n    last_month_rent = 200\n\n    this_month_groceries = last_month_groceries * 1.20\n    this_month_utilities = last_month_utilities * 1.30\n    this_month_rent = last_month_rent + 50\n\n    last_month_total = last_month_groceries + last_month_utilities + last_month_rent\n    this_month_total = this_month_groceries + this_month_utilities + this_month_rent\n\n    result = this_month_total - last_month_total\n\n    return result",
    "result": 85.0
  },
  {
    "index": 70,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A garden has a rectangular shape with a length of 80 meters and a width of 40 meters. Along the perimeter of the garden, there is a fence that costs 15 dollars per meter to build. Inside the garden, there are 20 square plots of land, each with a side of 4 meters, where flowers are planted. Each plot costs 5 dollars to maintain per month. How much does it cost to build and maintain the garden for one month?\n    \"\"\"\n    length = 80\n    width = 40\n    fence_cost_per_meter = 15\n    number_of_plots = 20\n    side_of_plot = 4\n    maintenance_cost_per_plot = 5\n\n    # Calculate perimeter of the garden\n    perimeter = 2 * (length + width)\n\n    # Calculate total fence cost\n    total_fence_cost = perimeter * fence_cost_per_meter\n\n    # Calculate total maintenance cost for all plots\n    total_maintenance_cost = number_of_plots * maintenance_cost_per_plot\n\n    # Total cost = fence building cost + maintenance cost for one month\n    result = total_fence_cost + total_maintenance_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A garden has a rectangular shape with a length of 80 meters and a width of 40 meters. Along the perimeter of the garden, there is a fence that costs 15 dollars per meter to build. Inside the garden, there are 20 square plots of land, each with a side of 4 meters, where flowers are planted. Each plot costs 5 dollars to maintain per month. How much does it cost to build and maintain the garden for one month?\n    \"\"\"\n    length = 80\n    width = 40\n    fence_cost_per_meter = 15\n    number_of_plots = 20\n    side_of_plot = 4\n    maintenance_cost_per_plot = 5\n\n    # Calculate perimeter of the garden\n    perimeter = 2 * (length + width)\n\n    # Calculate total fence cost\n    total_fence_cost = perimeter * fence_cost_per_meter\n\n    # Calculate total maintenance cost for all plots\n    total_maintenance_cost = number_of_plots * maintenance_cost_per_plot\n\n    # Total cost = fence building cost + maintenance cost for one month\n    result = total_fence_cost + total_maintenance_cost\n\n    return result",
    "result": 3700
  },
  {
    "index": 71,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jessica hired a gardener who charged $80 for a day's work of 6 hours. She also paid for 3 hours of tree trimming that cost 5 times as much as gardening. Apart from that, Jessica spent $500 on plants and other gardening equipment. What was the total cost of Jessica's gardening project?\n    \"\"\"\n    gardener_daily_charge = 80          # $80 for 6 hours of gardening\n    gardening_hours = 6\n    tree_trimming_hours = 3\n    \n    # Hourly rate for gardening\n    gardening_hourly_rate = gardener_daily_charge / gardening_hours\n    \n    # Tree trimming hourly rate is 5 times the gardening hourly rate\n    tree_trimming_hourly_rate = gardening_hourly_rate * 5\n    \n    # Cost for tree trimming\n    tree_trimming_cost = tree_trimming_hours * tree_trimming_hourly_rate\n    \n    # Plants and equipment cost\n    plants_and_equipment_cost = 500\n    \n    # Total cost\n    result = gardener_daily_charge + tree_trimming_cost + plants_and_equipment_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jessica hired a gardener who charged $80 for a day's work of 6 hours. She also paid for 3 hours of tree trimming that cost 5 times as much as gardening. Apart from that, Jessica spent $500 on plants and other gardening equipment. What was the total cost of Jessica's gardening project?\n    \"\"\"\n    gardener_daily_charge = 80          # $80 for 6 hours of gardening\n    gardening_hours = 6\n    tree_trimming_hours = 3\n    \n    # Hourly rate for gardening\n    gardening_hourly_rate = gardener_daily_charge / gardening_hours\n    \n    # Tree trimming hourly rate is 5 times the gardening hourly rate\n    tree_trimming_hourly_rate = gardening_hourly_rate * 5\n    \n    # Cost for tree trimming\n    tree_trimming_cost = tree_trimming_hours * tree_trimming_hourly_rate\n    \n    # Plants and equipment cost\n    plants_and_equipment_cost = 500\n    \n    # Total cost\n    result = gardener_daily_charge + tree_trimming_cost + plants_and_equipment_cost\n\n    return result",
    "result": 780.0
  },
  {
    "index": 72,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    If there are 20 people at a party and each person talks to 4 new people, how many people did they all talk to in total?\n    \"\"\"\n    total_people = 20\n    new_people_talked_per_person = 4\n    total_new_people_talked_to = total_people * new_people_talked_per_person\n    result = total_new_people_talked_to\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    If there are 20 people at a party and each person talks to 4 new people, how many people did they all talk to in total?\n    \"\"\"\n    total_people = 20\n    new_people_talked_per_person = 4\n    total_new_people_talked_to = total_people * new_people_talked_per_person\n    result = total_new_people_talked_to\n\n    return result",
    "result": 80
  },
  {
    "index": 73,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Karen is organizing a charity event. She needs to print 100 flyers and 200 tickets. Each flyer costs $0.25 to print, and each ticket costs $0.50. How much will Karen spend on printing flyers and tickets?\n    \"\"\"\n    flyers_count = 100\n    tickets_count = 200\n    flyer_cost = 0.25\n    ticket_cost = 0.50\n\n    total_flyer_cost = flyers_count * flyer_cost\n    total_ticket_cost = tickets_count * ticket_cost\n    result = total_flyer_cost + total_ticket_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Karen is organizing a charity event. She needs to print 100 flyers and 200 tickets. Each flyer costs $0.25 to print, and each ticket costs $0.50. How much will Karen spend on printing flyers and tickets?\n    \"\"\"\n    flyers_count = 100\n    tickets_count = 200\n    flyer_cost = 0.25\n    ticket_cost = 0.50\n\n    total_flyer_cost = flyers_count * flyer_cost\n    total_ticket_cost = tickets_count * ticket_cost\n    result = total_flyer_cost + total_ticket_cost\n\n    return result",
    "result": 125.0
  },
  {
    "index": 74,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If Tom wants to save up $12,000 to go on a round-the-world trip in four years, how much money does he need to save each month? Assume that he earns no interest on his savings.\n    \"\"\"\n    total_savings_goal = 12000\n    years = 4\n    months_per_year = 12\n    total_months = years * months_per_year\n    monthly_savings = total_savings_goal / total_months\n    result = monthly_savings\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If Tom wants to save up $12,000 to go on a round-the-world trip in four years, how much money does he need to save each month? Assume that he earns no interest on his savings.\n    \"\"\"\n    total_savings_goal = 12000\n    years = 4\n    months_per_year = 12\n    total_months = years * months_per_year\n    monthly_savings = total_savings_goal / total_months\n    result = monthly_savings\n\n    return result",
    "result": 250.0
  },
  {
    "index": 75,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    A company has 50 employees and wants to divide them into 5 teams with the same number of employees in each team. How many employees will be in each team?\n    \"\"\"\n    total_employees = 50\n    number_of_teams = 5\n    employees_per_team = total_employees // number_of_teams\n    result = employees_per_team\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A company has 50 employees and wants to divide them into 5 teams with the same number of employees in each team. How many employees will be in each team?\n    \"\"\"\n    total_employees = 50\n    number_of_teams = 5\n    employees_per_team = total_employees // number_of_teams\n    result = employees_per_team\n\n    return result",
    "result": 10
  },
  {
    "index": 76,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    The Tigers volleyball team scored a total of 567 points in 7 games. Some players combined for 301 points. Maria, Emily, and Sophia scored the rest equally. How many points did Emily score?\n    \"\"\"\n    total_points = 567\n    some_players_points = 301\n    remaining_points = total_points - some_players_points\n    number_of_players = 3  # Maria, Emily, Sophia\n    points_per_player = remaining_points / number_of_players\n    result = points_per_player  # points Emily scored\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The Tigers volleyball team scored a total of 567 points in 7 games. Some players combined for 301 points. Maria, Emily, and Sophia scored the rest equally. How many points did Emily score?\n    \"\"\"\n    total_points = 567\n    some_players_points = 301\n    remaining_points = total_points - some_players_points\n    number_of_players = 3  # Maria, Emily, Sophia\n    points_per_player = remaining_points / number_of_players\n    result = points_per_player  # points Emily scored\n    \n    return result",
    "result": 88.66666666666667
  },
  {
    "index": 77,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Maria is saving up for a trip to Europe. She sets aside $25 every week for 10 weeks, and receives a bonus from work of $100. How much money did she save in total?\n    \"\"\"\n    weekly_savings = 25\n    number_of_weeks = 10\n    bonus = 100\n    total_savings = weekly_savings * number_of_weeks + bonus\n    result = total_savings\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Maria is saving up for a trip to Europe. She sets aside $25 every week for 10 weeks, and receives a bonus from work of $100. How much money did she save in total?\n    \"\"\"\n    weekly_savings = 25\n    number_of_weeks = 10\n    bonus = 100\n    total_savings = weekly_savings * number_of_weeks + bonus\n    result = total_savings\n\n    return result",
    "result": 350
  },
  {
    "index": 78,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In a factory, 30 workers make a car chassis in one day and then assemble the car on another day. The distance between the parts production site and the assembly shop is 20 meters. What is the total distance covered by the workers in the two days?\n    \"\"\"\n    number_of_workers = 30\n    distance_one_way = 20  # meters\n    # Each worker travels from production site to assembly shop in the first day (making chassis),\n    # and again the next day (assembling the car).\n    # Assume they travel one way each day (since only distance between sites is given).\n    # So total distance per worker is 2 times the distance\n    distance_per_worker_two_days = 2 * distance_one_way\n    total_distance = number_of_workers * distance_per_worker_two_days\n    \n    result = total_distance\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In a factory, 30 workers make a car chassis in one day and then assemble the car on another day. The distance between the parts production site and the assembly shop is 20 meters. What is the total distance covered by the workers in the two days?\n    \"\"\"\n    number_of_workers = 30\n    distance_one_way = 20  # meters\n    # Each worker travels from production site to assembly shop in the first day (making chassis),\n    # and again the next day (assembling the car).\n    # Assume they travel one way each day (since only distance between sites is given).\n    # So total distance per worker is 2 times the distance\n    distance_per_worker_two_days = 2 * distance_one_way\n    total_distance = number_of_workers * distance_per_worker_two_days\n    \n    result = total_distance\n    return result",
    "result": 1200
  },
  {
    "index": 79,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Sam has 15 stickers of cats, 12 stickers of dogs, and 9 stickers of birds. He wants to make albums of stickers with 3 stickers of each animal on each page. How many pages can he make in total?\n    \"\"\"\n    cat_stickers = 15\n    dog_stickers = 12\n    bird_stickers = 9\n\n    stickers_per_animal_per_page = 3\n\n    pages_from_cats = cat_stickers // stickers_per_animal_per_page\n    pages_from_dogs = dog_stickers // stickers_per_animal_per_page\n    pages_from_birds = bird_stickers // stickers_per_animal_per_page\n\n    # The number of pages he can make is limited by the animal he has the least number of full sets for\n    result = min(pages_from_cats, pages_from_dogs, pages_from_birds)\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Sam has 15 stickers of cats, 12 stickers of dogs, and 9 stickers of birds. He wants to make albums of stickers with 3 stickers of each animal on each page. How many pages can he make in total?\n    \"\"\"\n    cat_stickers = 15\n    dog_stickers = 12\n    bird_stickers = 9\n\n    stickers_per_animal_per_page = 3\n\n    pages_from_cats = cat_stickers // stickers_per_animal_per_page\n    pages_from_dogs = dog_stickers // stickers_per_animal_per_page\n    pages_from_birds = bird_stickers // stickers_per_animal_per_page\n\n    # The number of pages he can make is limited by the animal he has the least number of full sets for\n    result = min(pages_from_cats, pages_from_dogs, pages_from_birds)\n\n    return result",
    "result": 3
  },
  {
    "index": 80,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    John bought 60 pencils. After writing for a week, he had only 20 pencils left. \n    If he wrote the same number of pages each day, how many pencils did he use in four days?\n    \"\"\"\n    pencils_bought = 60\n    pencils_left_after_week = 20\n    days_in_a_week = 7\n    \n    # Calculate pencils used in one week\n    pencils_used_in_week = pencils_bought - pencils_left_after_week\n    \n    # Calculate pencils used per day (same amount each day)\n    pencils_used_per_day = pencils_used_in_week / days_in_a_week\n    \n    # Calculate pencils used in four days\n    pencils_used_in_four_days = pencils_used_per_day * 4\n    \n    result = int(pencils_used_in_four_days)\n    \n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    John bought 60 pencils. After writing for a week, he had only 20 pencils left. \n    If he wrote the same number of pages each day, how many pencils did he use in four days?\n    \"\"\"\n    pencils_bought = 60\n    pencils_left_after_week = 20\n    days_in_a_week = 7\n    \n    # Calculate pencils used in one week\n    pencils_used_in_week = pencils_bought - pencils_left_after_week\n    \n    # Calculate pencils used per day (same amount each day)\n    pencils_used_per_day = pencils_used_in_week / days_in_a_week\n    \n    # Calculate pencils used in four days\n    pencils_used_in_four_days = pencils_used_per_day * 4\n    \n    result = int(pencils_used_in_four_days)\n    \n    return result",
    "result": 22
  },
  {
    "index": 81,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Tracy has nine envelopes with fourteen postage stamps in each envelope. Her dad gave her eight more envelopes with seven postage stamps in each envelope. If she gives 154 stamps to her pen pals, how many stamps does she have left?\n    \"\"\"\n    envelopes_initial = 9\n    stamps_per_envelope_initial = 14\n    envelopes_added = 8\n    stamps_per_envelope_added = 7\n    stamps_given_away = 154\n\n    stamps_initial = envelopes_initial * stamps_per_envelope_initial\n    stamps_added = envelopes_added * stamps_per_envelope_added\n    total_stamps = stamps_initial + stamps_added\n    stamps_left = total_stamps - stamps_given_away\n    result = stamps_left\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Tracy has nine envelopes with fourteen postage stamps in each envelope. Her dad gave her eight more envelopes with seven postage stamps in each envelope. If she gives 154 stamps to her pen pals, how many stamps does she have left?\n    \"\"\"\n    envelopes_initial = 9\n    stamps_per_envelope_initial = 14\n    envelopes_added = 8\n    stamps_per_envelope_added = 7\n    stamps_given_away = 154\n\n    stamps_initial = envelopes_initial * stamps_per_envelope_initial\n    stamps_added = envelopes_added * stamps_per_envelope_added\n    total_stamps = stamps_initial + stamps_added\n    stamps_left = total_stamps - stamps_given_away\n    result = stamps_left\n\n    return result",
    "result": 28
  },
  {
    "index": 82,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If a bike is sold for $65 reduced from its original price of $85, what % is the discount?\n    \"\"\"\n    original_price = 85\n    reduced_price = 65\n    discount_amount = original_price - reduced_price\n    discount_percentage = (discount_amount / original_price) * 100\n    result = discount_percentage\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a bike is sold for $65 reduced from its original price of $85, what % is the discount?\n    \"\"\"\n    original_price = 85\n    reduced_price = 65\n    discount_amount = original_price - reduced_price\n    discount_percentage = (discount_amount / original_price) * 100\n    result = discount_percentage\n\n    return result",
    "result": 23.52941176470588
  },
  {
    "index": 83,
    "response": "```python\ndef simple_math_problem() -> tuple:\n    \"\"\"\n    Jack has $8500. He spends $2500 on a trip and then spends three-quarters of what's left on a new phone. Jack then saves a fifth of what he has left. How much money does he have left? Sara has 14 nickels and 3 quarters. She buys 2 packs of gum for 6 nickels each and 1 pencil for 7 nickels. How much money, in cents, does she have left?\n    \"\"\"\n    # Jack's part\n    jack_total = 8500\n    jack_trip = 2500\n    jack_after_trip = jack_total - jack_trip\n\n    jack_phone_spent = (3/4) * jack_after_trip\n    jack_after_phone = jack_after_trip - jack_phone_spent\n\n    jack_saved = (1/5) * jack_after_phone\n    jack_left = jack_after_phone - jack_saved\n\n    # Sara's part\n    sara_nickels = 14\n    sara_quarters = 3\n    sara_total_cents = sara_nickels * 5 + sara_quarters * 25\n\n    gum_cost_nickels_each = 6\n    gum_packs = 2\n    pencil_cost_nickels = 7\n\n    gum_cost_cents = gum_cost_nickels_each * 5 * gum_packs\n    pencil_cost_cents = pencil_cost_nickels * 5\n\n    sara_spent = gum_cost_cents + pencil_cost_cents\n    sara_left = sara_total_cents - sara_spent\n\n    result = (jack_left, sara_left)\n\n    return result\n```",
    "code": "def simple_math_problem() -> tuple:\n    \"\"\"\n    Jack has $8500. He spends $2500 on a trip and then spends three-quarters of what's left on a new phone. Jack then saves a fifth of what he has left. How much money does he have left? Sara has 14 nickels and 3 quarters. She buys 2 packs of gum for 6 nickels each and 1 pencil for 7 nickels. How much money, in cents, does she have left?\n    \"\"\"\n    # Jack's part\n    jack_total = 8500\n    jack_trip = 2500\n    jack_after_trip = jack_total - jack_trip\n\n    jack_phone_spent = (3/4) * jack_after_trip\n    jack_after_phone = jack_after_trip - jack_phone_spent\n\n    jack_saved = (1/5) * jack_after_phone\n    jack_left = jack_after_phone - jack_saved\n\n    # Sara's part\n    sara_nickels = 14\n    sara_quarters = 3\n    sara_total_cents = sara_nickels * 5 + sara_quarters * 25\n\n    gum_cost_nickels_each = 6\n    gum_packs = 2\n    pencil_cost_nickels = 7\n\n    gum_cost_cents = gum_cost_nickels_each * 5 * gum_packs\n    pencil_cost_cents = pencil_cost_nickels * 5\n\n    sara_spent = gum_cost_cents + pencil_cost_cents\n    sara_left = sara_total_cents - sara_spent\n\n    result = (jack_left, sara_left)\n\n    return result",
    "result": [
      1200.0,
      50
    ]
  },
  {
    "index": 84,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A class takes a test that has a total of 30 questions. If a student gets 24 questions correct, what percent of the test did the student get correct?\n    \"\"\"\n    total_questions = 30\n    questions_correct = 24\n    fraction_correct = questions_correct / total_questions\n    percent_correct = fraction_correct * 100\n    result = percent_correct\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A class takes a test that has a total of 30 questions. If a student gets 24 questions correct, what percent of the test did the student get correct?\n    \"\"\"\n    total_questions = 30\n    questions_correct = 24\n    fraction_correct = questions_correct / total_questions\n    percent_correct = fraction_correct * 100\n    result = percent_correct\n\n    return result",
    "result": 80.0
  },
  {
    "index": 85,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    At the library, Tom read 8 books in total. He read twice as many books on Monday as the books he read on Tuesday, and four times as many books on Wednesday. How many books did Tom read on Monday?\n    \"\"\"\n    total_books = 8\n    # Let books_on_tuesday = x\n    # books_on_monday = 2 * x\n    # books_on_wednesday = 4 * x\n    # total_books = books_on_monday + books_on_tuesday + books_on_wednesday\n    # 8 = 2x + x +4x = 7x -> x = 8 / 7\n    books_on_tuesday = total_books / 7\n    books_on_monday = 2 * books_on_tuesday\n    # books_on_wednesday = 4 * books_on_tuesday  # not needed for result, but calculated if needed\n\n    result = int(books_on_monday)\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    At the library, Tom read 8 books in total. He read twice as many books on Monday as the books he read on Tuesday, and four times as many books on Wednesday. How many books did Tom read on Monday?\n    \"\"\"\n    total_books = 8\n    # Let books_on_tuesday = x\n    # books_on_monday = 2 * x\n    # books_on_wednesday = 4 * x\n    # total_books = books_on_monday + books_on_tuesday + books_on_wednesday\n    # 8 = 2x + x +4x = 7x -> x = 8 / 7\n    books_on_tuesday = total_books / 7\n    books_on_monday = 2 * books_on_tuesday\n    # books_on_wednesday = 4 * books_on_tuesday  # not needed for result, but calculated if needed\n\n    result = int(books_on_monday)\n    return result",
    "result": 2
  },
  {
    "index": 86,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A pond has a capacity of 3,000 L and is currently filled with 2,400 L of water. It is filled to 80% of its capacity. How much water must be added to reach full capacity?\n    \"\"\"\n    pond_capacity = 3000.0\n    current_volume = 2400.0\n    filled_percentage = 0.80\n\n    # The current volume is 80% of the pond capacity, which matches given data\n    # Water needed to fill to capacity is total capacity minus current volume\n    water_to_add = pond_capacity - current_volume\n\n    result = water_to_add\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A pond has a capacity of 3,000 L and is currently filled with 2,400 L of water. It is filled to 80% of its capacity. How much water must be added to reach full capacity?\n    \"\"\"\n    pond_capacity = 3000.0\n    current_volume = 2400.0\n    filled_percentage = 0.80\n\n    # The current volume is 80% of the pond capacity, which matches given data\n    # Water needed to fill to capacity is total capacity minus current volume\n    water_to_add = pond_capacity - current_volume\n\n    result = water_to_add\n    return result",
    "result": 600.0
  },
  {
    "index": 87,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Brian spends $60 for groceries every week, and $30 for a cleaning service every two weeks. How much does he spend in a year for groceries and cleaning service?\n    \"\"\"\n    groceries_per_week = 60\n    cleaning_per_two_weeks = 30\n    weeks_in_year = 52\n    two_week_periods_in_year = weeks_in_year / 2\n\n    total_groceries = groceries_per_week * weeks_in_year\n    total_cleaning = cleaning_per_two_weeks * two_week_periods_in_year\n\n    result = total_groceries + total_cleaning\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Brian spends $60 for groceries every week, and $30 for a cleaning service every two weeks. How much does he spend in a year for groceries and cleaning service?\n    \"\"\"\n    groceries_per_week = 60\n    cleaning_per_two_weeks = 30\n    weeks_in_year = 52\n    two_week_periods_in_year = weeks_in_year / 2\n\n    total_groceries = groceries_per_week * weeks_in_year\n    total_cleaning = cleaning_per_two_weeks * two_week_periods_in_year\n\n    result = total_groceries + total_cleaning\n\n    return result",
    "result": 3900.0
  },
  {
    "index": 88,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    A box can hold a maximum of 500 balls. Yesterday, the box had 20 balls in it. Half of the balls are green and the other half are blue. Today, 100 more blue balls were added. How many more green balls can be added to the box so it reaches its maximum capacity?\n    \"\"\"\n    max_capacity = 500\n    balls_yesterday = 20\n    green_balls_yesterday = balls_yesterday // 2\n    blue_balls_yesterday = balls_yesterday // 2\n    blue_balls_added_today = 100\n    total_balls_now = balls_yesterday + blue_balls_added_today\n    remaining_capacity = max_capacity - total_balls_now\n    result = remaining_capacity  # all remaining can be green balls\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A box can hold a maximum of 500 balls. Yesterday, the box had 20 balls in it. Half of the balls are green and the other half are blue. Today, 100 more blue balls were added. How many more green balls can be added to the box so it reaches its maximum capacity?\n    \"\"\"\n    max_capacity = 500\n    balls_yesterday = 20\n    green_balls_yesterday = balls_yesterday // 2\n    blue_balls_yesterday = balls_yesterday // 2\n    blue_balls_added_today = 100\n    total_balls_now = balls_yesterday + blue_balls_added_today\n    remaining_capacity = max_capacity - total_balls_now\n    result = remaining_capacity  # all remaining can be green balls\n\n    return result",
    "result": 380
  },
  {
    "index": 89,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Tyler has two collections of stamps. In the first collection, he has 50 stamps and 10% of them are rare. In the second collection, he has 75 stamps and 1/3 of them are rare. What percentage of all the stamps he has are rare?\n    \"\"\"\n    first_collection_total = 50\n    first_collection_rare_percentage = 10 / 100  # 10%\n    first_collection_rare = first_collection_total * first_collection_rare_percentage\n\n    second_collection_total = 75\n    second_collection_rare_fraction = 1 / 3\n    second_collection_rare = second_collection_total * second_collection_rare_fraction\n\n    total_stamps = first_collection_total + second_collection_total\n    total_rare_stamps = first_collection_rare + second_collection_rare\n\n    result = (total_rare_stamps / total_stamps) * 100\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Tyler has two collections of stamps. In the first collection, he has 50 stamps and 10% of them are rare. In the second collection, he has 75 stamps and 1/3 of them are rare. What percentage of all the stamps he has are rare?\n    \"\"\"\n    first_collection_total = 50\n    first_collection_rare_percentage = 10 / 100  # 10%\n    first_collection_rare = first_collection_total * first_collection_rare_percentage\n\n    second_collection_total = 75\n    second_collection_rare_fraction = 1 / 3\n    second_collection_rare = second_collection_total * second_collection_rare_fraction\n\n    total_stamps = first_collection_total + second_collection_total\n    total_rare_stamps = first_collection_rare + second_collection_rare\n\n    result = (total_rare_stamps / total_stamps) * 100\n\n    return result",
    "result": 24.0
  },
  {
    "index": 90,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    John is 15 years older than Amy. 4 years ago, the total of their ages was 30. What is John's current age?\n    \"\"\"\n    # Let Amy's current age be amy_current_age\n    # Then John's current age is 15 years older than Amy's\n    # 4 years ago, Amy's age was amy_current_age - 4\n    # 4 years ago, John's age was (amy_current_age + 15) - 4\n    # The sum of their ages 4 years ago was 30:\n    # (amy_current_age - 4) + (amy_current_age + 15 - 4) = 30\n    # Simplify the equation:\n    # (amy_current_age - 4) + (amy_current_age + 11) = 30\n    # 2 * amy_current_age + 7 = 30\n    # 2 * amy_current_age = 23\n    # amy_current_age = 11.5 (but age should be int, so let's keep float)\n\n    # Calculate Amy's age\n    amy_current_age = 23 / 2\n    \n    # Calculate John's current age\n    john_current_age = amy_current_age + 15\n    \n    result = int(john_current_age)\n    \n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    John is 15 years older than Amy. 4 years ago, the total of their ages was 30. What is John's current age?\n    \"\"\"\n    # Let Amy's current age be amy_current_age\n    # Then John's current age is 15 years older than Amy's\n    # 4 years ago, Amy's age was amy_current_age - 4\n    # 4 years ago, John's age was (amy_current_age + 15) - 4\n    # The sum of their ages 4 years ago was 30:\n    # (amy_current_age - 4) + (amy_current_age + 15 - 4) = 30\n    # Simplify the equation:\n    # (amy_current_age - 4) + (amy_current_age + 11) = 30\n    # 2 * amy_current_age + 7 = 30\n    # 2 * amy_current_age = 23\n    # amy_current_age = 11.5 (but age should be int, so let's keep float)\n\n    # Calculate Amy's age\n    amy_current_age = 23 / 2\n    \n    # Calculate John's current age\n    john_current_age = amy_current_age + 15\n    \n    result = int(john_current_age)\n    \n    return result",
    "result": 26
  },
  {
    "index": 91,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    A beach resort has 10 bungalows with 5 rooms each, except for the president's bungalow which has 20 rooms. How many rooms are there in the beach resort altogether?\n    \"\"\"\n    total_bungalows = 10\n    rooms_per_regular_bungalow = 5\n    rooms_president_bungalow = 20\n\n    # There is 1 president's bungalow\n    regular_bungalows = total_bungalows - 1\n\n    rooms_in_regular_bungalows = regular_bungalows * rooms_per_regular_bungalow\n    total_rooms = rooms_in_regular_bungalows + rooms_president_bungalow\n\n    result = total_rooms\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A beach resort has 10 bungalows with 5 rooms each, except for the president's bungalow which has 20 rooms. How many rooms are there in the beach resort altogether?\n    \"\"\"\n    total_bungalows = 10\n    rooms_per_regular_bungalow = 5\n    rooms_president_bungalow = 20\n\n    # There is 1 president's bungalow\n    regular_bungalows = total_bungalows - 1\n\n    rooms_in_regular_bungalows = regular_bungalows * rooms_per_regular_bungalow\n    total_rooms = rooms_in_regular_bungalows + rooms_president_bungalow\n\n    result = total_rooms\n    return result",
    "result": 65
  },
  {
    "index": 92,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Hannah has 10 books. Lily has 3 times as many books as Hannah. Sarah has 1/6 as many books as Lily. How many books does Sarah have?\n    \"\"\"\n    hannah_books = 10\n    lily_books = 3 * hannah_books\n    sarah_books = (1/6) * lily_books\n    result = sarah_books\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Hannah has 10 books. Lily has 3 times as many books as Hannah. Sarah has 1/6 as many books as Lily. How many books does Sarah have?\n    \"\"\"\n    hannah_books = 10\n    lily_books = 3 * hannah_books\n    sarah_books = (1/6) * lily_books\n    result = sarah_books\n\n    return result",
    "result": 5.0
  },
  {
    "index": 93,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car travels at a speed of 60 miles per hour. How many hours does it take to travel 240 miles?\n    \"\"\"\n    speed_mph = 60\n    distance_miles = 240\n    time_hours = distance_miles / speed_mph\n    result = time_hours\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car travels at a speed of 60 miles per hour. How many hours does it take to travel 240 miles?\n    \"\"\"\n    speed_mph = 60\n    distance_miles = 240\n    time_hours = distance_miles / speed_mph\n    result = time_hours\n\n    return result",
    "result": 4.0
  },
  {
    "index": 94,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    An octopus has 6 tentacles. If a group of octopuses has 12 more octopuses than three times as many tentacles as a single octopus has, what is the total number of octopus tentacles in this group of octopuses?\n    \"\"\"\n    tentacles_per_octopus = 6\n    octopuses_in_group = 3 * tentacles_per_octopus + 12  # 3 * 6 + 12 = 18 + 12 = 30\n    total_tentacles = octopuses_in_group * tentacles_per_octopus  # 30 * 6 = 180\n    result = total_tentacles\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    An octopus has 6 tentacles. If a group of octopuses has 12 more octopuses than three times as many tentacles as a single octopus has, what is the total number of octopus tentacles in this group of octopuses?\n    \"\"\"\n    tentacles_per_octopus = 6\n    octopuses_in_group = 3 * tentacles_per_octopus + 12  # 3 * 6 + 12 = 18 + 12 = 30\n    total_tentacles = octopuses_in_group * tentacles_per_octopus  # 30 * 6 = 180\n    result = total_tentacles\n\n    return result",
    "result": 180
  },
  {
    "index": 95,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A carpenter is making a wooden table for a customer. The table has a rectangular top and four legs. The dimensions of the top are 1.5 meters by 0.8 meters and the height of the legs are 0.7 meters. The wood costs $20 per cubic meter and the carpenter charges $50 for labor. How much will the table cost in total?\n    \"\"\"\n    # Dimensions of the table top\n    top_length = 1.5  # meters\n    top_width = 0.8   # meters\n    top_thickness = 0.03  # meters (assuming 3 cm thick top for wood volume calculation)\n    \n    # Dimensions of legs\n    leg_height = 0.7  # meters\n    leg_square_side = 0.05  # meters (assuming 5 cm x 5 cm square legs)\n    number_of_legs = 4\n\n    cost_per_cubic_meter = 20  # dollars\n    labor_cost = 50  # dollars\n\n    # Calculate volume of the top\n    volume_top = top_length * top_width * top_thickness  # cubic meters\n\n    # Calculate volume of one leg\n    volume_leg = leg_square_side * leg_square_side * leg_height  # cubic meters\n\n    # Total volume of legs\n    total_volume_legs = volume_leg * number_of_legs\n\n    # Total volume of wood\n    total_volume_wood = volume_top + total_volume_legs\n\n    # Calculate cost of wood\n    cost_wood = total_volume_wood * cost_per_cubic_meter\n\n    # Total cost\n    total_cost = cost_wood + labor_cost\n\n    result = total_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A carpenter is making a wooden table for a customer. The table has a rectangular top and four legs. The dimensions of the top are 1.5 meters by 0.8 meters and the height of the legs are 0.7 meters. The wood costs $20 per cubic meter and the carpenter charges $50 for labor. How much will the table cost in total?\n    \"\"\"\n    # Dimensions of the table top\n    top_length = 1.5  # meters\n    top_width = 0.8   # meters\n    top_thickness = 0.03  # meters (assuming 3 cm thick top for wood volume calculation)\n    \n    # Dimensions of legs\n    leg_height = 0.7  # meters\n    leg_square_side = 0.05  # meters (assuming 5 cm x 5 cm square legs)\n    number_of_legs = 4\n\n    cost_per_cubic_meter = 20  # dollars\n    labor_cost = 50  # dollars\n\n    # Calculate volume of the top\n    volume_top = top_length * top_width * top_thickness  # cubic meters\n\n    # Calculate volume of one leg\n    volume_leg = leg_square_side * leg_square_side * leg_height  # cubic meters\n\n    # Total volume of legs\n    total_volume_legs = volume_leg * number_of_legs\n\n    # Total volume of wood\n    total_volume_wood = volume_top + total_volume_legs\n\n    # Calculate cost of wood\n    cost_wood = total_volume_wood * cost_per_cubic_meter\n\n    # Total cost\n    total_cost = cost_wood + labor_cost\n\n    result = total_cost\n\n    return result",
    "result": 50.86
  },
  {
    "index": 96,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A store has 150 shirts on sale for 25% off. If the original price of a shirt is $40, how much money will the store make from selling all 150 shirts?\n    \"\"\"\n    total_shirts = 150\n    original_price_per_shirt = 40\n    discount_percent = 25\n\n    discount_amount_per_shirt = original_price_per_shirt * (discount_percent / 100)\n    sale_price_per_shirt = original_price_per_shirt - discount_amount_per_shirt\n    total_money_made = total_shirts * sale_price_per_shirt\n    result = total_money_made\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A store has 150 shirts on sale for 25% off. If the original price of a shirt is $40, how much money will the store make from selling all 150 shirts?\n    \"\"\"\n    total_shirts = 150\n    original_price_per_shirt = 40\n    discount_percent = 25\n\n    discount_amount_per_shirt = original_price_per_shirt * (discount_percent / 100)\n    sale_price_per_shirt = original_price_per_shirt - discount_amount_per_shirt\n    total_money_made = total_shirts * sale_price_per_shirt\n    result = total_money_made\n\n    return result",
    "result": 4500.0
  },
  {
    "index": 97,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Emily is a receptionist. Typically, she receives 50 phone calls every day. One-fourth of those calls are for the CEO. Half of the CEO's calls are meeting requests. Emily also receives emails, which make up one-third of her daily work. Twenty percent of the emails are spam. How many meeting requests does Emily receive on average every day?\n    \"\"\"\n    total_calls = 50\n    calls_for_CEO = total_calls * (1/4)\n    meeting_requests = calls_for_CEO * (1/2)\n    result = meeting_requests\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Emily is a receptionist. Typically, she receives 50 phone calls every day. One-fourth of those calls are for the CEO. Half of the CEO's calls are meeting requests. Emily also receives emails, which make up one-third of her daily work. Twenty percent of the emails are spam. How many meeting requests does Emily receive on average every day?\n    \"\"\"\n    total_calls = 50\n    calls_for_CEO = total_calls * (1/4)\n    meeting_requests = calls_for_CEO * (1/2)\n    result = meeting_requests\n\n    return result",
    "result": 6.25
  },
  {
    "index": 98,
    "response": "```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    A baker makes 6 loaves of bread in one hour; a pastry chef makes 12 cupcakes in one hour; a pizza maker makes 4 pizzas in one hour; a sandwich maker makes 8 sandwiches in one hour. If the baker, the pastry chef, the pizza maker, and the sandwich maker worked for 3 hours each, how many pieces of food in total did they make?\n    \"\"\"\n    baker_rate = 6  # loaves of bread per hour\n    pastry_chef_rate = 12  # cupcakes per hour\n    pizza_maker_rate = 4  # pizzas per hour\n    sandwich_maker_rate = 8  # sandwiches per hour\n    hours_worked = 3\n\n    baker_total = baker_rate * hours_worked\n    pastry_chef_total = pastry_chef_rate * hours_worked\n    pizza_maker_total = pizza_maker_rate * hours_worked\n    sandwich_maker_total = sandwich_maker_rate * hours_worked\n\n    total_pieces_of_food = baker_total + pastry_chef_total + pizza_maker_total + sandwich_maker_total\n\n    result = total_pieces_of_food\n\n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A baker makes 6 loaves of bread in one hour; a pastry chef makes 12 cupcakes in one hour; a pizza maker makes 4 pizzas in one hour; a sandwich maker makes 8 sandwiches in one hour. If the baker, the pastry chef, the pizza maker, and the sandwich maker worked for 3 hours each, how many pieces of food in total did they make?\n    \"\"\"\n    baker_rate = 6  # loaves of bread per hour\n    pastry_chef_rate = 12  # cupcakes per hour\n    pizza_maker_rate = 4  # pizzas per hour\n    sandwich_maker_rate = 8  # sandwiches per hour\n    hours_worked = 3\n\n    baker_total = baker_rate * hours_worked\n    pastry_chef_total = pastry_chef_rate * hours_worked\n    pizza_maker_total = pizza_maker_rate * hours_worked\n    sandwich_maker_total = sandwich_maker_rate * hours_worked\n\n    total_pieces_of_food = baker_total + pastry_chef_total + pizza_maker_total + sandwich_maker_total\n\n    result = total_pieces_of_food\n\n    return result",
    "result": 90
  },
  {
    "index": 99,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Lily went to the grocery store and bought 15 cans of beans. When she got home, her roommate gave her another 8 cans of beans for their pantry. Lily used 2 cans to make a soup for dinner and 3 cans for a chili for lunch. When Lily's friend came over for a visit, Lily gave her half of her remaining cans of beans. How many bowls of beans and rice would Lily have for each of her next 4 dinners if she plans to divide what she has left equally?\n    \"\"\"\n    cansBought = 15\n    cansGivenByRoommate = 8\n    cansUsedForSoup = 2\n    cansUsedForChili = 3\n\n    # Total cans after purchase and roommate contribution\n    totalCans = cansBought + cansGivenByRoommate\n    \n    # Cans left after using some for soup and chili\n    cansLeftAfterMeals = totalCans - cansUsedForSoup - cansUsedForChili\n    \n    # Lily gives half of remaining cans to her friend\n    cansGivenToFriend = cansLeftAfterMeals / 2\n    \n    # Cans Lily keeps after giving half away\n    cansRemaining = cansLeftAfterMeals - cansGivenToFriend\n    \n    # Lily plans to divide what she has left equally among 4 dinners\n    bowlsPerDinner = cansRemaining / 4\n    \n    result = bowlsPerDinner\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Lily went to the grocery store and bought 15 cans of beans. When she got home, her roommate gave her another 8 cans of beans for their pantry. Lily used 2 cans to make a soup for dinner and 3 cans for a chili for lunch. When Lily's friend came over for a visit, Lily gave her half of her remaining cans of beans. How many bowls of beans and rice would Lily have for each of her next 4 dinners if she plans to divide what she has left equally?\n    \"\"\"\n    cansBought = 15\n    cansGivenByRoommate = 8\n    cansUsedForSoup = 2\n    cansUsedForChili = 3\n\n    # Total cans after purchase and roommate contribution\n    totalCans = cansBought + cansGivenByRoommate\n    \n    # Cans left after using some for soup and chili\n    cansLeftAfterMeals = totalCans - cansUsedForSoup - cansUsedForChili\n    \n    # Lily gives half of remaining cans to her friend\n    cansGivenToFriend = cansLeftAfterMeals / 2\n    \n    # Cans Lily keeps after giving half away\n    cansRemaining = cansLeftAfterMeals - cansGivenToFriend\n    \n    # Lily plans to divide what she has left equally among 4 dinners\n    bowlsPerDinner = cansRemaining / 4\n    \n    result = bowlsPerDinner\n\n    return result",
    "result": 2.25
  }
]