[
  {
    "index": 0,
    "response": "**Reasoning:**  \n1. Sophie sells 25 hoop earrings at \\$10 each, so revenue from hoops = 25 × 10 = \\$250.  \n2. She sells 10 stud earrings at \\$12 each, so revenue from studs = 10 × 12 = \\$120.  \n3. Let p be the price (in dollars) for each of the 15 dangling earrings.  \n4. She wants the *total* revenue from all three types to be \\$150.  \n   So:  \n     250 (hoops) + 120 (studs) + 15·p (dangling) = 150  \n5. Combine the known revenues: 250 + 120 = 370, so  \n     370 + 15p = 150  \n     15p = 150 − 370 = −220  \n     p = −220 / 15 ≈ −14.67  \n6. A negative price means there is no way to *reduce* the total back down to \\$150 once she’s already earned \\$370 from hoops and studs.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sophie has a collection of earrings in three types: 40 hoop earrings, 20 stud earrings, and 15 dangling earrings. She sold 25 hoop earrings for $10 each and 10 stud earrings for $12 each. What price should she set for each dangling earring to earn $150 from the whole sale?\n    \"\"\"\n    # Number sold and unit prices for hoops and studs\n    sold_hoops = 25\n    price_hoop = 10\n    sold_studs = 10\n    price_stud = 12\n\n    # Compute revenue already earned\n    revenue_hoops = sold_hoops * price_hoop\n    revenue_studs = sold_studs * price_stud\n\n    # Remaining items and target total revenue\n    num_dangling = 15\n    target_total = 150\n\n    # Solve for dangling price p in: revenue_hoops + revenue_studs + num_dangling * p = target_total\n    remaining_revenue_needed = target_total - (revenue_hoops + revenue_studs)\n    price_dangling = remaining_revenue_needed / num_dangling\n\n    return price_dangling\n```  \n# When you call simple_math_problem(), it returns -14.666666666666666,  \n# indicating no positive price can bring the total down to $150.",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sophie has a collection of earrings in three types: 40 hoop earrings, 20 stud earrings, and 15 dangling earrings. She sold 25 hoop earrings for $10 each and 10 stud earrings for $12 each. What price should she set for each dangling earring to earn $150 from the whole sale?\n    \"\"\"\n    # Number sold and unit prices for hoops and studs\n    sold_hoops = 25\n    price_hoop = 10\n    sold_studs = 10\n    price_stud = 12\n\n    # Compute revenue already earned\n    revenue_hoops = sold_hoops * price_hoop\n    revenue_studs = sold_studs * price_stud\n\n    # Remaining items and target total revenue\n    num_dangling = 15\n    target_total = 150\n\n    # Solve for dangling price p in: revenue_hoops + revenue_studs + num_dangling * p = target_total\n    remaining_revenue_needed = target_total - (revenue_hoops + revenue_studs)\n    price_dangling = remaining_revenue_needed / num_dangling\n\n    return price_dangling",
    "result": -14.666666666666666
  },
  {
    "index": 1,
    "response": "**Reasoning:**\n\n1. Let the number of students in 2008 be \\( x \\).\n2. In 2009, half the number of students attended compared to 2008.  \n   So the number in 2009 is \\( \\frac{x}{2} \\).\n3. In 2010, one-fourth as many students attended as in 2009.  \n   So the number in 2010 is \\( \\frac{1}{4} \\times \\frac{x}{2} = \\frac{x}{8} \\).\n4. We are given that there were 48 students in 2010. Therefore:  \n   \\(\\frac{x}{8} = 48\\)\n5. Solve for \\( x \\):  \n   \\( x = 48 \\times 8 = 384 \\)\n\nThus, there were 384 students in the classroom in 2008.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In 2008, there were some students in a classroom. In 2009, half the number of students attended class as compared to 2008.\n    In 2010, one-fourth as many students attended class as in 2009. If there were 48 students in class in 2010, how many\n    students attended class in 2008?\n    \"\"\"\n    # Let students_2008 be the number of students in 2008\n    # In 2009, there were half as many students:\n    # students_2009 = students_2008 / 2\n    # In 2010, there were one-fourth as many as in 2009:\n    # students_2010 = students_2009 / 4 = (students_2008 / 2) / 4 = students_2008 / 8\n    students_2010 = 48\n    \n    # Solve students_2008 / 8 = students_2010\n    students_2008 = students_2010 * 8\n    \n    result = students_2008\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In 2008, there were some students in a classroom. In 2009, half the number of students attended class as compared to 2008.\n    In 2010, one-fourth as many students attended class as in 2009. If there were 48 students in class in 2010, how many\n    students attended class in 2008?\n    \"\"\"\n    # Let students_2008 be the number of students in 2008\n    # In 2009, there were half as many students:\n    # students_2009 = students_2008 / 2\n    # In 2010, there were one-fourth as many as in 2009:\n    # students_2010 = students_2009 / 4 = (students_2008 / 2) / 4 = students_2008 / 8\n    students_2010 = 48\n    \n    # Solve students_2008 / 8 = students_2010\n    students_2008 = students_2010 * 8\n    \n    result = students_2008\n    return result",
    "result": 384
  },
  {
    "index": 2,
    "response": "**Reasoning:**\n1. The original cost of the computer is \\$1500.  \n2. The store offers a 10% discount.  \n3. A 10% discount on \\$1500 means we calculate 10% of 1500:  \n   10% of 1500 = 0.10 × 1500 = 150.  \n4. To find the sale price, subtract the discount amount from the original price:  \n   Sale price = 1500 − 150 = 1350.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    The cost of a computer is $1500. If the store offers a 10% discount, what is the sale price?\n    \"\"\"\n    original_price = 1500.0          # original cost in dollars\n    discount_rate = 0.10             # 10% discount\n    discount_amount = original_price * discount_rate   # amount subtracted\n    sale_price = original_price - discount_amount      # final sale price\n    return sale_price\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The cost of a computer is $1500. If the store offers a 10% discount, what is the sale price?\n    \"\"\"\n    original_price = 1500.0          # original cost in dollars\n    discount_rate = 0.10             # 10% discount\n    discount_amount = original_price * discount_rate   # amount subtracted\n    sale_price = original_price - discount_amount      # final sale price\n    return sale_price",
    "result": 1350.0
  },
  {
    "index": 3,
    "response": "**Reasoning:**\n1. Identify the number of notebooks Tony bought.  \n   - Tony bought 5 notebooks.  \n2. Identify the cost per notebook.  \n   - Each notebook costs \\$2.  \n3. To find the total cost, multiply the number of notebooks by the cost per notebook:  \n   - total_cost = number_of_notebooks * cost_per_notebook  \n\nCalculating:  \n- number_of_notebooks = 5  \n- cost_per_notebook = 2  \n- total_cost = 5 * 2 = 10  \n\nSo, Tony spent \\$10 in total on the notebooks.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Tony bought 5 notebooks that cost $2 each. How much did all the notebooks cost in total?\n    \"\"\"\n    # Number of notebooks Tony bought\n    number_of_notebooks = 5\n    # Cost of each notebook in dollars\n    cost_per_notebook = 2\n    # Calculate the total cost\n    total_cost = number_of_notebooks * cost_per_notebook\n    # Return the total cost as a float\n    return float(total_cost)\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Tony bought 5 notebooks that cost $2 each. How much did all the notebooks cost in total?\n    \"\"\"\n    # Number of notebooks Tony bought\n    number_of_notebooks = 5\n    # Cost of each notebook in dollars\n    cost_per_notebook = 2\n    # Calculate the total cost\n    total_cost = number_of_notebooks * cost_per_notebook\n    # Return the total cost as a float\n    return float(total_cost)",
    "result": 10.0
  },
  {
    "index": 4,
    "response": "**Reasoning:**\n1. We start with the initial value of the car: \\$8,000.  \n2. The car depreciates by 20% each year, meaning each year it retains 80% of its value.  \n3. After 1 year: value = 8000 × (1 − 0.20) = 8000 × 0.80 = 6400.  \n4. After 2 years: value = 6400 × 0.80 = 5120.  \n5. After 3 years: value = 5120 × 0.80 = 4096.  \n6. Therefore, the car’s value after 3 years will be \\$4,096.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Last year, Alex purchased a used car for $8,000. If the car's value depreciates by 20% every year, what will be the car's value after 3 years?\n    \"\"\"\n    initial_value = 8000.0\n    depreciation_rate = 0.20\n\n    # Value after each year\n    value_after_one_year = initial_value * (1 - depreciation_rate)\n    value_after_two_years = value_after_one_year * (1 - depreciation_rate)\n    value_after_three_years = value_after_two_years * (1 - depreciation_rate)\n\n    result = value_after_three_years\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Last year, Alex purchased a used car for $8,000. If the car's value depreciates by 20% every year, what will be the car's value after 3 years?\n    \"\"\"\n    initial_value = 8000.0\n    depreciation_rate = 0.20\n\n    # Value after each year\n    value_after_one_year = initial_value * (1 - depreciation_rate)\n    value_after_two_years = value_after_one_year * (1 - depreciation_rate)\n    value_after_three_years = value_after_two_years * (1 - depreciation_rate)\n\n    result = value_after_three_years\n    return result",
    "result": 4096.0
  },
  {
    "index": 5,
    "response": "**Reasoning:**\n\nLet  \n    T = the originally planned travel time (in hours),  \n    D = the planned distance to the destination (in km).\n\nFrom the first statement:\n    “A car traveling at 60 km/h arrived 4 hours later than it should have.”\n  \nIf it had gone at 60 km/h, it actually took (T + 4) hours to cover D, so  \n    D = 60·(T + 4).  (1)\n\nFrom the second statement:\n    “If the car traveled 240 km less than planned,…”\n\nThe most direct reading is that the *difference* between the distance it actually covered in the extra time and the distance it *would* have covered in the original time is 240 km.  But in fact\n\n    Distance in extra 4 h at 60 km/h = 60·4 = 240 km,\n\nso that second piece of information is exactly the same as (1) and gives no new equation.  We have only one equation, (1), for two unknowns (D and T).  Hence there is **not enough information** to determine a unique value for T.\n\nConclusion: the problem as stated has infinitely many solutions (any T > 0 and D = 60·(T+4) satisfy it), and the original time cannot be pinned down.\n\n---\n\n**Solution:**\n\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car traveling at 60 km/h arrived at its destination 4 hours later than it should have. \n    If the car traveled 240 km less than planned, what was the original time it should have taken to reach its destination?\n    \"\"\"\n    # Let T be the originally planned time and D the planned distance.\n    # From the text:\n    #    D = 60 * (T + 4)\n    # The \"240 km less than planned\" adds no new independent equation (60*4 = 240),\n    # so we cannot solve uniquely for T.\n    raise ValueError(\"Insufficient information: the original time T cannot be determined uniquely.\")\n```\n\nThis correctly reflects that the problem, as given, does not admit a single numerical answer.",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car traveling at 60 km/h arrived at its destination 4 hours later than it should have. \n    If the car traveled 240 km less than planned, what was the original time it should have taken to reach its destination?\n    \"\"\"\n    # Let T be the originally planned time and D the planned distance.\n    # From the text:\n    #    D = 60 * (T + 4)\n    # The \"240 km less than planned\" adds no new independent equation (60*4 = 240),\n    # so we cannot solve uniquely for T.\n    raise ValueError(\"Insufficient information: the original time T cannot be determined uniquely.\")",
    "result": "Success"
  },
  {
    "index": 6,
    "response": "**Reasoning:**\n1. We need a poster that is 32 inches wide in total.\n2. We have 4 rubber bands to span that total width evenly.\n3. To find how many inches of width each rubber band must cover, we divide the total width (32 inches) by the number of rubber bands (4).\n4. 32 ÷ 4 = 8 inches.\n\nSo, each rubber band needs to cover 8 inches more width.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mya's group has to make a poster that is 32 inches wide. If they have 4 rubber bands, how much more width will they need for each rubber band?\n    \"\"\"\n    total_poster_width = 32  # total width of the poster in inches\n    number_of_rubber_bands = 4  # number of rubber bands available\n\n    # Divide the total width evenly among all the rubber bands\n    width_per_band = total_poster_width / number_of_rubber_bands\n\n    result = width_per_band\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mya's group has to make a poster that is 32 inches wide. If they have 4 rubber bands, how much more width will they need for each rubber band?\n    \"\"\"\n    total_poster_width = 32  # total width of the poster in inches\n    number_of_rubber_bands = 4  # number of rubber bands available\n\n    # Divide the total width evenly among all the rubber bands\n    width_per_band = total_poster_width / number_of_rubber_bands\n\n    result = width_per_band\n    return result",
    "result": 8.0
  },
  {
    "index": 7,
    "response": "**Reasoning:**\n1. The cook needs:\n   - 12.5 pounds of vegetables\n   - 9 pounds of meat\n   - 4 quarts of milk\n2. He buys a 20 lb bag of vegetables and a 25 lb bag of meat. Those purchases cover (and exceed) the vegetable and meat requirements.\n3. The milk requirement is independent of the other purchases. He still needs to purchase the full 4 quarts of milk.\n4. Therefore, the amount of milk to purchase is simply 4 quarts.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Student: Before a cook can make a meal he needs to purchase supplies. He needs 12.5 pounds of vegetables, 9 pounds of meat, and 4 quarts of milk. If he buys a 20 pound bag of vegetables, and a 25 pound bag of meat, how much milk needs to be purchased?\n    \"\"\"\n    # Given requirements\n    required_vegetables = 12.5    # pounds\n    required_meat = 9.0           # pounds\n    required_milk_quarts = 4.0    # quarts\n\n    # Purchases made\n    purchased_vegetables = 20.0   # pounds\n    purchased_meat = 25.0         # pounds\n\n    # Calculate milk still needed\n    milk_to_purchase = required_milk_quarts\n\n    result = milk_to_purchase\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Student: Before a cook can make a meal he needs to purchase supplies. He needs 12.5 pounds of vegetables, 9 pounds of meat, and 4 quarts of milk. If he buys a 20 pound bag of vegetables, and a 25 pound bag of meat, how much milk needs to be purchased?\n    \"\"\"\n    # Given requirements\n    required_vegetables = 12.5    # pounds\n    required_meat = 9.0           # pounds\n    required_milk_quarts = 4.0    # quarts\n\n    # Purchases made\n    purchased_vegetables = 20.0   # pounds\n    purchased_meat = 25.0         # pounds\n\n    # Calculate milk still needed\n    milk_to_purchase = required_milk_quarts\n\n    result = milk_to_purchase\n    return result",
    "result": 4.0
  },
  {
    "index": 8,
    "response": "**Reasoning:**\n1. Let x represent the number of pens John has.  \n2. We know John has twice as many pens as Jane, so the equation is:  \n   x = 2 * (number of pens Jane has)  \n3. Jane has 10 pens, so substitute 10 into the equation:  \n   x = 2 * 10  \n4. Compute x:  \n   x = 20  \nTherefore, John has 20 pens.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John has twice as many pens as Jane. If Jane has 10 pens, how many pens does John have? Hint: Let x be the number of pens John has, then write an equation in terms of x and solve for x.\n    \"\"\"\n    jane_pens = 10\n    john_pens = 2 * jane_pens\n    result = float(john_pens)\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John has twice as many pens as Jane. If Jane has 10 pens, how many pens does John have? Hint: Let x be the number of pens John has, then write an equation in terms of x and solve for x.\n    \"\"\"\n    jane_pens = 10\n    john_pens = 2 * jane_pens\n    result = float(john_pens)\n    return result",
    "result": 20.0
  },
  {
    "index": 9,
    "response": "**Reasoning:**\n\n1. We have 25 water heaters.  \n2. Each heater uses 4000 watts of power per day.  \n3. So, total daily usage = 25 heaters × 4000 watts/heater = 100,000 watts per day.  \n4. November has 30 days, so monthly usage = 100,000 watts/day × 30 days = 3,000,000 watts per month.  \n5. The electricity rate is \\$0.50 per watt.  \n6. Therefore, total cost in November = 3,000,000 watts × \\$0.50/watt = \\$1,500,000.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Imagine 25 water heaters that use 4000 watts of power each day. If the electricity bill is 50 cents per power watt used, what is the costs of electricity per month in November?\n    \"\"\"\n    number_of_heaters = 25\n    daily_watt_usage_per_heater = 4000\n    cost_per_watt = 0.50\n    days_in_november = 30\n\n    # Step 1: compute total watts used per day by all heaters\n    daily_total_usage = number_of_heaters * daily_watt_usage_per_heater\n\n    # Step 2: compute total watts used in November\n    monthly_total_usage = daily_total_usage * days_in_november\n\n    # Step 3: compute total cost\n    result = monthly_total_usage * cost_per_watt\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Imagine 25 water heaters that use 4000 watts of power each day. If the electricity bill is 50 cents per power watt used, what is the costs of electricity per month in November?\n    \"\"\"\n    number_of_heaters = 25\n    daily_watt_usage_per_heater = 4000\n    cost_per_watt = 0.50\n    days_in_november = 30\n\n    # Step 1: compute total watts used per day by all heaters\n    daily_total_usage = number_of_heaters * daily_watt_usage_per_heater\n\n    # Step 2: compute total watts used in November\n    monthly_total_usage = daily_total_usage * days_in_november\n\n    # Step 3: compute total cost\n    result = monthly_total_usage * cost_per_watt\n\n    return result",
    "result": 1500000.0
  },
  {
    "index": 10,
    "response": "**Reasoning:**\n\n1. We want the total cost of Kate’s walking over 5 months.\n2. First, determine how many miles she walks each week:\n   - Mondays and Thursdays: 2 miles each → 2 + 2 = 4 miles\n   - Wednesdays and Fridays: 3 miles each → 3 + 3 = 6 miles\n   - Saturdays: 5 miles\n   - Sundays: 0 miles\n   - Total per week = 4 + 6 + 5 = 15 miles\n3. She pays \\$0.50 per mile, so weekly cost = 15 miles × \\$0.50/mile = \\$7.50.\n4. We assume each month is 4 weeks long (a common simplification in these problems), so 5 months = 5 × 4 = 20 weeks.\n5. Therefore, total cost = 20 weeks × \\$7.50/week = \\$150.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Over a span of 5 months, Kate walks 2 miles on Mondays and Thursdays, \n    3 miles on Wednesdays and Fridays, and 5 miles on Saturdays for $0.50 \n    per mile. On Sundays, she doesn't exercise. How much does she spend \n    on exercising in total?\n    \"\"\"\n    # distances per day\n    miles_monday = 2\n    miles_thursday = 2\n    miles_wednesday = 3\n    miles_friday = 3\n    miles_saturday = 5\n    miles_sunday = 0\n\n    # cost per mile\n    cost_per_mile = 0.50\n\n    # calculate total miles per week\n    weekly_miles = (\n        miles_monday +\n        miles_thursday +\n        miles_wednesday +\n        miles_friday +\n        miles_saturday +\n        miles_sunday\n    )\n\n    # cost per week\n    weekly_cost = weekly_miles * cost_per_mile\n\n    # assumption: each month has 4 weeks\n    weeks_per_month = 4\n    total_months = 5\n\n    # total cost over 5 months\n    result = weekly_cost * weeks_per_month * total_months\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Over a span of 5 months, Kate walks 2 miles on Mondays and Thursdays, \n    3 miles on Wednesdays and Fridays, and 5 miles on Saturdays for $0.50 \n    per mile. On Sundays, she doesn't exercise. How much does she spend \n    on exercising in total?\n    \"\"\"\n    # distances per day\n    miles_monday = 2\n    miles_thursday = 2\n    miles_wednesday = 3\n    miles_friday = 3\n    miles_saturday = 5\n    miles_sunday = 0\n\n    # cost per mile\n    cost_per_mile = 0.50\n\n    # calculate total miles per week\n    weekly_miles = (\n        miles_monday +\n        miles_thursday +\n        miles_wednesday +\n        miles_friday +\n        miles_saturday +\n        miles_sunday\n    )\n\n    # cost per week\n    weekly_cost = weekly_miles * cost_per_mile\n\n    # assumption: each month has 4 weeks\n    weeks_per_month = 4\n    total_months = 5\n\n    # total cost over 5 months\n    result = weekly_cost * weeks_per_month * total_months\n\n    return result",
    "result": 150.0
  },
  {
    "index": 11,
    "response": "**Reasoning:**\n1. We are told John bought 5 loaves of bread.\n2. Each loaf costs 3 dollars.\n3. To find the total amount spent, multiply the number of loaves by the cost per loaf:\n   total_spent = 5 loaves × 3 dollars/loaf = 15 dollars.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John bought 5 loaves of bread for 15 dollars. If each loaf of bread cost 3 dollars, how much money did John spend in total?\n    \"\"\"\n    number_of_loaves = 5\n    cost_per_loaf = 3\n    result = number_of_loaves * cost_per_loaf\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John bought 5 loaves of bread for 15 dollars. If each loaf of bread cost 3 dollars, how much money did John spend in total?\n    \"\"\"\n    number_of_loaves = 5\n    cost_per_loaf = 3\n    result = number_of_loaves * cost_per_loaf\n\n    return result",
    "result": 15
  },
  {
    "index": 12,
    "response": "**Reasoning:**\n\n1. We start with a total of 27 pieces of candy.\n2. The problem states that each person gets one third (1/3) of the candy.\n3. To find out how many pieces each person gets, we multiply the total number of pieces by the fraction each person receives.\n4. Calculation:  \n   pieces_per_person = total_candy * (1/3)  \n   pieces_per_person = 27 * (1/3) = 9\n\nTherefore, each person gets 9 pieces of candy.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    There are 27 pieces of candy in a jar. Each person gets 1/3 of the candy, how many pieces of candy did each person get?\n    \"\"\"\n    # Total number of candy pieces in the jar\n    total_candy = 27\n    \n    # Fraction of the candy that each person receives\n    fraction_each = 1 / 3\n    \n    # Calculate how many pieces each person gets\n    pieces_per_person = total_candy * fraction_each\n    \n    # Store the result\n    result = pieces_per_person\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 27 pieces of candy in a jar. Each person gets 1/3 of the candy, how many pieces of candy did each person get?\n    \"\"\"\n    # Total number of candy pieces in the jar\n    total_candy = 27\n    \n    # Fraction of the candy that each person receives\n    fraction_each = 1 / 3\n    \n    # Calculate how many pieces each person gets\n    pieces_per_person = total_candy * fraction_each\n    \n    # Store the result\n    result = pieces_per_person\n    \n    return result",
    "result": 9.0
  },
  {
    "index": 13,
    "response": "**Reasoning:**\n1. Let J represent the amount of money Jack has.\n2. Since Jack has \\$15 more than Jill, Jill’s amount is (J − 15).\n3. Together they have \\$65, so:\n   J + (J − 15) = 65\n4. Combine like terms:\n   2J − 15 = 65\n5. Add 15 to both sides:\n   2J = 80\n6. Divide both sides by 2 to find J:\n   J = 40\n7. Jill’s amount is J − 15, so:\n   Jill = 40 − 15 = 25\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jack has $15 more than Jill. Together they have $65. How much money does Jill have? Use J to represent how much money Jack has.\n    \"\"\"\n    difference = 15   # Jack has $15 more than Jill\n    total_amount = 65 # Combined amount of Jack and Jill\n\n    # Let J be Jack's amount. Then J + (J - difference) = total_amount\n    jack_amount = (total_amount + difference) / 2  # Solve for Jack's money (J)\n    jill_amount = jack_amount - difference         # Jill has $15 less than Jack\n\n    return jill_amount\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jack has $15 more than Jill. Together they have $65. How much money does Jill have? Use J to represent how much money Jack has.\n    \"\"\"\n    difference = 15   # Jack has $15 more than Jill\n    total_amount = 65 # Combined amount of Jack and Jill\n\n    # Let J be Jack's amount. Then J + (J - difference) = total_amount\n    jack_amount = (total_amount + difference) / 2  # Solve for Jack's money (J)\n    jill_amount = jack_amount - difference         # Jill has $15 less than Jack\n\n    return jill_amount",
    "result": 25.0
  },
  {
    "index": 14,
    "response": "**Reasoning:**\n\n1. We know the total bill amount is \\$78.\n2. Each person pays \\$13.\n3. To find the number of people, we divide the total bill by the amount each person paid.\n4. Number of people = total bill / payment per person = 78 / 13 = 6.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A group of friends went out to dinner and the bill came to $78. If they split the bill evenly and each person paid $13, how many people were in the group?\n    \"\"\"\n    total_bill = 78\n    per_person_payment = 13\n    \n    # Divide the total bill by each person's payment to get the number of people\n    number_of_people = total_bill / per_person_payment\n    \n    result = number_of_people\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A group of friends went out to dinner and the bill came to $78. If they split the bill evenly and each person paid $13, how many people were in the group?\n    \"\"\"\n    total_bill = 78\n    per_person_payment = 13\n    \n    # Divide the total bill by each person's payment to get the number of people\n    number_of_people = total_bill / per_person_payment\n    \n    result = number_of_people\n    return result",
    "result": 6.0
  },
  {
    "index": 15,
    "response": "**Reasoning:**\n1. Start with the weights purchased:\n   - Apples: 6 pounds\n   - Bananas: 4 pounds\n   - Grapes: 3 pounds\n2. Apply the losses/gains:\n   - Apples lose 20%: remaining = 6 * (1 - 0.20) = 6 * 0.80 = 4.8 pounds\n   - Bananas lose 10%: remaining = 4 * (1 - 0.10) = 4 * 0.90 = 3.6 pounds\n   - Grapes gain 5% from washing: final = 3 * (1 + 0.05) = 3 * 1.05 = 3.15 pounds\n3. Sum the final weights:\n   4.8 + 3.6 + 3.15 = 11.55 pounds\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jacob is making a fruit salad for a party. He buys 6 pounds of apples, 4 pounds of bananas, \n    and 3 pounds of grapes. He peels and cores the apples, losing 20% of their weight. \n    He peels the bananas, losing 10% of their weight. He washes the grapes, adding 5% of their weight. \n    How many pounds of fruit does he have in his salad?\n    \"\"\"\n    apples_initial = 6.0      # pounds\n    bananas_initial = 4.0     # pounds\n    grapes_initial = 3.0      # pounds\n\n    apples_after = apples_initial * (1 - 0.20)\n    bananas_after = bananas_initial * (1 - 0.10)\n    grapes_after = grapes_initial * (1 + 0.05)\n\n    result = apples_after + bananas_after + grapes_after\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jacob is making a fruit salad for a party. He buys 6 pounds of apples, 4 pounds of bananas, \n    and 3 pounds of grapes. He peels and cores the apples, losing 20% of their weight. \n    He peels the bananas, losing 10% of their weight. He washes the grapes, adding 5% of their weight. \n    How many pounds of fruit does he have in his salad?\n    \"\"\"\n    apples_initial = 6.0      # pounds\n    bananas_initial = 4.0     # pounds\n    grapes_initial = 3.0      # pounds\n\n    apples_after = apples_initial * (1 - 0.20)\n    bananas_after = bananas_initial * (1 - 0.10)\n    grapes_after = grapes_initial * (1 + 0.05)\n\n    result = apples_after + bananas_after + grapes_after\n    return result",
    "result": 11.55
  },
  {
    "index": 16,
    "response": "**Reasoning:**\n\n1. Kris’s total spending is \\$585.  \n2. The problem states that 15% of the total amount she spent was on taxes.  \n3. To find the amount paid in taxes, compute 15% of \\$585:  \n   taxes = 15/100 × 585 = 0.15 × 585.  \n4. The tip does not affect the tax calculation, so it can be ignored when computing the taxes.  \n5. Performing the calculation gives taxes = \\$87.75.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Student: Kris went shopping for some groceries, and the total amount she spent was 585$. 15% of the amount she spent was on taxes and she also gave a 10% tip to the cashier. How much did she pay in taxes?\n    \"\"\"\n    # Total amount spent by Kris\n    total_amount_spent = 585.0\n    \n    # Tax rate as a decimal\n    tax_rate = 0.15\n    \n    # Calculate the amount she paid in taxes\n    tax_amount = total_amount_spent * tax_rate\n    \n    # Assign the final result\n    result = tax_amount\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Student: Kris went shopping for some groceries, and the total amount she spent was 585$. 15% of the amount she spent was on taxes and she also gave a 10% tip to the cashier. How much did she pay in taxes?\n    \"\"\"\n    # Total amount spent by Kris\n    total_amount_spent = 585.0\n    \n    # Tax rate as a decimal\n    tax_rate = 0.15\n    \n    # Calculate the amount she paid in taxes\n    tax_amount = total_amount_spent * tax_rate\n    \n    # Assign the final result\n    result = tax_amount\n    \n    return result",
    "result": 87.75
  },
  {
    "index": 17,
    "response": "**Reasoning:**\n1. The student’s current score is 75 out of 100.  \n2. The passing score is 80.  \n3. The additional points needed = 80 − 75 = 5 points.  \n4. To express this as a percentage more relative to the current score, divide the additional points by the current score and multiply by 100:  \n   (5 ÷ 75) × 100 ≈ 6.6667%.  \n5. Therefore, the student needs approximately 6.67% more to pass.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A student has a test score of 75 out of 100. If they need a score of at least 80 to pass, what percent more do they need to get to pass the test?\n    \"\"\"\n    current_score = 75\n    passing_score = 80\n    needed_points = passing_score - current_score\n    percent_more_needed = (needed_points / current_score) * 100\n    result = percent_more_needed\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A student has a test score of 75 out of 100. If they need a score of at least 80 to pass, what percent more do they need to get to pass the test?\n    \"\"\"\n    current_score = 75\n    passing_score = 80\n    needed_points = passing_score - current_score\n    percent_more_needed = (needed_points / current_score) * 100\n    result = percent_more_needed\n\n    return result",
    "result": 6.666666666666667
  },
  {
    "index": 18,
    "response": "**Reasoning:**\n1. The recipe ratio is 2 tablespoons of flour for every 1/4 teaspoon of sugar.\n2. We have 5 teaspoons of sugar.\n3. First, determine how many 1/4-teaspoon units are in 5 teaspoons:\n   - 1/4 teaspoon = 0.25 teaspoon\n   - Number of 1/4-teaspoon units = 5 ÷ 0.25 = 20\n4. Each of those 20 units requires 2 tablespoons of flour:\n   - Total flour = 20 × 2 = 40 tablespoons\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A recipe calls for 2 tablespoons of flour for every 1/4 teaspoon of sugar. If there are 5 teaspoons of sugar, how many tablespoons of flour are needed?\n    \"\"\"\n    # given ratio\n    flour_per_quarter_tsp_sugar = 2.0       # tablespoons of flour per 1/4 teaspoon sugar\n    sugar_amount_tsp = 5.0                  # total sugar in teaspoons\n    quarter_tsp_in_tsp = 0.25               # one quarter teaspoon in teaspoons\n\n    # compute how many 1/4-teaspoon units are in the total sugar\n    num_quarter_tsp_units = sugar_amount_tsp / quarter_tsp_in_tsp\n\n    # compute total flour needed\n    result = num_quarter_tsp_units * flour_per_quarter_tsp_sugar\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A recipe calls for 2 tablespoons of flour for every 1/4 teaspoon of sugar. If there are 5 teaspoons of sugar, how many tablespoons of flour are needed?\n    \"\"\"\n    # given ratio\n    flour_per_quarter_tsp_sugar = 2.0       # tablespoons of flour per 1/4 teaspoon sugar\n    sugar_amount_tsp = 5.0                  # total sugar in teaspoons\n    quarter_tsp_in_tsp = 0.25               # one quarter teaspoon in teaspoons\n\n    # compute how many 1/4-teaspoon units are in the total sugar\n    num_quarter_tsp_units = sugar_amount_tsp / quarter_tsp_in_tsp\n\n    # compute total flour needed\n    result = num_quarter_tsp_units * flour_per_quarter_tsp_sugar\n\n    return result",
    "result": 40.0
  },
  {
    "index": 19,
    "response": "**Reasoning:**\n1. Convert the distance from kilometers to meters:  \n   1 kilometer = 1,000 meters.\n2. Jenny swims 1,000 meters in 20 minutes.\n3. To find out how many meters she swims in 1 minute, divide the total distance by the total time:  \n   1,000 meters ÷ 20 minutes = 50 meters per minute.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jenny can swim 1 kilometer in 20 minutes. How many meters can she swim in 1 minute?\n    \"\"\"\n    distance_kilometers = 1               # kilometers\n    time_minutes = 20                     # minutes\n    meters_per_kilometer = 1000           # meters in one kilometer\n    \n    total_distance_meters = distance_kilometers * meters_per_kilometer\n    meters_per_minute = total_distance_meters / time_minutes\n    result = meters_per_minute\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jenny can swim 1 kilometer in 20 minutes. How many meters can she swim in 1 minute?\n    \"\"\"\n    distance_kilometers = 1               # kilometers\n    time_minutes = 20                     # minutes\n    meters_per_kilometer = 1000           # meters in one kilometer\n    \n    total_distance_meters = distance_kilometers * meters_per_kilometer\n    meters_per_minute = total_distance_meters / time_minutes\n    result = meters_per_minute\n    \n    return result",
    "result": 50.0
  },
  {
    "index": 20,
    "response": "**Reasoning:**\n\n1. Let \\(W_s\\) be the total weight of all 6 scooters.\n2. We are told the total weight of the 4 cars is 48 kg, and this is four times the weight of all the scooters:\n   \\[\n   48 = 4 \\times W_s\n   \\]\n3. Solve for \\(W_s\\):\n   \\[\n   W_s = \\frac{48}{4} = 12\\text{ kg}\n   \\]\n4. This 12 kg is the combined weight of 6 scooters, so the weight of one scooter is:\n   \\[\n   \\frac{12}{6} = 2\\text{ kg}\n   \\]\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    For his birthday, Teddy bought 4 new cars and 6 scooters. The total weight of all the cars was 48kg, which was four times greater than the weight of all the scooters. How much did a single scooter weigh?\n    \"\"\"\n    number_of_cars = 4\n    number_of_scooters = 6\n    total_weight_cars = 48  # in kg\n\n    # Given total_weight_cars = 4 * total_weight_scooters\n    total_weight_scooters = total_weight_cars / 4\n\n    # Weight of a single scooter\n    result = total_weight_scooters / number_of_scooters\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    For his birthday, Teddy bought 4 new cars and 6 scooters. The total weight of all the cars was 48kg, which was four times greater than the weight of all the scooters. How much did a single scooter weigh?\n    \"\"\"\n    number_of_cars = 4\n    number_of_scooters = 6\n    total_weight_cars = 48  # in kg\n\n    # Given total_weight_cars = 4 * total_weight_scooters\n    total_weight_scooters = total_weight_cars / 4\n\n    # Weight of a single scooter\n    result = total_weight_scooters / number_of_scooters\n    return result",
    "result": 2.0
  },
  {
    "index": 21,
    "response": "**Reasoning:**\n\n1. We start with an initial daily production of 5,000 pens.  \n2. This daily production increases by 2% at the beginning of each month.  \n3. After \\(m-1\\) increases, at the start of month \\(m\\), the daily production becomes  \n   \\[\n     5000 \\times (1.02)^{\\,m-1}.\n   \\]\n4. We assume each month has 30 days (an explicit assumption to make the calculation concrete).  \n5. The number of pens produced in month \\(m\\) is then  \n   \\[\n     \\bigl(5000 \\times (1.02)^{\\,m-1}\\bigr) \\times 30.\n   \\]\n6. To find the yearly total, sum that monthly production from month 1 through month 12.  \n7. We implement this by a loop in Python, accumulating the total over 12 months and updating the daily rate each month.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A company produces 5000 pens per day. The production rate increased by 2% every month. How many pens will the company produce in a year?\n    \"\"\"\n    initial_daily_production = 5000       # pens produced per day at month 1\n    monthly_increase_rate = 0.02          # 2% increase each month\n    months_in_year = 12\n    days_per_month = 30                   # assume 30 days in each month\n\n    total_pens = 0.0\n    daily_production = initial_daily_production\n\n    for month in range(months_in_year):\n        # Calculate production for this month\n        monthly_production = daily_production * days_per_month\n        total_pens += monthly_production\n        # Increase the daily rate for the next month\n        daily_production *= (1 + monthly_increase_rate)\n\n    return total_pens\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A company produces 5000 pens per day. The production rate increased by 2% every month. How many pens will the company produce in a year?\n    \"\"\"\n    initial_daily_production = 5000       # pens produced per day at month 1\n    monthly_increase_rate = 0.02          # 2% increase each month\n    months_in_year = 12\n    days_per_month = 30                   # assume 30 days in each month\n\n    total_pens = 0.0\n    daily_production = initial_daily_production\n\n    for month in range(months_in_year):\n        # Calculate production for this month\n        monthly_production = daily_production * days_per_month\n        total_pens += monthly_production\n        # Increase the daily rate for the next month\n        daily_production *= (1 + monthly_increase_rate)\n\n    return total_pens",
    "result": 2011813.4592190897
  },
  {
    "index": 22,
    "response": "**Reasoning:**\n1. The runner’s pace is 7 minutes per mile.\n2. The race distance is 5 miles.\n3. Total time in minutes = pace (minutes/mile) × distance (miles) = 7 × 5 = 35 minutes.\n4. Convert 35 minutes into seconds: 35 × 60 = 2100 seconds.\n5. To the nearest second, the race took 2100 seconds.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A runner's average pace in a 5 mile race was 7 minutes per mile. To the nearest second, how long did the race take?\n    \"\"\"\n    # Given data\n    total_distance_miles = 5\n    pace_minutes_per_mile = 7\n\n    # Step 1: compute total time in minutes\n    total_time_minutes = total_distance_miles * pace_minutes_per_mile\n\n    # Step 2: convert total time to seconds\n    total_time_seconds = total_time_minutes * 60\n\n    # Step 3: round to the nearest second\n    result = round(total_time_seconds)\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A runner's average pace in a 5 mile race was 7 minutes per mile. To the nearest second, how long did the race take?\n    \"\"\"\n    # Given data\n    total_distance_miles = 5\n    pace_minutes_per_mile = 7\n\n    # Step 1: compute total time in minutes\n    total_time_minutes = total_distance_miles * pace_minutes_per_mile\n\n    # Step 2: convert total time to seconds\n    total_time_seconds = total_time_minutes * 60\n\n    # Step 3: round to the nearest second\n    result = round(total_time_seconds)\n\n    return result",
    "result": 2100
  },
  {
    "index": 23,
    "response": "**Reasoning:**\n1. Airline X’s listed price is \\$300 and the discount is 20%.  \n   The final price for X is 300 × (1 – 0.20) = 300 × 0.80 = \\$240.  \n2. Airline Y’s listed price is \\$325 and the discount is 22%.  \n   The final price for Y is 325 × (1 – 0.22) = 325 × 0.78 = \\$253.50.  \n3. To find how much cheaper X’s flight is compared to Y’s, subtract X’s final price from Y’s final price:  \n   253.50 – 240 = \\$13.50.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Two airlines offer the same flight, but they offer it at different prices and with different discounts. Airline X lists the flight at a full price of $300 and offers an additional discount of 20%. Airline Y lists the same flight for $325 and offers an additional discount of 22%. After both airlines' discounts are applied, how much cheaper is airline X's flight than airline Y's flight?\n    \"\"\"\n    full_price_x = 300.0\n    discount_rate_x = 0.20\n    discounted_price_x = full_price_x * (1 - discount_rate_x)\n\n    full_price_y = 325.0\n    discount_rate_y = 0.22\n    discounted_price_y = full_price_y * (1 - discount_rate_y)\n\n    # Difference in price: how much cheaper X is compared to Y\n    result = discounted_price_y - discounted_price_x\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Two airlines offer the same flight, but they offer it at different prices and with different discounts. Airline X lists the flight at a full price of $300 and offers an additional discount of 20%. Airline Y lists the same flight for $325 and offers an additional discount of 22%. After both airlines' discounts are applied, how much cheaper is airline X's flight than airline Y's flight?\n    \"\"\"\n    full_price_x = 300.0\n    discount_rate_x = 0.20\n    discounted_price_x = full_price_x * (1 - discount_rate_x)\n\n    full_price_y = 325.0\n    discount_rate_y = 0.22\n    discounted_price_y = full_price_y * (1 - discount_rate_y)\n\n    # Difference in price: how much cheaper X is compared to Y\n    result = discounted_price_y - discounted_price_x\n\n    return result",
    "result": 13.5
  },
  {
    "index": 24,
    "response": "**Reasoning:**\n1. Sarah starts with \\$45.\n2. The cost of ingredients for each baked good:\n   - Cookies: \\$8\n   - Cupcakes: \\$10\n   - Brownies: \\$12\n   - Muffins: \\$5\n3. Sum the individual costs to find the total spent:\n   8 + 10 + 12 + 5 = 35\n4. Subtract the total spent from the budget:\n   45 − 35 = 10\n5. Sarah has \\$10 left.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sarah is organizing a bake sale. She has $45 to buy ingredients for 4 different baked goods: cookies, cupcakes, brownies, and muffins. She finds a recipe for cookies that requires $8 of ingredients, a recipe for cupcakes that requires $10 of ingredients, a recipe for brownies that requires $12 of ingredients, and a recipe for muffins that requires $5 of ingredients. How much money does Sarah have left after buying all the ingredients for these baked goods?\n    \"\"\"\n    total_budget = 45.0\n    cost_cookies = 8.0\n    cost_cupcakes = 10.0\n    cost_brownies = 12.0\n    cost_muffins = 5.0\n\n    total_cost = cost_cookies + cost_cupcakes + cost_brownies + cost_muffins\n    result = total_budget - total_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sarah is organizing a bake sale. She has $45 to buy ingredients for 4 different baked goods: cookies, cupcakes, brownies, and muffins. She finds a recipe for cookies that requires $8 of ingredients, a recipe for cupcakes that requires $10 of ingredients, a recipe for brownies that requires $12 of ingredients, and a recipe for muffins that requires $5 of ingredients. How much money does Sarah have left after buying all the ingredients for these baked goods?\n    \"\"\"\n    total_budget = 45.0\n    cost_cookies = 8.0\n    cost_cupcakes = 10.0\n    cost_brownies = 12.0\n    cost_muffins = 5.0\n\n    total_cost = cost_cookies + cost_cupcakes + cost_brownies + cost_muffins\n    result = total_budget - total_cost\n\n    return result",
    "result": 10.0
  },
  {
    "index": 25,
    "response": "**Reasoning:**\n\n1. Cindy starts with \\$15.  \n2. She buys a book that costs 3/5 of her total money:\n   - Cost of the book = (3/5) × \\$15 = \\$9.  \n3. After buying the book, the amount she has left is:\n   - Remaining = \\$15 − \\$9 = \\$6.  \n4. The problem states she then spends the same amount on a pen as she has left.\n   - Therefore, the pen costs \\$6.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Cindy had $15 and bought a book for 3/5 of her money. She then spent the same amount of money on a pen as she had left. How much was the pen?\n    \"\"\"\n    total_money = 15.0\n    cost_book = (3/5) * total_money\n    remaining_after_book = total_money - cost_book\n    pen_cost = remaining_after_book\n    result = pen_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Cindy had $15 and bought a book for 3/5 of her money. She then spent the same amount of money on a pen as she had left. How much was the pen?\n    \"\"\"\n    total_money = 15.0\n    cost_book = (3/5) * total_money\n    remaining_after_book = total_money - cost_book\n    pen_cost = remaining_after_book\n    result = pen_cost\n\n    return result",
    "result": 6.0
  },
  {
    "index": 26,
    "response": "**Reasoning:**\n\n1. We start with the information that there are 25 desks in the classroom.  \n2. Each desk has 4 legs.  \n3. To find the total number of legs, we multiply the number of desks by the number of legs per desk:  \n   total_legs = number_of_desks * legs_per_desk  \n4. Substitute the known values:  \n   total_legs = 25 * 4 = 100  \n\nTherefore, there are 100 legs in the classroom.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A classroom has 25 desks. Each desk has 4 legs. How many legs are there in the classroom?\n    \"\"\"\n    # Number of desks in the classroom\n    number_of_desks = 25\n    # Number of legs on each desk\n    legs_per_desk = 4\n\n    # Calculate the total number of legs\n    total_legs = number_of_desks * legs_per_desk\n    result = total_legs\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A classroom has 25 desks. Each desk has 4 legs. How many legs are there in the classroom?\n    \"\"\"\n    # Number of desks in the classroom\n    number_of_desks = 25\n    # Number of legs on each desk\n    legs_per_desk = 4\n\n    # Calculate the total number of legs\n    total_legs = number_of_desks * legs_per_desk\n    result = total_legs\n\n    return result",
    "result": 100
  },
  {
    "index": 27,
    "response": "**Reasoning:**\n1. Let G_now be the grandfather’s current age, and g_now be the grandson’s current age.\n2. We know G_now = 68.\n3. Eight years ago, the grandfather was G_now - 8 years old, and the grandson was g_now - 8 years old.\n4. At that time, the grandfather’s age was six times the grandson’s age:\n   (G_now - 8) = 6 * (g_now - 8)\n5. Substitute G_now = 68:\n   68 - 8 = 6 * (g_now - 8)\n   60 = 6 * (g_now - 8)\n6. Solve for g_now - 8:\n   g_now - 8 = 60 / 6 = 10\n7. Therefore, g_now = 10 + 8 = 18.\n8. The question asks for the grandson’s age in 4 years:\n   g_future = g_now + 4 = 18 + 4 = 22.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    8 years ago, a grandfather was six times as old as his grandson. \n    If the grandfather is 68 years old now, how old will the grandson be in 4 years?\n    \"\"\"\n    grandfather_current_age = 68\n    years_ago = 8\n    ratio = 6\n\n    # Age of grandfather and grandson 8 years ago\n    grandfather_age_then = grandfather_current_age - years_ago\n\n    # Let grandson_current_age be x. Then:\n    # grandfather_age_then = ratio * (x - years_ago)\n    # Solve for x:\n    grandson_current_age = (grandfather_age_then / ratio) + years_ago\n\n    # Compute the grandson's age in 4 years\n    result = grandson_current_age + 4\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    8 years ago, a grandfather was six times as old as his grandson. \n    If the grandfather is 68 years old now, how old will the grandson be in 4 years?\n    \"\"\"\n    grandfather_current_age = 68\n    years_ago = 8\n    ratio = 6\n\n    # Age of grandfather and grandson 8 years ago\n    grandfather_age_then = grandfather_current_age - years_ago\n\n    # Let grandson_current_age be x. Then:\n    # grandfather_age_then = ratio * (x - years_ago)\n    # Solve for x:\n    grandson_current_age = (grandfather_age_then / ratio) + years_ago\n\n    # Compute the grandson's age in 4 years\n    result = grandson_current_age + 4\n\n    return result",
    "result": 22.0
  },
  {
    "index": 28,
    "response": "**Reasoning:**\n\n1. Let Tom’s current age be T, and Linda’s current age be L.  \n2. The problem states that Linda is 3 times as old as Tom right now:\n   L = 3 × T.  \n3. In 2 years, Tom’s age will be T + 2, and Linda’s age will be L + 2.  \n4. The problem then states that at that time, Linda will be twice as old as Tom:\n   L + 2 = 2 × (T + 2).  \n5. Substitute L = 3T into the second equation:\n   3T + 2 = 2 × (T + 2).  \n6. Expand and solve for T:\n   3T + 2 = 2T + 4  \n   3T − 2T = 4 − 2  \n   T = 2.  \n7. Therefore, Tom is currently 2 years old.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Linda is 3 times as old as Tom. In 2 years, Linda will be twice as old as Tom then. How old is Tom now?\n    \"\"\"\n    # Let Tom's current age be tom_age_now\n    tom_age_now = None\n\n    # Let Linda's current age be linda_age_now = 3 * tom_age_now\n    # In 2 years: linda_age_now + 2 = 2 * (tom_age_now + 2)\n    \n    # Solve step by step:\n    # 3 * tom_age_now + 2 = 2 * (tom_age_now + 2)\n    # 3T + 2 = 2T + 4\n    # 3T - 2T = 4 - 2\n    # T = 2\n    tom_age_now = 2\n\n    result = tom_age_now\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Linda is 3 times as old as Tom. In 2 years, Linda will be twice as old as Tom then. How old is Tom now?\n    \"\"\"\n    # Let Tom's current age be tom_age_now\n    tom_age_now = None\n\n    # Let Linda's current age be linda_age_now = 3 * tom_age_now\n    # In 2 years: linda_age_now + 2 = 2 * (tom_age_now + 2)\n    \n    # Solve step by step:\n    # 3 * tom_age_now + 2 = 2 * (tom_age_now + 2)\n    # 3T + 2 = 2T + 4\n    # 3T - 2T = 4 - 2\n    # T = 2\n    tom_age_now = 2\n\n    result = tom_age_now\n    return result",
    "result": 2
  },
  {
    "index": 29,
    "response": "**Reasoning:**\n1. We know the bird’s total length is 50 cm.\n2. The beak is one-tenth of the total length, so beak_length = (1/10) * 50 cm = 5 cm.\n3. The rest of the body (excluding the beak) is total_length − beak_length = 50 cm − 5 cm = 45 cm.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A bird's beak is one-tenth its length. If a bird's length is 50 cm, find the length of the bird's body other than its beak.\n    \"\"\"\n    total_length = 50.0        # total length of the bird in cm\n    beak_length = total_length / 10   # beak is one-tenth of total length\n    result = total_length - beak_length  # body length excluding the beak\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A bird's beak is one-tenth its length. If a bird's length is 50 cm, find the length of the bird's body other than its beak.\n    \"\"\"\n    total_length = 50.0        # total length of the bird in cm\n    beak_length = total_length / 10   # beak is one-tenth of total length\n    result = total_length - beak_length  # body length excluding the beak\n    return result",
    "result": 45.0
  },
  {
    "index": 30,
    "response": "**Reasoning:**\n1. Calculate the total weight of the beans:\n   - Number of bean cans = 3\n   - Weight per bean can = 0.5 pounds\n   - Total bean weight = 3 × 0.5 = 1.5 pounds\n2. Calculate the total weight of the corn:\n   - Number of corn cans = 4\n   - Weight per corn can = 0.75 pounds\n   - Total corn weight = 4 × 0.75 = 3.0 pounds\n3. Add the two totals together:\n   - Total weight = 1.5 + 3.0 = 4.5 pounds\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    6. Kimberly stocked up on supplies for her camping trip. She bought 3 cans of beans, each weighing 0.5 pounds, and 4 cans of corn, each weighing 0.75 pounds. What is the total weight of all of her canned supplies?\n    \"\"\"\n    num_beans_cans = 3\n    weight_per_beans = 0.5\n    num_corn_cans = 4\n    weight_per_corn = 0.75\n\n    total_beans_weight = num_beans_cans * weight_per_beans\n    total_corn_weight = num_corn_cans * weight_per_corn\n\n    result = total_beans_weight + total_corn_weight\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    6. Kimberly stocked up on supplies for her camping trip. She bought 3 cans of beans, each weighing 0.5 pounds, and 4 cans of corn, each weighing 0.75 pounds. What is the total weight of all of her canned supplies?\n    \"\"\"\n    num_beans_cans = 3\n    weight_per_beans = 0.5\n    num_corn_cans = 4\n    weight_per_corn = 0.75\n\n    total_beans_weight = num_beans_cans * weight_per_beans\n    total_corn_weight = num_corn_cans * weight_per_corn\n\n    result = total_beans_weight + total_corn_weight\n    return result",
    "result": 4.5
  },
  {
    "index": 31,
    "response": "**Reasoning:**\n\n1. Painter Tom’s rates:\n   - 3 walls per day\n   - 2 ceilings per day\n\n2. To find the time for 10 walls:\n   - Time_walls = (number of walls) / (walls per day) = 10 / 3 days\n\n3. To find the time for 8 ceilings:\n   - Time_ceilings = (number of ceilings) / (ceilings per day) = 8 / 2 days = 4 days\n\n4. Total time required is the sum of both:\n   - Total_time = Time_walls + Time_ceilings\n   - Total_time = (10 / 3) + 4 = (10/3) + (12/3) = 22/3 days ≈ 7.3333 days\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If painter Tom can paint 3 walls per day or paint 2 ceilings per day,\n    how long would it take him to paint 10 walls and 8 ceilings?\n    \"\"\"\n    walls_per_day = 3\n    ceilings_per_day = 2\n\n    total_walls = 10\n    total_ceilings = 8\n\n    # Calculate days needed for walls\n    days_for_walls = total_walls / walls_per_day\n    # Calculate days needed for ceilings\n    days_for_ceilings = total_ceilings / ceilings_per_day\n\n    # Sum to get total days\n    result = days_for_walls + days_for_ceilings\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If painter Tom can paint 3 walls per day or paint 2 ceilings per day,\n    how long would it take him to paint 10 walls and 8 ceilings?\n    \"\"\"\n    walls_per_day = 3\n    ceilings_per_day = 2\n\n    total_walls = 10\n    total_ceilings = 8\n\n    # Calculate days needed for walls\n    days_for_walls = total_walls / walls_per_day\n    # Calculate days needed for ceilings\n    days_for_ceilings = total_ceilings / ceilings_per_day\n\n    # Sum to get total days\n    result = days_for_walls + days_for_ceilings\n\n    return result",
    "result": 7.333333333333334
  },
  {
    "index": 32,
    "response": "**Reasoning:**\n1. Let the total number of books the library needs be \\(x\\).\n2. We are told that the library purchased 48 books, and this equals \\(\\tfrac{8}{9}\\) of the total it needs. So:\n   \\[\n     48 = \\frac{8}{9} \\times x\n   \\]\n3. To solve for \\(x\\), divide both sides of the equation by \\(\\tfrac{8}{9}\\):\n   \\[\n     x = 48 \\div \\frac{8}{9}\n       = 48 \\times \\frac{9}{8}\n       = 6 \\times 9\n       = 54\n   \\]\n4. Therefore, the library needs 54 books in total.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A library purchased 48 books, which was 8/9 of the total number of books it needs. How many books did the library need in total?\n    \"\"\"\n    purchased_books = 48\n    fraction_of_total = 8 / 9\n\n    # total_books_needed = purchased_books divided by the fraction that was purchased\n    total_books_needed = purchased_books / fraction_of_total\n\n    result = total_books_needed\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A library purchased 48 books, which was 8/9 of the total number of books it needs. How many books did the library need in total?\n    \"\"\"\n    purchased_books = 48\n    fraction_of_total = 8 / 9\n\n    # total_books_needed = purchased_books divided by the fraction that was purchased\n    total_books_needed = purchased_books / fraction_of_total\n\n    result = total_books_needed\n    return result",
    "result": 54.0
  },
  {
    "index": 33,
    "response": "**Reasoning:**\n\n1. Tom starts with \\$400 in his bank.\n2. He buys a bike for \\$100.\n3. The helmet costs 4 times the price of the bike, i.e. 4 × \\$100 = \\$400.\n4. He also buys a lock for \\$12.\n5. Total spent = \\$100 (bike) + \\$400 (helmet) + \\$12 (lock) = \\$512.\n6. Money left = initial amount (\\$400) − total spent (\\$512) = −\\$112.\n\nSo Tom ends up \\$112 in the red (i.e. he owes \\$112).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Tom had $400 in his bank. He bought a bike for $100, a helmet for 4 times the price of the bike, and a lock for $12. How much money did Tom have left?\n    \"\"\"\n    initial_amount = 400\n    bike_price = 100\n    helmet_price = bike_price * 4\n    lock_price = 12\n    \n    total_spent = bike_price + helmet_price + lock_price\n    result = initial_amount - total_spent\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Tom had $400 in his bank. He bought a bike for $100, a helmet for 4 times the price of the bike, and a lock for $12. How much money did Tom have left?\n    \"\"\"\n    initial_amount = 400\n    bike_price = 100\n    helmet_price = bike_price * 4\n    lock_price = 12\n    \n    total_spent = bike_price + helmet_price + lock_price\n    result = initial_amount - total_spent\n    \n    return result",
    "result": -112
  },
  {
    "index": 34,
    "response": "**Reasoning:**\n1. We know the person walks the same number of miles each day.\n2. The distance walked per day is 3 miles.\n3. The number of days walked is 5 days.\n4. To find the total distance walked, multiply the miles per day by the number of days:\n   total miles = miles per day × number of days.\n5. Plugging in the numbers: total miles = 3 miles/day × 5 days = 15 miles.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If I walk 3 miles each day for 5 days, how many miles have I walked in total?\n    \"\"\"\n    miles_per_day = 3\n    number_of_days = 5\n    \n    # Calculate total miles walked\n    total_miles = miles_per_day * number_of_days\n    \n    result = total_miles\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If I walk 3 miles each day for 5 days, how many miles have I walked in total?\n    \"\"\"\n    miles_per_day = 3\n    number_of_days = 5\n    \n    # Calculate total miles walked\n    total_miles = miles_per_day * number_of_days\n    \n    result = total_miles\n    return result",
    "result": 15
  },
  {
    "index": 35,
    "response": "**Reasoning:**\n1. There are 2 arms.\n2. Each arm has 140 blisters.\n3. Total blisters on the arms = 2 × 140 = 280.\n4. There are 188 blisters on the rest of her body.\n5. Total blisters overall = 280 + 188 = 468.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    arah has 140 blisters on each arm and 188 blisters on the rest of her body. How many blisters does she have in total?\n    \"\"\"\n    blisters_per_arm = 140\n    number_of_arms = 2\n    blisters_rest_of_body = 188\n\n    total_blisters_arms = blisters_per_arm * number_of_arms\n    result = total_blisters_arms + blisters_rest_of_body\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    arah has 140 blisters on each arm and 188 blisters on the rest of her body. How many blisters does she have in total?\n    \"\"\"\n    blisters_per_arm = 140\n    number_of_arms = 2\n    blisters_rest_of_body = 188\n\n    total_blisters_arms = blisters_per_arm * number_of_arms\n    result = total_blisters_arms + blisters_rest_of_body\n\n    return result",
    "result": 468
  },
  {
    "index": 36,
    "response": "**Reasoning:**\n\n1. Let Liam’s current age be 10 years.  \n2. Sophie is 3 years older than Liam, so Sophie’s current age is 10 + 3 = 13 years.  \n3. The age difference between Sophie and Liam remains constant at 3 years.  \n4. When Sophie is 25, Liam will be 25 − 3 = 22 years old.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    ophie is 3 years older than Liam who is 10. When she is 25, how old will Liam be?\n    \"\"\"\n    liam_current_age = 10\n    age_difference = 3\n    sophie_target_age = 25\n    liam_target_age = sophie_target_age - age_difference\n    result = float(liam_target_age)\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    ophie is 3 years older than Liam who is 10. When she is 25, how old will Liam be?\n    \"\"\"\n    liam_current_age = 10\n    age_difference = 3\n    sophie_target_age = 25\n    liam_target_age = sophie_target_age - age_difference\n    result = float(liam_target_age)\n    return result",
    "result": 22.0
  },
  {
    "index": 37,
    "response": "**Reasoning:**\n1. We have a total of 54 pens.\n2. We want to distribute them equally among 18 students.\n3. To find out how many pens each student gets, we divide the total number of pens by the number of students.\n4. Calculation: 54 ÷ 18 = 3.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A teacher wants to distribute 54 pens equally among her 18 students. How many pens does each student get?\n    \"\"\"\n    total_pens = 54\n    number_of_students = 18\n    \n    # Divide total pens by the number of students\n    result = total_pens / number_of_students\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A teacher wants to distribute 54 pens equally among her 18 students. How many pens does each student get?\n    \"\"\"\n    total_pens = 54\n    number_of_students = 18\n    \n    # Divide total pens by the number of students\n    result = total_pens / number_of_students\n    \n    return result",
    "result": 3.0
  },
  {
    "index": 38,
    "response": "**Reasoning:**\n1. Compute the distance covered in the first part of the trip:\n   - Speed = 60 mph, Time = 3 hours  \n   - Distance₁ = speed₁ × time₁ = 60 × 3 = 180 miles\n2. Compute the distance covered in the second part of the trip:\n   - Speed = 45 mph, Time = 1 hour  \n   - Distance₂ = speed₂ × time₂ = 45 × 1 = 45 miles\n3. Compute total distance:\n   - Total distance = Distance₁ + Distance₂ = 180 + 45 = 225 miles\n4. Compute total time:\n   - Total time = time₁ + time₂ = 3 + 1 = 4 hours\n5. Compute average speed:\n   - Average speed = Total distance / Total time = 225 / 4 = 56.25 mph\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car travels 60 mph for 3 hours and then 45 mph for the next hour. What is its average speed?\n    \"\"\"\n    speed1 = 60  # mph in the first segment\n    time1 = 3    # hours in the first segment\n    speed2 = 45  # mph in the second segment\n    time2 = 1    # hours in the second segment\n\n    distance1 = speed1 * time1\n    distance2 = speed2 * time2\n\n    total_distance = distance1 + distance2\n    total_time = time1 + time2\n\n    result = total_distance / total_time\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car travels 60 mph for 3 hours and then 45 mph for the next hour. What is its average speed?\n    \"\"\"\n    speed1 = 60  # mph in the first segment\n    time1 = 3    # hours in the first segment\n    speed2 = 45  # mph in the second segment\n    time2 = 1    # hours in the second segment\n\n    distance1 = speed1 * time1\n    distance2 = speed2 * time2\n\n    total_distance = distance1 + distance2\n    total_time = time1 + time2\n\n    result = total_distance / total_time\n    return result",
    "result": 56.25
  },
  {
    "index": 39,
    "response": "**Reasoning:**\n\n1. Calculate the cost of the dresses:\n   - 3 dresses at \\$60 each → 3 × 60 = \\$180\n2. Calculate the cost of the shoes:\n   - 2 pairs of shoes at \\$50 each → 2 × 50 = \\$100\n3. Calculate the cost of the bags:\n   - 5 bags at \\$25 each → 5 × 25 = \\$125\n4. Compute the subtotal by summing all item costs:\n   - Subtotal = 180 + 100 + 125 = \\$405\n5. Calculate the 10% sales tax on the subtotal:\n   - Sales tax = 0.10 × 405 = \\$40.50\n6. Compute the total price including sales tax:\n   - Total = 405 + 40.50 = \\$445.50\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Emily went on a shopping spree. She bought 3 dresses at $60 each, 2 pairs of shoes at $50 each,\n    and 5 bags at $25 each. If she paid a 10% sales tax, what was the total price for her shopping spree?\n    \"\"\"\n    # Item prices and quantities\n    price_per_dress = 60\n    dresses_quantity = 3\n    price_per_shoe = 50\n    shoes_quantity = 2\n    price_per_bag = 25\n    bags_quantity = 5\n\n    # Sales tax rate\n    sales_tax_rate = 0.10\n\n    # Calculate individual costs\n    cost_dresses = dresses_quantity * price_per_dress\n    cost_shoes = shoes_quantity * price_per_shoe\n    cost_bags = bags_quantity * price_per_bag\n\n    # Subtotal before tax\n    subtotal = cost_dresses + cost_shoes + cost_bags\n\n    # Total including sales tax\n    result = subtotal * (1 + sales_tax_rate)\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Emily went on a shopping spree. She bought 3 dresses at $60 each, 2 pairs of shoes at $50 each,\n    and 5 bags at $25 each. If she paid a 10% sales tax, what was the total price for her shopping spree?\n    \"\"\"\n    # Item prices and quantities\n    price_per_dress = 60\n    dresses_quantity = 3\n    price_per_shoe = 50\n    shoes_quantity = 2\n    price_per_bag = 25\n    bags_quantity = 5\n\n    # Sales tax rate\n    sales_tax_rate = 0.10\n\n    # Calculate individual costs\n    cost_dresses = dresses_quantity * price_per_dress\n    cost_shoes = shoes_quantity * price_per_shoe\n    cost_bags = bags_quantity * price_per_bag\n\n    # Subtotal before tax\n    subtotal = cost_dresses + cost_shoes + cost_bags\n\n    # Total including sales tax\n    result = subtotal * (1 + sales_tax_rate)\n\n    return result",
    "result": 445.50000000000006
  },
  {
    "index": 40,
    "response": "**Reasoning:**\n1. We are told there are 90 books to be donated in total, but the question only asks for how many David and Frank donated together given Eva’s contribution.\n2. Eva donated 18 books.\n3. David donated twice as many books as Eva:\n   - David’s books = 2 × Eva’s books = 2 × 18 = 36.\n4. Frank donated 3 more than half the number of books Eva donated:\n   - Half of Eva’s books = 18 ÷ 2 = 9.\n   - Frank’s books = 9 + 3 = 12.\n5. Together, David and Frank donated:\n   - 36 + 12 = 48 books.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    There are 90 books to be donated to a library. David donated twice as many books as Eva while Frank donated 3 more than half the number of books Eva donated. If Eva donated 18 books, how many books did David and Frank donate together?\n    \"\"\"\n    # Number of books Eva donated\n    eva_books = 18\n    \n    # David donated twice as many as Eva\n    david_books = 2 * eva_books\n    \n    # Frank donated 3 more than half of Eva's books\n    frank_books = eva_books / 2 + 3\n    \n    # Total donated by David and Frank\n    result = david_books + frank_books\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 90 books to be donated to a library. David donated twice as many books as Eva while Frank donated 3 more than half the number of books Eva donated. If Eva donated 18 books, how many books did David and Frank donate together?\n    \"\"\"\n    # Number of books Eva donated\n    eva_books = 18\n    \n    # David donated twice as many as Eva\n    david_books = 2 * eva_books\n    \n    # Frank donated 3 more than half of Eva's books\n    frank_books = eva_books / 2 + 3\n    \n    # Total donated by David and Frank\n    result = david_books + frank_books\n    \n    return result",
    "result": 48.0
  },
  {
    "index": 41,
    "response": "**Reasoning:**\n1. Identify what’s given:\n   - The second store has 10 employees.\n   - The first store has 6 more employees than the second store.\n2. Translate into variables:\n   - Let `employees_second_store = 10`\n   - Let `additional_employees = 6`\n3. Compute the number of employees in the first store:\n   - `employees_first_store = employees_second_store + additional_employees`\n4. Find the total:\n   - `total_employees = employees_first_store + employees_second_store`\n5. Calculate each step:\n   - `employees_first_store = 10 + 6 = 16`\n   - `total_employees = 16 + 10 = 26`\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A grocery store has 6 more employees than another grocery store. The second store has 10 employees. How many employees do they have altogether?\n    \"\"\"\n    # Number of employees in the second store\n    employees_second_store = 10\n    # Difference in employees between the first and second store\n    additional_employees = 6\n    # Calculate employees in the first store\n    employees_first_store = employees_second_store + additional_employees\n    # Calculate total employees\n    result = employees_first_store + employees_second_store\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A grocery store has 6 more employees than another grocery store. The second store has 10 employees. How many employees do they have altogether?\n    \"\"\"\n    # Number of employees in the second store\n    employees_second_store = 10\n    # Difference in employees between the first and second store\n    additional_employees = 6\n    # Calculate employees in the first store\n    employees_first_store = employees_second_store + additional_employees\n    # Calculate total employees\n    result = employees_first_store + employees_second_store\n\n    return result",
    "result": 26
  },
  {
    "index": 42,
    "response": "**Reasoning:**\n1. We know David’s cousin is 190 cm tall.\n2. David is 3/5 of his cousin’s height, so David’s height = (3/5) × 190 cm.\n3. Calculate David’s height:  \n   (3/5) × 190 = 3 × 38 = 114 cm.\n4. The minimum height needed to ride Oblivion is 150 cm.\n5. The extra height David needs = 150 cm − 114 cm = 36 cm.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    David wants to ride the Oblivion at Alton Towers. The minimum height to ride the roller coaster is 150 cm. \n    David's cousin is 190 cm, and David is 3/5 the height of his cousin. \n    How many more centimeters does David need to grow to ride the Oblivion?\n    \"\"\"\n    minimum_height = 150  # cm\n    cousin_height = 190   # cm\n    fraction_of_cousin = 3 / 5\n\n    david_height = fraction_of_cousin * cousin_height\n    result = minimum_height - david_height\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    David wants to ride the Oblivion at Alton Towers. The minimum height to ride the roller coaster is 150 cm. \n    David's cousin is 190 cm, and David is 3/5 the height of his cousin. \n    How many more centimeters does David need to grow to ride the Oblivion?\n    \"\"\"\n    minimum_height = 150  # cm\n    cousin_height = 190   # cm\n    fraction_of_cousin = 3 / 5\n\n    david_height = fraction_of_cousin * cousin_height\n    result = minimum_height - david_height\n\n    return result",
    "result": 36.0
  },
  {
    "index": 43,
    "response": "**Reasoning:**\n1. The ticket booth charges \\$8 per ticket normally.\n2. If you buy nine or more tickets, each ticket costs \\$6.\n3. Maria bought 24 tickets, which is more than nine, so she qualifies for the \\$6 per ticket rate.\n4. Multiply the number of tickets (24) by the discounted rate (\\$6) to get the total cost:  \n   24 × 6 = 144\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    At the local fair, the ticket booth sells tickets for $8 each, but if you purchase nine or more tickets, the tickets cost $6 each. If Maria went to the fair and bought 24 tickets in total, how much did she spend?\n    \"\"\"\n    normal_price_per_ticket = 8\n    discounted_price_per_ticket = 6\n    discount_threshold = 9\n    tickets_bought = 24\n\n    if tickets_bought >= discount_threshold:\n        cost_per_ticket = discounted_price_per_ticket\n    else:\n        cost_per_ticket = normal_price_per_ticket\n\n    result = cost_per_ticket * tickets_bought\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    At the local fair, the ticket booth sells tickets for $8 each, but if you purchase nine or more tickets, the tickets cost $6 each. If Maria went to the fair and bought 24 tickets in total, how much did she spend?\n    \"\"\"\n    normal_price_per_ticket = 8\n    discounted_price_per_ticket = 6\n    discount_threshold = 9\n    tickets_bought = 24\n\n    if tickets_bought >= discount_threshold:\n        cost_per_ticket = discounted_price_per_ticket\n    else:\n        cost_per_ticket = normal_price_per_ticket\n\n    result = cost_per_ticket * tickets_bought\n    return result",
    "result": 144
  },
  {
    "index": 44,
    "response": "**Reasoning:**\n1. Mia’s total earnings are \\$1080.\n2. She spends 1/3 of \\$1080 on groceries.\n   - Groceries cost = (1/3) × 1080 = 360\n3. Subtracting that from her total leaves:\n   - Remainder after groceries = 1080 − 360 = 720\n4. She then gives 1/2 of that remainder to her parents.\n   - Amount given to parents = (1/2) × 720 = 360\n5. The money Mia has left is:\n   - Leftover = 720 − 360 = 360\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mia earned $1080 from her part time job. She spent 1/3 of it on groceries and gave 1/2 of the remainder to her parents. How much did Mia have left?\n    \"\"\"\n    # Step 1: total earnings\n    total_earnings = 1080\n    \n    # Step 2: calculate how much she spent on groceries (1/3 of total)\n    groceries_spent = total_earnings * (1/3)\n    \n    # Step 3: find the remainder after groceries\n    remainder_after_groceries = total_earnings - groceries_spent\n    \n    # Step 4: calculate how much she gives to her parents (1/2 of the remainder)\n    parents_gift = remainder_after_groceries * (1/2)\n    \n    # Step 5: calculate what she has left\n    result = remainder_after_groceries - parents_gift\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mia earned $1080 from her part time job. She spent 1/3 of it on groceries and gave 1/2 of the remainder to her parents. How much did Mia have left?\n    \"\"\"\n    # Step 1: total earnings\n    total_earnings = 1080\n    \n    # Step 2: calculate how much she spent on groceries (1/3 of total)\n    groceries_spent = total_earnings * (1/3)\n    \n    # Step 3: find the remainder after groceries\n    remainder_after_groceries = total_earnings - groceries_spent\n    \n    # Step 4: calculate how much she gives to her parents (1/2 of the remainder)\n    parents_gift = remainder_after_groceries * (1/2)\n    \n    # Step 5: calculate what she has left\n    result = remainder_after_groceries - parents_gift\n    \n    return result",
    "result": 360.0
  },
  {
    "index": 45,
    "response": "**Reasoning:**\n\nLet S be the number of peanuts Mariah needs to “save” (i.e. add into her stash) each day.  Every day she\n\n1. eats 50 peanuts,  \n2. shares half of *that amount* (half of 50 = 25) with her friends,  \n3. and then deposits (saves) S peanuts into her stash.\n\nShe wants to end up *five more peanuts than she started with* every single day.  In other words, if her stash at the start of the day is \\(X\\), then at the end of the day it should be \\(X + 5\\).\n\nStart of day: \\(X\\) peanuts  \nMinus eaten (50) and given away (25) → uses \\(50 + 25 = 75\\) peanuts  \nPlus what she saves, \\(S\\) peanuts  \nEnd of day: \\(X - 75 + S\\)\n\nWe require\n\\[\nX - 75 + S = X + 5\n\\]\nCancel \\(X\\) from both sides:\n\\[\n-75 + S = 5\n\\]\nSo\n\\[\nS = 80.\n\\]\n\nHence Mariah must save 80 peanuts each day.\n\n**Solution:**\n\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mariah eats 50 peanuts every day and shares half of that amount with her friends. How many peanuts must Mariah save to always have five more peanuts than she started with?\n    \"\"\"\n    peanuts_eaten = 50\n    half_shared = peanuts_eaten / 2         # she shares half of the 50 = 25\n    total_used = peanuts_eaten + half_shared  # total peanuts out of her stash per day\n    needed_to_save = total_used + 5         # to end up 5 more than she began\n    result = needed_to_save\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mariah eats 50 peanuts every day and shares half of that amount with her friends. How many peanuts must Mariah save to always have five more peanuts than she started with?\n    \"\"\"\n    peanuts_eaten = 50\n    half_shared = peanuts_eaten / 2         # she shares half of the 50 = 25\n    total_used = peanuts_eaten + half_shared  # total peanuts out of her stash per day\n    needed_to_save = total_used + 5         # to end up 5 more than she began\n    result = needed_to_save\n    return result",
    "result": 80.0
  },
  {
    "index": 46,
    "response": "**Reasoning:**\n1. The restaurant has a total of 200 seats.  \n2. On Monday, 30% of the 200 seats were filled. Calculate Monday’s filled seats:  \n   Monday_filled = 200 * 0.30 = 60 seats  \n3. On Tuesday, 10% more seats were filled than on Monday. That means the fill percentage on Tuesday is 30% + 10% = 40%.  \n4. Calculate Tuesday’s filled seats:  \n   Tuesday_filled = 200 * 0.40 = 80 seats  \n5. The question asks for how many more seats were filled on Tuesday compared to Monday:  \n   Difference = Tuesday_filled − Monday_filled = 80 − 60 = 20 seats  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A restaurant has 200 seats. On Monday, 30% of the seats were filled. On Tuesday, 10% more seats were filled than on Monday. How many more seats were filled on Tuesday?\n    \"\"\"\n    total_seats = 200\n    monday_fill_pct = 0.30\n    monday_filled = total_seats * monday_fill_pct\n\n    # Tuesday has 10% more filled than Monday\n    tuesday_fill_pct = monday_fill_pct + 0.10\n    tuesday_filled = total_seats * tuesday_fill_pct\n\n    result = tuesday_filled - monday_filled\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A restaurant has 200 seats. On Monday, 30% of the seats were filled. On Tuesday, 10% more seats were filled than on Monday. How many more seats were filled on Tuesday?\n    \"\"\"\n    total_seats = 200\n    monday_fill_pct = 0.30\n    monday_filled = total_seats * monday_fill_pct\n\n    # Tuesday has 10% more filled than Monday\n    tuesday_fill_pct = monday_fill_pct + 0.10\n    tuesday_filled = total_seats * tuesday_fill_pct\n\n    result = tuesday_filled - monday_filled\n    return result",
    "result": 20.0
  },
  {
    "index": 47,
    "response": "**Reasoning:**\n1. Identify the length of the rectangle, L = 12 cm.  \n2. Identify the width of the rectangle, W = 8 cm.  \n3. Recall that the perimeter P of a rectangle is given by P = 2 × (L + W).  \n4. Compute the sum of the length and width: L + W = 12 + 8 = 20.  \n5. Multiply that sum by 2 to find the perimeter: P = 2 × 20 = 40.  \n6. Therefore, the perimeter of the rectangle is 40 cm.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A rectangle has a length of 12cm and a width of 8cm. What is the perimeter of the rectangle?\n    \"\"\"\n    length_cm = 12\n    width_cm = 8\n    sum_of_sides = length_cm + width_cm\n    result = 2 * sum_of_sides\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A rectangle has a length of 12cm and a width of 8cm. What is the perimeter of the rectangle?\n    \"\"\"\n    length_cm = 12\n    width_cm = 8\n    sum_of_sides = length_cm + width_cm\n    result = 2 * sum_of_sides\n\n    return result",
    "result": 40
  },
  {
    "index": 48,
    "response": "**Reasoning:**\n1. Recognize that the pizza is a circle.  \n2. The given diameter is 12 inches.  \n3. Radius = diameter ÷ 2 = 12 ÷ 2 = 6 inches.  \n4. Area of a circle = π × (radius)².  \n5. Therefore, area = π × 6² = 36π ≈ 113.097 square inches.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Student: A pizza has a diameter of 12 inches. What is the area of the pizza?\n    \"\"\"\n    diameter_in_inches = 12\n    radius_in_inches = diameter_in_inches / 2\n    import math\n    area_in_square_inches = math.pi * radius_in_inches ** 2\n    result = area_in_square_inches\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Student: A pizza has a diameter of 12 inches. What is the area of the pizza?\n    \"\"\"\n    diameter_in_inches = 12\n    radius_in_inches = diameter_in_inches / 2\n    import math\n    area_in_square_inches = math.pi * radius_in_inches ** 2\n    result = area_in_square_inches\n    return result",
    "result": 113.09733552923255
  },
  {
    "index": 49,
    "response": "**Reasoning:**\n1. Identify the distances Ryan has already run:\n   - Monday: 5 miles\n   - Tuesday: 3 miles\n   - Wednesday: 7 miles\n2. Compute the total distance already run:  \n   total_run = 5 + 3 + 7 = 15 miles\n3. The target for the week is 25 miles.\n4. The additional miles needed = target (25) − total_run (15) = 10 miles.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Ryan ran 5 miles on Monday, 3 miles on Tuesday, and 7 miles on Wednesday. If he wants to run 25 miles in total this week, how many more miles does he need to run?\n    \"\"\"\n    monday_miles = 5\n    tuesday_miles = 3\n    wednesday_miles = 7\n    total_target = 25\n\n    # Calculate the total already run\n    total_run = monday_miles + tuesday_miles + wednesday_miles\n    # Compute how many more miles are needed\n    result = total_target - total_run\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Ryan ran 5 miles on Monday, 3 miles on Tuesday, and 7 miles on Wednesday. If he wants to run 25 miles in total this week, how many more miles does he need to run?\n    \"\"\"\n    monday_miles = 5\n    tuesday_miles = 3\n    wednesday_miles = 7\n    total_target = 25\n\n    # Calculate the total already run\n    total_run = monday_miles + tuesday_miles + wednesday_miles\n    # Compute how many more miles are needed\n    result = total_target - total_run\n\n    return result",
    "result": 10
  },
  {
    "index": 50,
    "response": "**Reasoning:**\n1. The original price of the shoes is \\$60.  \n2. A 20% discount is applied first.  \n   - Discount amount = 20% of \\$60 = 0.20 × 60 = \\$12  \n   - Price after discount = \\$60 − \\$12 = \\$48  \n3. An 8% tax is then applied to the discounted price.  \n   - Tax amount = 8% of \\$48 = 0.08 × 48 = \\$3.84  \n   - Final price = \\$48 + \\$3.84 = \\$51.84  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A pair of shoes is priced at $60 before taxes. If there is a discount of 20% and then a tax of 8% is applied, what is the final price of the shoes?\n    \"\"\"\n    original_price = 60.0\n    discount_rate = 0.20\n    tax_rate = 0.08\n\n    discount_amount = original_price * discount_rate\n    price_after_discount = original_price - discount_amount\n    tax_amount = price_after_discount * tax_rate\n    result = price_after_discount + tax_amount\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A pair of shoes is priced at $60 before taxes. If there is a discount of 20% and then a tax of 8% is applied, what is the final price of the shoes?\n    \"\"\"\n    original_price = 60.0\n    discount_rate = 0.20\n    tax_rate = 0.08\n\n    discount_amount = original_price * discount_rate\n    price_after_discount = original_price - discount_amount\n    tax_amount = price_after_discount * tax_rate\n    result = price_after_discount + tax_amount\n\n    return result",
    "result": 51.84
  },
  {
    "index": 51,
    "response": "**Reasoning:**\n\nLet’s restate what’s given:\n\n- Robert has a total collection of 10 coins.\n- Among those, he selects 5 coins of one denomination (call that value v) and 4 coins of another denomination (call that value w).\n- It turns out the total value of the 5 coins equals the total value of the 4 coins, so  \n  5·v = 4·w.\n\nFrom 5·v = 4·w we get v/w = 4/5.  In other words, each of the 5 coins must be worth 4 units of some base amount, and each of the 4 coins worth 5 of the same base units (for example, 20¢ and 25¢, or 4p and 5p, etc.).  But regardless of the exact denominations, Robert still has exactly the 10 coins he started with.  The puzzle’s final question (“How many coins does Robert have?”) is simply answered by the original total:\n\nRobert has 10 coins.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Robert has a collection of 10 coins. He found 5 coins of the same value and 4 coins of a different value.\n    How many coins does Robert have if the value of the 5 coins is equal to the value of the 4 coins?\n    \"\"\"\n    # total number of coins Robert originally has\n    total_coins = 10\n\n    # number of coins in each group\n    coins_group_one = 5\n    coins_group_two = 4\n\n    # they satisfy 5 * v = 4 * w, so v/w = 4/5 (e.g. 20¢ vs. 25¢)\n    # but the question is simply: how many coins does Robert have?\n    result = total_coins\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Robert has a collection of 10 coins. He found 5 coins of the same value and 4 coins of a different value.\n    How many coins does Robert have if the value of the 5 coins is equal to the value of the 4 coins?\n    \"\"\"\n    # total number of coins Robert originally has\n    total_coins = 10\n\n    # number of coins in each group\n    coins_group_one = 5\n    coins_group_two = 4\n\n    # they satisfy 5 * v = 4 * w, so v/w = 4/5 (e.g. 20¢ vs. 25¢)\n    # but the question is simply: how many coins does Robert have?\n    result = total_coins\n\n    return result",
    "result": 10
  },
  {
    "index": 52,
    "response": "**Reasoning:**\n1. The problem states that the number of monkeys is twice the number of gorillas.\n2. We are given that there are 10 gorillas.\n3. Therefore, the number of monkeys = 2 × (number of gorillas) = 2 × 10 = 20.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A zoo has twice as many monkeys as gorillas. If there are 10 gorillas, how many monkeys are there?\n    \"\"\"\n    number_of_gorillas = 10\n    number_of_monkeys = 2 * number_of_gorillas\n    result = number_of_monkeys\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A zoo has twice as many monkeys as gorillas. If there are 10 gorillas, how many monkeys are there?\n    \"\"\"\n    number_of_gorillas = 10\n    number_of_monkeys = 2 * number_of_gorillas\n    result = number_of_monkeys\n\n    return result",
    "result": 20
  },
  {
    "index": 53,
    "response": "**Reasoning:**\n1. Tristan bought 60 packs of gum.  \n2. Jennifer bought 9 more packs of gum than Tristan.  \n3. To find how many packs Jennifer bought, add the extra 9 packs to Tristan’s 60 packs:  \n   Jennifer’s packs = 60 + 9 = 69.  \n4. Therefore, Jennifer bought 69 packs of gum.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Tristan bought 60 packs of gum, Jennifer bought 9 more packs of gum than Tristan did. How many packs of gum did Jennifer buy?\n    \"\"\"\n    tristan_packs = 60\n    extra_packs = 9\n    jennifer_packs = tristan_packs + extra_packs\n    result = jennifer_packs\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Tristan bought 60 packs of gum, Jennifer bought 9 more packs of gum than Tristan did. How many packs of gum did Jennifer buy?\n    \"\"\"\n    tristan_packs = 60\n    extra_packs = 9\n    jennifer_packs = tristan_packs + extra_packs\n    result = jennifer_packs\n    return result",
    "result": 69
  },
  {
    "index": 54,
    "response": "**Reasoning:**\n\n1. Adam has 4 cages.\n2. Each cage contains 9 chickens.\n3. So, the total number of chickens in all the cages is 4 × 9 = 36.\n4. In addition, Adam sees 24 extra chickens.\n5. Therefore, the total number of chickens Adam sees is 36 + 24 = 60.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Adam finds 4 cages with 9 chickens each and 24 extra chickens. How many chickens did Adam see in total?\n    \"\"\"\n    # Number of cages Adam finds\n    number_of_cages = 4\n    # Number of chickens in each cage\n    chickens_per_cage = 9\n    # Extra chickens Adam sees\n    extra_chickens = 24\n\n    # Calculate chickens in cages\n    chickens_in_cages = number_of_cages * chickens_per_cage\n    # Total chickens is sum of chickens in cages and extra chickens\n    result = chickens_in_cages + extra_chickens\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Adam finds 4 cages with 9 chickens each and 24 extra chickens. How many chickens did Adam see in total?\n    \"\"\"\n    # Number of cages Adam finds\n    number_of_cages = 4\n    # Number of chickens in each cage\n    chickens_per_cage = 9\n    # Extra chickens Adam sees\n    extra_chickens = 24\n\n    # Calculate chickens in cages\n    chickens_in_cages = number_of_cages * chickens_per_cage\n    # Total chickens is sum of chickens in cages and extra chickens\n    result = chickens_in_cages + extra_chickens\n\n    return result",
    "result": 60
  },
  {
    "index": 55,
    "response": "**Reasoning:**\n\n1. The cyclist goes 40 km at 20 km/h.  \n   Time for outbound leg = distance / speed = 40 km ÷ 20 km/h = 2 h.  \n2. The cyclist returns 40 km at 30 km/h.  \n   Time for return leg = 40 km ÷ 30 km/h = 4/3 h ≈ 1.333… h.  \n3. Total distance traveled = 40 km + 40 km = 80 km.  \n4. Total time spent = 2 h + 4/3 h = 10/3 h ≈ 3.333… h.  \n5. Average speed = total distance ÷ total time = 80 km ÷ (10/3 h) = 80 × 3/10 = 24 km/h.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A cyclist travels 40 kilometers at a speed of 20 kilometers per hour,\n    then returns to the starting point at a speed of 30 kilometers per hour.\n    What is the average speed for the whole trip?\n    \"\"\"\n    # distances\n    distance_out = 40.0        # kilometers going out\n    distance_return = 40.0     # kilometers returning\n\n    # speeds\n    speed_out = 20.0           # km/h outbound\n    speed_return = 30.0        # km/h return\n\n    # times for each leg\n    time_out = distance_out / speed_out\n    time_return = distance_return / speed_return\n\n    # total distance and total time\n    total_distance = distance_out + distance_return\n    total_time = time_out + time_return\n\n    # average speed for the entire trip\n    result = total_distance / total_time\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A cyclist travels 40 kilometers at a speed of 20 kilometers per hour,\n    then returns to the starting point at a speed of 30 kilometers per hour.\n    What is the average speed for the whole trip?\n    \"\"\"\n    # distances\n    distance_out = 40.0        # kilometers going out\n    distance_return = 40.0     # kilometers returning\n\n    # speeds\n    speed_out = 20.0           # km/h outbound\n    speed_return = 30.0        # km/h return\n\n    # times for each leg\n    time_out = distance_out / speed_out\n    time_return = distance_return / speed_return\n\n    # total distance and total time\n    total_distance = distance_out + distance_return\n    total_time = time_out + time_return\n\n    # average speed for the entire trip\n    result = total_distance / total_time\n\n    return result",
    "result": 24.000000000000004
  },
  {
    "index": 56,
    "response": "**Reasoning:**\n1. Compute the volume of the garden in cubic feet:\n   volume_cubic_feet = length * width * depth = 20 ft * 10 ft * 2 ft = 400 ft³.\n2. Convert cubic feet to cubic yards, since 1 cubic yard = 27 cubic feet:\n   volume_cubic_yards = volume_cubic_feet / 27 = 400 / 27 ≈ 14.8148 yd³.\n3. Multiply by the cost per cubic yard:\n   cost = volume_cubic_yards * \\$25 ≈ 14.8148 * 25 ≈ \\$370.37.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A rectangular garden with a length of 20 feet and a width of 10 feet needs to be filled with soil.\n    If soil costs $25 per cubic yard and the garden needs to be filled with soil to a depth of 2 feet,\n    how much will it cost to fill the garden with soil?\n    \"\"\"\n    # Given dimensions in feet\n    length_ft = 20\n    width_ft = 10\n    depth_ft = 2\n\n    # Cost per cubic yard\n    cost_per_cubic_yard = 25\n\n    # Step 1: Volume in cubic feet\n    volume_cubic_feet = length_ft * width_ft * depth_ft  # 400 ft^3\n\n    # Step 2: Convert to cubic yards (1 yd^3 = 27 ft^3)\n    volume_cubic_yards = volume_cubic_feet / 27  # ≈ 14.8148 yd^3\n\n    # Step 3: Total cost\n    result = volume_cubic_yards * cost_per_cubic_yard  # ≈ $370.37\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A rectangular garden with a length of 20 feet and a width of 10 feet needs to be filled with soil.\n    If soil costs $25 per cubic yard and the garden needs to be filled with soil to a depth of 2 feet,\n    how much will it cost to fill the garden with soil?\n    \"\"\"\n    # Given dimensions in feet\n    length_ft = 20\n    width_ft = 10\n    depth_ft = 2\n\n    # Cost per cubic yard\n    cost_per_cubic_yard = 25\n\n    # Step 1: Volume in cubic feet\n    volume_cubic_feet = length_ft * width_ft * depth_ft  # 400 ft^3\n\n    # Step 2: Convert to cubic yards (1 yd^3 = 27 ft^3)\n    volume_cubic_yards = volume_cubic_feet / 27  # ≈ 14.8148 yd^3\n\n    # Step 3: Total cost\n    result = volume_cubic_yards * cost_per_cubic_yard  # ≈ $370.37\n\n    return result",
    "result": 370.3703703703704
  },
  {
    "index": 57,
    "response": "**Reasoning:**\n1. We know the total number of slices sold: 200 slices.\n2. Each 12-inch pizza yields 8 slices.\n3. To find out how many whole pizzas were used, we divide the total slices by the slices per pizza.\n4. Calculation: number_of_pizzas = total_slices / slices_per_pizza = 200 / 8 = 25\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A pizza parlor sold 200 slices of pizza on a busy day. If they can make 8 slices out of a 12-inch pizza, how many 12-inch pizzas did they use that day?\n    \"\"\"\n    total_slices_sold = 200\n    slices_per_pizza = 8\n\n    # Divide total slices by slices per pizza to get the number of pizzas used\n    result = total_slices_sold / slices_per_pizza\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A pizza parlor sold 200 slices of pizza on a busy day. If they can make 8 slices out of a 12-inch pizza, how many 12-inch pizzas did they use that day?\n    \"\"\"\n    total_slices_sold = 200\n    slices_per_pizza = 8\n\n    # Divide total slices by slices per pizza to get the number of pizzas used\n    result = total_slices_sold / slices_per_pizza\n\n    return result",
    "result": 25.0
  },
  {
    "index": 58,
    "response": "**Reasoning:**\n- Total apples = 15 kg  \n- Total oranges = 12 kg  \n- She gives away 25% of the apples → 0.25 × 15 = 3.75 kg  \n- She gives away 40% of the oranges → 0.40 × 12 = 4.8 kg  \n- Apples left = 15 − 3.75 = 11.25 kg  \n- Oranges left = 12 − 4.8 = 7.2 kg  \n- Total fruit left = 11.25 + 7.2 = 18.45 kg  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sara bought 15 kg of apples and 12 kg of oranges. She gave away 25% of the apples and 40% of the oranges. How many kilograms of fruits does she have left?\n    \"\"\"\n    total_apples_kg = 15\n    total_oranges_kg = 12\n    fraction_apples_given = 0.25\n    fraction_oranges_given = 0.40\n\n    apples_given_kg = total_apples_kg * fraction_apples_given\n    oranges_given_kg = total_oranges_kg * fraction_oranges_given\n\n    apples_left_kg = total_apples_kg - apples_given_kg\n    oranges_left_kg = total_oranges_kg - oranges_given_kg\n\n    result = apples_left_kg + oranges_left_kg\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sara bought 15 kg of apples and 12 kg of oranges. She gave away 25% of the apples and 40% of the oranges. How many kilograms of fruits does she have left?\n    \"\"\"\n    total_apples_kg = 15\n    total_oranges_kg = 12\n    fraction_apples_given = 0.25\n    fraction_oranges_given = 0.40\n\n    apples_given_kg = total_apples_kg * fraction_apples_given\n    oranges_given_kg = total_oranges_kg * fraction_oranges_given\n\n    apples_left_kg = total_apples_kg - apples_given_kg\n    oranges_left_kg = total_oranges_kg - oranges_given_kg\n\n    result = apples_left_kg + oranges_left_kg\n\n    return result",
    "result": 18.45
  },
  {
    "index": 59,
    "response": "**Reasoning:**\n\n1. Determine the total number of chairs:\n   - Front row chairs = 150\n   - Back row chairs = 100\n   - Total chairs = 150 + 100 = 250\n\n2. Calculate how many chairs are occupied:\n   - 60% of 250 chairs are occupied\n   - Occupied chairs = 0.60 × 250 = 150\n\n3. Find how many chairs are still available:\n   - Available chairs = Total chairs − Occupied chairs\n   - Available chairs = 250 − 150 = 100\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In a music concert, there are 150 chairs in the front row and 100 chairs in the back row. If 60% of the chairs are already occupied, how many chairs are still available?\n    \"\"\"\n    front_row_chairs = 150\n    back_row_chairs = 100\n    total_chairs = front_row_chairs + back_row_chairs\n    occupied_chairs = 0.6 * total_chairs\n    available_chairs = total_chairs - occupied_chairs\n\n    return available_chairs\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In a music concert, there are 150 chairs in the front row and 100 chairs in the back row. If 60% of the chairs are already occupied, how many chairs are still available?\n    \"\"\"\n    front_row_chairs = 150\n    back_row_chairs = 100\n    total_chairs = front_row_chairs + back_row_chairs\n    occupied_chairs = 0.6 * total_chairs\n    available_chairs = total_chairs - occupied_chairs\n\n    return available_chairs",
    "result": 100.0
  },
  {
    "index": 60,
    "response": "**Reasoning:**\n1. We start with a full jug that contains 8 cups of water.\n2. Johnny takes out 4 cups from the jug.\n3. To find how many cups remain, we subtract the 4 cups taken from the original 8 cups.\n4. 8 cups − 4 cups = 4 cups remaining.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If there are 8 cups in a full jug of water, and Johnny took out 4 cups, how many cups of water are left in the jug?\n    \"\"\"\n    total_cups = 8\n    cups_taken = 4\n\n    # Calculate how many cups are left\n    result = total_cups - cups_taken\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If there are 8 cups in a full jug of water, and Johnny took out 4 cups, how many cups of water are left in the jug?\n    \"\"\"\n    total_cups = 8\n    cups_taken = 4\n\n    # Calculate how many cups are left\n    result = total_cups - cups_taken\n\n    return result",
    "result": 4
  },
  {
    "index": 61,
    "response": "**Reasoning:**\n1. Identify the number of bags purchased each month: 40 bags.  \n2. Identify the cost per bag: \\$8 per bag.  \n3. The total cost is calculated by multiplying the number of bags by the cost per bag.  \n4. Compute: 40 bags * \\$8/bag = \\$320.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Joe's dad has a farm and he needs to buy feed for his cows. Each month, he buys 40 bags of feed, each bag weighing 40 pounds. The feed costs $8 a bag. What is the total cost for the feed?\n    \"\"\"\n    # Number of bags purchased each month\n    number_of_bags = 40\n    \n    # Cost per bag of feed\n    cost_per_bag = 8  # in dollars\n    \n    # Calculate total cost\n    total_cost = number_of_bags * cost_per_bag\n    \n    return total_cost\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Joe's dad has a farm and he needs to buy feed for his cows. Each month, he buys 40 bags of feed, each bag weighing 40 pounds. The feed costs $8 a bag. What is the total cost for the feed?\n    \"\"\"\n    # Number of bags purchased each month\n    number_of_bags = 40\n    \n    # Cost per bag of feed\n    cost_per_bag = 8  # in dollars\n    \n    # Calculate total cost\n    total_cost = number_of_bags * cost_per_bag\n    \n    return total_cost",
    "result": 320
  },
  {
    "index": 62,
    "response": "**Reasoning:**\n1. Compute the total number of stamps that Alice and Bob have together: 45 + 30 = 75.  \n2. Subtract that total from Charlie’s stamps to find how many more he has: 90 − 75 = 15.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Alice, Bob, and Charlie are collecting stamps. Alice has 45 stamps. Bob has 30 stamps. Charlie has 90 stamps. How many more stamps does Charlie have than Alice and Bob together?\n    \"\"\"\n    alice_stamps = 45\n    bob_stamps = 30\n    charlie_stamps = 90\n\n    total_alice_bob = alice_stamps + bob_stamps\n    result = charlie_stamps - total_alice_bob\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Alice, Bob, and Charlie are collecting stamps. Alice has 45 stamps. Bob has 30 stamps. Charlie has 90 stamps. How many more stamps does Charlie have than Alice and Bob together?\n    \"\"\"\n    alice_stamps = 45\n    bob_stamps = 30\n    charlie_stamps = 90\n\n    total_alice_bob = alice_stamps + bob_stamps\n    result = charlie_stamps - total_alice_bob\n\n    return result",
    "result": 15
  },
  {
    "index": 63,
    "response": "**Reasoning:**\n- Identify the total pounds of ground beef required: 8 pounds.\n- Identify the weight of each package of ground beef: 2 pounds.\n- To find the number of packages needed, divide the total pounds by the weight per package.\n- Calculation: 8 ÷ 2 = 4.\n- Therefore, John should use 4 packages of ground beef.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John is cooking a massive pot of chili, and the recipe calls for pounds of ground beef instead of telling him the number. He needs 8 pounds in total. He looks up online that a package of ground beef weighs 2 pounds. How many packages should he use?\n    \"\"\"\n    total_pounds_needed = 8\n    package_weight = 2\n    packages_needed = total_pounds_needed / package_weight\n    result = packages_needed\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John is cooking a massive pot of chili, and the recipe calls for pounds of ground beef instead of telling him the number. He needs 8 pounds in total. He looks up online that a package of ground beef weighs 2 pounds. How many packages should he use?\n    \"\"\"\n    total_pounds_needed = 8\n    package_weight = 2\n    packages_needed = total_pounds_needed / package_weight\n    result = packages_needed\n\n    return result",
    "result": 4.0
  },
  {
    "index": 64,
    "response": "**Reasoning:**\n1. The recipe gives a ratio of sugar to flour: 2 cups of sugar for every 3 cups of flour.\n2. To find how much sugar is needed per cup of flour, divide 2 by 3.\n3. Multiply that per-cup sugar amount by the desired flour amount (10 cups) to get the total sugar needed:\n   sugar_needed = (2/3) * 10 = 20/3 ≈ 6.6667 cups.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A recipe asks for 2 cups of sugar for 3 cups of flour. If you want to make 10 cups of flour, how many cups of sugar do you need?\n    \"\"\"\n    # cups of sugar needed per cup of flour\n    sugar_per_flour = 2 / 3\n\n    # desired amount of flour in cups\n    flour_desired = 10\n\n    # total sugar needed for the desired flour\n    result = sugar_per_flour * flour_desired\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A recipe asks for 2 cups of sugar for 3 cups of flour. If you want to make 10 cups of flour, how many cups of sugar do you need?\n    \"\"\"\n    # cups of sugar needed per cup of flour\n    sugar_per_flour = 2 / 3\n\n    # desired amount of flour in cups\n    flour_desired = 10\n\n    # total sugar needed for the desired flour\n    result = sugar_per_flour * flour_desired\n\n    return result",
    "result": 6.666666666666666
  },
  {
    "index": 65,
    "response": "**Reasoning:**\n\n1. Isabella took 4 tests with the following scores (each out of 10):  \n   - Test 1: 9 out of 10  \n   - Test 2: 7 out of 10  \n   - Test 3: 8 out of 10  \n   - Test 4: 5 out of 10  \n\n2. To find the average test score, we need to add up all of her scores and then divide by the number of tests.\n\n3. Sum of scores = 9 + 7 + 8 + 5 = 29\n\n4. Number of tests = 4\n\n5. Average score = (Sum of scores) / (Number of tests) = 29 / 4 = 7.25\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Student: Isabella took 4 tests, she got 9 out of 10 on the first test, \n    7 out of 10 on the second, 8 out of 10 on the third, and 5 out of 10 \n    on the fourth. What is her average test score?\n    \"\"\"\n    # Individual test scores\n    score_test_1 = 9\n    score_test_2 = 7\n    score_test_3 = 8\n    score_test_4 = 5\n    \n    # Calculate the total score\n    total_score = score_test_1 + score_test_2 + score_test_3 + score_test_4\n    \n    # Number of tests taken\n    number_of_tests = 4\n    \n    # Compute the average score\n    result = total_score / number_of_tests\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Student: Isabella took 4 tests, she got 9 out of 10 on the first test, \n    7 out of 10 on the second, 8 out of 10 on the third, and 5 out of 10 \n    on the fourth. What is her average test score?\n    \"\"\"\n    # Individual test scores\n    score_test_1 = 9\n    score_test_2 = 7\n    score_test_3 = 8\n    score_test_4 = 5\n    \n    # Calculate the total score\n    total_score = score_test_1 + score_test_2 + score_test_3 + score_test_4\n    \n    # Number of tests taken\n    number_of_tests = 4\n    \n    # Compute the average score\n    result = total_score / number_of_tests\n    \n    return result",
    "result": 7.25
  },
  {
    "index": 66,
    "response": "**Reasoning:**\n1. Start with the total scholarship amount: \\$15,000.  \n2. Calculate 20% of \\$15,000 for college fees: 0.20 × 15,000 = \\$3,000.  \n3. Subtract fees from the total to get the remaining amount: 15,000 − 3,000 = \\$12,000.  \n4. Calculate 30% of the remaining \\$12,000 for textbooks: 0.30 × 12,000 = \\$3,600.  \n5. Subtract textbook cost from the remaining amount: 12,000 − 3,600 = \\$8,400.  \n6. Subtract the \\$1,000 donation: 8,400 − 1,000 = \\$7,400.  \n7. Calculate 10% of the \\$7,400 for investment: 0.10 × 7,400 = \\$740.  \n8. Subtract the investment amount from the remaining funds: 7,400 − 740 = \\$6,660.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Lily won a scholarship of $15,000. She paid 20% of it towards college fees and used 30% of the remaining money to buy textbooks. She donated $1,000 to a charity and invested 10% of the money left in mutual funds. How much money did she have left?\n    \"\"\"\n    total_scholarship = 15000\n    fees_percentage = 0.20\n    fees_paid = total_scholarship * fees_percentage\n    remaining_after_fees = total_scholarship - fees_paid\n\n    textbook_percentage = 0.30\n    textbook_cost = remaining_after_fees * textbook_percentage\n    remaining_after_textbooks = remaining_after_fees - textbook_cost\n\n    donation = 1000\n    remaining_after_donation = remaining_after_textbooks - donation\n\n    investment_percentage = 0.10\n    investment_amount = remaining_after_donation * investment_percentage\n    remaining_after_investment = remaining_after_donation - investment_amount\n\n    result = remaining_after_investment\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Lily won a scholarship of $15,000. She paid 20% of it towards college fees and used 30% of the remaining money to buy textbooks. She donated $1,000 to a charity and invested 10% of the money left in mutual funds. How much money did she have left?\n    \"\"\"\n    total_scholarship = 15000\n    fees_percentage = 0.20\n    fees_paid = total_scholarship * fees_percentage\n    remaining_after_fees = total_scholarship - fees_paid\n\n    textbook_percentage = 0.30\n    textbook_cost = remaining_after_fees * textbook_percentage\n    remaining_after_textbooks = remaining_after_fees - textbook_cost\n\n    donation = 1000\n    remaining_after_donation = remaining_after_textbooks - donation\n\n    investment_percentage = 0.10\n    investment_amount = remaining_after_donation * investment_percentage\n    remaining_after_investment = remaining_after_donation - investment_amount\n\n    result = remaining_after_investment\n\n    return result",
    "result": 6660.0
  },
  {
    "index": 67,
    "response": "**Reasoning:**\n\n1. We have an initial principal \\(P = \\$3000\\).  \n2. The annual interest rate is 4%, which we convert to a monthly rate since deposits happen monthly.  \n   Monthly interest rate \\(r = 0.04 / 12\\).  \n3. The total time is 2 years, which means \\(n = 2 \\times 12 = 24\\) months.  \n4. Each month:\n   a. The existing balance grows by the monthly interest rate.  \n   b. Then Jack deposits an additional \\$100 at the end of that month.  \n5. We can simulate this month by month:\n   - Start with `balance = 3000`.  \n   - For each of the 24 months:\n     1. Apply interest: `balance *= (1 + r)`.  \n     2. Deposit \\$100: `balance += 100`.  \n6. After the loop, `balance` is the account value at the end of 2 years.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jack saves $3000 in a savings account with an annual interest rate of 4%. \n    If he deposits an additional $100 per month and leaves the money in the account for 2 years, \n    how much money will he have in the account at the end of 2 years?\n    \"\"\"\n    # Initial principal\n    initial_principal = 3000.0\n    # Annual interest rate\n    annual_rate = 0.04\n    # Convert to monthly rate\n    monthly_rate = annual_rate / 12\n    # Number of months in 2 years\n    total_months = 2 * 12\n    # Monthly deposit\n    monthly_deposit = 100.0\n\n    # Start balance\n    balance = initial_principal\n\n    # Simulate month by month\n    for _ in range(total_months):\n        # Apply interest\n        balance *= (1 + monthly_rate)\n        # Add monthly deposit\n        balance += monthly_deposit\n\n    # Final balance after 2 years\n    result = balance\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    final_amount = simple_math_problem()\n    print(f\"Balance after 2 years: ${final_amount:.2f}\")\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jack saves $3000 in a savings account with an annual interest rate of 4%. \n    If he deposits an additional $100 per month and leaves the money in the account for 2 years, \n    how much money will he have in the account at the end of 2 years?\n    \"\"\"\n    # Initial principal\n    initial_principal = 3000.0\n    # Annual interest rate\n    annual_rate = 0.04\n    # Convert to monthly rate\n    monthly_rate = annual_rate / 12\n    # Number of months in 2 years\n    total_months = 2 * 12\n    # Monthly deposit\n    monthly_deposit = 100.0\n\n    # Start balance\n    balance = initial_principal\n\n    # Simulate month by month\n    for _ in range(total_months):\n        # Apply interest\n        balance *= (1 + monthly_rate)\n        # Add monthly deposit\n        balance += monthly_deposit\n\n    # Final balance after 2 years\n    result = balance\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    final_amount = simple_math_problem()\n    print(f\"Balance after 2 years: ${final_amount:.2f}\")",
    "result": 5743.71765224913
  },
  {
    "index": 68,
    "response": "**Reasoning:**\n\n1.  Benjamin writes at a rate of 2 paragraphs per 10 minutes, i.e.  \n    rate_para_per_min = 2 paragraphs ÷ 10 minutes = 0.2 paragraphs/minute\n\n2.  Today he wrote in three stretches:\n    - 25 minutes ⇒ paragraphs_written₁ = 25 min × 0.2 para/min = 5 paragraphs  \n    - 15 minutes ⇒ paragraphs_written₂ = 15 min × 0.2 para/min = 3 paragraphs  \n    - 40 minutes ⇒ paragraphs_written₃ = 40 min × 0.2 para/min = 8 paragraphs  \n\n    Total paragraphs written = 5 + 3 + 8 = 16\n\n3.  He then deleted 3 off-topic paragraphs, so net new paragraphs = 16 − 3 = 13\n\n4.  The finished essay is 560 words total.  If we assume each paragraph in the final essay has the same length, then  \n       words_per_paragraph = 560 words ÷ 13 paragraphs\n\n5.  Let S be the number of words he had in the essay at the *start* of today.  The words he added today is  \n       13 paragraphs × (560/13) words/paragraph = 560 words  \n\n    So  \n       S + 560 = 560  \n    ⇒ S = 0\n\n   In other words, under these assumptions he must have started today with 0 words.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Benjamin can write 2 paragraphs in 10 minutes. Today, he continued working on an essay he started last night. He wrote for 25 minutes, took a break, and wrote for 15 more minutes. He then realized he wrote off-topic and had to delete 3 paragraphs. After a phone call, he wrote for another 40 minutes. If the essay has 560 words, how many words did Benjamin start with today?\n    \"\"\"\n    # writing rate in paragraphs per minute\n    rate_para_per_min = 2 / 10\n\n    # time spent writing today\n    time1 = 25  # minutes\n    time2 = 15  # minutes\n    time3 = 40  # minutes\n    total_time = time1 + time2 + time3\n\n    # total paragraphs written and then deleted\n    paragraphs_written = rate_para_per_min * total_time\n    paragraphs_deleted = 3\n    net_paragraphs = paragraphs_written - paragraphs_deleted  # 13\n\n    # words per paragraph (assuming uniform length)\n    total_words = 560\n    words_per_paragraph = total_words / net_paragraphs\n\n    # starting words S + words_added = 560\n    words_added = net_paragraphs * words_per_paragraph  # 560\n    result = total_words - words_added  # which is 0\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Benjamin can write 2 paragraphs in 10 minutes. Today, he continued working on an essay he started last night. He wrote for 25 minutes, took a break, and wrote for 15 more minutes. He then realized he wrote off-topic and had to delete 3 paragraphs. After a phone call, he wrote for another 40 minutes. If the essay has 560 words, how many words did Benjamin start with today?\n    \"\"\"\n    # writing rate in paragraphs per minute\n    rate_para_per_min = 2 / 10\n\n    # time spent writing today\n    time1 = 25  # minutes\n    time2 = 15  # minutes\n    time3 = 40  # minutes\n    total_time = time1 + time2 + time3\n\n    # total paragraphs written and then deleted\n    paragraphs_written = rate_para_per_min * total_time\n    paragraphs_deleted = 3\n    net_paragraphs = paragraphs_written - paragraphs_deleted  # 13\n\n    # words per paragraph (assuming uniform length)\n    total_words = 560\n    words_per_paragraph = total_words / net_paragraphs\n\n    # starting words S + words_added = 560\n    words_added = net_paragraphs * words_per_paragraph  # 560\n    result = total_words - words_added  # which is 0\n\n    return result",
    "result": 0.0
  },
  {
    "index": 69,
    "response": "**Reasoning:**\n1. Let E be Elizabeth’s current age.\n2. We know Isabella’s current age is 7.\n3. In five years, Isabella will be 7 + 5 = 12.\n4. In five years, Elizabeth will be E + 5.\n5. The problem states that in five years, Elizabeth’s age will be twice Isabella’s age then:  \n   E + 5 = 2 × 12\n6. Therefore, E + 5 = 24  \n7. Solving for E gives E = 24 − 5 = 19.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In five years, Elizabeth will be twice as old as her sister Isabella. If Isabella is currently 7 years old, how old is Elizabeth?\n    \"\"\"\n    # Isabella's current age\n    isabella_current_age = 7\n\n    # Isabella's age in five years\n    isabella_future_age = isabella_current_age + 5\n\n    # Elizabeth's age in five years is twice Isabella's age in five years\n    elizabeth_future_age = 2 * isabella_future_age\n\n    # Elizabeth's current age is her future age minus 5\n    result = elizabeth_future_age - 5\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In five years, Elizabeth will be twice as old as her sister Isabella. If Isabella is currently 7 years old, how old is Elizabeth?\n    \"\"\"\n    # Isabella's current age\n    isabella_current_age = 7\n\n    # Isabella's age in five years\n    isabella_future_age = isabella_current_age + 5\n\n    # Elizabeth's age in five years is twice Isabella's age in five years\n    elizabeth_future_age = 2 * isabella_future_age\n\n    # Elizabeth's current age is her future age minus 5\n    result = elizabeth_future_age - 5\n\n    return result",
    "result": 19
  },
  {
    "index": 70,
    "response": "**Reasoning:**\n\n1. Let the width of the rectangle be \\(w\\).  \n2. According to the problem, the length \\(L\\) is twice the width, so \\(L = 2w\\).  \n3. The perimeter \\(P\\) of a rectangle is given by \\(P = 2(L + w)\\).  \n4. We know \\(P = 70\\), so:\n   70 = 2(L + w)  \n   Substitute \\(L = 2w\\):  \n   70 = 2(2w + w) = 2·3w = 6w  \n5. Solve for \\(w\\):  \n   \\(w = 70 / 6 = 35/3\\).  \n6. Then the length is  \n   \\(L = 2w = 2·(35/3) = 70/3 \\approx 23.333\\).  \n\nTherefore, the length of the rectangle is \\(70/3\\) (approximately 23.333).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    The perimeter of a rectangle is 70 and the length is twice the width. What is the length of the rectangle?\n    \"\"\"\n    # Let w be the width\n    width = 70 / 6            # from 6w = 70\n    # Length is twice the width\n    length = 2 * width\n    result = length\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The perimeter of a rectangle is 70 and the length is twice the width. What is the length of the rectangle?\n    \"\"\"\n    # Let w be the width\n    width = 70 / 6            # from 6w = 70\n    # Length is twice the width\n    length = 2 * width\n    result = length\n    return result",
    "result": 23.333333333333332
  },
  {
    "index": 71,
    "response": "**Reasoning:**\n1. The original price of the dress is \\$120.\n2. Sarah has a coupon for 20% off:\n   - 20% of \\$120 is 0.20 * 120 = \\$24.\n   - Subtracting this discount: 120 - 24 = \\$96.\n3. She then applies an additional \\$25 discount:\n   - Subtracting this: 96 - 25 = \\$71.\n4. Therefore, the final price Sarah pays is \\$71.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sarah wants to buy a dress that costs $120. She has a coupon for 20% off the full price and an additional $25 discount. What is the final price that she pays?\n    \"\"\"\n    original_price = 120.0\n    percent_off = 0.20\n    additional_discount = 25.0\n\n    # Calculate the 20% discount amount\n    discount_amount = original_price * percent_off\n    # Apply the 20% discount\n    price_after_percent_discount = original_price - discount_amount\n    # Apply the additional $25 discount\n    final_price = price_after_percent_discount - additional_discount\n\n    return final_price\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sarah wants to buy a dress that costs $120. She has a coupon for 20% off the full price and an additional $25 discount. What is the final price that she pays?\n    \"\"\"\n    original_price = 120.0\n    percent_off = 0.20\n    additional_discount = 25.0\n\n    # Calculate the 20% discount amount\n    discount_amount = original_price * percent_off\n    # Apply the 20% discount\n    price_after_percent_discount = original_price - discount_amount\n    # Apply the additional $25 discount\n    final_price = price_after_percent_discount - additional_discount\n\n    return final_price",
    "result": 71.0
  },
  {
    "index": 72,
    "response": "**Reasoning:**\n\n1. Jessica starts with 48 square feet of wood.\n2. She plans to cut this wood into pieces that each measure 4 feet by 2 feet.\n3. First, compute the area of one piece:  \n   piece_area = 4 feet * 2 feet = 8 square feet.\n4. Next, determine how many such pieces can be obtained from the total wood area by dividing the total area by the area per piece:  \n   number_of_pieces = total_wood_area / piece_area = 48 / 8 = 6.\n5. Therefore, Jessica can get 6 pieces.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jessica has 48 square feet of wood. She wants to cut it into 4 foot by 2 foot pieces. How many pieces can Jessica get when she is done cutting?\n    \"\"\"\n    total_wood_area = 48\n    piece_length = 4\n    piece_width = 2\n    piece_area = piece_length * piece_width\n    result = total_wood_area / piece_area\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jessica has 48 square feet of wood. She wants to cut it into 4 foot by 2 foot pieces. How many pieces can Jessica get when she is done cutting?\n    \"\"\"\n    total_wood_area = 48\n    piece_length = 4\n    piece_width = 2\n    piece_area = piece_length * piece_width\n    result = total_wood_area / piece_area\n\n    return result",
    "result": 6.0
  },
  {
    "index": 73,
    "response": "**Reasoning:**\n1. Each bike costs \\$450.  \n2. Oliver and Brad want to buy 2 bikes, so the total cost is 2 × \\$450 = \\$900.  \n3. They will sell their old toys for \\$25 each.  \n4. To find out how many toys they must sell, divide the total cost by the price per toy: \\$900 ÷ \\$25 = 36.  \n5. Therefore, they need to sell 36 toys to afford both bikes.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Oliver and his cousin Brad want to buy new bikes that cost $450 each. \n    To earn the money, they will sell their old toys for $25 each. \n    How many toys will they need to sell to afford both bikes?\n    \"\"\"\n    cost_per_bike = 450\n    number_of_bikes = 2\n    money_per_toy = 25\n\n    total_cost = cost_per_bike * number_of_bikes\n    result = total_cost / money_per_toy\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Oliver and his cousin Brad want to buy new bikes that cost $450 each. \n    To earn the money, they will sell their old toys for $25 each. \n    How many toys will they need to sell to afford both bikes?\n    \"\"\"\n    cost_per_bike = 450\n    number_of_bikes = 2\n    money_per_toy = 25\n\n    total_cost = cost_per_bike * number_of_bikes\n    result = total_cost / money_per_toy\n\n    return result",
    "result": 36.0
  },
  {
    "index": 74,
    "response": "**Reasoning:**\n\n1. We need to pay a total of \\$60 using only \\$5 bills and \\$10 bills.\n2. To minimize the number of bills, we should use as many \\$10 bills as possible, since each \\$10 bill contributes more toward the total with just one bill.\n3. Divide 60 by 10 to see how many \\$10 bills we can use:  \n   60 ÷ 10 = 6 exactly, with no remainder.\n4. Since there is no remainder, we don't need any \\$5 bills.\n5. Therefore, the minimum number of bills needed is 6 (all \\$10 bills).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Freya wants to buy a necklace for her younger sister Ellen. She goes to the jewelry store and sees a necklace she likes that costs $60. Freya plans to pay with bills, but she only has 5-dollar bills and 10-dollar bills. What is the minimum number of bills Freya needs to pay for the necklace?\n    \"\"\"\n    # Total cost of the necklace\n    total_cost = 60\n    # Value of each bill denomination\n    five_dollar_value = 5\n    ten_dollar_value = 10\n\n    # Use as many $10 bills as possible\n    max_tens = total_cost // ten_dollar_value\n    # Calculate any remaining amount after using $10 bills\n    remaining_amount = total_cost - (max_tens * ten_dollar_value)\n    # Cover the remainder with $5 bills\n    num_fives = remaining_amount // five_dollar_value\n\n    # Total number of bills used\n    result = max_tens + num_fives\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Freya wants to buy a necklace for her younger sister Ellen. She goes to the jewelry store and sees a necklace she likes that costs $60. Freya plans to pay with bills, but she only has 5-dollar bills and 10-dollar bills. What is the minimum number of bills Freya needs to pay for the necklace?\n    \"\"\"\n    # Total cost of the necklace\n    total_cost = 60\n    # Value of each bill denomination\n    five_dollar_value = 5\n    ten_dollar_value = 10\n\n    # Use as many $10 bills as possible\n    max_tens = total_cost // ten_dollar_value\n    # Calculate any remaining amount after using $10 bills\n    remaining_amount = total_cost - (max_tens * ten_dollar_value)\n    # Cover the remainder with $5 bills\n    num_fives = remaining_amount // five_dollar_value\n\n    # Total number of bills used\n    result = max_tens + num_fives\n    return result",
    "result": 6
  },
  {
    "index": 75,
    "response": "**Reasoning:**\n\n1. Jane takes 20 hours to knit one sweater.  \n2. She charges \\$6 per hour of work.  \n3. Therefore, for one sweater she earns:  \n   20 hours * \\$6/hour = \\$120.  \n4. She knits 5 sweaters, so her total earnings are:  \n   5 * \\$120 = \\$600.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jane can knit a sweater in 20 hours. She decides to charge $6 per hour of work. How much will she earn if she knits 5 sweaters?\n    \"\"\"\n    hours_per_sweater = 20\n    rate_per_hour = 6\n    number_of_sweaters = 5\n\n    earnings_per_sweater = hours_per_sweater * rate_per_hour\n    result = earnings_per_sweater * number_of_sweaters\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jane can knit a sweater in 20 hours. She decides to charge $6 per hour of work. How much will she earn if she knits 5 sweaters?\n    \"\"\"\n    hours_per_sweater = 20\n    rate_per_hour = 6\n    number_of_sweaters = 5\n\n    earnings_per_sweater = hours_per_sweater * rate_per_hour\n    result = earnings_per_sweater * number_of_sweaters\n\n    return result",
    "result": 600
  },
  {
    "index": 76,
    "response": "**Reasoning:**\n1. Determine the total number of balls in the box by adding the counts of each color.\n2. Identify the number of green balls (the favorable outcomes).\n3. Compute the probability as the ratio of green balls to the total number of balls.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A box contains 25 red balls, 15 blue balls, and 20 green balls. If a ball is picked at random from the box, what is the probability of picking a green ball?\n    \"\"\"\n    # Number of balls of each color\n    red_balls = 25\n    blue_balls = 15\n    green_balls = 20\n\n    # Total number of balls\n    total_balls = red_balls + blue_balls + green_balls\n\n    # Probability of picking a green ball\n    probability_green = green_balls / total_balls\n\n    result = probability_green\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A box contains 25 red balls, 15 blue balls, and 20 green balls. If a ball is picked at random from the box, what is the probability of picking a green ball?\n    \"\"\"\n    # Number of balls of each color\n    red_balls = 25\n    blue_balls = 15\n    green_balls = 20\n\n    # Total number of balls\n    total_balls = red_balls + blue_balls + green_balls\n\n    # Probability of picking a green ball\n    probability_green = green_balls / total_balls\n\n    result = probability_green\n    return result",
    "result": 0.3333333333333333
  },
  {
    "index": 77,
    "response": "**Reasoning:**\n1. Identify the individual quiz scores: 85%, 90%, and 92%.\n2. Compute the sum of these scores:  \n   85 + 90 + 92 = 267.\n3. Count the number of quizzes: 3.\n4. Divide the total by the number of quizzes to find the average:  \n   267 ÷ 3 = 89.\n5. Therefore, Tina’s average quiz score is 89%.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If Tina scored 85%, 90%, and 92% on her math quizzes, what was her average score in percentage?\n    \"\"\"\n    score_quiz1 = 85\n    score_quiz2 = 90\n    score_quiz3 = 92\n\n    total_score = score_quiz1 + score_quiz2 + score_quiz3\n    average_score = total_score / 3\n\n    return average_score\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If Tina scored 85%, 90%, and 92% on her math quizzes, what was her average score in percentage?\n    \"\"\"\n    score_quiz1 = 85\n    score_quiz2 = 90\n    score_quiz3 = 92\n\n    total_score = score_quiz1 + score_quiz2 + score_quiz3\n    average_score = total_score / 3\n\n    return average_score",
    "result": 89.0
  },
  {
    "index": 78,
    "response": "**Reasoning:**\n\n1. Rebecca takes 10 articles of clothing each week.  \n2. She does this for 5 weeks.  \n3. Total number of stolen articles = 10 articles/week × 5 weeks = 50 articles.  \n4. Each article sells for \\$20.  \n5. Total revenue = 50 articles × \\$20/article = \\$1000.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Rebecca decides to stop buying clothes and instead steals them to sell online. \n    She takes 10 articles of clothing each week for 5 weeks. \n    If each piece of clothing sells for $20, how much money does she make?\n    \"\"\"\n    pieces_per_week = 10\n    weeks = 5\n    price_per_piece = 20\n\n    total_pieces = pieces_per_week * weeks\n    result = total_pieces * price_per_piece\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Rebecca decides to stop buying clothes and instead steals them to sell online. \n    She takes 10 articles of clothing each week for 5 weeks. \n    If each piece of clothing sells for $20, how much money does she make?\n    \"\"\"\n    pieces_per_week = 10\n    weeks = 5\n    price_per_piece = 20\n\n    total_pieces = pieces_per_week * weeks\n    result = total_pieces * price_per_piece\n\n    return result",
    "result": 1000
  },
  {
    "index": 79,
    "response": "**Reasoning:**\n1. We know the delivery truck’s speed is 40 miles per 1 hour.\n2. We want to find out how far it travels in 2.5 hours.\n3. Distance traveled is calculated by multiplying speed by time:  \n   distance = speed × time  \n4. Substitute speed = 40 miles/hour and time = 2.5 hours:  \n   distance = 40 × 2.5\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A delivery truck travels 40 miles in an hour. How many miles will it travel in 2.5 hours?\n    \"\"\"\n    # Given speed of the truck in miles per hour\n    speed_mph = 40.0\n    \n    # Given time in hours\n    time_hours = 2.5\n    \n    # Calculate the distance traveled\n    result = speed_mph * time_hours\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A delivery truck travels 40 miles in an hour. How many miles will it travel in 2.5 hours?\n    \"\"\"\n    # Given speed of the truck in miles per hour\n    speed_mph = 40.0\n    \n    # Given time in hours\n    time_hours = 2.5\n    \n    # Calculate the distance traveled\n    result = speed_mph * time_hours\n    \n    return result",
    "result": 100.0
  },
  {
    "index": 80,
    "response": "**Reasoning:**\n1. A cuboid’s volume \\(V\\) is given by \\(V = \\text{length} \\times \\text{width} \\times \\text{height}\\).\n2. Here the height \\(h = 6\\) cm.\n3. The “base” is twice the height, so the width \\(w = 2 \\times 6 = 12\\) cm.\n4. We know the volume \\(V = 360\\) cm³.\n5. Substitute into the volume formula: \n   \\(360 = \\text{length} \\times 12 \\times 6\\).\n6. Simplify the right side: \\(360 = \\text{length} \\times 72\\).\n7. Solve for the length: \\(\\text{length} = \\frac{360}{72} = 5\\) cm.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    The volume of a cuboid is 360 cm^3. If the height is 6 cm and the base is twice the height, what is the length of the cuboid?\n    \"\"\"\n    volume_cm3 = 360\n    height_cm = 6\n    base_cm = 2 * height_cm  # base (width) is twice the height\n    # Volume = length * base * height  =>  length = volume / (base * height)\n    length_cm = volume_cm3 / (base_cm * height_cm)\n    return length_cm\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The volume of a cuboid is 360 cm^3. If the height is 6 cm and the base is twice the height, what is the length of the cuboid?\n    \"\"\"\n    volume_cm3 = 360\n    height_cm = 6\n    base_cm = 2 * height_cm  # base (width) is twice the height\n    # Volume = length * base * height  =>  length = volume / (base * height)\n    length_cm = volume_cm3 / (base_cm * height_cm)\n    return length_cm",
    "result": 5.0
  },
  {
    "index": 81,
    "response": "**Reasoning:**\n1. There are 18 tomato plants.  \n2. The ratio given is “for every 4 tomato plants, there is 1 cucumber plant,” so  \n   cucumber_plants = 18 tomato plants ÷ 4 = 4.5 cucumber plants.  \n3. Each tomato plant produces 7 tomatoes, so  \n   total_tomatoes = 18 × 7 = 126 tomatoes.  \n4. Each cucumber plant produces 3 cucumbers, so  \n   total_cucumbers = 4.5 × 3 = 13.5 cucumbers.  \n5. Total number of vegetables = total_tomatoes + total_cucumbers = 126 + 13.5 = 139.5.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sandra has a vegetable garden with 18 tomato plants. For every 4 tomato plants,\n    there is 1 cucumber plant. Each tomato plant produces 7 tomatoes and each\n    cucumber plant produces 3 cucumbers. How many vegetables are there in total?\n    \"\"\"\n    tomato_plants = 18\n    # For every 4 tomato plants, there is 1 cucumber plant\n    cucumber_plants = tomato_plants / 4\n\n    tomatoes_per_plant = 7\n    cucumbers_per_plant = 3\n\n    total_tomatoes = tomato_plants * tomatoes_per_plant\n    total_cucumbers = cucumber_plants * cucumbers_per_plant\n\n    result = total_tomatoes + total_cucumbers\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sandra has a vegetable garden with 18 tomato plants. For every 4 tomato plants,\n    there is 1 cucumber plant. Each tomato plant produces 7 tomatoes and each\n    cucumber plant produces 3 cucumbers. How many vegetables are there in total?\n    \"\"\"\n    tomato_plants = 18\n    # For every 4 tomato plants, there is 1 cucumber plant\n    cucumber_plants = tomato_plants / 4\n\n    tomatoes_per_plant = 7\n    cucumbers_per_plant = 3\n\n    total_tomatoes = tomato_plants * tomatoes_per_plant\n    total_cucumbers = cucumber_plants * cucumbers_per_plant\n\n    result = total_tomatoes + total_cucumbers\n    return result",
    "result": 139.5
  },
  {
    "index": 82,
    "response": "**Reasoning:**\n1. We know each pizza is cut into 8 slices.\n2. Each slice costs \\$1.50.\n3. Therefore, the cost of one whole pizza is:\n   cost_per_pizza = number_of_slices_per_pizza × cost_per_slice\n   cost_per_pizza = 8 × \\$1.50 = \\$12.00\n4. We want the cost of 3 pizzas:\n   total_cost = cost_per_pizza × number_of_pizzas\n   total_cost = \\$12.00 × 3 = \\$36.00\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A pizza with a diameter of 14 inches has 8 slices. If the cost of each slice is $1.50, how much will 3 pizzas cost?\n    \"\"\"\n    # Number of slices per pizza\n    slices_per_pizza = 8\n    # Cost per individual slice in dollars\n    cost_per_slice = 1.50\n    # Number of pizzas we want to buy\n    number_of_pizzas = 3\n\n    # Calculate the cost of one pizza\n    cost_per_pizza = slices_per_pizza * cost_per_slice\n    # Calculate the total cost for the desired number of pizzas\n    result = number_of_pizzas * cost_per_pizza\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A pizza with a diameter of 14 inches has 8 slices. If the cost of each slice is $1.50, how much will 3 pizzas cost?\n    \"\"\"\n    # Number of slices per pizza\n    slices_per_pizza = 8\n    # Cost per individual slice in dollars\n    cost_per_slice = 1.50\n    # Number of pizzas we want to buy\n    number_of_pizzas = 3\n\n    # Calculate the cost of one pizza\n    cost_per_pizza = slices_per_pizza * cost_per_slice\n    # Calculate the total cost for the desired number of pizzas\n    result = number_of_pizzas * cost_per_pizza\n\n    return result",
    "result": 36.0
  },
  {
    "index": 83,
    "response": "**Reasoning:**\n1. We are given a constant speed of 60 kilometers per hour (km/h).\n2. The car travels for 2 hours.\n3. Distance traveled at constant speed is calculated by the formula:\n   distance = speed × time\n4. Substitute the given values:\n   distance = 60 km/h × 2 h = 120 km\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car travels at a constant speed of 60 km/h for 2 hours. How far does the car travel in those two hours?\n    \"\"\"\n    # Given values\n    speed_km_per_hour = 60   # speed in km/h\n    time_hours = 2           # time in hours\n\n    # Calculation step by step\n    distance_km = speed_km_per_hour * time_hours\n\n    # Final result\n    result = distance_km\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car travels at a constant speed of 60 km/h for 2 hours. How far does the car travel in those two hours?\n    \"\"\"\n    # Given values\n    speed_km_per_hour = 60   # speed in km/h\n    time_hours = 2           # time in hours\n\n    # Calculation step by step\n    distance_km = speed_km_per_hour * time_hours\n\n    # Final result\n    result = distance_km\n\n    return result",
    "result": 120
  },
  {
    "index": 84,
    "response": "**Reasoning:**\n\n1. Let h₁ be the number of hours John works at \\$15/hour, and h₂ the number of hours he works at \\$20/hour.  \n2. We know h₁ + h₂ = 25 (total hours per week).  \n3. His total weekly earnings E = 15·h₁ + 20·h₂.  \n4. He saves half of his earnings each week, so weekly savings S = ½·E.  \n5. We want to find how many weeks W it takes for him to save \\$200:  \n   W = 200 / S.  \n6. Substitute S = ½·(15·h₁ + 20·h₂) and h₂ = 25 – h₁ to get a formula in terms of h₁ (or vice versa).  \n7. Unless we know exactly how many hours he works at each rate, the saving rate per week remains in terms of h₁ (or h₂).  \n8. In many contest‐style problems one assumes he splits his time evenly between the two jobs, i.e. h₁ = h₂ = 12.5. We will adopt that assumption to get a numerical answer.  \n\nUnder that assumption:\n - h₁ = 12.5 hours at \\$15/hr → earnings = 12.5·15 = \\$187.50  \n - h₂ = 12.5 hours at \\$20/hr → earnings = 12.5·20 = \\$250.00  \n - Total weekly earnings E = \\$187.50 + \\$250.00 = \\$437.50  \n - Weekly savings S = ½·\\$437.50 = \\$218.75  \n - Weeks needed W = \\$200 / \\$218.75 ≈ 0.9142857 weeks  \n\nSo it takes about 0.9143 weeks (approximately 6.4 days) to save \\$200 under the equal‐hours assumption.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John works two part-time jobs, one pays him $15 per hour and the other pays him $20 per hour.\n    If he works a total of 25 hours per week and saves half of his earnings, how long would it\n    take him to save $200?\n    \"\"\"\n    # Assume he splits his time evenly between the two jobs:\n    hours_at_15 = 12.5     # hours per week at $15/hour\n    hours_at_20 = 12.5     # hours per week at $20/hour\n\n    # Calculate his total weekly earnings\n    earnings_15 = hours_at_15 * 15\n    earnings_20 = hours_at_20 * 20\n    total_weekly_earnings = earnings_15 + earnings_20\n\n    # He saves half of his earnings each week\n    weekly_savings = total_weekly_earnings / 2\n\n    # Time (in weeks) to save $200\n    result = 200 / weekly_savings\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John works two part-time jobs, one pays him $15 per hour and the other pays him $20 per hour.\n    If he works a total of 25 hours per week and saves half of his earnings, how long would it\n    take him to save $200?\n    \"\"\"\n    # Assume he splits his time evenly between the two jobs:\n    hours_at_15 = 12.5     # hours per week at $15/hour\n    hours_at_20 = 12.5     # hours per week at $20/hour\n\n    # Calculate his total weekly earnings\n    earnings_15 = hours_at_15 * 15\n    earnings_20 = hours_at_20 * 20\n    total_weekly_earnings = earnings_15 + earnings_20\n\n    # He saves half of his earnings each week\n    weekly_savings = total_weekly_earnings / 2\n\n    # Time (in weeks) to save $200\n    result = 200 / weekly_savings\n\n    return result",
    "result": 0.9142857142857143
  },
  {
    "index": 85,
    "response": "**Reasoning:**\n1. They drive for 4 hours at an average speed of 60 km/h, so in that time they cover:\n   distance_covered = speed × time = 60 km/h × 4 h = 240 km\n2. They want to cover a total of 360 km, so the remaining distance is:\n   remaining_distance = 360 km − 240 km = 120 km\n3. To cover the remaining 120 km at 60 km/h requires:\n   additional_time = remaining_distance / speed = 120 km ÷ 60 km/h = 2 h\n4. Therefore, the total time to cover 360 km is:\n   total_time = initial_time + additional_time = 4 h + 2 h = 6 h\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    During a roadtrip, 6 friends drove for 4 hours at an average speed of 60 km/h. How long will it take them to cover a total of 360 kilometers?\n    \"\"\"\n    average_speed = 60  # km/h\n    initial_time = 4    # hours driven so far\n    distance_covered = average_speed * initial_time  # km driven so far\n\n    total_distance = 360       # km they want to cover in total\n    remaining_distance = total_distance - distance_covered  # km left to drive\n\n    additional_time = remaining_distance / average_speed  # hours needed for the remaining distance\n    result = initial_time + additional_time             # total hours to cover 360 km\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    During a roadtrip, 6 friends drove for 4 hours at an average speed of 60 km/h. How long will it take them to cover a total of 360 kilometers?\n    \"\"\"\n    average_speed = 60  # km/h\n    initial_time = 4    # hours driven so far\n    distance_covered = average_speed * initial_time  # km driven so far\n\n    total_distance = 360       # km they want to cover in total\n    remaining_distance = total_distance - distance_covered  # km left to drive\n\n    additional_time = remaining_distance / average_speed  # hours needed for the remaining distance\n    result = initial_time + additional_time             # total hours to cover 360 km\n\n    return result",
    "result": 6.0
  },
  {
    "index": 86,
    "response": "**Reasoning:**\n- Compute the cost of the dolls: 3 dolls × \\$4 each = \\$12  \n- Compute the cost of the puzzles: 5 puzzles × \\$2 each = \\$10  \n- Compute the cost of the books: 6 books × \\$10 each = \\$60  \n- Sum these amounts to get the total cost: \\$12 + \\$10 + \\$60 = \\$82  \n- He paid with a \\$50 bill, so change = paid amount − total cost = \\$50 − \\$82 = −\\$32  \n  (A negative result means he is \\$32 short.)\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jake bought 3 dolls for $4 each, 5 puzzles for $2 each and 6 books for $10 each. If he paid with a $50 bill, how much change will he get back?\n    \"\"\"\n    # Number of items and their unit prices\n    dolls_count = 3\n    price_per_doll = 4\n    puzzles_count = 5\n    price_per_puzzle = 2\n    books_count = 6\n    price_per_book = 10\n\n    # Calculate individual totals\n    total_cost_dolls = dolls_count * price_per_doll\n    total_cost_puzzles = puzzles_count * price_per_puzzle\n    total_cost_books = books_count * price_per_book\n\n    # Sum up all costs\n    total_cost = total_cost_dolls + total_cost_puzzles + total_cost_books\n\n    # Amount paid\n    payment = 50\n\n    # Calculate change (might be negative if payment is insufficient)\n    result = payment - total_cost\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jake bought 3 dolls for $4 each, 5 puzzles for $2 each and 6 books for $10 each. If he paid with a $50 bill, how much change will he get back?\n    \"\"\"\n    # Number of items and their unit prices\n    dolls_count = 3\n    price_per_doll = 4\n    puzzles_count = 5\n    price_per_puzzle = 2\n    books_count = 6\n    price_per_book = 10\n\n    # Calculate individual totals\n    total_cost_dolls = dolls_count * price_per_doll\n    total_cost_puzzles = puzzles_count * price_per_puzzle\n    total_cost_books = books_count * price_per_book\n\n    # Sum up all costs\n    total_cost = total_cost_dolls + total_cost_puzzles + total_cost_books\n\n    # Amount paid\n    payment = 50\n\n    # Calculate change (might be negative if payment is insufficient)\n    result = payment - total_cost\n\n    return result",
    "result": -32
  },
  {
    "index": 87,
    "response": "**Reasoning:**\n- Let d be the number of days the car was rented.\n- The daily fee is \\$25, so the total daily charge is 25 * d.\n- The per-mile charge is \\$0.20 per mile, and the customer drove 200 miles, so the mileage charge is 0.20 * 200 = \\$40.\n- The total amount paid is \\$65, which must equal the sum of the daily charge and the mileage charge:\n  25*d + 40 = 65\n- Solve for d:\n  25*d = 65 − 40\n  25*d = 25\n  d = 25 / 25\n  d = 1\n\nThe customer rented the car for 1 day.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car rental company charges a daily fee of $25 plus $0.20 per mile driven.\n    If a customer drove 200 miles and paid $65, how many days did they rent the car for?\n    \"\"\"\n    daily_fee = 25.0\n    cost_per_mile = 0.20\n    miles_driven = 200.0\n    total_paid = 65.0\n\n    # Calculate the total mileage cost\n    mileage_cost = cost_per_mile * miles_driven\n\n    # Subtract mileage cost from total paid to get total daily fees\n    total_daily_charge = total_paid - mileage_cost\n\n    # Divide by daily fee to find number of days rented\n    days_rented = total_daily_charge / daily_fee\n\n    result = days_rented\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car rental company charges a daily fee of $25 plus $0.20 per mile driven.\n    If a customer drove 200 miles and paid $65, how many days did they rent the car for?\n    \"\"\"\n    daily_fee = 25.0\n    cost_per_mile = 0.20\n    miles_driven = 200.0\n    total_paid = 65.0\n\n    # Calculate the total mileage cost\n    mileage_cost = cost_per_mile * miles_driven\n\n    # Subtract mileage cost from total paid to get total daily fees\n    total_daily_charge = total_paid - mileage_cost\n\n    # Divide by daily fee to find number of days rented\n    days_rented = total_daily_charge / daily_fee\n\n    result = days_rented\n    return result",
    "result": 1.0
  },
  {
    "index": 88,
    "response": "**Reasoning:**\n\n1. On day 1, Lea bakes 20 cookies.\n2. Each subsequent day she doubles the previous day's output:\n   - Day 2: 20 * 2 = 40 cookies\n   - Day 3: 40 * 2 = 80 cookies\n   - Day 4: 80 * 2 = 160 cookies\n3. To find the total over 4 days, sum each day's cookies:\n   20 + 40 + 80 + 160 = 300 cookies\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Lea is baking cookies for her friends. On the first day she baked 20 cookies. Every day after that she doubled the number of cookies she baked. After 4 days, how many cookies did she bake in total?\n    \"\"\"\n    # Number of cookies baked each day\n    cookies_day1 = 20\n    cookies_day2 = cookies_day1 * 2\n    cookies_day3 = cookies_day2 * 2\n    cookies_day4 = cookies_day3 * 2\n\n    # Sum up all cookies baked over the 4 days\n    total_cookies = cookies_day1 + cookies_day2 + cookies_day3 + cookies_day4\n\n    result = total_cookies\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Lea is baking cookies for her friends. On the first day she baked 20 cookies. Every day after that she doubled the number of cookies she baked. After 4 days, how many cookies did she bake in total?\n    \"\"\"\n    # Number of cookies baked each day\n    cookies_day1 = 20\n    cookies_day2 = cookies_day1 * 2\n    cookies_day3 = cookies_day2 * 2\n    cookies_day4 = cookies_day3 * 2\n\n    # Sum up all cookies baked over the 4 days\n    total_cookies = cookies_day1 + cookies_day2 + cookies_day3 + cookies_day4\n\n    result = total_cookies\n    return result",
    "result": 300
  },
  {
    "index": 89,
    "response": "**Reasoning:**\n1. Identify the number of green marbles: 2  \n2. Identify the number of blue marbles: 3  \n3. Identify the number of red marbles: 4  \n4. Add all the marbles together to find the total:  \n   total = green + blue + red  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Tom has 2 green marbles, 3 blue marbles and 4 red marbles. What is the total number of marbles he has?\n    \"\"\"\n    num_green_marbles = 2\n    num_blue_marbles = 3\n    num_red_marbles = 4\n\n    # Calculate the total number of marbles\n    result = num_green_marbles + num_blue_marbles + num_red_marbles\n\n    return float(result)\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Tom has 2 green marbles, 3 blue marbles and 4 red marbles. What is the total number of marbles he has?\n    \"\"\"\n    num_green_marbles = 2\n    num_blue_marbles = 3\n    num_red_marbles = 4\n\n    # Calculate the total number of marbles\n    result = num_green_marbles + num_blue_marbles + num_red_marbles\n\n    return float(result)",
    "result": 9.0
  },
  {
    "index": 90,
    "response": "**Reasoning:**\n1. There are 500 employees, so the company needs at least one chair for each employee.\n2. They want an extra 10% more chairs as backup or replacements.\n3. Calculate the number of extra chairs: 10% of 500 = 0.10 * 500 = 50 chairs.\n4. Total chairs required = 500 + 50 = 550 chairs.\n5. Each chair costs \\$50, so total cost = 550 * 50 = \\$27,500.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A company has 500 employees and wants to buy chairs for each employee and an extra 10% of chairs. Each chair costs $50. How much money does the company need to buy the chairs?\n    \"\"\"\n    number_of_employees = 500\n    extra_percentage = 0.10\n    cost_per_chair = 50\n\n    extra_chairs = number_of_employees * extra_percentage\n    total_chairs = number_of_employees + extra_chairs\n    result = total_chairs * cost_per_chair\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A company has 500 employees and wants to buy chairs for each employee and an extra 10% of chairs. Each chair costs $50. How much money does the company need to buy the chairs?\n    \"\"\"\n    number_of_employees = 500\n    extra_percentage = 0.10\n    cost_per_chair = 50\n\n    extra_chairs = number_of_employees * extra_percentage\n    total_chairs = number_of_employees + extra_chairs\n    result = total_chairs * cost_per_chair\n\n    return result",
    "result": 27500.0
  },
  {
    "index": 91,
    "response": "**Reasoning:**\n\n1. Let the price of the onions be \\(O\\).  \n2. We are told \\(O = 4 \\times P\\), where \\(P\\) is the price of the sack of potatoes.  \n3. Since \\(O = \\$60\\), we get \\(P = \\$60 / 4 = \\$15\\).  \n4. The carrots cost 75% of the price of the sack of potatoes, so the carrot price \\(C = 0.75 \\times P = 0.75 \\times 15 = \\$11.25\\).  \n5. The corn is described as \"twice cheaper\" than the carrots, which in everyday usage means half the price of the carrots. Thus the corn price \\(K = C / 2 = 11.25 / 2 = \\$5.625\\).  \n6. Finally, sum up all four items:  \n   \\(\\$60 + \\$15 + \\$11.25 + \\$5.625 = \\$91.875\\).  \n\nTherefore, Mike paid \\$91.875 in total for his purchases.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mike visited the farmer's market where he bought carrots, corn, a sack of potatoes, and onions. The corn was twice cheaper than the carrots, and the price of the carrots was 75% of the price of the sack of potatoes. Onions were the most expensive and cost four times the price of the sack of potatoes. If the onions cost $60, how much did Mike pay for his purchases?\n    \"\"\"\n    onion_price = 60.0\n    potato_price = onion_price / 4          # onions are 4× the potatoes\n    carrot_price = 0.75 * potato_price      # carrots are 75% of potatoes\n    corn_price = carrot_price / 2           # corn is half the price of carrots\n\n    result = onion_price + potato_price + carrot_price + corn_price\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mike visited the farmer's market where he bought carrots, corn, a sack of potatoes, and onions. The corn was twice cheaper than the carrots, and the price of the carrots was 75% of the price of the sack of potatoes. Onions were the most expensive and cost four times the price of the sack of potatoes. If the onions cost $60, how much did Mike pay for his purchases?\n    \"\"\"\n    onion_price = 60.0\n    potato_price = onion_price / 4          # onions are 4× the potatoes\n    carrot_price = 0.75 * potato_price      # carrots are 75% of potatoes\n    corn_price = carrot_price / 2           # corn is half the price of carrots\n\n    result = onion_price + potato_price + carrot_price + corn_price\n    return result",
    "result": 91.875
  },
  {
    "index": 92,
    "response": "**Reasoning:**\n1. Identify the number of trucks: there are 3 trucks.  \n2. Identify the capacity per truck: each truck can carry 8 people.  \n3. To find the total people carried, multiply the number of trucks by the capacity per truck:  \n   total_people = 3 * 8 = 24.  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Q10: There are 3 trucks and each can carry 8 people. How many people can the 3 trucks carry in total?\n    \"\"\"\n    number_of_trucks = 3\n    capacity_per_truck = 8\n\n    # Calculate step by step\n    total_people = number_of_trucks * capacity_per_truck\n    result = float(total_people)\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Q10: There are 3 trucks and each can carry 8 people. How many people can the 3 trucks carry in total?\n    \"\"\"\n    number_of_trucks = 3\n    capacity_per_truck = 8\n\n    # Calculate step by step\n    total_people = number_of_trucks * capacity_per_truck\n    result = float(total_people)\n\n    return result",
    "result": 24.0
  },
  {
    "index": 93,
    "response": "**Reasoning:**\n1. The train goes from A to B, a distance of 200 km, at 60 km/h.  \n   Time for this leg: t₁ = 200 km ÷ 60 km/h = 200/60 hours.  \n2. It returns from B to A, same 200 km, at 45 km/h.  \n   Time for return: t₂ = 200 km ÷ 45 km/h = 200/45 hours.  \n3. Total distance covered = 200 km + 200 km = 400 km.  \n4. Total time taken = t₁ + t₂ = 200/60 + 200/45 hours.  \n5. Average speed over the entire trip = total distance ÷ total time  \n   = 400 ÷ (200/60 + 200/45) = 400 ÷ (10/3 + 40/9) = 400 ÷ (70/9) = 400·9/70 = 360/7 ≈ 51.4286 km/h.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A train travels from station A to station B at an average speed of 60 km/h. The same train returns from station B to station A at an average speed of 45 km/h. If the distance between the two stations is 200 km, what is the average speed of the train for the entire trip?\n    \"\"\"\n    # Given distances and speeds\n    distance_between_stations = 200.0  # in kilometers\n    speed_ab = 60.0                    # speed from A to B in km/h\n    speed_ba = 45.0                    # speed from B to A in km/h\n\n    # Calculate times for each leg\n    time_ab = distance_between_stations / speed_ab\n    time_ba = distance_between_stations / speed_ba\n\n    # Total distance and total time\n    total_distance = 2 * distance_between_stations\n    total_time = time_ab + time_ba\n\n    # Average speed for entire journey\n    result = total_distance / total_time\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A train travels from station A to station B at an average speed of 60 km/h. The same train returns from station B to station A at an average speed of 45 km/h. If the distance between the two stations is 200 km, what is the average speed of the train for the entire trip?\n    \"\"\"\n    # Given distances and speeds\n    distance_between_stations = 200.0  # in kilometers\n    speed_ab = 60.0                    # speed from A to B in km/h\n    speed_ba = 45.0                    # speed from B to A in km/h\n\n    # Calculate times for each leg\n    time_ab = distance_between_stations / speed_ab\n    time_ba = distance_between_stations / speed_ba\n\n    # Total distance and total time\n    total_distance = 2 * distance_between_stations\n    total_time = time_ab + time_ba\n\n    # Average speed for entire journey\n    result = total_distance / total_time\n    return result",
    "result": 51.42857142857142
  },
  {
    "index": 94,
    "response": "**Reasoning:**\n\n1. John starts with an initial amount of \\$500.  \n2. Each month he adds \\$50 to his savings.  \n3. We want to know after how many months, \\(n\\), his total savings will reach \\$1500.  \n4. Set up the equation:  \n   initial_amount + monthly_savings × n = target_amount  \n   500 + 50n = 1500  \n5. Subtract the initial amount from both sides:  \n   50n = 1500 − 500  \n   50n = 1000  \n6. Divide both sides by the monthly savings:  \n   n = 1000 ÷ 50  \n   n = 20  \n\nSo John will need 20 months to reach \\$1500.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John has 500 dollars and saves 50 dollars every month. In how many months will he have saved 1500 dollars?\n    \"\"\"\n    # Given values\n    initial_amount = 500         # dollars John already has\n    monthly_savings = 50         # dollars John saves per month\n    target_amount = 1500         # dollars goal\n\n    # Calculate how much more is needed\n    additional_needed = target_amount - initial_amount\n\n    # Compute the number of months required\n    months_needed = additional_needed / monthly_savings\n\n    result = months_needed\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John has 500 dollars and saves 50 dollars every month. In how many months will he have saved 1500 dollars?\n    \"\"\"\n    # Given values\n    initial_amount = 500         # dollars John already has\n    monthly_savings = 50         # dollars John saves per month\n    target_amount = 1500         # dollars goal\n\n    # Calculate how much more is needed\n    additional_needed = target_amount - initial_amount\n\n    # Compute the number of months required\n    months_needed = additional_needed / monthly_savings\n\n    result = months_needed\n    return result",
    "result": 20.0
  },
  {
    "index": 95,
    "response": "**Reasoning:**\n\n1. Both plates are made of the same material, so their weights are proportional to their volumes.\n2. The volume of a circular plate (a short cylinder) is given by  \n   volume = π · (radius)² · thickness.  \n   Since radius = diameter / 2, volume ∝ diameter² · thickness.\n3. Let the first plate have diameter d₁=12 in, thickness t₁=0.5 in, and weight W₁=4.2 lb.  \n   Let the second plate have diameter d₂=18 in and thickness t₂=0.75 in, and weight W₂ (unknown).\n4. Because weight ∝ volume,  \n   W₂ = W₁ · ( volume₂ / volume₁ )  \n      = W₁ · ( (d₂² · t₂) / (d₁² · t₁) ).\n5. Substitute numbers:  \n   W₂ = 4.2 · (18² · 0.75) / (12² · 0.5)  \n      = 4.2 · (324 · 0.75) / (144 · 0.5)  \n      = 4.2 · 243 / 72  \n      = 4.2 · 3.375  \n      = 14.175 pounds.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A circular metal plate with a diameter of 12 inches and a thickness of 0.5 inches weighs 4.2 pounds. What is the weight of an identical metal plate with a diameter of 18 inches and a thickness of 0.75 inches?\n    \"\"\"\n    # Given data for the first plate\n    diameter1 = 12       # inches\n    thickness1 = 0.5     # inches\n    weight1 = 4.2        # pounds\n\n    # Data for the second plate\n    diameter2 = 18       # inches\n    thickness2 = 0.75    # inches\n\n    # Weight scales with volume, and volume ∝ diameter^2 * thickness for a circular plate\n    result = weight1 * (diameter2**2 * thickness2) / (diameter1**2 * thickness1)\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A circular metal plate with a diameter of 12 inches and a thickness of 0.5 inches weighs 4.2 pounds. What is the weight of an identical metal plate with a diameter of 18 inches and a thickness of 0.75 inches?\n    \"\"\"\n    # Given data for the first plate\n    diameter1 = 12       # inches\n    thickness1 = 0.5     # inches\n    weight1 = 4.2        # pounds\n\n    # Data for the second plate\n    diameter2 = 18       # inches\n    thickness2 = 0.75    # inches\n\n    # Weight scales with volume, and volume ∝ diameter^2 * thickness for a circular plate\n    result = weight1 * (diameter2**2 * thickness2) / (diameter1**2 * thickness1)\n\n    return result",
    "result": 14.175
  },
  {
    "index": 96,
    "response": "**Reasoning:**\n\nStep 1: The farmer starts with 25 cows.  \nStep 2: He sells 6 cows, so we subtract 6 from the starting total:  \n    25 − 6 = 19.  \nStep 3: He then buys 10 more cows, so we add 10 to the remaining total:  \n    19 + 10 = 29.  \nTherefore, after these transactions, the farmer has 29 cows.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A farmer has 25 cows. He sells 6 cows and buys 10 more cows. How many cows does he have now?\n    \"\"\"\n    initial_cows = 25\n    cows_sold = 6\n    cows_bought = 10\n\n    # After selling cows\n    after_sale = initial_cows - cows_sold\n    # After buying more cows\n    result = after_sale + cows_bought\n\n    return float(result)\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A farmer has 25 cows. He sells 6 cows and buys 10 more cows. How many cows does he have now?\n    \"\"\"\n    initial_cows = 25\n    cows_sold = 6\n    cows_bought = 10\n\n    # After selling cows\n    after_sale = initial_cows - cows_sold\n    # After buying more cows\n    result = after_sale + cows_bought\n\n    return float(result)",
    "result": 29.0
  },
  {
    "index": 97,
    "response": "**Reasoning:**\n\n1. Lisa needs a total of 3 cups of flour.  \n2. Her measuring cup holds 1/4 cup of flour each time she fills it.  \n3. To find out how many times she must fill the 1/4-cup measure, divide the total needed (3 cups) by the size of each fill (1/4 cup).  \n4. 3 ÷ (1/4) = 3 × 4 = 12.  \n5. Therefore, she needs to fill and empty the measuring cup 12 times.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Lisa is baking cookies and needs 3 cups of flour. She has a measuring cup that can hold 1/4 cup of flour. How many times does she need to fill and empty the measuring cup to get 3 cups of flour?\n    \"\"\"\n    # Total flour required in cups\n    total_cups_needed = 3\n    \n    # Capacity of the measuring cup in cups\n    measuring_cup_size = 1/4  # cup\n    \n    # Calculate how many times to fill the measuring cup\n    times_to_fill = total_cups_needed / measuring_cup_size\n    \n    result = times_to_fill\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Lisa is baking cookies and needs 3 cups of flour. She has a measuring cup that can hold 1/4 cup of flour. How many times does she need to fill and empty the measuring cup to get 3 cups of flour?\n    \"\"\"\n    # Total flour required in cups\n    total_cups_needed = 3\n    \n    # Capacity of the measuring cup in cups\n    measuring_cup_size = 1/4  # cup\n    \n    # Calculate how many times to fill the measuring cup\n    times_to_fill = total_cups_needed / measuring_cup_size\n    \n    result = times_to_fill\n    return result",
    "result": 12.0
  },
  {
    "index": 98,
    "response": "**Reasoning:**\n1. Identify the total production capacity per day: 1000 units.  \n2. Identify how many units have already been produced today: 675 units.  \n3. To find out how many more units can be produced, subtract the units already produced from the total capacity:  \n   remaining units = total capacity − units produced so far  \n   remaining units = 1000 − 675 = 325  \n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A factory has a total production capacity of 1000 units per day. If they have already produced 675 units today, how many more units can they produce today to reach their total production capacity?\n    \"\"\"\n    total_capacity = 1000\n    produced_so_far = 675\n    remaining_capacity = total_capacity - produced_so_far\n    return remaining_capacity\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A factory has a total production capacity of 1000 units per day. If they have already produced 675 units today, how many more units can they produce today to reach their total production capacity?\n    \"\"\"\n    total_capacity = 1000\n    produced_so_far = 675\n    remaining_capacity = total_capacity - produced_so_far\n    return remaining_capacity",
    "result": 325
  },
  {
    "index": 99,
    "response": "**Reasoning:**\nStep 1: Determine Ella’s total income after including the 10% bonus.\n- Annual salary = \\$60,000\n- Bonus = 10% of \\$60,000 = \\$6,000\n- Total income = \\$60,000 + \\$6,000 = \\$66,000\n\nStep 2: Calculate her total expenses as percentages of her total income.\n- Rent = 20% of \\$66,000 = 0.20 × \\$66,000\n- Utilities = 10% of \\$66,000 = 0.10 × \\$66,000\n- Food = 15% of \\$66,000 = 0.15 × \\$66,000\n- Entertainment = 5% of \\$66,000 = 0.05 × \\$66,000\n\nTotal spending rate = 20% + 10% + 15% + 5% = 50%  \nTotal expenses = 0.50 × \\$66,000 = \\$33,000\n\nStep 3: Subtract total expenses from total income to find savings.\n- Savings = \\$66,000 – \\$33,000 = \\$33,000\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Ella received a 10% bonus on her annual salary of 60,000 dollars. She spends 20% of her income on rent, 10% on utilities, 15% on food, and 5% on entertainment. How much does she save each year after the bonus?\n    \"\"\"\n    annual_salary = 60000.0\n    bonus_rate = 0.10\n    total_income = annual_salary * (1 + bonus_rate)\n\n    rent_rate = 0.20\n    utilities_rate = 0.10\n    food_rate = 0.15\n    entertainment_rate = 0.05\n    total_expense_rate = rent_rate + utilities_rate + food_rate + entertainment_rate\n\n    total_expenses = total_income * total_expense_rate\n    result = total_income - total_expenses\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Ella received a 10% bonus on her annual salary of 60,000 dollars. She spends 20% of her income on rent, 10% on utilities, 15% on food, and 5% on entertainment. How much does she save each year after the bonus?\n    \"\"\"\n    annual_salary = 60000.0\n    bonus_rate = 0.10\n    total_income = annual_salary * (1 + bonus_rate)\n\n    rent_rate = 0.20\n    utilities_rate = 0.10\n    food_rate = 0.15\n    entertainment_rate = 0.05\n    total_expense_rate = rent_rate + utilities_rate + food_rate + entertainment_rate\n\n    total_expenses = total_income * total_expense_rate\n    result = total_income - total_expenses\n\n    return result",
    "result": 32999.99999999999
  }
]