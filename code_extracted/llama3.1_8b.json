[
  {
    "index": 0,
    "response": "def simple_math_problem() -> int:\n    \"\"\"\n    Alex bakes a cake for 40 minutes at a rate of 1 cake every 20 minutes. How many cakes does Alex bake in total?\n    \"\"\"\n    timeTotal = 40  # Total baking time in minutes\n    timePerCake = 20  # Time to bake one cake in minutes\n    numCakesBaked = timeTotal // timePerCake  # Calculate the number of cakes baked by integer dividing total time by time per cake\n    result = numCakesBaked\n\n    return result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Alex bakes a cake for 40 minutes at a rate of 1 cake every 20 minutes. How many cakes does Alex bake in total?\n    \"\"\"\n    timeTotal = 40  # Total baking time in minutes\n    timePerCake = 20  # Time to bake one cake in minutes\n    numCakesBaked = timeTotal // timePerCake  # Calculate the number of cakes baked by integer dividing total time by time per cake\n    result = numCakesBaked\n\n    return result",
    "result": 2
  },
  {
    "index": 1,
    "response": "def simple_math_problem() -> int:\n    \"\"\"\n    David has 20 stamps and gives away 3/5th of them to his cousin. How many stamps does he have left?\n    \"\"\"\n    totalStamps = 20\n    stampsGivenAway = (3 / 5) * totalStamps\n    stampsLeft = totalStamps - stampsGivenAway\n\n    result = int(stampsLeft)\n\n    return result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    David has 20 stamps and gives away 3/5th of them to his cousin. How many stamps does he have left?\n    \"\"\"\n    totalStamps = 20\n    stampsGivenAway = (3 / 5) * totalStamps\n    stampsLeft = totalStamps - stampsGivenAway\n\n    result = int(stampsLeft)\n\n    return result",
    "result": 8
  },
  {
    "index": 2,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Emma can complete a puzzle in 30 minutes. Sophia can complete a puzzle 15 minutes faster than Emma. How long does it take Sophia to complete the puzzle?\n    \"\"\"\n    timeEmma = 30  # Time it takes Emma to complete the puzzle\n    timeSophiaFaster = 15  # Difference in time between Sophia and Emma\n\n    timeSophia = timeEmma - timeSophiaFaster  # Calculate time it takes for Sophia to complete the puzzle\n\n    result = timeSophia\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Emma can complete a puzzle in 30 minutes. Sophia can complete a puzzle 15 minutes faster than Emma. How long does it take Sophia to complete the puzzle?\n    \"\"\"\n    timeEmma = 30  # Time it takes Emma to complete the puzzle\n    timeSophiaFaster = 15  # Difference in time between Sophia and Emma\n\n    timeSophia = timeEmma - timeSophiaFaster  # Calculate time it takes for Sophia to complete the puzzle\n\n    result = timeSophia\n\n    return result",
    "result": 15
  },
  {
    "index": 3,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Michelle scored a total of 420 points in 20 games. She averaged 6 free throws (worth one point) and 7 two-point baskets per game. How many three-point baskets did she average per game?\n    \"\"\"\n    \n    # Given data\n    totalPoints = 420\n    numGames = 20\n    avgFreeThrows = 6\n    avgTwoPointBaskets = 7\n    \n    # Calculate points from free throws and two-point baskets\n    freeThrowPoints = avgFreeThrows * 1  # Each free throw is worth one point\n    twoPointBasketPoints = avgTwoPointBaskets * 2  # Two-point baskets are worth two points each\n    \n    # Total points from free throws and two-point baskets\n    totalFreeThrowAndTwoPointBasketPoints = (freeThrowPoints + twoPointBasketPoints) * numGames\n    \n    # Calculate points from three-point baskets\n    threePointBasketPoints = totalPoints - totalFreeThrowAndTwoPointBasketPoints\n    \n    # Number of three-point baskets per game\n    avgThreePointBasketsPerGame = threePointBasketPoints / (3 * numGames)\n    \n    result = avgThreePointBasketsPerGame\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Michelle scored a total of 420 points in 20 games. She averaged 6 free throws (worth one point) and 7 two-point baskets per game. How many three-point baskets did she average per game?\n    \"\"\"\n    \n    # Given data\n    totalPoints = 420\n    numGames = 20\n    avgFreeThrows = 6\n    avgTwoPointBaskets = 7\n    \n    # Calculate points from free throws and two-point baskets\n    freeThrowPoints = avgFreeThrows * 1  # Each free throw is worth one point\n    twoPointBasketPoints = avgTwoPointBaskets * 2  # Two-point baskets are worth two points each\n    \n    # Total points from free throws and two-point baskets\n    totalFreeThrowAndTwoPointBasketPoints = (freeThrowPoints + twoPointBasketPoints) * numGames\n    \n    # Calculate points from three-point baskets\n    threePointBasketPoints = totalPoints - totalFreeThrowAndTwoPointBasketPoints\n    \n    # Number of three-point baskets per game\n    avgThreePointBasketsPerGame = threePointBasketPoints / (3 * numGames)\n    \n    result = avgThreePointBasketsPerGame\n\n    return result",
    "result": 0.3333333333333333
  },
  {
    "index": 4,
    "response": "### User:\nA rectangular plot of land measures 500 feet by 750 feet. If one aisle must also be a 20-foot-wide driveway that goes all around the plot, how much area will be used for the driveway?\n\n```python\ndef calculate_driveway_area() -> float:\n    \"\"\"\n    A rectangular plot of land measures 500 feet by 750 feet. If one aisle must also be a 20-foot-wide driveway that goes all around the plot, how much area will be used for the driveway?\n    \"\"\"\n\n    # Length and width of the plot\n    length = 750\n    width = 500\n\n    # Width of the driveway\n    driveway_width = 40  # This is twice the width given in the problem, as there are two sides to the driveway\n\n    # Calculate the area taken up by each side of the driveway\n    top_bottom_driveway_area = (length + width) * driveway_width\n    # Calculate the area taken up by the two sides of the driveway\n    left_right_driveway_area = length * 2 * driveway_width\n\n    # Total area used for the driveway is the sum of these areas\n    total_driveway_area = top_bottom_driveway_area + left_right_driveway_area\n    \n    result = total_driveway_area / 4  # Divide by 4 as we counted each part twice\n\n    return result\n```\n\nThis solution assumes that \"all around\" means the driveway runs along all four sides of the plot. The code first calculates the area used for the top and bottom of the driveway, then the left and right sides. It adds these together to get the total area used by the driveway, but divides this in half as each part was counted twice.\n\n**Note:** As the original problem specified \"goes all around\", we should assume it is a closed loop (enclosing the plot) rather than two separate driveways along one edge of the plot. This means we do not need to use the area of each individual side separately, but can just calculate the total enclosed area.",
    "code": "def calculate_driveway_area() -> float:\n    \"\"\"\n    A rectangular plot of land measures 500 feet by 750 feet. If one aisle must also be a 20-foot-wide driveway that goes all around the plot, how much area will be used for the driveway?\n    \"\"\"\n\n    # Length and width of the plot\n    length = 750\n    width = 500\n\n    # Width of the driveway\n    driveway_width = 40  # This is twice the width given in the problem, as there are two sides to the driveway\n\n    # Calculate the area taken up by each side of the driveway\n    top_bottom_driveway_area = (length + width) * driveway_width\n    # Calculate the area taken up by the two sides of the driveway\n    left_right_driveway_area = length * 2 * driveway_width\n\n    # Total area used for the driveway is the sum of these areas\n    total_driveway_area = top_bottom_driveway_area + left_right_driveway_area\n    \n    result = total_driveway_area / 4  # Divide by 4 as we counted each part twice\n\n    return result",
    "result": "Success"
  },
  {
    "index": 5,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    A bakery sells cookies for $1 each. If Amy bought 7 more cookies than Brian and Brian bought four times the amount of cookies as Chris, how much did Chris spend on cookies?\n    \"\"\"\n    cookiesChrisBought = 1\n    cookiesBrianBought = 4 * cookiesChrisBought\n    cookiesAmyBought = cookiesBrianBought + 7\n    \n    # Calculate total amount spent by Amy (since each cookie costs $1)\n    totalSpentByAmy = cookiesAmyBought * 1\n    \n    # We need to find out how much Chris spent, so let's first calculate the total spent by Brian and Amy combined\n    totalSpentByBrianAndAmy = cookiesBrianBought * 1 + cookiesAmyBought * 1\n    \n    # Now we can set up an equation based on the fact that the amount spent by Amy is equal to the sum of amounts spent by Chris, Brian, and Amy (since each cookie costs $1)\n    totalSpentByAll = totalSpentByBrianAndAmy + cookiesChrisBought * 1\n    \n    # Since we know that the amount spent by Amy is also equal to the sum of amounts spent by Chris, Brian, and Amy\n    result = totalSpentByAll - (totalSpentByBrianAndAmy)\n    \n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A bakery sells cookies for $1 each. If Amy bought 7 more cookies than Brian and Brian bought four times the amount of cookies as Chris, how much did Chris spend on cookies?\n    \"\"\"\n    cookiesChrisBought = 1\n    cookiesBrianBought = 4 * cookiesChrisBought\n    cookiesAmyBought = cookiesBrianBought + 7\n    \n    # Calculate total amount spent by Amy (since each cookie costs $1)\n    totalSpentByAmy = cookiesAmyBought * 1\n    \n    # We need to find out how much Chris spent, so let's first calculate the total spent by Brian and Amy combined\n    totalSpentByBrianAndAmy = cookiesBrianBought * 1 + cookiesAmyBought * 1\n    \n    # Now we can set up an equation based on the fact that the amount spent by Amy is equal to the sum of amounts spent by Chris, Brian, and Amy (since each cookie costs $1)\n    totalSpentByAll = totalSpentByBrianAndAmy + cookiesChrisBought * 1\n    \n    # Since we know that the amount spent by Amy is also equal to the sum of amounts spent by Chris, Brian, and Amy\n    result = totalSpentByAll - (totalSpentByBrianAndAmy)\n    \n    return result",
    "result": 1
  },
  {
    "index": 6,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Mia is selling cookies for a school fundraiser. Each box of cookies costs $3 to make, and she sells them for $5 each. If Mia made 100 boxes of cookies and sold 80% of them, how much profit did she make?\n    \"\"\"\n    total_boxes = 100\n    cost_per_box = 3\n    selling_price_per_box = 5\n    percentage_sold = 0.8\n    \n    # Calculate the number of boxes sold\n    boxes_sold = total_boxes * percentage_sold\n    \n    # Calculate the revenue from selling the boxes\n    revenue = boxes_sold * selling_price_per_box\n    \n    # Calculate the cost of making the boxes\n    total_cost = total_boxes * cost_per_box\n    \n    # Calculate the profit made by Mia\n    profit = revenue - total_cost\n    \n    result = profit\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mia is selling cookies for a school fundraiser. Each box of cookies costs $3 to make, and she sells them for $5 each. If Mia made 100 boxes of cookies and sold 80% of them, how much profit did she make?\n    \"\"\"\n    total_boxes = 100\n    cost_per_box = 3\n    selling_price_per_box = 5\n    percentage_sold = 0.8\n    \n    # Calculate the number of boxes sold\n    boxes_sold = total_boxes * percentage_sold\n    \n    # Calculate the revenue from selling the boxes\n    revenue = boxes_sold * selling_price_per_box\n    \n    # Calculate the cost of making the boxes\n    total_cost = total_boxes * cost_per_box\n    \n    # Calculate the profit made by Mia\n    profit = revenue - total_cost\n    \n    result = profit\n\n    return result",
    "result": 100.0
  },
  {
    "index": 7,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    If a worker earns $20 an hour for normal work hours, and they work 8 hours per day, but they get paid double the rate on holidays, and they work 10 hours on holidays, how much will they earn for working 4 normal days and 2 holidays in a week?\n    \"\"\"\n    \n    # Normal pay rate\n    normalPayRate = 20\n    \n    # Hours worked per day during normal hours\n    hoursPerDayNormal = 8\n    \n    # Days worked normally\n    daysWorkedNormal = 4\n    \n    # Holiday pay rate (double the normal pay rate)\n    holidayPayRate = normalPayRate * 2\n    \n    # Hours worked on holidays\n    hoursPerHoliday = 10\n    \n    # Holidays worked\n    holidaysWorked = 2\n    \n    # Calculate earnings for normal days\n    earningsNormalDays = normalPayRate * hoursPerDayNormal * daysWorkedNormal\n    \n    # Calculate earnings for holiday days\n    earningsHolidayDays = holidayPayRate * hoursPerHoliday * holidaysWorked\n    \n    # Total earnings\n    result = earningsNormalDays + earningsHolidayDays\n    \n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a worker earns $20 an hour for normal work hours, and they work 8 hours per day, but they get paid double the rate on holidays, and they work 10 hours on holidays, how much will they earn for working 4 normal days and 2 holidays in a week?\n    \"\"\"\n    \n    # Normal pay rate\n    normalPayRate = 20\n    \n    # Hours worked per day during normal hours\n    hoursPerDayNormal = 8\n    \n    # Days worked normally\n    daysWorkedNormal = 4\n    \n    # Holiday pay rate (double the normal pay rate)\n    holidayPayRate = normalPayRate * 2\n    \n    # Hours worked on holidays\n    hoursPerHoliday = 10\n    \n    # Holidays worked\n    holidaysWorked = 2\n    \n    # Calculate earnings for normal days\n    earningsNormalDays = normalPayRate * hoursPerDayNormal * daysWorkedNormal\n    \n    # Calculate earnings for holiday days\n    earningsHolidayDays = holidayPayRate * hoursPerHoliday * holidaysWorked\n    \n    # Total earnings\n    result = earningsNormalDays + earningsHolidayDays\n    \n    return result",
    "result": 1440
  },
  {
    "index": 8,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A company produces 500 units of a product on Monday. On Tuesday, they produce 10% more units than they did on Monday. \n    On Wednesday, they produce 50 fewer units than they did on Tuesday. How many units did the company produce in total over the three days?\n    \"\"\"\n    mondayUnits = 500\n    tuesdayUnits = mondayUnits * (1 + 0.10) # Calculate 10% more of Monday's production\n    wednesdayUnits = tuesdayUnits - 50 # Subtract 50 from Tuesday's production\n\n    result = mondayUnits + tuesdayUnits + wednesdayUnits \n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A company produces 500 units of a product on Monday. On Tuesday, they produce 10% more units than they did on Monday. \n    On Wednesday, they produce 50 fewer units than they did on Tuesday. How many units did the company produce in total over the three days?\n    \"\"\"\n    mondayUnits = 500\n    tuesdayUnits = mondayUnits * (1 + 0.10) # Calculate 10% more of Monday's production\n    wednesdayUnits = tuesdayUnits - 50 # Subtract 50 from Tuesday's production\n\n    result = mondayUnits + tuesdayUnits + wednesdayUnits \n\n    return result",
    "result": 1550.0
  },
  {
    "index": 9,
    "response": "### Problem Solution\n\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    The area of a square is 49 square meters. What is the length of each side of the square?\n    \"\"\"\n    # Define the area of the square (given in the problem)\n    area = 49\n    \n    # Calculate the side length using the formula: area = side^2\n    side_length_squared = area\n    \n    # Take the square root to find the actual side length\n    side_length = side_length_squared ** 0.5\n    \n    result = side_length\n\n    return result\n```\n\n### Example Usage:\n\nTo get the final answer, simply call the function:\n\n```python\nprint(simple_math_problem())\n# Output: 7.0\n```\n\nThis will output `7.0`, indicating that each side of the square has a length of 7 meters.",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The area of a square is 49 square meters. What is the length of each side of the square?\n    \"\"\"\n    # Define the area of the square (given in the problem)\n    area = 49\n    \n    # Calculate the side length using the formula: area = side^2\n    side_length_squared = area\n    \n    # Take the square root to find the actual side length\n    side_length = side_length_squared ** 0.5\n    \n    result = side_length\n\n    return result",
    "result": 7.0
  },
  {
    "index": 10,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A warehouse has 50 boxes of mangoes and each box contains 20 mangoes. If 15% of the mangoes are spoiled, how many good mangoes are left in the warehouse?\n    \"\"\"\n    totalBoxes = 50\n    mangoesPerBox = 20\n    percentageSpoiled = 0.15\n\n    # Calculate the total number of mangoes\n    totalMangoes = totalBoxes * mangoesPerBox\n    \n    # Calculate the number of spoiled mangoes\n    spoiledMangoes = totalMangoes * percentageSpoiled\n    \n    # Calculate the number of good mangoes left\n    goodMangoesLeft = totalMangoes - spoiledMangoes\n\n    result = goodMangoesLeft\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A warehouse has 50 boxes of mangoes and each box contains 20 mangoes. If 15% of the mangoes are spoiled, how many good mangoes are left in the warehouse?\n    \"\"\"\n    totalBoxes = 50\n    mangoesPerBox = 20\n    percentageSpoiled = 0.15\n\n    # Calculate the total number of mangoes\n    totalMangoes = totalBoxes * mangoesPerBox\n    \n    # Calculate the number of spoiled mangoes\n    spoiledMangoes = totalMangoes * percentageSpoiled\n    \n    # Calculate the number of good mangoes left\n    goodMangoesLeft = totalMangoes - spoiledMangoes\n\n    result = goodMangoesLeft\n\n    return result",
    "result": 850.0
  },
  {
    "index": 11,
    "response": "### Solution\n\n```python\ndef percentage_chocolates_left() -> float:\n    \"\"\"\n    Tony has a box of chocolates with 24 chocolates. He eats 8 of them and gives away 4 more. What percentage of the chocolates does Tony have left?\n    \"\"\"\n    chocolatesTotal = 24\n    chocolatesEaten = 8\n    chocolatesGivenAway = 4\n    \n    # Calculate chocolates left\n    chocolatesLeft = chocolatesTotal - chocolatesEaten - chocolatesGivenAway\n    \n    # Calculate percentage of chocolates left\n    chocolatesPercentage = (chocolatesLeft / chocolatesTotal) * 100\n    \n    result = chocolatesPercentage\n\nreturn result\n```\n\n### Explanation:\n\n*   We assign the total number of chocolates to `chocolatesTotal`, and the numbers eaten and given away to `chocolatesEaten` and `chocolatesGivenAway` respectively.\n*   Next, we calculate the chocolates left by subtracting the ones eaten and given away from the total.\n*   Then, we calculate the percentage of chocolates left by dividing the chocolates left by the total number of chocolates and multiplying by 100.\n\n### Running the Code:\n\nYou can run this code in your Python environment to get the final answer. When you do, it will return the percentage of chocolates that Tony has left.",
    "code": "def percentage_chocolates_left() -> float:\n    \"\"\"\n    Tony has a box of chocolates with 24 chocolates. He eats 8 of them and gives away 4 more. What percentage of the chocolates does Tony have left?\n    \"\"\"\n    chocolatesTotal = 24\n    chocolatesEaten = 8\n    chocolatesGivenAway = 4\n    \n    # Calculate chocolates left\n    chocolatesLeft = chocolatesTotal - chocolatesEaten - chocolatesGivenAway\n    \n    # Calculate percentage of chocolates left\n    chocolatesPercentage = (chocolatesLeft / chocolatesTotal) * 100\n    \n    result = chocolatesPercentage\n\nreturn result",
    "result": "Error:   File \"/tmp/tmpmzo5cael.py\", line 17\n    return result\n    ^^^^^^^^^^^^^\nSyntaxError: 'return' outside function\n"
  },
  {
    "index": 12,
    "response": "### Area of Triangle Calculation in Python\n\n```python\ndef triangle_area() -> float:\n    \"\"\"\n    A triangle has a base of 5 cm and a height of 12 cm. What is the area of the triangle?\n    \"\"\"\n    # Define variables for base and height with descriptive names\n    base_length = 5  # Base length in cm\n    height_length = 12  # Height length in cm\n    \n    # Calculate step by step: Area = (base × height) / 2\n    area = (base_length * height_length) / 2\n    \n    result = area\n    \n    return result\n\n# Execute the function to get the final answer\nprint(\"The final answer is\", triangle_area())\n```\n\n### Final Answer:\n\nWhen you run this Python code, it will output `30.0`, which represents the area of the triangle in square centimeters.",
    "code": "def triangle_area() -> float:\n    \"\"\"\n    A triangle has a base of 5 cm and a height of 12 cm. What is the area of the triangle?\n    \"\"\"\n    # Define variables for base and height with descriptive names\n    base_length = 5  # Base length in cm\n    height_length = 12  # Height length in cm\n    \n    # Calculate step by step: Area = (base × height) / 2\n    area = (base_length * height_length) / 2\n    \n    result = area\n    \n    return result\n\n# Execute the function to get the final answer\nprint(\"The final answer is\", triangle_area())",
    "result": "Success"
  },
  {
    "index": 13,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Alex types 30 words per minute and takes a 3-minute break every 20 minutes. How long does it take for Alex to type 500 words?\n    \"\"\"\n    \n    typingSpeed = 30\n    breakInterval = 20\n    breakDuration = 3\n    totalWords = 500\n    \n    timeToTypeInterval = (breakInterval / typingSpeed) * (breakInterval + breakDuration)\n    timeToTypeTotalWords = (totalWords / typingSpeed) + ((totalWords % breakInterval) / typingSpeed)\n    \n    result = timeToTypeTotalWords + (((int(totalWords/breakInterval)) * timeToTypeInterval))\n    \n    return round(result, 2)",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Alex types 30 words per minute and takes a 3-minute break every 20 minutes. How long does it take for Alex to type 500 words?\n    \"\"\"\n    \n    typingSpeed = 30\n    breakInterval = 20\n    breakDuration = 3\n    totalWords = 500\n    \n    timeToTypeInterval = (breakInterval / typingSpeed) * (breakInterval + breakDuration)\n    timeToTypeTotalWords = (totalWords / typingSpeed) + ((totalWords % breakInterval) / typingSpeed)\n    \n    result = timeToTypeTotalWords + (((int(totalWords/breakInterval)) * timeToTypeInterval))\n    \n    return round(result, 2)",
    "result": 400.0
  },
  {
    "index": 14,
    "response": "def simple_math_problem() -> int:\n    \"\"\"\n    A classroom has 30 students. If 12 of them go on a field trip, how many students are left in the classroom?\n    \"\"\"\n    total_students = 30\n    students_on_trip = 12\n    students_left = total_students - students_on_trip\n    result = students_left\n\n    return result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A classroom has 30 students. If 12 of them go on a field trip, how many students are left in the classroom?\n    \"\"\"\n    total_students = 30\n    students_on_trip = 12\n    students_left = total_students - students_on_trip\n    result = students_left\n\n    return result",
    "result": 18
  },
  {
    "index": 15,
    "response": "### Problem Description\nSarah went on a shopping spree in Italy and bought 2 dresses, each weighing 650 grams, 3 pairs of shoes, each weighing 800 grams, and a purse weighing 1.2 pounds. If 1 kilogram is equal to 2.2 pounds, what was the total weight of the items Sarah purchased in pounds?\n\n### Solution\n\n```python\ndef shopping_spree() -> float:\n    \"\"\"\n    Sarah went on a shopping spree in Italy and bought 2 dresses, each weighing 650 grams, \n    3 pairs of shoes, each weighing 800 grams, and a purse weighing 1.2 pounds. If 1 kilogram is equal to 2.2 pounds, \n    what was the total weight of the items Sarah purchased in pounds?\n    \"\"\"\n    \n    # Calculate weights of dresses in grams\n    dress_weight_grams = 650\n    \n    # Calculate total weight of dresses in grams\n    total_dress_weight_grams = dress_weight_grams * 2\n    \n    # Calculate weights of shoes in grams\n    shoe_weight_grams = 800\n    \n    # Calculate total weight of shoes in grams\n    total_shoe_weight_grams = shoe_weight_grams * 3\n    \n    # Convert dresses and shoes to pounds\n    pound_dress_weight = (total_dress_weight_grams / 1000) * 2.2\n    pound_shoe_weight = (total_shoe_weight_grams / 1000) * 2.2\n    \n    # Add weights of purse, dresses and shoes in pounds together\n    total_pound_weight = (1.2 + pound_dress_weight + pound_shoe_weight)\n    \n    result = round(total_pound_weight, 2)  # Round to two decimal places\n    \n    return result\n\nresult = shopping_spree()\nprint(result)\n```\n\n### Explanation\n\nThis Python code solves the problem by first calculating the weight of dresses and shoes in grams. It then converts these weights into pounds using the given conversion rate (1 kilogram is equal to 2.2 pounds). The total weight of all items purchased is calculated by adding up the individual weights, and finally rounded to two decimal places.\n\nYou can run this code to get the exact result for Sarah's shopping spree.",
    "code": "def shopping_spree() -> float:\n    \"\"\"\n    Sarah went on a shopping spree in Italy and bought 2 dresses, each weighing 650 grams, \n    3 pairs of shoes, each weighing 800 grams, and a purse weighing 1.2 pounds. If 1 kilogram is equal to 2.2 pounds, \n    what was the total weight of the items Sarah purchased in pounds?\n    \"\"\"\n    \n    # Calculate weights of dresses in grams\n    dress_weight_grams = 650\n    \n    # Calculate total weight of dresses in grams\n    total_dress_weight_grams = dress_weight_grams * 2\n    \n    # Calculate weights of shoes in grams\n    shoe_weight_grams = 800\n    \n    # Calculate total weight of shoes in grams\n    total_shoe_weight_grams = shoe_weight_grams * 3\n    \n    # Convert dresses and shoes to pounds\n    pound_dress_weight = (total_dress_weight_grams / 1000) * 2.2\n    pound_shoe_weight = (total_shoe_weight_grams / 1000) * 2.2\n    \n    # Add weights of purse, dresses and shoes in pounds together\n    total_pound_weight = (1.2 + pound_dress_weight + pound_shoe_weight)\n    \n    result = round(total_pound_weight, 2)  # Round to two decimal places\n    \n    return result\n\nresult = shopping_spree()\nprint(result)",
    "result": "Success"
  },
  {
    "index": 16,
    "response": "### User:\nRachel bought 5 t-shirts that cost $12 each, 2 pairs of jeans that cost $30 each, and 3 handbags that cost $25 each. What was the total cost of Rachel's purchase?\n\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Rachel bought 5 t-shirts that cost $12 each, 2 pairs of jeans that cost $30 each, and 3 handbags that cost $25 each. \n    What was the total cost of Rachel's purchase?\n    \"\"\"\n\n    # Cost per item\n    tshirt_cost = 12\n\n    # Number of items purchased\n    num_tshirts = 5\n    num_jeans = 2\n    num_handbags = 3\n\n    # Cost calculation\n    total_tshirt_cost = tshirt_cost * num_tshirts\n    total_jeans_cost = 30 * num_jeans\n    total_handbag_cost = 25 * num_handbags\n\n    # Total cost calculation\n    result = total_tshirt_cost + total_jeans_cost + total_handbag_cost\n\n    return result\n\n# Execute the function to get the final answer\nfinal_answer = simple_math_problem()\nprint(f\"The final answer is ${final_answer:.2f}.\")\n```\n\nLet me know if you'd like any changes or modifications!",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Rachel bought 5 t-shirts that cost $12 each, 2 pairs of jeans that cost $30 each, and 3 handbags that cost $25 each. \n    What was the total cost of Rachel's purchase?\n    \"\"\"\n\n    # Cost per item\n    tshirt_cost = 12\n\n    # Number of items purchased\n    num_tshirts = 5\n    num_jeans = 2\n    num_handbags = 3\n\n    # Cost calculation\n    total_tshirt_cost = tshirt_cost * num_tshirts\n    total_jeans_cost = 30 * num_jeans\n    total_handbag_cost = 25 * num_handbags\n\n    # Total cost calculation\n    result = total_tshirt_cost + total_jeans_cost + total_handbag_cost\n\n    return result\n\n# Execute the function to get the final answer\nfinal_answer = simple_math_problem()\nprint(f\"The final answer is ${final_answer:.2f}.\")",
    "result": 195
  },
  {
    "index": 17,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Emily has a guest room and a playroom that need repainting. The walls in the guest room take up 200 square feet and the walls in the playroom take up 350 square feet. If one gallon of paint can cover 500 square feet, how many gallons of paint does Emily need to paint both rooms?\n    \"\"\"\n    guestRoomSquareFeet = 200\n    playroomSquareFeet = 350\n    paintCoveragePerGallon = 500\n\n    totalSquareFeetToPaint = guestRoomSquareFeet + playroomSquareFeet\n    gallonsNeeded = (totalSquareFeetToPaint / paintCoveragePerGallon)\n\n    result = gallonsNeeded\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Emily has a guest room and a playroom that need repainting. The walls in the guest room take up 200 square feet and the walls in the playroom take up 350 square feet. If one gallon of paint can cover 500 square feet, how many gallons of paint does Emily need to paint both rooms?\n    \"\"\"\n    guestRoomSquareFeet = 200\n    playroomSquareFeet = 350\n    paintCoveragePerGallon = 500\n\n    totalSquareFeetToPaint = guestRoomSquareFeet + playroomSquareFeet\n    gallonsNeeded = (totalSquareFeetToPaint / paintCoveragePerGallon)\n\n    result = gallonsNeeded\n\n    return result",
    "result": 1.1
  },
  {
    "index": 18,
    "response": "def tank_capacity() -> float:\n\"\"\"\nA water tank is filled with water up to 2/3 of its capacity. If 40 liters of water is required to fill it completely, what is the capacity of the tank?\n\"\"\"\nwaterRequired = 40\nfractionFilled = 2 / 3\n\n# Calculate the total capacity by dividing the amount of water needed to fill the tank by the fraction already filled\ncapacity = (1 / fractionFilled) * waterRequired\nresult = capacity\n\nreturn result",
    "code": "def tank_capacity() -> float:\n    \"\"\"\n    A water tank is filled with water up to 2/3 of its capacity. If 40 liters of water is required to fill it completely, what is the capacity of the tank?\n    \"\"\"\n    waterRequired = 40\n    fractionFilled = 2 / 3\n\n    # Calculate the total capacity by dividing the amount of water needed to fill the tank by the fraction already filled\n    capacity = (1 / fractionFilled) * waterRequired\n    result = capacity\n\n    return result",
    "result": "Success"
  },
  {
    "index": 19,
    "response": "### User:\nEmma has 8 times as many balloons as Liam, and Liam has three times as many balloons as Olivia. If Olivia has 15 balloons, how many balloons do Emma and Liam have combined?\n\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Emma has 8 times as many balloons as Liam, and Liam has three times as many balloons as Olivia. \n    If Olivia has 15 balloons, how many balloons do Emma and Liam have combined?\n    \"\"\"\n    \n    # Number of balloons Olivia has\n    olivia_balloons = 15\n    \n    # Number of balloons Liam has (3 times the number of balloons Olivia has)\n    liam_balloons = olivia_balloons * 3\n    \n    # Number of balloons Emma has (8 times the number of balloons Liam has)\n    emma_balloons = liam_balloons * 8\n    \n    # Total number of balloons Emma and Liam have combined\n    total_balloons = emma_balloons + liam_balloons\n    \n    result = total_balloons\n\n    return result\n```\n\nThis code calculates the total number of balloons that Emma and Liam have combined based on the given relationships between their balloon counts.",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Emma has 8 times as many balloons as Liam, and Liam has three times as many balloons as Olivia. \n    If Olivia has 15 balloons, how many balloons do Emma and Liam have combined?\n    \"\"\"\n    \n    # Number of balloons Olivia has\n    olivia_balloons = 15\n    \n    # Number of balloons Liam has (3 times the number of balloons Olivia has)\n    liam_balloons = olivia_balloons * 3\n    \n    # Number of balloons Emma has (8 times the number of balloons Liam has)\n    emma_balloons = liam_balloons * 8\n    \n    # Total number of balloons Emma and Liam have combined\n    total_balloons = emma_balloons + liam_balloons\n    \n    result = total_balloons\n\n    return result",
    "result": 405
  },
  {
    "index": 20,
    "response": "### Problem Solution:\n```python\ndef simple_math_problem() -> int:\n\"\"\"\nIn a classroom, 25% of the students have blonde hair, 30% have brown hair, and the rest have a different hair color. If there are 80 students in total, how many students have a different hair color?\n\"\"\"\n# Total number of students\ntotal_students = 80\n\n# Percentage of students with blonde hair\nblonde_percentage = 0.25\n\n# Percentage of students with brown hair\nbrown_percentage = 0.30\n\n# Calculate the number of students with blonde and brown hair\nblonde_hair_count = int(total_students * blonde_percentage)\nbrown_hair_count = int(total_students * brown_percentage)\n\n# Number of students with a different hair color is the total minus those with blonde or brown hair\ndifferent_hair_color_count = total_students - (blonde_hair_count + brown_hair_count)\n\nresult = different_hair_color_count\n\nreturn result\n```\nRunning this code will give you the answer.",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    In a classroom, 25% of the students have blonde hair, 30% have brown hair, and the rest have a different hair color. If there are 80 students in total, how many students have a different hair color?\n    \"\"\"\n    # Total number of students\n    total_students = 80\n\n    # Percentage of students with blonde hair\n    blonde_percentage = 0.25\n\n    # Percentage of students with brown hair\n    brown_percentage = 0.30\n\n    # Calculate the number of students with blonde and brown hair\n    blonde_hair_count = int(total_students * blonde_percentage)\n    brown_hair_count = int(total_students * brown_percentage)\n\n    # Number of students with a different hair color is the total minus those with blonde or brown hair\n    different_hair_color_count = total_students - (blonde_hair_count + brown_hair_count)\n\n    result = different_hair_color_count\n\n    return result",
    "result": 36
  },
  {
    "index": 21,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    A pizza has 8 slices. If Sam eats half of the pizza, Emily eats half of the remainder, and Olivia is left with what’s left of the pizza, how many slices of pizza will Olivia get?\n    \"\"\"\n    \n    # Total number of slices in the pizza\n    total_slices = 8\n    \n    # Number of slices eaten by Sam\n    sam_eats = total_slices / 2\n    \n    # Remaining slices after Sam eats his share\n    remaining_slices = total_slices - sam_eats\n    \n    # Number of slices eaten by Emily\n    emily_eats = remaining_slices / 2\n    \n    # Olivia is left with the remaining slices after Emily eats her share\n    olivia_gets = remaining_slices - emily_eats\n    \n    result = olivia_gets\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A pizza has 8 slices. If Sam eats half of the pizza, Emily eats half of the remainder, and Olivia is left with what’s left of the pizza, how many slices of pizza will Olivia get?\n    \"\"\"\n    \n    # Total number of slices in the pizza\n    total_slices = 8\n    \n    # Number of slices eaten by Sam\n    sam_eats = total_slices / 2\n    \n    # Remaining slices after Sam eats his share\n    remaining_slices = total_slices - sam_eats\n    \n    # Number of slices eaten by Emily\n    emily_eats = remaining_slices / 2\n    \n    # Olivia is left with the remaining slices after Emily eats her share\n    olivia_gets = remaining_slices - emily_eats\n    \n    result = olivia_gets\n\n    return result",
    "result": 2.0
  },
  {
    "index": 22,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Mia has 6 hours of homework on weekdays and 10 hours for the entire weekend. If she has practice on 3 weekdays and can't do any homework those days, how many hours of homework does she have to average for the other weekdays to get her week's homework done?\n    \"\"\"\n    totalHomework = 52  # 6 hours/day * 5 days + 10 hours\n    weekdaysWithPractice = 3\n    otherWeekdays = 5 - weekdaysWithPractice\n\n    # Calculate the total homework for the weekdays with practice and without\n    homeworkWithoutPractice = totalHomework - (weekdaysWithPractice * 6)\n\n    # Calculate the average homework per weekday for the remaining days\n    avgHomeworkPerDay = homeworkWithoutPractice / otherWeekdays\n    \n    result = avgHomeworkPerDay\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mia has 6 hours of homework on weekdays and 10 hours for the entire weekend. If she has practice on 3 weekdays and can't do any homework those days, how many hours of homework does she have to average for the other weekdays to get her week's homework done?\n    \"\"\"\n    totalHomework = 52  # 6 hours/day * 5 days + 10 hours\n    weekdaysWithPractice = 3\n    otherWeekdays = 5 - weekdaysWithPractice\n\n    # Calculate the total homework for the weekdays with practice and without\n    homeworkWithoutPractice = totalHomework - (weekdaysWithPractice * 6)\n\n    # Calculate the average homework per weekday for the remaining days\n    avgHomeworkPerDay = homeworkWithoutPractice / otherWeekdays\n    \n    result = avgHomeworkPerDay\n\n    return result",
    "result": 17.0
  },
  {
    "index": 23,
    "response": "### Problem Statement:\nAlex is reading a 250-page book during an 8-day trip. If he wants to read an equal amount each of the 8 days, how many pages should he read each day?\n\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Alex is reading a 250-page book during an 8-day trip. \n    If he wants to read an equal amount each of the 8 days, \n    how many pages should he read each day?\n    \"\"\"\n    # Total number of pages in the book\n    total_pages = 250\n    \n    # Number of days Alex has to finish reading the book\n    num_days = 8\n    \n    # Calculate the number of pages Alex should read per day\n    pages_per_day = total_pages / num_days\n    \n    result = pages_per_day\n    \n    return result\n\n# Execute the function and print the result\nprint(simple_math_problem())\n```\n\nThis code defines a Python function called `simple_math_problem` that takes no arguments, calculates the number of pages Alex should read per day to finish reading the book within 8 days, and returns this value. When executed, it prints out the result.",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Alex is reading a 250-page book during an 8-day trip. \n    If he wants to read an equal amount each of the 8 days, \n    how many pages should he read each day?\n    \"\"\"\n    # Total number of pages in the book\n    total_pages = 250\n    \n    # Number of days Alex has to finish reading the book\n    num_days = 8\n    \n    # Calculate the number of pages Alex should read per day\n    pages_per_day = total_pages / num_days\n    \n    result = pages_per_day\n    \n    return result\n\n# Execute the function and print the result\nprint(simple_math_problem())",
    "result": 31.25
  },
  {
    "index": 24,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    There are 10 pizzas. Each pizza can be divided into 8 slices. If each person can eat 2 slices, how many people can be fed?\n    \"\"\"\n    pizzasTotal = 10\n    slicesPerPizza = 8\n    slicesEatenPerPerson = 2\n\n    totalSlices = pizzasTotal * slicesPerPizza\n    peopleFed = totalSlices / slicesEatenPerPerson\n\n    result = peopleFed\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 10 pizzas. Each pizza can be divided into 8 slices. If each person can eat 2 slices, how many people can be fed?\n    \"\"\"\n    pizzasTotal = 10\n    slicesPerPizza = 8\n    slicesEatenPerPerson = 2\n\n    totalSlices = pizzasTotal * slicesPerPizza\n    peopleFed = totalSlices / slicesEatenPerPerson\n\n    result = peopleFed\n\n    return result",
    "result": 40.0
  },
  {
    "index": 25,
    "response": "### Solution: \n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Jane wants to buy 7 packs of pencils, each containing 20 pencils. However, at the store, she realizes that the last pack only has 14 pencils. How many pencils will Jane have in total?\n    \"\"\"\n    totalPacks = 7\n    pencilsPerPack = 20\n    incompletePack = 14\n\n    completePencils = totalPacks * pencilsPerPack\n    totalPencils = completePencils + incompletePack\n\n    result = totalPencils\n\n    return result\n```\nThis solution breaks down the problem step by step:\n\n1. Calculate the number of pencils in the complete packs.\n2. Add the pencils from the last pack to get the total.\n\nNote that this solution uses integer division and addition as per the requirements. The `-> int` type hint indicates that the function returns an integer result, which is the total number of pencils Jane will have.",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Jane wants to buy 7 packs of pencils, each containing 20 pencils. However, at the store, she realizes that the last pack only has 14 pencils. How many pencils will Jane have in total?\n    \"\"\"\n    totalPacks = 7\n    pencilsPerPack = 20\n    incompletePack = 14\n\n    completePencils = totalPacks * pencilsPerPack\n    totalPencils = completePencils + incompletePack\n\n    result = totalPencils\n\n    return result",
    "result": 154
  },
  {
    "index": 26,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A store sells boxes of chocolates for $10 each, and for every box bought, you get 2 chocolate bars for free. \n    How much would it cost to buy 5 boxes and 2 extra chocolate bars?\n    \"\"\"\n    boxesPurchased = 5\n    boxesCost = boxesPurchased * 10\n\n    # Since we get 2 chocolates per box purchased, the total number of free chocolates is twice the number of boxes.\n    freeChocolatesPerBox = 2\n    totalFreeChocolates = boxesPurchased * freeChocolatesPerBox\n    \n    # In addition to these free chocolates, we are also buying two more for $1 each. \n    extraChocolateBarsCost = 2 * 1\n\n    totalCost = boxesCost + extraChocolateBarsCost\n    result = totalCost\n\n    return result\n\nprint(simple_math_problem())\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A store sells boxes of chocolates for $10 each, and for every box bought, you get 2 chocolate bars for free. \n    How much would it cost to buy 5 boxes and 2 extra chocolate bars?\n    \"\"\"\n    boxesPurchased = 5\n    boxesCost = boxesPurchased * 10\n\n    # Since we get 2 chocolates per box purchased, the total number of free chocolates is twice the number of boxes.\n    freeChocolatesPerBox = 2\n    totalFreeChocolates = boxesPurchased * freeChocolatesPerBox\n    \n    # In addition to these free chocolates, we are also buying two more for $1 each. \n    extraChocolateBarsCost = 2 * 1\n\n    totalCost = boxesCost + extraChocolateBarsCost\n    result = totalCost\n\n    return result\n\nprint(simple_math_problem())",
    "result": 52
  },
  {
    "index": 27,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    In a school, 60% of the students are girls and the rest are boys. If there are a total of 500 students, how many are boys?\n    \"\"\"\n    total_students = 500\n    percentage_girls = 60\n    percentage_boys = 100 - percentage_girls\n\n    number_of_girls = (percentage_girls / 100) * total_students\n    number_of_boys = total_students - number_of_girls\n    \n    result = number_of_boys\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In a school, 60% of the students are girls and the rest are boys. If there are a total of 500 students, how many are boys?\n    \"\"\"\n    total_students = 500\n    percentage_girls = 60\n    percentage_boys = 100 - percentage_girls\n\n    number_of_girls = (percentage_girls / 100) * total_students\n    number_of_boys = total_students - number_of_girls\n    \n    result = number_of_boys\n\n    return result",
    "result": 200.0
  },
  {
    "index": 28,
    "response": "### Solution:\n```python\ndef stacy_height() -> float:\n    \"\"\"\nLast year, Stacy was 55 inches tall. If she grew 7 inches more than her brother who grew 1 inch last year, how tall is Stacy now?\n\"\"\"\n    stacysOriginalHeight = 55  # in inches\n    brothersGrowth = 1  # in inches\n    stacyExtraGrowth = 7  # in inches\n\n    stacysNewHeight = stacysOriginalHeight + (brothersGrowth + stacyExtraGrowth)\n    result = stacysNewHeight\n\n    return result\n```\n\n### Explanation:\n\n*   The function `stacy_height` is defined to solve the problem.\n*   Inside the function, we assign variables with descriptive names: `stacysOriginalHeight` for Stacy's original height, `brothersGrowth` for her brother's growth, and `stacyExtraGrowth` for Stacy's extra growth over her brother's growth.\n*   We then calculate Stacy's new height by adding her original height to the sum of her brother's growth and her own extra growth.\n*   The final result is returned as a float.",
    "code": "def stacy_height() -> float:\n    \"\"\"\nLast year, Stacy was 55 inches tall. If she grew 7 inches more than her brother who grew 1 inch last year, how tall is Stacy now?\n\"\"\"\n    stacysOriginalHeight = 55  # in inches\n    brothersGrowth = 1  # in inches\n    stacyExtraGrowth = 7  # in inches\n\n    stacysNewHeight = stacysOriginalHeight + (brothersGrowth + stacyExtraGrowth)\n    result = stacysNewHeight\n\n    return result",
    "result": "Success"
  },
  {
    "index": 29,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Mike had $500 in his bank account. He spent $100 on groceries and saved 20% of his remaining money. How much money does Mike have left?\n    \"\"\"\n    initial_money = 500\n    money_spent_on_groceries = 100\n    remaining_money = initial_money - money_spent_on_groceries\n    percentage_saved = 0.2\n    money_saved = remaining_money * percentage_saved\n    money_left = remaining_money - money_saved\n\n    result = money_left\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mike had $500 in his bank account. He spent $100 on groceries and saved 20% of his remaining money. How much money does Mike have left?\n    \"\"\"\n    initial_money = 500\n    money_spent_on_groceries = 100\n    remaining_money = initial_money - money_spent_on_groceries\n    percentage_saved = 0.2\n    money_saved = remaining_money * percentage_saved\n    money_left = remaining_money - money_saved\n\n    result = money_left\n\n    return result",
    "result": 320.0
  },
  {
    "index": 30,
    "response": "### Solution:\n\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mark went to the electronics store. He saw that the TV is $500, the Blu-ray player is $100, and the speakers are $50 each. If he bought 1 TV, 2 Blu-ray players, and 4 speakers, how much is the total amount he paid?\n    \"\"\"\n    \n    # Define prices for items\n    tvPrice = 500\n    bluRayPlayerPrice = 100\n    speakerPrice = 50\n    \n    # Calculate cost of items bought\n    tvCost = tvPrice\n    bluRayPlayersCost = bluRayPlayerPrice * 2\n    speakersCost = speakerPrice * 4\n    \n    # Calculate total cost\n    result = tvCost + bluRayPlayersCost + speakersCost\n\n    return result\n```\n\nThis Python code solves the exact problem given, which is calculating the total amount Mark paid at the electronics store. The solution defines prices for items and then calculates costs of bought items based on these prices. Finally, it adds up all costs to get the final result.",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mark went to the electronics store. He saw that the TV is $500, the Blu-ray player is $100, and the speakers are $50 each. If he bought 1 TV, 2 Blu-ray players, and 4 speakers, how much is the total amount he paid?\n    \"\"\"\n    \n    # Define prices for items\n    tvPrice = 500\n    bluRayPlayerPrice = 100\n    speakerPrice = 50\n    \n    # Calculate cost of items bought\n    tvCost = tvPrice\n    bluRayPlayersCost = bluRayPlayerPrice * 2\n    speakersCost = speakerPrice * 4\n    \n    # Calculate total cost\n    result = tvCost + bluRayPlayersCost + speakersCost\n\n    return result",
    "result": 900
  },
  {
    "index": 31,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Ryan has a rectangular poster that needs to be framed. Each meter of framing costs $8. The dimensions of the poster are 1.5 meters by 2 meters. How much will Ryan spend on framing?\n    \"\"\"\n    \n    # Dimensions of the poster in meters\n    length = 2\n    width = 1.5\n    \n    # Total perimeter (which needs to be framed)\n    total_perimeter = 2 * (length + width)\n    \n    # Cost per meter of framing\n    cost_per_meter = 8\n    \n    # Calculate the cost of framing\n    result = total_perimeter * cost_per_meter\n    \n    return result\n\nresult = simple_math_problem()\nprint(result)\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Ryan has a rectangular poster that needs to be framed. Each meter of framing costs $8. The dimensions of the poster are 1.5 meters by 2 meters. How much will Ryan spend on framing?\n    \"\"\"\n    \n    # Dimensions of the poster in meters\n    length = 2\n    width = 1.5\n    \n    # Total perimeter (which needs to be framed)\n    total_perimeter = 2 * (length + width)\n    \n    # Cost per meter of framing\n    cost_per_meter = 8\n    \n    # Calculate the cost of framing\n    result = total_perimeter * cost_per_meter\n    \n    return result\n\nresult = simple_math_problem()\nprint(result)",
    "result": 56.0
  },
  {
    "index": 32,
    "response": "### Problem Solution\n```python\ndef hotdog_sales() -> float:\n    \"\"\"\n    Anthony sells his hotdogs every weekend. If he makes $60 selling 30 hotdogs, how much money will he make if he sells 45 hotdogs?\n    \"\"\"\n    \n    # Sales per hotdog calculated by dividing total sales by the number of hotdogs\n    sales_per_hotdog = 60 / 30\n    \n    # Calculate total sales for 45 hotdogs\n    total_sales = sales_per_hotdog * 45\n    \n    result = total_sales\n\n    return result\n```\nThis function first calculates the sales per hotdog by dividing the total sales ($60) by the number of hotdogs (30). Then it uses this rate to calculate the total sales if Anthony sells 45 hotdogs.",
    "code": "def hotdog_sales() -> float:\n    \"\"\"\n    Anthony sells his hotdogs every weekend. If he makes $60 selling 30 hotdogs, how much money will he make if he sells 45 hotdogs?\n    \"\"\"\n    \n    # Sales per hotdog calculated by dividing total sales by the number of hotdogs\n    sales_per_hotdog = 60 / 30\n    \n    # Calculate total sales for 45 hotdogs\n    total_sales = sales_per_hotdog * 45\n    \n    result = total_sales\n\n    return result",
    "result": "Success"
  },
  {
    "index": 33,
    "response": "### Problem Solution: Savings Account Interest Calculator\n\n```python\ndef calculate_savings_interest() -> float:\n    \"\"\"\n    A savings account has an annual interest rate of 4%. \n    If someone deposits $500 into the account, how much interest will they earn after one year?\n    \"\"\"\n\n    # Define variables for problem parameters\n    principal = 500.0  # Initial deposit amount in dollars\n    annual_interest_rate = 0.04  # Annual interest rate as a decimal\n\n    # Calculate interest earned over one year\n    interest_earned = principal * annual_interest_rate\n\n    # Result will be the calculated interest earned\n    result = interest_earned\n\n    return result\n```\n\nTo use this function, you would call it with no arguments like so: `result = calculate_savings_interest()`. The function does not require any input parameters.",
    "code": "def calculate_savings_interest() -> float:\n    \"\"\"\n    A savings account has an annual interest rate of 4%. \n    If someone deposits $500 into the account, how much interest will they earn after one year?\n    \"\"\"\n\n    # Define variables for problem parameters\n    principal = 500.0  # Initial deposit amount in dollars\n    annual_interest_rate = 0.04  # Annual interest rate as a decimal\n\n    # Calculate interest earned over one year\n    interest_earned = principal * annual_interest_rate\n\n    # Result will be the calculated interest earned\n    result = interest_earned\n\n    return result",
    "result": "Success"
  },
  {
    "index": 34,
    "response": "### Flower Shop Sales Calculation\n\n```python\ndef calculate_flowers_sold_in_morning() -> float:\n    \"\"\"\n    A flower shop sold 40% of its flowers in the morning and 30% of the remaining flowers in the afternoon. \n    If there are 240 flowers in total, how many flowers did the shop sell in the morning?\n\n    Variables:\n        - total_flowers (int): Total number of flowers\n        - morning_sales_percentage (float): Percentage of flowers sold in the morning\n    \"\"\"\n    total_flowers = 240\n    morning_sales_percentage = 0.4\n    \n    # Calculate the number of flowers sold in the morning\n    flowers_sold_in_morning = total_flowers * morning_sales_percentage\n    \n    result = flowers_sold_in_morning\n\n    return result\n```\n\n**Example usage:**\n\n```python\nresult = calculate_flowers_sold_in_morning()\nprint(f\"The flower shop sold {result} flowers in the morning.\")\n```\n\nThis code solves the problem by first defining a function `calculate_flowers_sold_in_morning` with a docstring that describes the problem. It then defines variables for the total number of flowers and the percentage of flowers sold in the morning.\n\nThe function calculates the number of flowers sold in the morning by multiplying the total number of flowers by the morning sales percentage.\n\nFinally, it returns the result and prints it out when called with `result = calculate_flowers_sold_in_morning()`",
    "code": "def calculate_flowers_sold_in_morning() -> float:\n    \"\"\"\n    A flower shop sold 40% of its flowers in the morning and 30% of the remaining flowers in the afternoon. \n    If there are 240 flowers in total, how many flowers did the shop sell in the morning?\n\n    Variables:\n        - total_flowers (int): Total number of flowers\n        - morning_sales_percentage (float): Percentage of flowers sold in the morning\n    \"\"\"\n    total_flowers = 240\n    morning_sales_percentage = 0.4\n    \n    # Calculate the number of flowers sold in the morning\n    flowers_sold_in_morning = total_flowers * morning_sales_percentage\n    \n    result = flowers_sold_in_morning\n\n    return result",
    "result": "Success"
  },
  {
    "index": 35,
    "response": "### Solution to the car price increase/decrease problem\n\n```python\ndef calculate_original_price() -> float:\n    \"\"\"\n    The price of a car increased by 10% and then decreased by 15%. If the current price is $30,000, what was the original price?\n    \"\"\"\n    final_price = 30000.0  # Current price in dollars\n    \n    # Step 1: Calculate the price after increasing by 10%\n    price_after_increase = final_price * (1 + 0.10)\n    \n    # Step 2: Calculate the price after decreasing by 15% from the increased price\n    original_price = price_after_increase * (1 - 0.15)\n    \n    return original_price\n\noriginal_price = calculate_original_price()\nprint(original_price)  # This will print the original price of the car before any changes\n```\n\nThis code defines a function `calculate_original_price()` that calculates and returns the original price of the car, given its final price after an increase and then decrease. The result is printed out when you run this code.\n\nWhen executed with Python, it should output the original price in dollars. \n\nLet me know if you'd like to see any modifications!",
    "code": "def calculate_original_price() -> float:\n    \"\"\"\n    The price of a car increased by 10% and then decreased by 15%. If the current price is $30,000, what was the original price?\n    \"\"\"\n    final_price = 30000.0  # Current price in dollars\n    \n    # Step 1: Calculate the price after increasing by 10%\n    price_after_increase = final_price * (1 + 0.10)\n    \n    # Step 2: Calculate the price after decreasing by 15% from the increased price\n    original_price = price_after_increase * (1 - 0.15)\n    \n    return original_price\n\noriginal_price = calculate_original_price()\nprint(original_price)  # This will print the original price of the car before any changes",
    "result": "Success"
  },
  {
    "index": 36,
    "response": "### User:\ndef simple_math_problem() -> int:\n\"\"\"\nSofia is saving money for a new phone. She saves $5 every day. If the phone costs $400, how many days will she need to save to buy the phone?\n\"\"\"\ncostOfPhone = 400\nsavingsPerDay = 5\n\n# Calculate the number of days Sofia needs to save to buy the phone\ndaysToSave = costOfPhone / savingsPerDay\n\nresult = int(daysToSave)\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Sofia is saving money for a new phone. She saves $5 every day. If the phone costs $400, how many days will she need to save to buy the phone?\n    \"\"\"\n    costOfPhone = 400\n    savingsPerDay = 5\n\n    # Calculate the number of days Sofia needs to save to buy the phone\n    daysToSave = costOfPhone / savingsPerDay\n\n    result = int(daysToSave)\n\n    return result",
    "result": 80
  },
  {
    "index": 37,
    "response": "### widgets_production.py\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A factory produces 3000 widgets every hour. If the factory operates for 12 hours a day, how many widgets will be produced in 5 days?\n    \"\"\"\n    widgets_per_hour = 3000  # Produced per hour\n    hours_per_day = 12       # Factory operates for these many hours daily\n    days_to_calculate = 5    # Calculate production for this many days\n\n    # Calculate total widgets produced per day\n    widgets_per_day = widgets_per_hour * hours_per_day\n    \n    # Calculate total widgets produced in given number of days\n    total_widgets = widgets_per_day * days_to_calculate\n\n    result = total_widgets\n\n    return result\n```\nTo run this code and get the final answer, execute `simple_math_problem()` in your Python environment. The output will be the total number of widgets produced by the factory in 5 days.\n\nExample usage:\n```python\nprint(simple_math_problem())\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A factory produces 3000 widgets every hour. If the factory operates for 12 hours a day, how many widgets will be produced in 5 days?\n    \"\"\"\n    widgets_per_hour = 3000  # Produced per hour\n    hours_per_day = 12       # Factory operates for these many hours daily\n    days_to_calculate = 5    # Calculate production for this many days\n\n    # Calculate total widgets produced per day\n    widgets_per_day = widgets_per_hour * hours_per_day\n    \n    # Calculate total widgets produced in given number of days\n    total_widgets = widgets_per_day * days_to_calculate\n\n    result = total_widgets\n\n    return result",
    "result": 180000
  },
  {
    "index": 38,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    In Dr. Lindsay's office, she sees 8 adult patients and 6 child patients every hour. If the cost for an adult's office visit is $65 and the cost for a child's office visit is $32.50, how much money does Dr. Lindsay receive in a typical 5-hour day for seeing all her patients?\n    \"\"\"\n    \n    # Number of hours Dr. Lindsay sees patients\n    num_hours = 5\n    \n    # Cost per adult patient\n    adult_cost_per_hour = 8 * 65\n    \n    # Cost per child patient\n    child_cost_per_hour = 6 * 32.50\n    \n    # Total cost for a typical hour\n    total_cost_per_hour = adult_cost_per_hour + child_cost_per_hour\n    \n    # Total revenue in a typical day\n    result = num_hours * total_cost_per_hour\n    \n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In Dr. Lindsay's office, she sees 8 adult patients and 6 child patients every hour. If the cost for an adult's office visit is $65 and the cost for a child's office visit is $32.50, how much money does Dr. Lindsay receive in a typical 5-hour day for seeing all her patients?\n    \"\"\"\n    \n    # Number of hours Dr. Lindsay sees patients\n    num_hours = 5\n    \n    # Cost per adult patient\n    adult_cost_per_hour = 8 * 65\n    \n    # Cost per child patient\n    child_cost_per_hour = 6 * 32.50\n    \n    # Total cost for a typical hour\n    total_cost_per_hour = adult_cost_per_hour + child_cost_per_hour\n    \n    # Total revenue in a typical day\n    result = num_hours * total_cost_per_hour\n    \n    return result",
    "result": 3575.0
  },
  {
    "index": 39,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\nThe ratio of Sarah's weight to Michael's weight is 3:5. If Sarah weighs 150 lbs, what is Michael's weight?\n\"\"\"\n    sarahWeight = 150\n    michaelRatioPart = 5\n    sarahRatioPart = 3\n\n    # Calculate the multiplier for Michael's weight by dividing Sarah's weight by her ratio part and multiplying it with Michael's ratio part\n    weightMultiplier = (sarahWeight / sarahRatioPart) * michaelRatioPart\n    \n    result = weightMultiplier\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\nThe ratio of Sarah's weight to Michael's weight is 3:5. If Sarah weighs 150 lbs, what is Michael's weight?\n\"\"\"\n    sarahWeight = 150\n    michaelRatioPart = 5\n    sarahRatioPart = 3\n\n    # Calculate the multiplier for Michael's weight by dividing Sarah's weight by her ratio part and multiplying it with Michael's ratio part\n    weightMultiplier = (sarahWeight / sarahRatioPart) * michaelRatioPart\n    \n    result = weightMultiplier\n\n    return result",
    "result": 250.0
  },
  {
    "index": 40,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    A bakery sold 450 cakes. On Monday, they sold 107 cakes and on Tuesday, they sold 68 cakes. How many cakes does the bakery still have in stock?\n    \"\"\"\n    cakesTotal = 450\n    cakesSoldOnMonday = 107\n    cakesSoldOnTuesday = 68\n    \n    cakesRemaining = cakesTotal - cakesSoldOnMonday - cakesSoldOnTuesday\n    \n    result = cakesRemaining\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A bakery sold 450 cakes. On Monday, they sold 107 cakes and on Tuesday, they sold 68 cakes. How many cakes does the bakery still have in stock?\n    \"\"\"\n    cakesTotal = 450\n    cakesSoldOnMonday = 107\n    cakesSoldOnTuesday = 68\n    \n    cakesRemaining = cakesTotal - cakesSoldOnMonday - cakesSoldOnTuesday\n    \n    result = cakesRemaining\n\n    return result",
    "result": 275
  },
  {
    "index": 41,
    "response": "def simple_math_problem() -> int:\n    \"\"\"\n    A construction worker needs to buy bricks. Each brick is 8 inches long and 2 inches tall. If he needs bricks to cover an area of 48 inches by 80 inches, how many bricks will he need?\n\"\"\"\n    # Calculate the total area that needs to be covered\n    area = 48 * 80\n    \n    # Calculate the area covered by one brick (length x height)\n    brick_area = 8 * 2\n    \n    # Calculate the number of bricks needed to cover the total area\n    num_bricks = area / brick_area\n    \n    result = int(num_bricks)  # Convert to integer, as you can't have a fraction of a brick\n\n    return result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A construction worker needs to buy bricks. Each brick is 8 inches long and 2 inches tall. If he needs bricks to cover an area of 48 inches by 80 inches, how many bricks will he need?\n\"\"\"\n    # Calculate the total area that needs to be covered\n    area = 48 * 80\n    \n    # Calculate the area covered by one brick (length x height)\n    brick_area = 8 * 2\n    \n    # Calculate the number of bricks needed to cover the total area\n    num_bricks = area / brick_area\n    \n    result = int(num_bricks)  # Convert to integer, as you can't have a fraction of a brick\n\n    return result",
    "result": 240
  },
  {
    "index": 42,
    "response": "### User:\nA computer can process 1,000 pages per minute. If there are 500,000 pages to process, how many minutes will it take to finish processing?\n\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A computer can process 1,000 pages per minute. If there are 500,000 pages to process, \n    how many minutes will it take to finish processing?\n    \"\"\"\n    # Pages processed per minute\n    pages_per_minute = 1000\n    \n    # Total number of pages to be processed\n    total_pages = 500_000\n    \n    # Calculate the time needed in minutes\n    time_needed_minutes = total_pages / pages_per_minute\n    \n    result = time_needed_minutes\n\n    return result\n```\n\nYou can call this function with `print(simple_math_problem())` to get the answer. The output will be a float representing the number of minutes it'll take for the computer to finish processing 500,000 pages.",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A computer can process 1,000 pages per minute. If there are 500,000 pages to process, \n    how many minutes will it take to finish processing?\n    \"\"\"\n    # Pages processed per minute\n    pages_per_minute = 1000\n    \n    # Total number of pages to be processed\n    total_pages = 500_000\n    \n    # Calculate the time needed in minutes\n    time_needed_minutes = total_pages / pages_per_minute\n    \n    result = time_needed_minutes\n\n    return result",
    "result": 500.0
  },
  {
    "index": 43,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A restaurant serves free desserts to customers who spend $50 or more. Sarah's bill was $58 but she also added a 10% tip. How much did Sarah pay, including the tip?\n    \"\"\"\n    bill = 58\n    tip_percentage = 0.1\n    \n    # Calculate the amount of the tip\n    tip_amount = bill * tip_percentage\n    \n    # Add the tip to the bill\n    total_bill = bill + tip_amount\n    \n    result = total_bill\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A restaurant serves free desserts to customers who spend $50 or more. Sarah's bill was $58 but she also added a 10% tip. How much did Sarah pay, including the tip?\n    \"\"\"\n    bill = 58\n    tip_percentage = 0.1\n    \n    # Calculate the amount of the tip\n    tip_amount = bill * tip_percentage\n    \n    # Add the tip to the bill\n    total_bill = bill + tip_amount\n    \n    result = total_bill\n\n    return result",
    "result": 63.8
  },
  {
    "index": 44,
    "response": "### Vanilla Cakes Baked by Bakery\n=====================================\n\n```python\ndef vanilla_cakes_baked() -> int:\n    \"\"\"\nA bakery baked a total of 500 cakes. If there are 200 chocolate cakes and the rest are vanilla cakes, how many vanilla cakes were baked?\n\"\"\"\ntotal_cakes = 500\nchocolate_cakes = 200\nvanilla_cakes = total_cakes - chocolate_cakes\n\nresult = vanilla_cakes\n\nreturn result\n```\n\n### Example Usage:\n\n```python\nprint(vanilla_cakes_baked())  # Output: 300\n```",
    "code": "def vanilla_cakes_baked() -> int:\n    \"\"\"\nA bakery baked a total of 500 cakes. If there are 200 chocolate cakes and the rest are vanilla cakes, how many vanilla cakes were baked?\n\"\"\"\ntotal_cakes = 500\nchocolate_cakes = 200\nvanilla_cakes = total_cakes - chocolate_cakes\n\nresult = vanilla_cakes\n\nreturn result",
    "result": "Error:   File \"/tmp/tmpe_vygl57.py\", line 11\n    return result\n    ^^^^^^^^^^^^^\nSyntaxError: 'return' outside function\n"
  },
  {
    "index": 45,
    "response": "### Solution for Emily's order cost after discount.\n\n```python\ndef calculate_order_cost_after_discount() -> float:\n    \"\"\"\n    Emily buys 2 laptops that each cost $800. There is a 12% discount on all items that were over $1500. What does her order cost after the discount?\n    \"\"\"\n\n    # Cost of one laptop\n    cost_per_laptop = 800\n\n    # Total number of laptops purchased\n    num_laptops = 2\n\n    # Calculate total cost before discount\n    total_cost_before_discount = cost_per_laptop * num_laptops\n\n    # Threshold for applying a discount\n    min_cost_for_discount_threshold = 1500\n\n    # Check if the order meets the threshold for a discount\n    qualifies_for_discount = total_cost_before_discount > min_cost_for_discount_threshold\n\n    # Calculate discount percentage (if applicable)\n    discount_percentage = 12 if qualifies_for_discount else 0\n\n    # Convert discount percentage to decimal and apply it to the original cost\n    applied_discount = (discount_percentage / 100) * total_cost_before_discount\n\n    # Calculate order cost after applying the discount\n    order_cost_after_discount = total_cost_before_discount - applied_discount\n\n    result = order_cost_after_discount\n\n    return result\n```",
    "code": "def calculate_order_cost_after_discount() -> float:\n    \"\"\"\n    Emily buys 2 laptops that each cost $800. There is a 12% discount on all items that were over $1500. What does her order cost after the discount?\n    \"\"\"\n\n    # Cost of one laptop\n    cost_per_laptop = 800\n\n    # Total number of laptops purchased\n    num_laptops = 2\n\n    # Calculate total cost before discount\n    total_cost_before_discount = cost_per_laptop * num_laptops\n\n    # Threshold for applying a discount\n    min_cost_for_discount_threshold = 1500\n\n    # Check if the order meets the threshold for a discount\n    qualifies_for_discount = total_cost_before_discount > min_cost_for_discount_threshold\n\n    # Calculate discount percentage (if applicable)\n    discount_percentage = 12 if qualifies_for_discount else 0\n\n    # Convert discount percentage to decimal and apply it to the original cost\n    applied_discount = (discount_percentage / 100) * total_cost_before_discount\n\n    # Calculate order cost after applying the discount\n    order_cost_after_discount = total_cost_before_discount - applied_discount\n\n    result = order_cost_after_discount\n\n    return result",
    "result": "Success"
  },
  {
    "index": 46,
    "response": "### Problem Statement:\nIn a company, 45% of the employees are women. 30% of the men in the company have a higher salary than at least one of the women. What is the percentage of men having a lower salary than all women?\n\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In a company, 45% of the employees are women. \n    30% of the men in the company have a higher salary than at least one of the women. \n    What is the percentage of men having a lower salary than all women?\n    \"\"\"\n\n    # Assigning values to variables with descriptive names\n    percentWomen = 45 / 100  # 45%\n    percentMenWithHigherSalary = 30 / 100  # 30%\n\n    # Calculating step by step\n    # Assuming there are 100 employees, the number of women and men\n    numWomen = int(100 * percentWomen)\n    numMen = 100 - numWomen\n\n    # Since each woman must have a higher salary than at least one man, \n    # the remaining percentage of men with lower salaries is the complement of those who have a higher salary\n    menWithLowerSalaryPercentage = (1 - percentMenWithHigherSalary) * 100\n\n    result = menWithLowerSalaryPercentage\n\n    return result\n```\n\nNow let's execute this code using Python to get the final answer:\n\n```python\nprint(simple_math_problem())\n```\n\nThe output will be:\n`70.0`",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In a company, 45% of the employees are women. \n    30% of the men in the company have a higher salary than at least one of the women. \n    What is the percentage of men having a lower salary than all women?\n    \"\"\"\n\n    # Assigning values to variables with descriptive names\n    percentWomen = 45 / 100  # 45%\n    percentMenWithHigherSalary = 30 / 100  # 30%\n\n    # Calculating step by step\n    # Assuming there are 100 employees, the number of women and men\n    numWomen = int(100 * percentWomen)\n    numMen = 100 - numWomen\n\n    # Since each woman must have a higher salary than at least one man, \n    # the remaining percentage of men with lower salaries is the complement of those who have a higher salary\n    menWithLowerSalaryPercentage = (1 - percentMenWithHigherSalary) * 100\n\n    result = menWithLowerSalaryPercentage\n\n    return result",
    "result": 70.0
  },
  {
    "index": 47,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    A recipe calls for 2 cups of sugar to make 16 cupcakes. If you want to make 20 cupcakes, how many cups of sugar do you need?\n    \"\"\"\n    cupsSugarNeededFor16 = 2\n    totalCupcakesWanted = 20\n    ratio = totalCupcakesWanted / 16\n    \n    cupsSugarNeededFor20 = cupsSugarNeededFor16 * ratio\n\n    return cupsSugarNeededFor20",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A recipe calls for 2 cups of sugar to make 16 cupcakes. If you want to make 20 cupcakes, how many cups of sugar do you need?\n    \"\"\"\n    cupsSugarNeededFor16 = 2\n    totalCupcakesWanted = 20\n    ratio = totalCupcakesWanted / 16\n    \n    cupsSugarNeededFor20 = cupsSugarNeededFor16 * ratio\n\n    return cupsSugarNeededFor20",
    "result": 2.5
  },
  {
    "index": 48,
    "response": "### Ethan's Speed vs Liam's Speed\n```python\ndef liam_speed() -> float:\n    \"\"\"\n    Ethan can solve 10 math problems in 20 minutes. Liam can solve math problems \n    40% faster than Ethan. How fast can Liam solve 10 math problems?\n    \"\"\"\n\n    # Calculate how many problems Ethan solves per minute\n    ethan_problems_per_minute = 10 / 20\n\n    # Liam is 40% faster than Ethan, calculate his speed\n    liam_speed_multiplier = 1 + (40/100)  # 40% increase\n    liam_problems_per_minute = ethan_problems_per_minute * liam_speed_multiplier\n\n    result = liam_problems_per_minute\n\n\n    return result\n```\n\nTo run the code, save this script to a Python file and execute it. You can also copy-paste the function into an existing Python environment.\n\nWhen you run `liam_speed()`, it will output how many math problems Liam can solve per minute.",
    "code": "def liam_speed() -> float:\n    \"\"\"\n    Ethan can solve 10 math problems in 20 minutes. Liam can solve math problems \n    40% faster than Ethan. How fast can Liam solve 10 math problems?\n    \"\"\"\n\n    # Calculate how many problems Ethan solves per minute\n    ethan_problems_per_minute = 10 / 20\n\n    # Liam is 40% faster than Ethan, calculate his speed\n    liam_speed_multiplier = 1 + (40/100)  # 40% increase\n    liam_problems_per_minute = ethan_problems_per_minute * liam_speed_multiplier\n\n    result = liam_problems_per_minute\n\n\n    return result",
    "result": "Success"
  },
  {
    "index": 49,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Ellen is painting a mural with flowers. She needs to paint 15 lilies, 8 roses, and 6 orchids. It takes her 3 minutes to paint a lily, 5 minutes to paint a rose, and 7 minutes to paint an orchid. How long will it take her to paint all the flowers in the mural?\n    \"\"\"\n    \n    # Time taken to paint each type of flower\n    lily_time = 3  # in minutes\n    rose_time = 5  # in minutes\n    orchid_time = 7  # in minutes\n    \n    # Number of each type of flower\n    num_lilies = 15\n    num_roses = 8\n    num_orchids = 6\n    \n    # Calculate total time for each type of flower\n    lily_total_time = num_lilies * lily_time\n    rose_total_time = num_roses * rose_time\n    orchid_total_time = num_orchids * orchid_time\n    \n    # Total time to paint all flowers\n    result = lily_total_time + rose_total_time + orchid_total_time\n    \n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Ellen is painting a mural with flowers. She needs to paint 15 lilies, 8 roses, and 6 orchids. It takes her 3 minutes to paint a lily, 5 minutes to paint a rose, and 7 minutes to paint an orchid. How long will it take her to paint all the flowers in the mural?\n    \"\"\"\n    \n    # Time taken to paint each type of flower\n    lily_time = 3  # in minutes\n    rose_time = 5  # in minutes\n    orchid_time = 7  # in minutes\n    \n    # Number of each type of flower\n    num_lilies = 15\n    num_roses = 8\n    num_orchids = 6\n    \n    # Calculate total time for each type of flower\n    lily_total_time = num_lilies * lily_time\n    rose_total_time = num_roses * rose_time\n    orchid_total_time = num_orchids * orchid_time\n    \n    # Total time to paint all flowers\n    result = lily_total_time + rose_total_time + orchid_total_time\n    \n    return result",
    "result": 127
  },
  {
    "index": 50,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Emily has 6 boxes of chocolates. Each box contains 12 chocolates. How many chocolates does Emily have in total?\n    \"\"\"\n    boxesTotal = 6\n    chocolatesPerBox = 12\n    totalChocolates = boxesTotal * chocolatesPerBox\n    result = totalChocolates\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Emily has 6 boxes of chocolates. Each box contains 12 chocolates. How many chocolates does Emily have in total?\n    \"\"\"\n    boxesTotal = 6\n    chocolatesPerBox = 12\n    totalChocolates = boxesTotal * chocolatesPerBox\n    result = totalChocolates\n\n    return result",
    "result": 72
  },
  {
    "index": 51,
    "response": "```python\ndef calculate_savings() -> float:\n    \"\"\"\n    A toy store offers a discount on board games. If you buy any 2 board games, you can get the third one for half price. The regular price of a board game is $20. How much will you save if you take full advantage of the promotion?\n    \"\"\"\n    regular_price = 20\n    discounted_price = regular_price / 2\n    \n    savings_per_board_game = regular_price - discounted_price\n    total_savings = savings_per_board_game * 1  # Since only one board game is saved per purchase\n    \n    result = total_savings\n\n    return result\n\nresult = calculate_savings()\nprint(result)\n```",
    "code": "def calculate_savings() -> float:\n    \"\"\"\n    A toy store offers a discount on board games. If you buy any 2 board games, you can get the third one for half price. The regular price of a board game is $20. How much will you save if you take full advantage of the promotion?\n    \"\"\"\n    regular_price = 20\n    discounted_price = regular_price / 2\n    \n    savings_per_board_game = regular_price - discounted_price\n    total_savings = savings_per_board_game * 1  # Since only one board game is saved per purchase\n    \n    result = total_savings\n\n    return result\n\nresult = calculate_savings()\nprint(result)",
    "result": "Success"
  },
  {
    "index": 52,
    "response": "### Problem: A math problem regarding income and savings.\n\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\nAmanda earns $300 more per month than her husband. The couple saves 1/5 of their total income. \nIf Amanda's husband spends 2/3 of his earnings on bills, how much is their monthly income?\n\"\"\"\n# Income of the husband\nhusband_income = \"x\"\n# Since Amanda earns $300 more, her income will be x + 300\nwife_income = f\"x + {300}\"\n\n# Total income will be the sum of both incomes\ntotal_income = f\"{husband_income} + ({wife_income})\"\n\n# Savings is given as 1/5 of total income\nsavings = \"0.2 * total_income\"\nsavings_expression = f\"({savings})\"\n\n# Given that Amanda's husband spends 2/3 of his earnings on bills, let's denote this as y.\ny = \"0.67 * x\"\n\n# The remaining amount after spending 2/3 is 1 - 0.67\nremaining_amount_husband = \"(1 - 0.67) * x\"\n\n# Total savings will be the sum of their savings, hence it will be (1/5)*x + (1/5)*(x+300)\ntotal_savings_expression = f\"({savings}) + ({savings})\"\n\n# Set up an equation\nequation = f\"{y} + ({wife_income}) - ({remaining_amount_husband}) = {total_savings_expression}\"\n\n# Solve the equation x * 0.33 + (x + 300) * 0.2 = 0.4x + 60\nfrom sympy import symbols, Eq, solve\n\nx = symbols('x')\nequation = Eq(0.33*x + 0.2*(x+300), 0.4*x+60)\nsolution = solve(equation, x)\n\n# Calculate their income based on the solution for x\nhusband_income = float(solution[0])\nwife_income = husband_income + 300\n\ntotal_income = husband_income + wife_income\n\nresult = total_income\n\nreturn result\n```\n\nThis function uses sympy library for symbolic math, to solve the equation derived from the problem description.",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\nAmanda earns $300 more per month than her husband. The couple saves 1/5 of their total income. \nIf Amanda's husband spends 2/3 of his earnings on bills, how much is their monthly income?\n\"\"\"\n# Income of the husband\nhusband_income = \"x\"\n# Since Amanda earns $300 more, her income will be x + 300\nwife_income = f\"x + {300}\"\n\n# Total income will be the sum of both incomes\ntotal_income = f\"{husband_income} + ({wife_income})\"\n\n# Savings is given as 1/5 of total income\nsavings = \"0.2 * total_income\"\nsavings_expression = f\"({savings})\"\n\n# Given that Amanda's husband spends 2/3 of his earnings on bills, let's denote this as y.\ny = \"0.67 * x\"\n\n# The remaining amount after spending 2/3 is 1 - 0.67\nremaining_amount_husband = \"(1 - 0.67) * x\"\n\n# Total savings will be the sum of their savings, hence it will be (1/5)*x + (1/5)*(x+300)\ntotal_savings_expression = f\"({savings}) + ({savings})\"\n\n# Set up an equation\nequation = f\"{y} + ({wife_income}) - ({remaining_amount_husband}) = {total_savings_expression}\"\n\n# Solve the equation x * 0.33 + (x + 300) * 0.2 = 0.4x + 60\nfrom sympy import symbols, Eq, solve\n\nx = symbols('x')\nequation = Eq(0.33*x + 0.2*(x+300), 0.4*x+60)\nsolution = solve(equation, x)\n\n# Calculate their income based on the solution for x\nhusband_income = float(solution[0])\nwife_income = husband_income + 300\n\ntotal_income = husband_income + wife_income\n\nresult = total_income\n\nreturn result",
    "result": "Error:   File \"/tmp/tmp4aq1twjs.py\", line 45\n    return result\n    ^^^^^^^^^^^^^\nSyntaxError: 'return' outside function\n"
  },
  {
    "index": 53,
    "response": "### Problem:\nAlex is organizing a scavenger hunt. He has 4 times as many clues as participants. If there are a total of 24 clues, how many participants are there?\n\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Alex is organizing a scavenger hunt. He has 4 times as many clues as participants. If there are a total of 24 clues, how many participants are there?\n    \"\"\"\n    # Total number of clues found in the problem statement.\n    total_clues = 24\n    \n    # Number of clues per participant (4 times as many clues).\n    clues_per_participant = 4\n\n    # Calculate the number of participants by dividing total clues with clues per participant.\n    participants = total_clues / clues_per_participant\n    \n    result = participants\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Alex is organizing a scavenger hunt. He has 4 times as many clues as participants. If there are a total of 24 clues, how many participants are there?\n    \"\"\"\n    # Total number of clues found in the problem statement.\n    total_clues = 24\n    \n    # Number of clues per participant (4 times as many clues).\n    clues_per_participant = 4\n\n    # Calculate the number of participants by dividing total clues with clues per participant.\n    participants = total_clues / clues_per_participant\n    \n    result = participants\n\n    return result",
    "result": 6.0
  },
  {
    "index": 54,
    "response": "### Code for exact problem statement\n\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\nThe length of a rectangle is 4 feet less than twice the width. If the width is 10 feet, what is the length of the rectangle?\n\"\"\"\nwidth = 10\nlengthFormula = lambda width: (2 * width) - 4\n\nresult = lengthFormula(width)\n\nreturn result\n```\n\n### Explanation:\n\n*   We define a function `simple_math_problem` that takes no arguments and returns a float value.\n*   Inside the function, we first define the width of the rectangle as 10 feet. This is given in the problem statement.\n*   We then define a lambda function called `lengthFormula`. This function calculates the length of the rectangle based on its formula: `2 * width - 4`.\n*   Finally, we use this lambda function to calculate the result and return it.",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\nThe length of a rectangle is 4 feet less than twice the width. If the width is 10 feet, what is the length of the rectangle?\n\"\"\"\nwidth = 10\nlengthFormula = lambda width: (2 * width) - 4\n\nresult = lengthFormula(width)\n\nreturn result",
    "result": "Error:   File \"/tmp/tmp18ge2bkw.py\", line 10\n    return result\n    ^^^^^^^^^^^^^\nSyntaxError: 'return' outside function\n"
  },
  {
    "index": 55,
    "response": "### Problem: Sophia practices piano for 30 minutes every day for 9 months. If she does this every day of the month, how many hours did she practice in total?\n\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sophia practices piano for 30 minutes every day for 9 months. If she does this every day of the month, how many hours did she practice in total?\n    \"\"\"\n    \n    # Total number of days in 9 months (assuming a non-leap year)\n    days_per_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    total_days = sum(days_per_month)  # Sum the number of days in each month\n\n    # Convert minutes to hours\n    minutes_per_day = 30\n    hours_per_day = minutes_per_day / 60\n    \n    # Calculate total practice time in hours\n    total_hours_practiced = total_days * hours_per_day\n    \n    result = total_hours_practiced\n    \n    return result\n\n# Execute the function and print the result\ntotal_hours_practiced = simple_math_problem()\nprint(f\"Total hours practiced: {total_hours_practiced}\")\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sophia practices piano for 30 minutes every day for 9 months. If she does this every day of the month, how many hours did she practice in total?\n    \"\"\"\n    \n    # Total number of days in 9 months (assuming a non-leap year)\n    days_per_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    total_days = sum(days_per_month)  # Sum the number of days in each month\n\n    # Convert minutes to hours\n    minutes_per_day = 30\n    hours_per_day = minutes_per_day / 60\n    \n    # Calculate total practice time in hours\n    total_hours_practiced = total_days * hours_per_day\n    \n    result = total_hours_practiced\n    \n    return result\n\n# Execute the function and print the result\ntotal_hours_practiced = simple_math_problem()\nprint(f\"Total hours practiced: {total_hours_practiced}\")",
    "result": 182.5
  },
  {
    "index": 56,
    "response": "### User:\nThe heights of students in a class for the past five years were: 160 cm in 2020, 165 cm in 2019, 170 cm in 2018, 155 cm in 2017, and 150 cm in 2016. What is the average height of students in the class over the past 5 years?\n\nSolve this EXACT problem with Python code in this format:\n\ndef simple_math_problem() -> float:\n\"\"\"\n[Copy the EXACT problem statement word-for-word]\n\"\"\"\n[Variable assignments with descriptive names]\n[Calculate step by step]\nresult = [final calculation]\n\nreturn result\n\n```python\ndef average_height_students():\n    \"\"\"\n    The heights of students in a class for the past five years were: \n    160 cm in 2020, 165 cm in 2019, 170 cm in 2018, 155 cm in 2017, \n    and 150 cm in 2016. What is the average height of students in the class over the past 5 years?\n    \"\"\"\n    \n    # Assigning heights to corresponding years\n    height_2020 = 160  # Height in cm for year 2020\n    height_2019 = 165   # Height in cm for year 2019\n    height_2018 = 170   # Height in cm for year 2018\n    height_2017 = 155   # Height in cm for year 2017\n    height_2016 = 150   # Height in cm for year 2016\n    \n    # Calculating the sum of all heights\n    total_heights = (height_2020 + height_2019 + height_2018 + \n                     height_2017 + height_2016)\n    \n    # Calculating the average height by dividing the sum by number of years\n    num_years = 5       # Total number of years\n    \n    # Final calculation for average height\n    result = total_heights / num_years\n    \n    return result\n\n# Getting and printing the result\naverage = average_height_students()\nprint(\"The final answer is\", average)\n```",
    "code": "def average_height_students():\n    \"\"\"\n    The heights of students in a class for the past five years were: \n    160 cm in 2020, 165 cm in 2019, 170 cm in 2018, 155 cm in 2017, \n    and 150 cm in 2016. What is the average height of students in the class over the past 5 years?\n    \"\"\"\n    \n    # Assigning heights to corresponding years\n    height_2020 = 160  # Height in cm for year 2020\n    height_2019 = 165   # Height in cm for year 2019\n    height_2018 = 170   # Height in cm for year 2018\n    height_2017 = 155   # Height in cm for year 2017\n    height_2016 = 150   # Height in cm for year 2016\n    \n    # Calculating the sum of all heights\n    total_heights = (height_2020 + height_2019 + height_2018 + \n                     height_2017 + height_2016)\n    \n    # Calculating the average height by dividing the sum by number of years\n    num_years = 5       # Total number of years\n    \n    # Final calculation for average height\n    result = total_heights / num_years\n    \n    return result\n\n# Getting and printing the result\naverage = average_height_students()\nprint(\"The final answer is\", average)",
    "result": "Success"
  },
  {
    "index": 57,
    "response": "### Solution for Problem: Rectangle Length Calculation Given Perimeter and Width-Per-Length Ratio\n\n```python\ndef calculate_rectangle_length() -> float:\n    \"\"\"\n    A rectangle has a length that is four times the width. The perimeter of the rectangle is 50 meters. What is the length of the rectangle in meters?\n    \"\"\"\n    \n    # Define the perimeter as given in the problem statement\n    perimeter = 50\n    \n    # Since it's a rectangle, all sides are equal in number.\n    # Let 'w' be the width and 'l' be the length of the rectangle.\n    # Given that the length is four times the width, we can express this relationship as:\n    # l = 4 * w\n    # Now, the perimeter of a rectangle is given by: \n    # Perimeter = 2*(length + breadth)\n    # Substitute 'l' with '4w' and solve for 'w':\n    # Perimeter = 2*((4*w) + w)\n    # Perimeter = 10 * w\n    width = perimeter / 10\n    \n    # Given the length is four times the width, we can calculate it now:\n    length = 4 * width\n    \n    result = length\n\n    return result\n```\n\nWhen you run this function, it calculates and returns the length of the rectangle given its perimeter and width-per-length ratio.",
    "code": "def calculate_rectangle_length() -> float:\n    \"\"\"\n    A rectangle has a length that is four times the width. The perimeter of the rectangle is 50 meters. What is the length of the rectangle in meters?\n    \"\"\"\n    \n    # Define the perimeter as given in the problem statement\n    perimeter = 50\n    \n    # Since it's a rectangle, all sides are equal in number.\n    # Let 'w' be the width and 'l' be the length of the rectangle.\n    # Given that the length is four times the width, we can express this relationship as:\n    # l = 4 * w\n    # Now, the perimeter of a rectangle is given by: \n    # Perimeter = 2*(length + breadth)\n    # Substitute 'l' with '4w' and solve for 'w':\n    # Perimeter = 2*((4*w) + w)\n    # Perimeter = 10 * w\n    width = perimeter / 10\n    \n    # Given the length is four times the width, we can calculate it now:\n    length = 4 * width\n    \n    result = length\n\n    return result",
    "result": "Success"
  },
  {
    "index": 58,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Liam had $4000. He went to the car dealership and bought 1 sedan for $3000, 2 bikes, each costing $500, and 5 gallons of gasoline, each costing $25. What was his remaining balance?\n    \"\"\"\n    initialBalance = 4000\n    sedanCost = 3000\n    bikeCost = 2 * 500\n    gasolineCost = 5 * 25\n    totalSpend = sedanCost + bikeCost + gasolineCost\n    \n    result = initialBalance - totalSpend\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Liam had $4000. He went to the car dealership and bought 1 sedan for $3000, 2 bikes, each costing $500, and 5 gallons of gasoline, each costing $25. What was his remaining balance?\n    \"\"\"\n    initialBalance = 4000\n    sedanCost = 3000\n    bikeCost = 2 * 500\n    gasolineCost = 5 * 25\n    totalSpend = sedanCost + bikeCost + gasolineCost\n    \n    result = initialBalance - totalSpend\n\n    return result",
    "result": -125
  },
  {
    "index": 59,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Emily baked 2 dozen cookies in the morning. Then she baked half as many cookies in the afternoon. How many cookies did she bake in total?\n    \"\"\"\n    cookiesMorning = 2 * 12  # Calculate the number of cookies baked in the morning (1 dozen is 12, so 2 dozen is 24)\n    cookiesAfternoon = cookiesMorning / 2  # Calculate the number of cookies baked in the afternoon (half as many as in the morning)\n    totalCookies = cookiesMorning + cookiesAfternoon  # Add the number of cookies baked in the morning and afternoon\n    result = totalCookies\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Emily baked 2 dozen cookies in the morning. Then she baked half as many cookies in the afternoon. How many cookies did she bake in total?\n    \"\"\"\n    cookiesMorning = 2 * 12  # Calculate the number of cookies baked in the morning (1 dozen is 12, so 2 dozen is 24)\n    cookiesAfternoon = cookiesMorning / 2  # Calculate the number of cookies baked in the afternoon (half as many as in the morning)\n    totalCookies = cookiesMorning + cookiesAfternoon  # Add the number of cookies baked in the morning and afternoon\n    result = totalCookies\n\n    return result",
    "result": 36.0
  },
  {
    "index": 60,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If 10 cows can produce 40 liters of milk in one day, how much milk will 20 cows produce in five days?\n    \"\"\"\n    cowsTotal = 10\n    milkProducedPerDay = 40\n    numDays = 5\n\n    # Calculate the amount of milk produced per cow per day\n    milkPerCowPerDay = milkProducedPerDay / cowsTotal\n    \n    # Calculate the total number of cows producing milk\n    cowsTotalActive = 20\n\n    # Calculate the total milk produced in one day by all active cows\n    milkProducedInOneDay = milkPerCowPerDay * cowsTotalActive\n    \n    # Calculate the total milk produced over five days\n    totalMilkProduced = milkProducedInOneDay * numDays\n\n    return totalMilkProduced\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If 10 cows can produce 40 liters of milk in one day, how much milk will 20 cows produce in five days?\n    \"\"\"\n    cowsTotal = 10\n    milkProducedPerDay = 40\n    numDays = 5\n\n    # Calculate the amount of milk produced per cow per day\n    milkPerCowPerDay = milkProducedPerDay / cowsTotal\n    \n    # Calculate the total number of cows producing milk\n    cowsTotalActive = 20\n\n    # Calculate the total milk produced in one day by all active cows\n    milkProducedInOneDay = milkPerCowPerDay * cowsTotalActive\n    \n    # Calculate the total milk produced over five days\n    totalMilkProduced = milkProducedInOneDay * numDays\n\n    return totalMilkProduced",
    "result": 400.0
  },
  {
    "index": 61,
    "response": "### User:\nA box contains 40 red balls and 30 blue balls. Two balls are drawn randomly without replacement. What is the probability that both balls are red?\n\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A box contains 40 red balls and 30 blue balls. Two balls are drawn randomly without replacement. \n    What is the probability that both balls are red?\n    \"\"\"\n    \n    total_red_balls = 40\n    total_blue_balls = 30\n    total_balls = total_red_balls + total_blue_balls\n    \n    # Probability of drawing a red ball first\n    prob_first_red = total_red_balls / total_balls\n    \n    # After removing one red ball, the probability of drawing another red ball\n    prob_second_red = (total_red_balls - 1) / (total_balls - 1)\n    \n    # Calculate the final probability by multiplying the probabilities for both draws\n    result = prob_first_red * prob_second_red\n    \n    return result\n\nresult = simple_math_problem()\nprint(result)\n```\n\nWhen you run this code, it will calculate and print the probability that both balls drawn are red.",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A box contains 40 red balls and 30 blue balls. Two balls are drawn randomly without replacement. \n    What is the probability that both balls are red?\n    \"\"\"\n    \n    total_red_balls = 40\n    total_blue_balls = 30\n    total_balls = total_red_balls + total_blue_balls\n    \n    # Probability of drawing a red ball first\n    prob_first_red = total_red_balls / total_balls\n    \n    # After removing one red ball, the probability of drawing another red ball\n    prob_second_red = (total_red_balls - 1) / (total_balls - 1)\n    \n    # Calculate the final probability by multiplying the probabilities for both draws\n    result = prob_first_red * prob_second_red\n    \n    return result\n\nresult = simple_math_problem()\nprint(result)",
    "result": 0.3229813664596273
  },
  {
    "index": 62,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    A toy store sells 150 teddy bears. If the store sold 80% of the teddy bears, how many teddy bears are left in the store?\n    \"\"\"\n    teddyBearsTotal = 150\n    percentageSold = 0.8\n    \n    # Calculate the number of teddy bears sold by multiplying total with the given percentage\n    teddyBearsSold = teddyBearsTotal * percentageSold\n    \n    # Calculate the number of teddy bears left in the store by subtracting the ones sold from the total\n    teddyBearsLeft = teddyBearsTotal - teddyBearsSold\n    \n    result = teddyBearsLeft\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A toy store sells 150 teddy bears. If the store sold 80% of the teddy bears, how many teddy bears are left in the store?\n    \"\"\"\n    teddyBearsTotal = 150\n    percentageSold = 0.8\n    \n    # Calculate the number of teddy bears sold by multiplying total with the given percentage\n    teddyBearsSold = teddyBearsTotal * percentageSold\n    \n    # Calculate the number of teddy bears left in the store by subtracting the ones sold from the total\n    teddyBearsLeft = teddyBearsTotal - teddyBearsSold\n    \n    result = teddyBearsLeft\n\n    return result",
    "result": 30.0
  },
  {
    "index": 63,
    "response": "### Problem Statement\n\nJohn earns $15 per hour as a babysitter. He worked 3 hours a day for 5 days last week. How much money did he earn in total?\n\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John earns $15 per hour as a babysitter. He worked 3 hours a day for 5 days last week. How much money did he earn in total?\n    \"\"\"\n    # Hourly wage\n    hourlyWage = 15\n    \n    # Total hours worked (assuming he worked the same number of hours each day)\n    hoursPerDay = 3\n    numDaysWorked = 5\n    totalHoursWorked = hoursPerDay * numDaysWorked\n    \n    # Calculate total earnings\n    totalEarnings = hourlyWage * totalHoursWorked\n    \n    result = totalEarnings\n\n    return result\n```\n\nYou can call this function to get John's total earnings:\n\n```python\nprint(simple_math_problem())\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John earns $15 per hour as a babysitter. He worked 3 hours a day for 5 days last week. How much money did he earn in total?\n    \"\"\"\n    # Hourly wage\n    hourlyWage = 15\n    \n    # Total hours worked (assuming he worked the same number of hours each day)\n    hoursPerDay = 3\n    numDaysWorked = 5\n    totalHoursWorked = hoursPerDay * numDaysWorked\n    \n    # Calculate total earnings\n    totalEarnings = hourlyWage * totalHoursWorked\n    \n    result = totalEarnings\n\n    return result",
    "result": 225
  },
  {
    "index": 64,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In a race, Timmy runs 5 miles and then walks 2 miles. If he does the same thing two more times, how many miles does he run total?\n    \"\"\"\n    # The distance Timmy runs in one set of activities (running 5 miles followed by walking 2 miles) is:\n    distance_per_set = 5\n    \n    # There are three sets of these activities\n    num_sets = 3\n\n    # Calculate the total distance run by multiplying the number of sets and distance per set\n    result = distance_per_set * num_sets\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In a race, Timmy runs 5 miles and then walks 2 miles. If he does the same thing two more times, how many miles does he run total?\n    \"\"\"\n    # The distance Timmy runs in one set of activities (running 5 miles followed by walking 2 miles) is:\n    distance_per_set = 5\n    \n    # There are three sets of these activities\n    num_sets = 3\n\n    # Calculate the total distance run by multiplying the number of sets and distance per set\n    result = distance_per_set * num_sets\n\n    return result",
    "result": 15
  },
  {
    "index": 65,
    "response": "### Solution\n\nHere's the Python code to calculate how many cupcakes Lisa has left:\n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Lisa baked 18 cupcakes. She gave 5 cupcakes to her friend, ate 3 herself, and gave 7 cupcakes to her neighbors. How many cupcakes does Lisa have left?\n    \"\"\"\n    cupcakesBaked = 18\n    cupcakesGivenToFriend = 5\n    cupcakesEatenByLisa = 3\n    cupcakesGivenToNeighbors = 7\n\n    # Calculate the total number of cupcakes given or eaten\n    cupcakesTaken = cupcakesGivenToFriend + cupcakesEatenByLisa + cupcakesGivenToNeighbors\n    \n    # Calculate how many cupcakes Lisa has left\n    cupcakesLeft = cupcakesBaked - cupcakesTaken\n\n    result = cupcakesLeft\n\n    return result\n```\nYou can run this code to see the final answer.",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Lisa baked 18 cupcakes. She gave 5 cupcakes to her friend, ate 3 herself, and gave 7 cupcakes to her neighbors. How many cupcakes does Lisa have left?\n    \"\"\"\n    cupcakesBaked = 18\n    cupcakesGivenToFriend = 5\n    cupcakesEatenByLisa = 3\n    cupcakesGivenToNeighbors = 7\n\n    # Calculate the total number of cupcakes given or eaten\n    cupcakesTaken = cupcakesGivenToFriend + cupcakesEatenByLisa + cupcakesGivenToNeighbors\n    \n    # Calculate how many cupcakes Lisa has left\n    cupcakesLeft = cupcakesBaked - cupcakesTaken\n\n    result = cupcakesLeft\n\n    return result",
    "result": 3
  },
  {
    "index": 66,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    John baked 35 cookies, and each of his 5 friends ate 10 fewer cookies than John did. How many cookies were eaten in total?\n    \"\"\"\n    johnCookies = 35\n    friendCookies = johnCookies - 10\n    numFriends = 5\n    totalEaten = (numFriends * friendCookies) + johnCookies\n    \n    result = totalEaten\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John baked 35 cookies, and each of his 5 friends ate 10 fewer cookies than John did. How many cookies were eaten in total?\n    \"\"\"\n    johnCookies = 35\n    friendCookies = johnCookies - 10\n    numFriends = 5\n    totalEaten = (numFriends * friendCookies) + johnCookies\n    \n    result = totalEaten\n\n    return result",
    "result": 160
  },
  {
    "index": 67,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    In a bakery, Alice can bake 3 loaves of bread in 1 hour, while Bob can bake 5 loaves of bread in 90 minutes. How many more loaves of bread can Bob bake in 2 hours than Alice?\n    \"\"\"\n    # Alice's baking rate per hour\n    alice_loaves_per_hour = 3\n    \n    # Time for which Bob bakes\n    bob_baking_time_hours = 2\n    \n    # Convert Bob's baking time to minutes\n    bob_baking_time_minutes = bob_baking_time_hours * 60\n    \n    # Bob's actual baking rate (5 loaves in 90 minutes)\n    bob_loaves_per_minute = 5 / 90\n    \n    # Calculate the number of loaves Alice bakes in 2 hours\n    alice_loaves_in_2hours = alice_loaves_per_hour * bob_baking_time_hours\n    \n    # Calculate the actual baking rate for Bob (5 loaves in 90 minutes is equal to)\n    bob_loaves_per_hour = bob_loaves_per_minute * bob_baking_time_minutes / 60\n    \n    # Calculate how many loaves of bread Bob can bake in 2 hours\n    bob_loaves_in_2hours = bob_loaves_per_hour * bob_baking_time_hours\n    \n    # Calculate the difference between the number of loaves Bob and Alice can bake in 2 hours\n    result = bob_loaves_in_2hours - alice_loaves_in_2hours\n    \n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In a bakery, Alice can bake 3 loaves of bread in 1 hour, while Bob can bake 5 loaves of bread in 90 minutes. How many more loaves of bread can Bob bake in 2 hours than Alice?\n    \"\"\"\n    # Alice's baking rate per hour\n    alice_loaves_per_hour = 3\n    \n    # Time for which Bob bakes\n    bob_baking_time_hours = 2\n    \n    # Convert Bob's baking time to minutes\n    bob_baking_time_minutes = bob_baking_time_hours * 60\n    \n    # Bob's actual baking rate (5 loaves in 90 minutes)\n    bob_loaves_per_minute = 5 / 90\n    \n    # Calculate the number of loaves Alice bakes in 2 hours\n    alice_loaves_in_2hours = alice_loaves_per_hour * bob_baking_time_hours\n    \n    # Calculate the actual baking rate for Bob (5 loaves in 90 minutes is equal to)\n    bob_loaves_per_hour = bob_loaves_per_minute * bob_baking_time_minutes / 60\n    \n    # Calculate how many loaves of bread Bob can bake in 2 hours\n    bob_loaves_in_2hours = bob_loaves_per_hour * bob_baking_time_hours\n    \n    # Calculate the difference between the number of loaves Bob and Alice can bake in 2 hours\n    result = bob_loaves_in_2hours - alice_loaves_in_2hours\n    \n    return result",
    "result": -5.777777777777778
  },
  {
    "index": 68,
    "response": "def percent_difference() -> float:\n    \"\"\"\n    Emma scored 85 on her math test, while Jack scored 91. What is the percent difference between Emma's score and Jack's score?\n    \"\"\"\n    emmas_score = 85\n    jacks_score = 91\n    \n    # Calculate absolute difference in scores\n    diff = abs(jacks_score - emmas_score)\n    \n    # Calculate percentage difference by dividing the absolute difference by Jack's score, then multiplying by 100 to convert it into a percentage\n    percent_diff = (diff / jacks_score) * 100\n    \n    result = percent_diff\n\n    return result",
    "code": "def percent_difference() -> float:\n    \"\"\"\n    Emma scored 85 on her math test, while Jack scored 91. What is the percent difference between Emma's score and Jack's score?\n    \"\"\"\n    emmas_score = 85\n    jacks_score = 91\n    \n    # Calculate absolute difference in scores\n    diff = abs(jacks_score - emmas_score)\n    \n    # Calculate percentage difference by dividing the absolute difference by Jack's score, then multiplying by 100 to convert it into a percentage\n    percent_diff = (diff / jacks_score) * 100\n    \n    result = percent_diff\n\n    return result",
    "result": "Success"
  },
  {
    "index": 69,
    "response": "### Solution to the problem:\n```python\ndef balloons_for_party() -> int:\n    \"\"\"\n    Sarah buys 6 dozen balloons to decorate for the party. While carrying them, \n    10% of the balloons accidentally pop. Once she starts decorating, she realizes \n    she only needs a quarter of the remaining balloons. How many balloons does she \n    actually use for the party?\n    \"\"\"\n    \n    # Calculate total number of balloons\n    total_balloons = 6 * 12\n    \n    # Calculate number of popped balloons (10% of total)\n    popped_balloons = int(total_balloons * 0.1)\n    \n    # Calculate remaining balloons after popping\n    remaining_balloons = total_balloons - popped_balloons\n    \n    # Calculate final number of balloons needed for decoration\n    final_needed = remaining_balloons / 4\n    \n    result = final_needed\n\n    return int(result)\n\nprint(balloons_for_party())\n```\nThis code calculates the final number of balloons that Sarah uses for the party.",
    "code": "def balloons_for_party() -> int:\n    \"\"\"\n    Sarah buys 6 dozen balloons to decorate for the party. While carrying them, \n    10% of the balloons accidentally pop. Once she starts decorating, she realizes \n    she only needs a quarter of the remaining balloons. How many balloons does she \n    actually use for the party?\n    \"\"\"\n    \n    # Calculate total number of balloons\n    total_balloons = 6 * 12\n    \n    # Calculate number of popped balloons (10% of total)\n    popped_balloons = int(total_balloons * 0.1)\n    \n    # Calculate remaining balloons after popping\n    remaining_balloons = total_balloons - popped_balloons\n    \n    # Calculate final number of balloons needed for decoration\n    final_needed = remaining_balloons / 4\n    \n    result = final_needed\n\n    return int(result)\n\nprint(balloons_for_party())",
    "result": "Success"
  },
  {
    "index": 70,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Janice bought two shirts for $30 in total and three pants for $45 in total. How much would she need to pay, if she would only buy one pants and one shirt?\n    \"\"\"\n    priceShirt = 15  # Price per shirt\n    pricePants = 15  # Price per pants\n    \n    costTwoShirts = 2 * priceShirt  # Calculate the total cost of two shirts\n    costThreePants = 3 * pricePants  # Calculate the total cost of three pants\n\n    result = priceShirt + pricePants  # Add the price of one shirt and one pant\n    \n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Janice bought two shirts for $30 in total and three pants for $45 in total. How much would she need to pay, if she would only buy one pants and one shirt?\n    \"\"\"\n    priceShirt = 15  # Price per shirt\n    pricePants = 15  # Price per pants\n    \n    costTwoShirts = 2 * priceShirt  # Calculate the total cost of two shirts\n    costThreePants = 3 * pricePants  # Calculate the total cost of three pants\n\n    result = priceShirt + pricePants  # Add the price of one shirt and one pant\n    \n    return result",
    "result": 30
  },
  {
    "index": 71,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Sarah spends 45 minutes doing yoga every day for 6 days a week. How many hours does she spend doing yoga in a month with 4 weeks?\n    \"\"\"\n    \n    # Define the duration of yoga per day\n    daily_yoga_minutes = 45\n    \n    # Define the number of days Sarah does yoga per week\n    weekly_days = 6\n    \n    # Calculate total minutes spent on yoga per week\n    weekly_yoga_minutes = daily_yoga_minutes * weekly_days\n    \n    # Define the number of weeks in a month\n    weeks_in_month = 4\n    \n    # Calculate total minutes spent on yoga per month\n    monthly_yoga_minutes = weekly_yoga_minutes * weeks_in_month\n    \n    # Convert total minutes to hours\n    monthly_yoga_hours = monthly_yoga_minutes / 60\n    \n    result = monthly_yoga_hours\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sarah spends 45 minutes doing yoga every day for 6 days a week. How many hours does she spend doing yoga in a month with 4 weeks?\n    \"\"\"\n    \n    # Define the duration of yoga per day\n    daily_yoga_minutes = 45\n    \n    # Define the number of days Sarah does yoga per week\n    weekly_days = 6\n    \n    # Calculate total minutes spent on yoga per week\n    weekly_yoga_minutes = daily_yoga_minutes * weekly_days\n    \n    # Define the number of weeks in a month\n    weeks_in_month = 4\n    \n    # Calculate total minutes spent on yoga per month\n    monthly_yoga_minutes = weekly_yoga_minutes * weeks_in_month\n    \n    # Convert total minutes to hours\n    monthly_yoga_hours = monthly_yoga_minutes / 60\n    \n    result = monthly_yoga_hours\n\n    return result",
    "result": 18.0
  },
  {
    "index": 72,
    "response": "def simple_math_problem() -> int:\n    \"\"\"\n    A vendor has 125 pencils. She sells 47 pencils in the morning. Afternoon, she sells 32 pencils, then in the evening she sells 11 pencils. How many pencils she has left now?\n    \"\"\"\n    \n    # Total number of pencils\n    pencilsTotal = 125\n    \n    # Number of pencils sold in the morning\n    pencilsSoldMorning = 47\n    \n    # Number of pencils sold in the afternoon\n    pencilsSoldAfternoon = 32\n    \n    # Number of pencils sold in the evening\n    pencilsSoldEvening = 11\n    \n    # Calculate total number of pencils left by subtracting all the sold pencils from the total\n    pencilsLeft = pencilsTotal - (pencilsSoldMorning + pencilsSoldAfternoon + pencilsSoldEvening)\n    \n    result = pencilsLeft\n\n    return result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A vendor has 125 pencils. She sells 47 pencils in the morning. Afternoon, she sells 32 pencils, then in the evening she sells 11 pencils. How many pencils she has left now?\n    \"\"\"\n    \n    # Total number of pencils\n    pencilsTotal = 125\n    \n    # Number of pencils sold in the morning\n    pencilsSoldMorning = 47\n    \n    # Number of pencils sold in the afternoon\n    pencilsSoldAfternoon = 32\n    \n    # Number of pencils sold in the evening\n    pencilsSoldEvening = 11\n    \n    # Calculate total number of pencils left by subtracting all the sold pencils from the total\n    pencilsLeft = pencilsTotal - (pencilsSoldMorning + pencilsSoldAfternoon + pencilsSoldEvening)\n    \n    result = pencilsLeft\n\n    return result",
    "result": 35
  },
  {
    "index": 73,
    "response": "### Solution\n\n```python\ndef weekend_getaway_cost() -> float:\n    \"\"\"\n    Susan is planning to go for a weekend getaway. She is planning to stay for 2 nights and the hotel charges $100 per night.\n    The hotel also charges a $50 cleaning fee. Susan has a coupon that gives her a discount of 10%.\n    How much does Susan have to pay in total?\n    \"\"\"\n    cost_per_night = 100\n    total_nights = 2\n    cleaning_fee = 50\n    discount_percentage = 0.1\n    \n    # Calculate the total cost before applying the discount\n    total_cost_before_discount = (cost_per_night * total_nights) + cleaning_fee\n    \n    # Apply the discount to get the final cost\n    discount_amount = total_cost_before_discount * discount_percentage\n    total_cost_after_discount = total_cost_before_discount - discount_amount\n\n    result = total_cost_after_discount\n    \n    return result\n\n# Execute the function to get the result\nresult = weekend_getaway_cost()\nprint(result)\n```\n\n### Explanation:\n\n1.  We start by defining a function `weekend_getaway_cost` that takes no arguments and returns a float.\n2.  Inside the function, we define variables for each part of the problem: `cost_per_night`, `total_nights`, `cleaning_fee`, and `discount_percentage`.\n3.  Next, we calculate the total cost before applying the discount by multiplying `cost_per_night` with `total_nights` and adding `cleaning_fee`.\n4.  Then, we apply the discount to get the final cost. We do this by multiplying `total_cost_before_discount` with `discount_percentage` to get the amount of discount, and subtracting it from `total_cost_before_discount`.\n5.  Finally, we return the result which is stored in the variable `result`.\n\nWhen you run this function, it will calculate and display the total cost Susan has to pay for her weekend getaway after applying the 10% discount.",
    "code": "def weekend_getaway_cost() -> float:\n    \"\"\"\n    Susan is planning to go for a weekend getaway. She is planning to stay for 2 nights and the hotel charges $100 per night.\n    The hotel also charges a $50 cleaning fee. Susan has a coupon that gives her a discount of 10%.\n    How much does Susan have to pay in total?\n    \"\"\"\n    cost_per_night = 100\n    total_nights = 2\n    cleaning_fee = 50\n    discount_percentage = 0.1\n    \n    # Calculate the total cost before applying the discount\n    total_cost_before_discount = (cost_per_night * total_nights) + cleaning_fee\n    \n    # Apply the discount to get the final cost\n    discount_amount = total_cost_before_discount * discount_percentage\n    total_cost_after_discount = total_cost_before_discount - discount_amount\n\n    result = total_cost_after_discount\n    \n    return result\n\n# Execute the function to get the result\nresult = weekend_getaway_cost()\nprint(result)",
    "result": "Success"
  },
  {
    "index": 74,
    "response": "### Solution to the exact problem statement\n\n```python\ndef train_distance() -> float:\n    \"\"\"\n    A train leaves the station and travels at a speed of 60 km/h. It arrives at the next station after 3 hours. What distance did the train cover?\n    \"\"\"\n    train_speed = 60  # Speed of the train in km/h\n    travel_time = 3   # Time taken by the train to reach the next station in hours\n\n    distance_covered = train_speed * travel_time  # Calculate the distance covered using the formula distance = speed * time\n\n    result = distance_covered\n\n    return result\n\n# Test the function\nprint(train_distance())\n```",
    "code": "def train_distance() -> float:\n    \"\"\"\n    A train leaves the station and travels at a speed of 60 km/h. It arrives at the next station after 3 hours. What distance did the train cover?\n    \"\"\"\n    train_speed = 60  # Speed of the train in km/h\n    travel_time = 3   # Time taken by the train to reach the next station in hours\n\n    distance_covered = train_speed * travel_time  # Calculate the distance covered using the formula distance = speed * time\n\n    result = distance_covered\n\n    return result\n\n# Test the function\nprint(train_distance())",
    "result": "Success"
  },
  {
    "index": 75,
    "response": "### Problem Solution: Calculate Daily Reading Pages for Alex's Book\n\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Alex needs to read a book with 360 pages in 30 days. If he reads the same number of pages each day, how many pages does he need to read per day?\n    \"\"\"\n    \n    # Total number of pages in the book\n    total_pages = 360\n    \n    # Number of days Alex has to finish reading the book\n    days_to_finish_book = 30\n    \n    # Calculate the daily reading requirement by dividing the total number of pages by the number of days\n    daily_reading_requirement = total_pages / days_to_finish_book\n    \n    result = daily_reading_requirement\n    \n    return result\n```\n\nThis Python function solves the problem exactly as stated. It calculates how many pages Alex needs to read each day to finish his book within 30 days, given that it has a total of 360 pages.",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Alex needs to read a book with 360 pages in 30 days. If he reads the same number of pages each day, how many pages does he need to read per day?\n    \"\"\"\n    \n    # Total number of pages in the book\n    total_pages = 360\n    \n    # Number of days Alex has to finish reading the book\n    days_to_finish_book = 30\n    \n    # Calculate the daily reading requirement by dividing the total number of pages by the number of days\n    daily_reading_requirement = total_pages / days_to_finish_book\n    \n    result = daily_reading_requirement\n    \n    return result",
    "result": 12.0
  },
  {
    "index": 76,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Mr. Wilson bikes for 45 minutes every morning. How many hours will he have spent biking after 3 weeks?\n    \"\"\"\n    minutesPerDay = 45\n    daysInWeek = 7\n    weeks = 3\n    \n    # Calculate total minutes in 3 weeks\n    totalMinutes = minutesPerDay * daysInWeek * weeks\n    \n    # Convert minutes to hours\n    totalHours = totalMinutes / 60\n    \n    result = totalHours\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mr. Wilson bikes for 45 minutes every morning. How many hours will he have spent biking after 3 weeks?\n    \"\"\"\n    minutesPerDay = 45\n    daysInWeek = 7\n    weeks = 3\n    \n    # Calculate total minutes in 3 weeks\n    totalMinutes = minutesPerDay * daysInWeek * weeks\n    \n    # Convert minutes to hours\n    totalHours = totalMinutes / 60\n    \n    result = totalHours\n\n    return result",
    "result": 15.75
  },
  {
    "index": 77,
    "response": "def simple_math_problem() -> int:\n    \"\"\"\nA school library has 3 bookcases with 5 shelves each. Each shelf can hold 10 books, and there are currently 25 books on each shelf. If 5 books are borrowed from each shelf, how many books are left in the library?\n\"\"\"\n    # Number of bookcases\n    bookcases = 3\n    \n    # Number of shelves per bookcase\n    shelves_per_bookcase = 5\n    \n    # Total number of shelves\n    total_shelves = bookcases * shelves_per_bookcase\n    \n    # Number of books each shelf can hold\n    books_per_shelf = 10\n    \n    # Total capacity of all shelves\n    total_capacity = total_shelves * books_per_shelf\n    \n    # Current number of books per shelf\n    current_books_per_shelf = 25\n    \n    # Current number of books in the library\n    current_books = total_shelves * current_books_per_shelf\n    \n    # Number of books borrowed from each shelf\n    books_borrowed_per_shelf = 5\n    \n    # Total number of books borrowed\n    total_books_borrowed = total_shelves * books_borrowed_per_shelf\n    \n    # Calculate the remaining number of books in the library after borrowing\n    remaining_books = current_books - total_books_borrowed\n    \n    result = remaining_books\n\n    return result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\nA school library has 3 bookcases with 5 shelves each. Each shelf can hold 10 books, and there are currently 25 books on each shelf. If 5 books are borrowed from each shelf, how many books are left in the library?\n\"\"\"\n    # Number of bookcases\n    bookcases = 3\n    \n    # Number of shelves per bookcase\n    shelves_per_bookcase = 5\n    \n    # Total number of shelves\n    total_shelves = bookcases * shelves_per_bookcase\n    \n    # Number of books each shelf can hold\n    books_per_shelf = 10\n    \n    # Total capacity of all shelves\n    total_capacity = total_shelves * books_per_shelf\n    \n    # Current number of books per shelf\n    current_books_per_shelf = 25\n    \n    # Current number of books in the library\n    current_books = total_shelves * current_books_per_shelf\n    \n    # Number of books borrowed from each shelf\n    books_borrowed_per_shelf = 5\n    \n    # Total number of books borrowed\n    total_books_borrowed = total_shelves * books_borrowed_per_shelf\n    \n    # Calculate the remaining number of books in the library after borrowing\n    remaining_books = current_books - total_books_borrowed\n    \n    result = remaining_books\n\n    return result",
    "result": 300
  },
  {
    "index": 78,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Sarah, Emily, and Olivia are splitting a box of 500 cookies. If Sarah takes 25% of the cookies and Olivia takes 30%, how many cookies will Emily receive?\n    \"\"\"\n    totalCookies = 500\n    sarahTakes = int(0.25 * totalCookies)\n    oliviaTakes = int(0.3 * totalCookies)\n    \n    # Calculate the number of cookies left after Sarah and Olivia take their shares\n    cookiesLeft = totalCookies - sarahTakes - oliviaTakes\n    \n    result = cookiesLeft\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sarah, Emily, and Olivia are splitting a box of 500 cookies. If Sarah takes 25% of the cookies and Olivia takes 30%, how many cookies will Emily receive?\n    \"\"\"\n    totalCookies = 500\n    sarahTakes = int(0.25 * totalCookies)\n    oliviaTakes = int(0.3 * totalCookies)\n    \n    # Calculate the number of cookies left after Sarah and Olivia take their shares\n    cookiesLeft = totalCookies - sarahTakes - oliviaTakes\n    \n    result = cookiesLeft\n\nreturn result",
    "result": "Error:   File \"/tmp/tmp3zutkjbo.py\", line 14\n    return result\n    ^^^^^^^^^^^^^\nSyntaxError: 'return' outside function\n"
  },
  {
    "index": 79,
    "response": "### Solution: Entire Cost of Order\n\n```python\ndef entire_cost_order() -> float:\n    \"\"\"\n    Jonah and his family went for an outing and grabbed a bite at a fast food place. \n    They ordered burgers for $12, fries for $5, and three sodas for $6. If they left a 10% tip, \n    what was the entire cost of the order?\n    \"\"\"\n\n    # Cost of burgers\n    burgers_cost = 12\n\n    # Cost of fries\n    fries_cost = 5\n\n    # Cost of sodas (3 * price per soda)\n    sodas_price_per_soda = 6 / 3\n    sodas_cost = 3 * sodas_price_per_soda\n\n    # Total cost before tip\n    total_cost_before_tip = burgers_cost + fries_cost + sodas_cost\n\n    # Tip percentage\n    tip_percentage = 10 / 100\n\n    # Calculate the amount of tip left\n    tip_amount = total_cost_before_tip * tip_percentage\n\n    # Entire cost, including tip\n    entire_cost = total_cost_before_tip + tip_amount\n\n    return entire_cost\n\nresult = entire_cost_order()\nprint(result)\n```",
    "code": "def entire_cost_order() -> float:\n    \"\"\"\n    Jonah and his family went for an outing and grabbed a bite at a fast food place. \n    They ordered burgers for $12, fries for $5, and three sodas for $6. If they left a 10% tip, \n    what was the entire cost of the order?\n    \"\"\"\n\n    # Cost of burgers\n    burgers_cost = 12\n\n    # Cost of fries\n    fries_cost = 5\n\n    # Cost of sodas (3 * price per soda)\n    sodas_price_per_soda = 6 / 3\n    sodas_cost = 3 * sodas_price_per_soda\n\n    # Total cost before tip\n    total_cost_before_tip = burgers_cost + fries_cost + sodas_cost\n\n    # Tip percentage\n    tip_percentage = 10 / 100\n\n    # Calculate the amount of tip left\n    tip_amount = total_cost_before_tip * tip_percentage\n\n    # Entire cost, including tip\n    entire_cost = total_cost_before_tip + tip_amount\n\n    return entire_cost\n\nresult = entire_cost_order()\nprint(result)",
    "result": "Success"
  },
  {
    "index": 80,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A jar contains 120 candies. One-eighth of the jar contains gummy bears and the rest are jelly beans. How many jelly beans are there?\n    \"\"\"\n    total_candies = 120\n    gummy_bears_proportion = 1/8\n\n    # Calculate one-eighth of the jar (gummy bears proportion)\n    candies_gummy_bears = gummy_bears_proportion * total_candies\n    \n    # The rest are jelly beans, so we subtract the gummy bears from the total\n    jelly_beans = total_candies - candies_gummy_bears\n\n    result = jelly_beans\n\n    return result\n\n# Execute the function to get the final answer\nresult = simple_math_problem()\nprint(result)\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A jar contains 120 candies. One-eighth of the jar contains gummy bears and the rest are jelly beans. How many jelly beans are there?\n    \"\"\"\n    total_candies = 120\n    gummy_bears_proportion = 1/8\n\n    # Calculate one-eighth of the jar (gummy bears proportion)\n    candies_gummy_bears = gummy_bears_proportion * total_candies\n    \n    # The rest are jelly beans, so we subtract the gummy bears from the total\n    jelly_beans = total_candies - candies_gummy_bears\n\n    result = jelly_beans\n\n    return result\n\n# Execute the function to get the final answer\nresult = simple_math_problem()\nprint(result)",
    "result": 105.0
  },
  {
    "index": 81,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Sarah bakes 5 loaves of bread every day for 7 days and stores them in the freezer. Each loaf of bread requires 4 tablespoons of butter to spread on top. If Mark comes over and eats 3 loaves of bread, how many tablespoons of butter does Sarah need to buy to spread on the remaining loaves?\n    \"\"\"\n    \n    # Number of loaves baked every day\n    loaves_per_day = 5\n    \n    # Total number of days\n    total_days = 7\n    \n    # Calculate total loaves of bread\n    total_loaves = loaves_per_day * total_days\n    \n    # Loaves eaten by Mark\n    loaves_eaten_by_mark = 3\n    \n    # Remaining loaves after Mark eats some\n    remaining_loaves = total_loaves - loaves_eaten_by_mark\n    \n    # Butter required per loaf\n    butter_per_loaf = 4\n    \n    # Total tablespoons of butter needed\n    total_butter_needed = remaining_loaves * butter_per_loaf\n    \n    result = total_butter_needed\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sarah bakes 5 loaves of bread every day for 7 days and stores them in the freezer. Each loaf of bread requires 4 tablespoons of butter to spread on top. If Mark comes over and eats 3 loaves of bread, how many tablespoons of butter does Sarah need to buy to spread on the remaining loaves?\n    \"\"\"\n    \n    # Number of loaves baked every day\n    loaves_per_day = 5\n    \n    # Total number of days\n    total_days = 7\n    \n    # Calculate total loaves of bread\n    total_loaves = loaves_per_day * total_days\n    \n    # Loaves eaten by Mark\n    loaves_eaten_by_mark = 3\n    \n    # Remaining loaves after Mark eats some\n    remaining_loaves = total_loaves - loaves_eaten_by_mark\n    \n    # Butter required per loaf\n    butter_per_loaf = 4\n    \n    # Total tablespoons of butter needed\n    total_butter_needed = remaining_loaves * butter_per_loaf\n    \n    result = total_butter_needed\n\n    return result",
    "result": 128
  },
  {
    "index": 82,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Mary saved up money to buy a new bicycle. She spent half of her savings on a helmet and then spent 30% of the remaining money on bike accessories. After these purchases, she had $150 left. How much money did Mary save up initially?\n    \"\"\"\n    \n    # Initial savings\n    initial_savings = 0\n    \n    # Let's start with an assumption that Mary saved up x dollars.\n    \n    # She spent half of her savings on a helmet:\n    remaining_after_helmet = initial_savings / 2\n    \n    # Then she spent 30% of the remaining money on bike accessories:\n    # So, we calculate 70% of the remaining money (after spending on helmet):\n    remaining_after_accessories = remaining_after_helmet - (remaining_after_helmet * 0.3)\n    \n    # We know that after these purchases, Mary had $150 left.\n    # Let's set an equation for this:\n    initial_savings / 2 - (initial_savings / 4) == 150\n    \n    # Simplify the equation:\n    initial_savings / 4 == 150\n    initial_savings == 600\n    \n    result = initial_savings\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mary saved up money to buy a new bicycle. She spent half of her savings on a helmet and then spent 30% of the remaining money on bike accessories. After these purchases, she had $150 left. How much money did Mary save up initially?\n    \"\"\"\n    \n    # Initial savings\n    initial_savings = 0\n    \n    # Let's start with an assumption that Mary saved up x dollars.\n    \n    # She spent half of her savings on a helmet:\n    remaining_after_helmet = initial_savings / 2\n    \n    # Then she spent 30% of the remaining money on bike accessories:\n    # So, we calculate 70% of the remaining money (after spending on helmet):\n    remaining_after_accessories = remaining_after_helmet - (remaining_after_helmet * 0.3)\n    \n    # We know that after these purchases, Mary had $150 left.\n    # Let's set an equation for this:\n    initial_savings / 2 - (initial_savings / 4) == 150\n    \n    # Simplify the equation:\n    initial_savings / 4 == 150\n    initial_savings == 600\n    \n    result = initial_savings\n\n    return result",
    "result": 0
  },
  {
    "index": 83,
    "response": "### User:\nA company has 5 managers for every 20 employees. If there are 120 employees, how many managers are there?\n\n```python\ndef calculate_managers() -> float:\n    \"\"\"\n    A company has 5 managers for every 20 employees. If there are 120 employees, how many managers are there?\n    \"\"\"\n    employees = 120\n    managers_per_employees = 5 / 20\n\n    # Calculate the number of sets of 20 employees\n    employee_sets = employees // 20\n    \n    # Calculate the total number of managers\n    managers = managers_per_employees * employee_sets\n\n    result = managers\n\n    return result\n\n# Run the function to get the final answer\nprint(\"The final answer is\", calculate_managers())\n```",
    "code": "def calculate_managers() -> float:\n    \"\"\"\n    A company has 5 managers for every 20 employees. If there are 120 employees, how many managers are there?\n    \"\"\"\n    employees = 120\n    managers_per_employees = 5 / 20\n\n    # Calculate the number of sets of 20 employees\n    employee_sets = employees // 20\n    \n    # Calculate the total number of managers\n    managers = managers_per_employees * employee_sets\n\n    result = managers\n\n    return result\n\n# Run the function to get the final answer\nprint(\"The final answer is\", calculate_managers())",
    "result": "Success"
  },
  {
    "index": 84,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A gardener needs to plant flowers in a garden. On a normal workday, she can plant 100 flowers in 4 hours. If she needs to plant a total of 1000 flowers, how many days will it take for the gardener to complete the task?\n    \"\"\"\n    # The number of flowers that can be planted per day\n    flowers_per_day = 100\n    \n    # The total number of flowers to be planted\n    total_flowers = 1000\n    \n    # Calculate the number of days needed to plant all the flowers\n    days_needed = total_flowers / flowers_per_day\n    \n    result = days_needed\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A gardener needs to plant flowers in a garden. On a normal workday, she can plant 100 flowers in 4 hours. If she needs to plant a total of 1000 flowers, how many days will it take for the gardener to complete the task?\n    \"\"\"\n    # The number of flowers that can be planted per day\n    flowers_per_day = 100\n    \n    # The total number of flowers to be planted\n    total_flowers = 1000\n    \n    # Calculate the number of days needed to plant all the flowers\n    days_needed = total_flowers / flowers_per_day\n    \n    result = days_needed\n\n    return result",
    "result": 10.0
  },
  {
    "index": 85,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Mark needs to paint a room with 4 walls, each 10 feet by 8 feet. If 1 gallon of paint covers 350 square feet, how many gallons of paint does he need?\n    \"\"\"\n    wall_length = 10\n    wall_width = 8\n    num_walls = 4\n    paint_coverage_per_gallon = 350\n    \n    # Calculate the total area to be painted in square feet\n    total_area_to_paint = (wall_length * wall_width) * num_walls\n    \n    # Calculate the number of gallons needed\n    gallons_needed = total_area_to_paint / paint_coverage_per_gallon\n    \n    result = gallons_needed\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mark needs to paint a room with 4 walls, each 10 feet by 8 feet. If 1 gallon of paint covers 350 square feet, how many gallons of paint does he need?\n    \"\"\"\n    wall_length = 10\n    wall_width = 8\n    num_walls = 4\n    paint_coverage_per_gallon = 350\n    \n    # Calculate the total area to be painted in square feet\n    total_area_to_paint = (wall_length * wall_width) * num_walls\n    \n    # Calculate the number of gallons needed\n    gallons_needed = total_area_to_paint / paint_coverage_per_gallon\n    \n    result = gallons_needed\n\n    return result",
    "result": 0.9142857142857143
  },
  {
    "index": 86,
    "response": "### Solution\n\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    The cost of a shirt is $30. If you buy 2 shirts and get a discount of 15% on the total price, how much will you pay?\n    \"\"\"\n    shirtCost = 30\n    numShirts = 2\n    discountPercentage = 0.15\n    \n    # Calculate the total cost before discount\n    totalCostBeforeDiscount = shirtCost * numShirts\n    \n    # Apply the discount to the total cost\n    discountAmount = totalCostBeforeDiscount * discountPercentage\n    totalCostAfterDiscount = totalCostBeforeDiscount - discountAmount\n    \n    result = totalCostAfterDiscount\n\nreturn result\n```\n\nThis code first calculates the total cost before applying the discount by multiplying the cost of a single shirt (`shirtCost`) by the number of shirts purchased (`numShirts`). Then, it applies the 15% discount to this total by calculating `discountAmount` as 15% of `totalCostBeforeDiscount`. The final amount paid is then calculated by subtracting `discountAmount` from `totalCostBeforeDiscount`, which is stored in `result`.",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The cost of a shirt is $30. If you buy 2 shirts and get a discount of 15% on the total price, how much will you pay?\n    \"\"\"\n    shirtCost = 30\n    numShirts = 2\n    discountPercentage = 0.15\n    \n    # Calculate the total cost before discount\n    totalCostBeforeDiscount = shirtCost * numShirts\n    \n    # Apply the discount to the total cost\n    discountAmount = totalCostBeforeDiscount * discountPercentage\n    totalCostAfterDiscount = totalCostBeforeDiscount - discountAmount\n    \n    result = totalCostAfterDiscount\n\nreturn result",
    "result": "Error:   File \"/tmp/tmp1x5y7004.py\", line 18\n    return result\n    ^^^^^^^^^^^^^\nSyntaxError: 'return' outside function\n"
  },
  {
    "index": 87,
    "response": "### Simple Interest Calculation\n\n```python\ndef simple_interest_calculation() -> float:\n    \"\"\"\n    What is the simple interest on $2000 for 3 years at 10% per annum?\n    \"\"\"\n    principal = 2000.00  # Initial investment or loan amount\n    time_years = 3       # Loan duration in years\n    annual_rate = 0.10   # Annual interest rate (as a decimal)\n    \n    # Calculate simple interest using the formula: I = P * r * t\n    interest = principal * annual_rate * time_years\n    \n    result = interest\n    \n    return result\n\n# Execute the function to get the final answer\nfinal_answer = round(simple_interest_calculation(), 2)\nprint(final_answer)  # Output: 600.00\n```\n\nThis code defines a function `simple_interest_calculation()` that takes no arguments and returns the simple interest calculated on a principal amount of $2000 for 3 years at an annual rate of 10%. The result is then rounded to two decimal places before being printed out.\n\nTo use this code, simply copy it into a Python file or interact with an online Python environment, execute the `simple_interest_calculation()` function by calling its name, and then print the final answer.",
    "code": "def simple_interest_calculation() -> float:\n    \"\"\"\n    What is the simple interest on $2000 for 3 years at 10% per annum?\n    \"\"\"\n    principal = 2000.00  # Initial investment or loan amount\n    time_years = 3       # Loan duration in years\n    annual_rate = 0.10   # Annual interest rate (as a decimal)\n    \n    # Calculate simple interest using the formula: I = P * r * t\n    interest = principal * annual_rate * time_years\n    \n    result = interest\n    \n    return result\n\n# Execute the function to get the final answer\nfinal_answer = round(simple_interest_calculation(), 2)\nprint(final_answer)  # Output: 600.00",
    "result": "Success"
  },
  {
    "index": 88,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Emily is a sales representative who has made 520 calls today. For every 10 calls, she documents the customers' feedback. If each feedback reveals four issues that she resolves immediately, how many issues has Emily resolved?\n    \"\"\"\n    total_calls = 520\n    calls_per_feedback = 10\n    issues_per_feedback = 4\n\n    # Calculate the number of feedbacks collected from the calls\n    num_feedbacks = (total_calls + calls_per_feedback - 1) // calls_per_feedback\n    \n    # Calculate the total issues resolved by Emily\n    total_issues_resolved = num_feedbacks * issues_per_feedback\n    \n    result = total_issues_resolved\n\n    return result\n\n# Test the function\nprint(simple_math_problem())\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Emily is a sales representative who has made 520 calls today. For every 10 calls, she documents the customers' feedback. If each feedback reveals four issues that she resolves immediately, how many issues has Emily resolved?\n    \"\"\"\n    total_calls = 520\n    calls_per_feedback = 10\n    issues_per_feedback = 4\n\n    # Calculate the number of feedbacks collected from the calls\n    num_feedbacks = (total_calls + calls_per_feedback - 1) // calls_per_feedback\n    \n    # Calculate the total issues resolved by Emily\n    total_issues_resolved = num_feedbacks * issues_per_feedback\n    \n    result = total_issues_resolved\n\n    return result\n\n# Test the function\nprint(simple_math_problem())",
    "result": 208
  },
  {
    "index": 89,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    A basketball team won 80% of their games. If they played 25 games, how many games did they win?\n    \"\"\"\n    percentageWon = 0.8\n    totalGamesPlayed = 25\n    gamesWon = totalGamesPlayed * percentageWon\n    result = gamesWon\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A basketball team won 80% of their games. If they played 25 games, how many games did they win?\n    \"\"\"\n    percentageWon = 0.8\n    totalGamesPlayed = 25\n    gamesWon = totalGamesPlayed * percentageWon\n    result = gamesWon\n\n    return result",
    "result": 20.0
  },
  {
    "index": 90,
    "response": "### Solution to Olivia's Balloon Problem\n\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Olivia bought 250 balloons for a party. She used 50 balloons to decorate her room, and the rest were divided equally among her friends. If each friend received 20 balloons, how many friends does Olivia have?\n    \"\"\"\n    # Total number of balloons purchased by Olivia\n    balloonsTotal = 250\n    \n    # Number of balloons used to decorate the room\n    balloonsDecorated = 50\n    \n    # Remaining balloons after decorating the room\n    remainingBalloons = balloonsTotal - balloonsDecorated\n    \n    # Each friend received 20 balloons\n    balloonsPerFriend = 20\n    \n    # Calculate the number of friends by dividing the remaining balloons by balloons per friend\n    numFriends = remainingBalloons // balloonsPerFriend\n    \n    result = numFriends\n\nreturn result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Olivia bought 250 balloons for a party. She used 50 balloons to decorate her room, and the rest were divided equally among her friends. If each friend received 20 balloons, how many friends does Olivia have?\n    \"\"\"\n    # Total number of balloons purchased by Olivia\n    balloonsTotal = 250\n    \n    # Number of balloons used to decorate the room\n    balloonsDecorated = 50\n    \n    # Remaining balloons after decorating the room\n    remainingBalloons = balloonsTotal - balloonsDecorated\n    \n    # Each friend received 20 balloons\n    balloonsPerFriend = 20\n    \n    # Calculate the number of friends by dividing the remaining balloons by balloons per friend\n    numFriends = remainingBalloons // balloonsPerFriend\n    \n    result = numFriends\n\nreturn result",
    "result": "Error:   File \"/tmp/tmpy4sn7_0k.py\", line 22\n    return result\n    ^^^^^^^^^^^^^\nSyntaxError: 'return' outside function\n"
  },
  {
    "index": 91,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Alex went to a bookstore and spent 78 dollars on books. He bought a total of 15 books. He bought 4 hardcover books at 12 dollars each, 3 paperback books at 8 dollars each, and the rest were e-books. How much does each e-book cost?\n    \"\"\"\n    total_books = 15\n    hardcover_price = 12\n    num_hardcovers = 4\n    paper_back_price = 8\n    num_paperbacks = 3\n\n    # Calculate the total spent on hardcover and paperback books\n    hardcover_total_spent = num_hardcovers * hardcover_price\n    paper_back_total_spent = num_paperbacks * paper_back_price\n\n    # Calculate the amount left for e-books\n    total_spent_e_books = 78 - (hardcover_total_spent + paper_back_total_spent)\n\n    # Calculate the number of e-books purchased\n    num_e_books = total_books - num_hardcovers - num_paperbacks\n\n    # Calculate the price per e-book\n    e_book_price = total_spent_e_books / num_e_books\n\n    result = e_book_price\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Alex went to a bookstore and spent 78 dollars on books. He bought a total of 15 books. He bought 4 hardcover books at 12 dollars each, 3 paperback books at 8 dollars each, and the rest were e-books. How much does each e-book cost?\n    \"\"\"\n    total_books = 15\n    hardcover_price = 12\n    num_hardcovers = 4\n    paper_back_price = 8\n    num_paperbacks = 3\n\n    # Calculate the total spent on hardcover and paperback books\n    hardcover_total_spent = num_hardcovers * hardcover_price\n    paper_back_total_spent = num_paperbacks * paper_back_price\n\n    # Calculate the amount left for e-books\n    total_spent_e_books = 78 - (hardcover_total_spent + paper_back_total_spent)\n\n    # Calculate the number of e-books purchased\n    num_e_books = total_books - num_hardcovers - num_paperbacks\n\n    # Calculate the price per e-book\n    e_book_price = total_spent_e_books / num_e_books\n\n    result = e_book_price\n\n    return result",
    "result": 0.75
  },
  {
    "index": 92,
    "response": "```python\ndef calculate_average_speed() -> float:\n    \"\"\"\n    Emma is going on a road trip and wants to calculate her average speed. She drives 300 miles in 4 hours. What is her average speed in miles per hour?\n    \"\"\"\n    distanceDriven = 300  # Total miles driven by Emma\n    timeTaken = 4  # Total time taken for the drive in hours\n    \n    # Calculate the average speed using the formula: Average Speed = Distance / Time\n    averageSpeed = distanceDriven / timeTaken\n    \n    result = averageSpeed\n\n    return result\n\n# Call the function to get the final answer\nfinal_answer = calculate_average_speed()\nprint(\"The final answer is\", final_answer)\n```",
    "code": "def calculate_average_speed() -> float:\n    \"\"\"\n    Emma is going on a road trip and wants to calculate her average speed. She drives 300 miles in 4 hours. What is her average speed in miles per hour?\n    \"\"\"\n    distanceDriven = 300  # Total miles driven by Emma\n    timeTaken = 4  # Total time taken for the drive in hours\n    \n    # Calculate the average speed using the formula: Average Speed = Distance / Time\n    averageSpeed = distanceDriven / timeTaken\n    \n    result = averageSpeed\n\n    return result\n\n# Call the function to get the final answer\nfinal_answer = calculate_average_speed()\nprint(\"The final answer is\", final_answer)",
    "result": "Success"
  },
  {
    "index": 93,
    "response": "### Fill Bucket with Water Problem\n\n```python\ndef fill_bucket_problem() -> float:\n    \"\"\"\n    John is filling a bucket with water. The bucket can hold 10 liters of water, \n    and the water is being poured at a rate of 0.5 liters per minute. If John \n    has already filled the bucket for 2 minutes, how many more minutes will it \n    take for the bucket to be completely filled?\n    \"\"\"\n    \n    # Bucket capacity in liters\n    bucket_capacity = 10\n    \n    # Water pouring rate in liters per minute\n    water_pouring_rate = 0.5\n    \n    # Minutes already spent filling the bucket\n    minutes_spent_filling_bucket = 2\n    \n    # Calculate the amount of water poured into the bucket so far\n    water_poured_into_bucket = water_pouring_rate * minutes_spent_filling_bucket\n    \n    # Calculate how much more water is needed to fill the bucket completely\n    remaining_water_needed = bucket_capacity - water_poured_into_bucket\n    \n    # Calculate how many more minutes it will take to pour the remaining amount of water into the bucket\n    additional_minutes_to_fill_bucket = remaining_water_needed / water_pouring_rate\n    \n    result = additional_minutes_to_fill_bucket\n    \n    return result\n\nresult = fill_bucket_problem()\nprint(result)\n```\n\n### Solution Explanation:\n\n- The code first defines the variables for bucket capacity, water pouring rate, and minutes already spent filling the bucket.\n- It calculates how much water has been poured into the bucket so far by multiplying the pouring rate with the time already spent.\n- Then it calculates the remaining amount of water needed to fill the bucket completely by subtracting the water poured from the bucket's capacity.\n- Finally, it calculates the additional minutes required to pour the remaining water into the bucket by dividing the remaining water needed by the pouring rate.\n\n### Example Output:\n\nWhen you run this code, it will output how many more minutes John needs to spend filling the bucket completely. \n\nAssuming the output is 6.0, it means that after spending 2 minutes already, it will take another 6 minutes for the bucket to be filled completely at a rate of 0.5 liters per minute.",
    "code": "def fill_bucket_problem() -> float:\n    \"\"\"\n    John is filling a bucket with water. The bucket can hold 10 liters of water, \n    and the water is being poured at a rate of 0.5 liters per minute. If John \n    has already filled the bucket for 2 minutes, how many more minutes will it \n    take for the bucket to be completely filled?\n    \"\"\"\n    \n    # Bucket capacity in liters\n    bucket_capacity = 10\n    \n    # Water pouring rate in liters per minute\n    water_pouring_rate = 0.5\n    \n    # Minutes already spent filling the bucket\n    minutes_spent_filling_bucket = 2\n    \n    # Calculate the amount of water poured into the bucket so far\n    water_poured_into_bucket = water_pouring_rate * minutes_spent_filling_bucket\n    \n    # Calculate how much more water is needed to fill the bucket completely\n    remaining_water_needed = bucket_capacity - water_poured_into_bucket\n    \n    # Calculate how many more minutes it will take to pour the remaining amount of water into the bucket\n    additional_minutes_to_fill_bucket = remaining_water_needed / water_pouring_rate\n    \n    result = additional_minutes_to_fill_bucket\n    \n    return result\n\nresult = fill_bucket_problem()\nprint(result)",
    "result": "Success"
  },
  {
    "index": 94,
    "response": "### User:\nA family watches 2 movies on the first day and then watches 1 more movie than the previous day each day. How many movies do they watch over the week?\n\n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    A family watches 2 movies on the first day and then watches 1 more movie than the previous day each day. How many movies do they watch over the week?\n    \"\"\"\n    # Number of days in a week\n    daysInWeek = 7\n    \n    # Movies watched on the first day\n    moviesFirstDay = 2\n    \n    # Incrementing number of movies watched each subsequent day\n    increment = 1\n    \n    # Total movies watched over the week, using a formula for sum of an arithmetic series\n    totalMovies = (daysInWeek / 2) * (moviesFirstDay + moviesFirstDay + increment * daysInWeek)\n    \n    result = int(totalMovies)\n\n    return result\n\n# Example usage:\nprint(simple_math_problem())\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A family watches 2 movies on the first day and then watches 1 more movie than the previous day each day. How many movies do they watch over the week?\n    \"\"\"\n    # Number of days in a week\n    daysInWeek = 7\n    \n    # Movies watched on the first day\n    moviesFirstDay = 2\n    \n    # Incrementing number of movies watched each subsequent day\n    increment = 1\n    \n    # Total movies watched over the week, using a formula for sum of an arithmetic series\n    totalMovies = (daysInWeek / 2) * (moviesFirstDay + moviesFirstDay + increment * daysInWeek)\n    \n    result = int(totalMovies)\n\n    return result\n\n# Example usage:\nprint(simple_math_problem())",
    "result": 38
  },
  {
    "index": 95,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Rachel used to buy 8 notebooks for $1.50 each. The price increased by 30%, so she decided to buy 3 fewer notebooks. How much money does Rachel save per day compared to what she used to spend?\n    \"\"\"\n    \n    # Original number of notebooks\n    original_notebooks = 8\n    \n    # New number of notebooks (3 fewer than before)\n    new_notebooks = original_notebooks - 3\n    \n    # Original price per notebook ($1.50)\n    original_price_per_notebook = 1.50\n    \n    # Price increase percentage (30%)\n    price_increase_percentage = 0.30\n    \n    # New price per notebook after the 30% increase\n    new_price_per_notebook = original_price_per_notebook * (1 + price_increase_percentage)\n    \n    # Original total daily cost for notebooks ($1.50 x 8)\n    original_total_cost = original_price_per_notebook * original_notebooks\n    \n    # New total daily cost for notebooks (new price per notebook x new number of notebooks)\n    new_total_cost = new_price_per_notebook * new_notebooks\n    \n    # Daily savings compared to what she used to spend\n    daily_savings = original_total_cost - new_total_cost\n    \n    result = daily_savings\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Rachel used to buy 8 notebooks for $1.50 each. The price increased by 30%, so she decided to buy 3 fewer notebooks. How much money does Rachel save per day compared to what she used to spend?\n    \"\"\"\n    \n    # Original number of notebooks\n    original_notebooks = 8\n    \n    # New number of notebooks (3 fewer than before)\n    new_notebooks = original_notebooks - 3\n    \n    # Original price per notebook ($1.50)\n    original_price_per_notebook = 1.50\n    \n    # Price increase percentage (30%)\n    price_increase_percentage = 0.30\n    \n    # New price per notebook after the 30% increase\n    new_price_per_notebook = original_price_per_notebook * (1 + price_increase_percentage)\n    \n    # Original total daily cost for notebooks ($1.50 x 8)\n    original_total_cost = original_price_per_notebook * original_notebooks\n    \n    # New total daily cost for notebooks (new price per notebook x new number of notebooks)\n    new_total_cost = new_price_per_notebook * new_notebooks\n    \n    # Daily savings compared to what she used to spend\n    daily_savings = original_total_cost - new_total_cost\n    \n    result = daily_savings\n\n    return result",
    "result": 2.25
  },
  {
    "index": 96,
    "response": "def simple_math_problem() -> int:\n    \"\"\"\n    A pizza restaurant serves 120 pizzas in a day. Two-thirds of them are large pizzas, and one-fourth of the remaining pizzas are medium-sized. The rest are small pizzas. How many small pizzas does the restaurant serve in a day?\n    \"\"\"\n    \n    # Total number of pizzas\n    total_pizzas = 120\n    \n    # Number of large pizzas (two-thirds)\n    large_pizzas = int(total_pizzas * 2 / 3)\n    \n    # Number of remaining pizzas after subtracting large pizzas\n    remaining_pizzas = total_pizzas - large_pizzas\n    \n    # Number of medium pizzas (one-fourth of the remaining pizzas)\n    medium_pizzas = int(remaining_pizzas * 1 / 4)\n    \n    # Number of small pizzas (the rest)\n    small_pizzas = remaining_pizzas - medium_pizzas\n    \n    result = small_pizzas\n\n    return result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A pizza restaurant serves 120 pizzas in a day. Two-thirds of them are large pizzas, and one-fourth of the remaining pizzas are medium-sized. The rest are small pizzas. How many small pizzas does the restaurant serve in a day?\n    \"\"\"\n    \n    # Total number of pizzas\n    total_pizzas = 120\n    \n    # Number of large pizzas (two-thirds)\n    large_pizzas = int(total_pizzas * 2 / 3)\n    \n    # Number of remaining pizzas after subtracting large pizzas\n    remaining_pizzas = total_pizzas - large_pizzas\n    \n    # Number of medium pizzas (one-fourth of the remaining pizzas)\n    medium_pizzas = int(remaining_pizzas * 1 / 4)\n    \n    # Number of small pizzas (the rest)\n    small_pizzas = remaining_pizzas - medium_pizzas\n    \n    result = small_pizzas\n\n    return result",
    "result": 30
  },
  {
    "index": 97,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 30 strawberries in a basket. If Tom eats 1/4 of them, how many strawberries are left in the basket?\n    \"\"\"\n    totalStrawberries = 30\n    fractionEaten = 1 / 4\n    strawberriesLeft = (totalStrawberries * (1 - fractionEaten))\n    \n    result = strawberriesLeft\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 30 strawberries in a basket. If Tom eats 1/4 of them, how many strawberries are left in the basket?\n    \"\"\"\n    totalStrawberries = 30\n    fractionEaten = 1 / 4\n    strawberriesLeft = (totalStrawberries * (1 - fractionEaten))\n    \n    result = strawberriesLeft\n\n    return result",
    "result": 22.5
  },
  {
    "index": 98,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A grocery store sells 1000 fruits. Forty percent of the fruits are apples, 20% are oranges, and the rest are bananas. How many fruits are bananas?\n    \"\"\"\n    totalFruits = 1000\n    applePercent = 40 / 100  # Convert percentage to decimal for calculation\n    orangePercent = 20 / 100  # Convert percentage to decimal for calculation\n\n    # Calculate number of apples and oranges in the store\n    apples = totalFruits * applePercent\n    oranges = totalFruits * orangePercent\n    \n    # Since bananas are everything else, subtract apples and oranges from total fruits\n    bananas = totalFruits - apples - oranges  # Total Fruits minus Apples plus Oranges\n\n    result = bananas  # Store the value in a variable so it's not lost when we return the function\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A grocery store sells 1000 fruits. Forty percent of the fruits are apples, 20% are oranges, and the rest are bananas. How many fruits are bananas?\n    \"\"\"\n    totalFruits = 1000\n    applePercent = 40 / 100  # Convert percentage to decimal for calculation\n    orangePercent = 20 / 100  # Convert percentage to decimal for calculation\n\n    # Calculate number of apples and oranges in the store\n    apples = totalFruits * applePercent\n    oranges = totalFruits * orangePercent\n    \n    # Since bananas are everything else, subtract apples and oranges from total fruits\n    bananas = totalFruits - apples - oranges  # Total Fruits minus Apples plus Oranges\n\n    result = bananas  # Store the value in a variable so it's not lost when we return the function\n\n    return result",
    "result": 400.0
  },
  {
    "index": 99,
    "response": "```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John bikes to work, which is 12 miles away. He can bike at a constant speed of 15 miles per hour. How long will it take him to get to work?\n    \"\"\"\n    distanceToWork = 12  # in miles\n    johnsSpeed = 15      # in miles per hour\n\n    timeToWork = distanceToWork / johnsSpeed\n    result = timeToWork\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John bikes to work, which is 12 miles away. He can bike at a constant speed of 15 miles per hour. How long will it take him to get to work?\n    \"\"\"\n    distanceToWork = 12  # in miles\n    johnsSpeed = 15      # in miles per hour\n\n    timeToWork = distanceToWork / johnsSpeed\n    result = timeToWork\n\n    return result",
    "result": 0.8
  }
]