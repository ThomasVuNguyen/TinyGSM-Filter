[
  {
    "index": 0,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    A farmer has 32 apples that each weigh 1 pound. How much does the farmer's 32 apples weigh in total?\n    \"\"\"\n    applesCount = 32\n    weightPerApple = 1  # in pounds\n    totalWeight = applesCount * weightPerApple\n    return totalWeight",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A farmer has 32 apples that each weigh 1 pound. How much does the farmer's 32 apples weigh in total?\n    \"\"\"\n    applesCount = 32\n    weightPerApple = 1  # in pounds\n    totalWeight = applesCount * weightPerApple\n    return totalWeight",
    "result": 32
  },
  {
    "index": 1,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nA book that costs $30 is discounted twice. The first time, it is discounted by 20%, and then again by 25%. What is the total discounted price of the book?\n\"\"\"\ninitial_price = 30  # Original price of the book\ndiscount1 = 20 / 100  # First discount percentage\ndiscounted_price_after_first = initial_price * (1 - discount1)  # Price after first discount\n\ndiscount2 = 25 / 100  # Second discount percentage\nfinal_price = discounted_price_after_first * (1 - discount2)  # Price after second discount\n\nresult = final_price\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A book that costs $30 is discounted twice. The first time, it is discounted by 20%, and then again by 25%. What is the total discounted price of the book?\n    \"\"\"\n    initial_price = 30  # Original price of the book\n    discount1 = 20 / 100  # First discount percentage\n    discounted_price_after_first = initial_price * (1 - discount1)  # Price after first discount\n\n    discount2 = 25 / 100  # Second discount percentage\n    final_price = discounted_price_after_first * (1 - discount2)  # Price after second discount\n\n    result = final_price\n\n    return result",
    "result": 18.0
  },
  {
    "index": 2,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Mathew has a budget of $300 per month for gas. If a gallon of gas costs $3.50, how many gallons of gas can Mathew buy in three months?\n    \"\"\"\n    monthly_budget = 300\n    cost_per_gallon = 3.50\n    months = 3\n\n    total_budget = monthly_budget * months\n    gallons_can_buy = total_budget / cost_per_gallon\n\n    return gallons_can_buy",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mathew has a budget of $300 per month for gas. If a gallon of gas costs $3.50, how many gallons of gas can Mathew buy in three months?\n    \"\"\"\n    monthly_budget = 300\n    cost_per_gallon = 3.50\n    months = 3\n\n    total_budget = monthly_budget * months\n    gallons_can_buy = total_budget / cost_per_gallon\n\n    return gallons_can_buy",
    "result": 257.14285714285717
  },
  {
    "index": 3,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nAdam has $100 in his account. He spends one-fourth of his money on clothes, two-fifth of his remaining on shoes and $15 on food. How much does he have left?\n\"\"\"\ninitial_amount = 100  # starting money in dollars\nclothes_spent = (1/4) * initial_amount  # spends one-fourth on clothes\nremaining_after_clothes = initial_amount - clothes_spent\n\nshoes_spent = (2/5) * remaining_after_clothes  # spends two-fifth of remaining on shoes\nremaining_after_shoes = remaining_after_clothes - shoes_spent\n\nfood_spent = 15  # spends $15 on food\nfinal_amount = remaining_after_shoes - food_spent\n\nresult = final_amount\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Adam has $100 in his account. He spends one-fourth of his money on clothes, two-fifth of his remaining on shoes and $15 on food. How much does he have left?\n    \"\"\"\n    initial_amount = 100  # starting money in dollars\n    clothes_spent = (1/4) * initial_amount  # spends one-fourth on clothes\n    remaining_after_clothes = initial_amount - clothes_spent\n\n    shoes_spent = (2/5) * remaining_after_clothes  # spends two-fifth of remaining on shoes\n    remaining_after_shoes = remaining_after_clothes - shoes_spent\n\n    food_spent = 15  # spends $15 on food\n    final_amount = remaining_after_shoes - food_spent\n\n    result = final_amount\n\n    return result",
    "result": 30.0
  },
  {
    "index": 4,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nEmily, Jacob, and Ryan are trying to raise $6,000 for their school’s robotics program. Currently, Ryan has collected five times the funds Jacob has, but only one-fourth of what Emily has raised. If Jacob has raised $400, how much has Ryan gathered?\n\"\"\"\n# Given data\njacob_funds = 400\n\n# Ryan has collected five times Jacob's funds\nryan_funds = 5 * jacob_funds\n\n# Ryan's amount is one-fourth of Emily's funds\n# Emily's funds can be calculated as:\n# Ryan's funds = (1/4) * Emily's funds\n# Therefore, Emily's funds = Ryan's funds * 4\n# Although not required for the final answer, we're asked how much Ryan has gathered\n\nresult = ryan_funds\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Emily, Jacob, and Ryan are trying to raise $6,000 for their school’s robotics program. Currently, Ryan has collected five times the funds Jacob has, but only one-fourth of what Emily has raised. If Jacob has raised $400, how much has Ryan gathered?\n    \"\"\"\n    # Given data\n    jacob_funds = 400\n\n    # Ryan has collected five times Jacob's funds\n    ryan_funds = 5 * jacob_funds\n\n    # Ryan's amount is one-fourth of Emily's funds\n    # Emily's funds can be calculated as:\n    # Ryan's funds = (1/4) * Emily's funds\n    # Therefore, Emily's funds = Ryan's funds * 4\n    # Although not required for the final answer, we're asked how much Ryan has gathered\n\n    result = ryan_funds\n\n    return result",
    "result": 2000
  },
  {
    "index": 5,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nLiz has 27 pencils and wants to divide them equally among three boxes. How many pencils should she put in each box?\n\"\"\"\ntotalPencils = 27\nnumberOfBoxes = 3\npencilsPerBox = totalPencils / numberOfBoxes\nresult = int(pencilsPerBox)\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Liz has 27 pencils and wants to divide them equally among three boxes. How many pencils should she put in each box?\n    \"\"\"\n    totalPencils = 27\n    numberOfBoxes = 3\n    pencilsPerBox = totalPencils / numberOfBoxes\n    result = int(pencilsPerBox)\n\n    return result",
    "result": 9
  },
  {
    "index": 6,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nA farmer has 80 chickens in a coop. Each chicken lays 1 egg per day. On average, 5% of eggs are damaged. How many eggs can the farmer collect in a week?\n\"\"\"\n# Number of chickens\nnum_chickens = 80\n\n# Eggs laid per chicken per day\neggs_per_chicken_per_day = 1\n\n# Total eggs laid per day by all chickens\ntotal_eggs_per_day = num_chickens * eggs_per_chicken_per_day\n\n# Number of days in a week\ndays_in_week = 7\n\n# Total eggs laid in a week\ntotal_eggs_per_week = total_eggs_per_day * days_in_week\n\n# Percentage of eggs damaged\ndamage_percentage = 5 / 100\n\n# Number of damaged eggs in the week\ndamaged_eggs = total_eggs_per_week * damage_percentage\n\n# Eggs collected after damage\neggs_collected = total_eggs_per_week - damaged_eggs\n\nresult = eggs_collected\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A farmer has 80 chickens in a coop. Each chicken lays 1 egg per day. On average, 5% of eggs are damaged. How many eggs can the farmer collect in a week?\n    \"\"\"\n    # Number of chickens\n    num_chickens = 80\n\n    # Eggs laid per chicken per day\n    eggs_per_chicken_per_day = 1\n\n    # Total eggs laid per day by all chickens\n    total_eggs_per_day = num_chickens * eggs_per_chicken_per_day\n\n    # Number of days in a week\n    days_in_week = 7\n\n    # Total eggs laid in a week\n    total_eggs_per_week = total_eggs_per_day * days_in_week\n\n    # Percentage of eggs damaged\n    damage_percentage = 5 / 100\n\n    # Number of damaged eggs in the week\n    damaged_eggs = total_eggs_per_week * damage_percentage\n\n    # Eggs collected after damage\n    eggs_collected = total_eggs_per_week - damaged_eggs\n\n    result = eggs_collected\n\n    return result",
    "result": 532.0
  },
  {
    "index": 7,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nDiane is buying a kitchen table for $425.00. She wants to make payments of $65.00 each month to pay it off. How many months will she need to make payments until the table is paid off?\n\"\"\"\ntotalCost = 425.00\nmonthlyPayment = 65.00\nmonthsNeeded = totalCost / monthlyPayment\n# Since she can't make a fractional payment month, round up to the next whole month\nimport math\nresult = math.ceil(monthsNeeded)\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Diane is buying a kitchen table for $425.00. She wants to make payments of $65.00 each month to pay it off. How many months will she need to make payments until the table is paid off?\n    \"\"\"\n    totalCost = 425.00\n    monthlyPayment = 65.00\n    monthsNeeded = totalCost / monthlyPayment\n    # Since she can't make a fractional payment month, round up to the next whole month\n    import math\n    result = math.ceil(monthsNeeded)\n\n    return result",
    "result": 7
  },
  {
    "index": 8,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nLisa makes $20 an hour babysitting. She works for 12 hours a week. She gets a 25% raise and works 2 hours more a week. How much money does she make a week now?\n\"\"\"\n# Initial hourly wage\ninitial_wage = 20\n# Initial hours worked per week\ninitial_hours = 12\n# New hourly wage after 25% raise\nraised_wage = initial_wage + (0.25 * initial_wage)\n# New hours worked per week after working 2 more hours\nnew_hours = initial_hours + 2\n# Calculate total weekly earnings after raise and extra hours\nresult = raised_wage * new_hours\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Lisa makes $20 an hour babysitting. She works for 12 hours a week. She gets a 25% raise and works 2 hours more a week. How much money does she make a week now?\n    \"\"\"\n    # Initial hourly wage\n    initial_wage = 20\n    # Initial hours worked per week\n    initial_hours = 12\n    # New hourly wage after 25% raise\n    raised_wage = initial_wage + (0.25 * initial_wage)\n    # New hours worked per week after working 2 more hours\n    new_hours = initial_hours + 2\n    # Calculate total weekly earnings after raise and extra hours\n    result = raised_wage * new_hours\n\n    return result",
    "result": 350.0
  },
  {
    "index": 9,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nRachel has 600 nails. She used 1/8 of them on a project and gave 2/3 of what's left to her brother. How many nails does Rachel have now?\n\"\"\"\n# Total nails Rachel starts with\ntotal_nails = 600\n\n# Nails used on the project (1/8 of total)\nnails_used = (1/8) * total_nails\n\n# Nails remaining after the project\nnails_left_after_use = total_nails - nails_used\n\n# Nails given to her brother (2/3 of what's left)\nnails_given_to_brother = (2/3) * nails_left_after_use\n\n# Nails remaining after giving to her brother\nnails_remaining = nails_left_after_use - nails_given_to_brother\n\nresult = nails_remaining\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Rachel has 600 nails. She used 1/8 of them on a project and gave 2/3 of what's left to her brother. How many nails does Rachel have now?\n    \"\"\"\n    # Total nails Rachel starts with\n    total_nails = 600\n\n    # Nails used on the project (1/8 of total)\n    nails_used = (1/8) * total_nails\n\n    # Nails remaining after the project\n    nails_left_after_use = total_nails - nails_used\n\n    # Nails given to her brother (2/3 of what's left)\n    nails_given_to_brother = (2/3) * nails_left_after_use\n\n    # Nails remaining after giving to her brother\n    nails_remaining = nails_left_after_use - nails_given_to_brother\n\n    result = nails_remaining\n\n    return result",
    "result": 175.0
  },
  {
    "index": 10,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nLeah and Owen are building sand sculptures. Owen’s sculpture is 9 times the size of Leah’s at 27 inches tall. How many inches taller is Owen’s sculpture than Leah’s?\n\"\"\"\n# Size of Owen's sculpture\nowen_size = 27\n\n# Leah's sculpture size\nleah_size = owen_size / 9\n\n# Difference in height\nheight_difference = owen_size - leah_size\n\nresult = height_difference\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Leah and Owen are building sand sculptures. Owen’s sculpture is 9 times the size of Leah’s at 27 inches tall. How many inches taller is Owen’s sculpture than Leah’s?\n    \"\"\"\n    # Size of Owen's sculpture\n    owen_size = 27\n\n    # Leah's sculpture size\n    leah_size = owen_size / 9\n\n    # Difference in height\n    height_difference = owen_size - leah_size\n\n    result = height_difference\n\n    return result",
    "result": 24.0
  },
  {
    "index": 11,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nPatrick has 16 stickers. Quinn has twice as many stickers as Patrick does. Riley has 12 more stickers than Quinn does. How many stickers does Riley have?\n\"\"\"\npatrick_stickers = 16\nquinn_stickers = 2 * patrick_stickers\nriley_stickers = quinn_stickers + 12\nresult = riley_stickers\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Patrick has 16 stickers. Quinn has twice as many stickers as Patrick does. Riley has 12 more stickers than Quinn does. How many stickers does Riley have?\n    \"\"\"\n    patrick_stickers = 16\n    quinn_stickers = 2 * patrick_stickers\n    riley_stickers = quinn_stickers + 12\n    result = riley_stickers\n\n    return result",
    "result": 44
  },
  {
    "index": 12,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nThere are 60 liters of water in a container. If 10 liters of water are used each day, how many days will it take until the container is empty?\n\"\"\"\ntotal_water = 60  # total liters of water in the container\nwater_used_per_day = 10  # liters of water used each day\n\ndays_until_empty = total_water // water_used_per_day  # integer division to find complete days\n\nresult = days_until_empty\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    There are 60 liters of water in a container. If 10 liters of water are used each day, how many days will it take until the container is empty?\n    \"\"\"\n    total_water = 60  # total liters of water in the container\n    water_used_per_day = 10  # liters of water used each day\n\n    days_until_empty = total_water // water_used_per_day  # integer division to find complete days\n\n    result = days_until_empty\n\n    return result",
    "result": 6
  },
  {
    "index": 13,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    John is driving from city A to city B, which are 120 miles apart. \n    He drives at a speed of 60 miles per hour for the first 60 miles, but then hits dense traffic and only drives at 30 miles per hour for the remaining 60 miles. \n    What is John's average speed for the entire trip?\n    \"\"\"\n    # Distance covered at each speed\n    distance_first_part = 60  # miles\n    distance_second_part = 60  # miles\n\n    # Speeds\n    speed_first_part = 60  # mph\n    speed_second_part = 30  # mph\n\n    # Calculate time taken for each part\n    time_first_part = distance_first_part / speed_first_part  # hours\n    time_second_part = distance_second_part / speed_second_part  # hours\n\n    # Total time\n    total_time = time_first_part + time_second_part\n\n    # Total distance\n    total_distance = distance_first_part + distance_second_part\n\n    # Calculate average speed\n    result = total_distance / total_time\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John is driving from city A to city B, which are 120 miles apart. \n    He drives at a speed of 60 miles per hour for the first 60 miles, but then hits dense traffic and only drives at 30 miles per hour for the remaining 60 miles. \n    What is John's average speed for the entire trip?\n    \"\"\"\n    # Distance covered at each speed\n    distance_first_part = 60  # miles\n    distance_second_part = 60  # miles\n\n    # Speeds\n    speed_first_part = 60  # mph\n    speed_second_part = 30  # mph\n\n    # Calculate time taken for each part\n    time_first_part = distance_first_part / speed_first_part  # hours\n    time_second_part = distance_second_part / speed_second_part  # hours\n\n    # Total time\n    total_time = time_first_part + time_second_part\n\n    # Total distance\n    total_distance = distance_first_part + distance_second_part\n\n    # Calculate average speed\n    result = total_distance / total_time\n\n    return result",
    "result": 40.0
  },
  {
    "index": 14,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nA school has twenty boys and thirty girls. The number of girls increases by ten percent and the number of boys decreases by five percent. How many students are there in the school now?\n\"\"\"\n# Initial number of boys and girls\ninitial_boys = 20\ninitial_girls = 30\n\n# Increase in girls by 10%\nincrease_girls_percent = 10\nnew_girls = initial_girls * (1 + increase_girls_percent / 100)\n\n# Decrease in boys by 5%\ndecrease_boys_percent = 5\nnew_boys = initial_boys * (1 - decrease_boys_percent / 100)\n\n# Total students now\ntotal_students = new_boys + new_girls\n\n# Since total students should be an integer count, we can convert to int\nresult = int(total_students)\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A school has twenty boys and thirty girls. The number of girls increases by ten percent and the number of boys decreases by five percent. How many students are there in the school now?\n    \"\"\"\n    # Initial number of boys and girls\n    initial_boys = 20\n    initial_girls = 30\n\n    # Increase in girls by 10%\n    increase_girls_percent = 10\n    new_girls = initial_girls * (1 + increase_girls_percent / 100)\n\n    # Decrease in boys by 5%\n    decrease_boys_percent = 5\n    new_boys = initial_boys * (1 - decrease_boys_percent / 100)\n\n    # Total students now\n    total_students = new_boys + new_girls\n\n    # Since total students should be an integer count, we can convert to int\n    result = int(total_students)\n\n    return result",
    "result": 52
  },
  {
    "index": 15,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nA music store sold 25 guitars last week. This week, they sold 3 times as many guitars. If the store had 75 guitars before selling new ones this week, how many guitars are in the store now?\n\"\"\"\nguitars_last_week = 25\nguitars_sold_this_week = 3 * guitars_last_week\ninitial_guitars = 75\nguitars_remaining_before_sale = initial_guitars\nguitars_after_sale = guitars_remaining_before_sale - guitars_sold_this_week\nresult = guitars_after_sale\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A music store sold 25 guitars last week. This week, they sold 3 times as many guitars. If the store had 75 guitars before selling new ones this week, how many guitars are in the store now?\n    \"\"\"\n    guitars_last_week = 25\n    guitars_sold_this_week = 3 * guitars_last_week\n    initial_guitars = 75\n    guitars_remaining_before_sale = initial_guitars\n    guitars_after_sale = guitars_remaining_before_sale - guitars_sold_this_week\n    result = guitars_after_sale\n\n    return result",
    "result": 0
  },
  {
    "index": 16,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nLaura bought 3 apples and 4 oranges. Each apple cost $0.45 and each orange cost $0.60. How much did she spend in total?\n\"\"\"\n# Cost per apple\ncost_per_apple = 0.45\n# Cost per orange\ncost_per_orange = 0.60\n\n# Number of apples bought\nnum_apples = 3\n# Number of oranges bought\nnum_oranges = 4\n\n# Calculate total cost for apples\ntotal_cost_apples = num_apples * cost_per_apple\n# Calculate total cost for oranges\ntotal_cost_oranges = num_oranges * cost_per_orange\n\n# Final total cost\nresult = total_cost_apples + total_cost_oranges\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Laura bought 3 apples and 4 oranges. Each apple cost $0.45 and each orange cost $0.60. How much did she spend in total?\n    \"\"\"\n    # Cost per apple\n    cost_per_apple = 0.45\n    # Cost per orange\n    cost_per_orange = 0.60\n\n    # Number of apples bought\n    num_apples = 3\n    # Number of oranges bought\n    num_oranges = 4\n\n    # Calculate total cost for apples\n    total_cost_apples = num_apples * cost_per_apple\n    # Calculate total cost for oranges\n    total_cost_oranges = num_oranges * cost_per_orange\n\n    # Final total cost\n    result = total_cost_apples + total_cost_oranges\n\n    return result",
    "result": 3.75
  },
  {
    "index": 17,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nA school librarian ordered 240 books to replenish the library's collection. The books were delivered in 12 boxes, each containing an equal number of books. However, the librarian realized that some of the books were damaged and had to be returned. If 15% of the books were damaged, how many boxes did the librarian have to return?\n\"\"\"\ntotal_books_ordered = 240\nnumber_of_boxes = 12\nbooks_per_box = total_books_ordered / number_of_boxes\n\ndamaged_books_percentage = 15\ndamaged_books = total_books_ordered * damaged_books_percentage / 100\n\n# Determine how many books need to be returned (i.e., damaged books)\nbooks_to_return = damaged_books\n\n# Number of boxes to return\nboxes_to_return = books_to_return / books_per_box\n\nresult = int(boxes_to_return)\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A school librarian ordered 240 books to replenish the library's collection. The books were delivered in 12 boxes, each containing an equal number of books. However, the librarian realized that some of the books were damaged and had to be returned. If 15% of the books were damaged, how many boxes did the librarian have to return?\n    \"\"\"\n    total_books_ordered = 240\n    number_of_boxes = 12\n    books_per_box = total_books_ordered / number_of_boxes\n\n    damaged_books_percentage = 15\n    damaged_books = total_books_ordered * damaged_books_percentage / 100\n\n    # Determine how many books need to be returned (i.e., damaged books)\n    books_to_return = damaged_books\n\n    # Number of boxes to return\n    boxes_to_return = books_to_return / books_per_box\n\n    result = int(boxes_to_return)\n\n    return result",
    "result": 1
  },
  {
    "index": 18,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nA grocery store sells apples for $0.50 each. If the store sold 72 apples, how much money did they make?\n\"\"\"\nprice_per_apple = 0.50\nnumber_of_apples_sold = 72\ntotal_revenue = price_per_apple * number_of_apples_sold\n\nreturn total_revenue",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A grocery store sells apples for $0.50 each. If the store sold 72 apples, how much money did they make?\n    \"\"\"\n    price_per_apple = 0.50\n    number_of_apples_sold = 72\n    total_revenue = price_per_apple * number_of_apples_sold\n\n    return total_revenue",
    "result": 36.0
  },
  {
    "index": 19,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nIf 20 birds can fly over a lake in 10 seconds, how long would it take for 50 birds to fly over the same lake?\n\"\"\"\nbirds_count_initial = 20\ntime_initial_seconds = 10\nbirds_count_new = 50\n\n# Assuming the time taken is independent of the number of birds, since flying over the lake is not a process dependent on the number of birds\n# Therefore, the time remains the same regardless of the number of birds\n\nresult = time_initial_seconds\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If 20 birds can fly over a lake in 10 seconds, how long would it take for 50 birds to fly over the same lake?\n    \"\"\"\n    birds_count_initial = 20\n    time_initial_seconds = 10\n    birds_count_new = 50\n\n    # Assuming the time taken is independent of the number of birds, since flying over the lake is not a process dependent on the number of birds\n    # Therefore, the time remains the same regardless of the number of birds\n\n    result = time_initial_seconds\n\n    return result",
    "result": 10
  },
  {
    "index": 20,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nKent bought a pencil for 0.75 and a note book for 2.20. He gives the cashier a five dollar bill. How much change did Kent get back?\n\"\"\"\nprice_of_pencil = 0.75\nprice_of_notebook = 2.20\ntotal_cost = price_of_pencil + price_of_notebook\namount_given = 5.00\nchange = amount_given - total_cost\n\nreturn change",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Kent bought a pencil for 0.75 and a note book for 2.20. He gives the cashier a five dollar bill. How much change did Kent get back?\n    \"\"\"\n    price_of_pencil = 0.75\n    price_of_notebook = 2.20\n    total_cost = price_of_pencil + price_of_notebook\n    amount_given = 5.00\n    change = amount_given - total_cost\n\n    return change",
    "result": 2.05
  },
  {
    "index": 21,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nMason's car needs a new set of tires, but he doesn't want to buy them. Instead, he decides to combine the remaining treads from his current set of tires. Each tire has 20% of its original treads left. If he has four 60,000-mile tires, how many 15,000-mile tires can he create?\n\"\"\"\n# Number of tires Mason has\nnumber_of_tires = 4\n\n# Original miles per tire\noriginal_miles_per_tire = 60000\n\n# Remaining tread percentage per tire\nremaining_tread_percentage = 20 / 100  # 20%\n\n# Remaining miles per tire\nremaining_miles_per_tire = original_miles_per_tire * remaining_tread_percentage\n\n# Total remaining miles from all tires\ntotal_remaining_miles = number_of_tires * remaining_miles_per_tire\n\n# Miles per new tire\nmiles_per_new_tire = 15000\n\n# Number of new tires that can be created\nnumber_of_new_tires = total_remaining_miles / miles_per_new_tire\n\nresult = number_of_new_tires\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mason's car needs a new set of tires, but he doesn't want to buy them. Instead, he decides to combine the remaining treads from his current set of tires. Each tire has 20% of its original treads left. If he has four 60,000-mile tires, how many 15,000-mile tires can he create?\n    \"\"\"\n    # Number of tires Mason has\n    number_of_tires = 4\n\n    # Original miles per tire\n    original_miles_per_tire = 60000\n\n    # Remaining tread percentage per tire\n    remaining_tread_percentage = 20 / 100  # 20%\n\n    # Remaining miles per tire\n    remaining_miles_per_tire = original_miles_per_tire * remaining_tread_percentage\n\n    # Total remaining miles from all tires\n    total_remaining_miles = number_of_tires * remaining_miles_per_tire\n\n    # Miles per new tire\n    miles_per_new_tire = 15000\n\n    # Number of new tires that can be created\n    number_of_new_tires = total_remaining_miles / miles_per_new_tire\n\n    result = number_of_new_tires\n\n    return result",
    "result": 3.2
  },
  {
    "index": 22,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nCarol went to the music store. She bought 5 CDs and 4 vinyls. Each CD costs $8 and each vinyl costs $12. How much did she spend in total?\n\"\"\"\n# Price per CD\nprice_per_cd = 8\n# Number of CDs bought\nnum_cds = 5\n# Total cost for CDs\ntotal_cds_cost = price_per_cd * num_cds\n\n# Price per vinyl\nprice_per_vinyl = 12\n# Number of vinyls bought\nnum_vinyls = 4\n# Total cost for vinyls\ntotal_vinyls_cost = price_per_vinyl * num_vinyls\n\n# Total amount spent\nresult = total_cds_cost + total_vinyls_cost\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Carol went to the music store. She bought 5 CDs and 4 vinyls. Each CD costs $8 and each vinyl costs $12. How much did she spend in total?\n    \"\"\"\n    # Price per CD\n    price_per_cd = 8\n    # Number of CDs bought\n    num_cds = 5\n    # Total cost for CDs\n    total_cds_cost = price_per_cd * num_cds\n\n    # Price per vinyl\n    price_per_vinyl = 12\n    # Number of vinyls bought\n    num_vinyls = 4\n    # Total cost for vinyls\n    total_vinyls_cost = price_per_vinyl * num_vinyls\n\n    # Total amount spent\n    result = total_cds_cost + total_vinyls_cost\n\n    return result",
    "result": 88
  },
  {
    "index": 23,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    A rectangle has a length of 12 feet and a width of 6 feet. What is the area of the rectangle?\n    \"\"\"\n    length_in_feet = 12\n    width_in_feet = 6\n    area = length_in_feet * width_in_feet\n    result = area\n    \n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A rectangle has a length of 12 feet and a width of 6 feet. What is the area of the rectangle?\n    \"\"\"\n    length_in_feet = 12\n    width_in_feet = 6\n    area = length_in_feet * width_in_feet\n    result = area\n    \n    return result",
    "result": 72
  },
  {
    "index": 24,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nIt takes Michael 6 minutes to drive from his home to the store while he drives at 40 mph. It takes John 4 minutes to travel from his home to the store at 50mph, how much farther did Michael drive than John?\n\"\"\"\n# Convert times from minutes to hours\ntime_michael_hours = 6 / 60\ntime_john_hours = 4 / 60\n\n# Calculate distances for Michael and John\ndistance_michael = 40 * time_michael_hours\ndistance_john = 50 * time_john_hours\n\n# Calculate how much farther Michael drove than John\ndistance_difference = distance_michael - distance_john\n\nresult = distance_difference\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    It takes Michael 6 minutes to drive from his home to the store while he drives at 40 mph. It takes John 4 minutes to travel from his home to the store at 50mph, how much farther did Michael drive than John?\n    \"\"\"\n    # Convert times from minutes to hours\n    time_michael_hours = 6 / 60\n    time_john_hours = 4 / 60\n\n    # Calculate distances for Michael and John\n    distance_michael = 40 * time_michael_hours\n    distance_john = 50 * time_john_hours\n\n    # Calculate how much farther Michael drove than John\n    distance_difference = distance_michael - distance_john\n\n    result = distance_difference\n\n    return result",
    "result": 0.6666666666666665
  },
  {
    "index": 25,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    A company has 120 employees and wants to give them all a $100 bonus. If the company can only spend $12,000 on bonuses, what percentage of the bonus will each employee receive?\n    \"\"\"\n    total_employees = 120\n    total_available_budget = 12000\n    desired_bonus_per_employee = 100\n\n    # Calculate the total amount they want to give if everyone gets $100\n    total_desired_bonus = total_employees * desired_bonus_per_employee\n\n    # Since the total desired bonus exceeds the available budget, we need to find what percentage of the bonus the employees will actually receive\n    bonus_percentage = (total_available_budget / total_desired_bonus) * 100\n\n    return bonus_percentage",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A company has 120 employees and wants to give them all a $100 bonus. If the company can only spend $12,000 on bonuses, what percentage of the bonus will each employee receive?\n    \"\"\"\n    total_employees = 120\n    total_available_budget = 12000\n    desired_bonus_per_employee = 100\n\n    # Calculate the total amount they want to give if everyone gets $100\n    total_desired_bonus = total_employees * desired_bonus_per_employee\n\n    # Since the total desired bonus exceeds the available budget, we need to find what percentage of the bonus the employees will actually receive\n    bonus_percentage = (total_available_budget / total_desired_bonus) * 100\n\n    return bonus_percentage",
    "result": 100.0
  },
  {
    "index": 26,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nBen collects 3 boxes of stamps. Each box has 25 stamps. He trades 15 stamps with his brother for 5 comic books. How many stamps does he have left?\n\"\"\"\nboxes_collected = 3\nstamps_per_box = 25\ntotal_stamps = boxes_collected * stamps_per_box\n\nstamps_traded = 15\n# He trades 15 stamps, so subtract that from total\nstamps_after_trade = total_stamps - stamps_traded\n\nresult = stamps_after_trade\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Ben collects 3 boxes of stamps. Each box has 25 stamps. He trades 15 stamps with his brother for 5 comic books. How many stamps does he have left?\n    \"\"\"\n    boxes_collected = 3\n    stamps_per_box = 25\n    total_stamps = boxes_collected * stamps_per_box\n\n    stamps_traded = 15\n    # He trades 15 stamps, so subtract that from total\n    stamps_after_trade = total_stamps - stamps_traded\n\n    result = stamps_after_trade\n\n    return result",
    "result": 60
  },
  {
    "index": 27,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nRyan owns 5 bikes. Each bike has 2 pedals. How many pedals does he have?\n\"\"\"\nbikes_owned = 5\npedals_per_bike = 2\ntotal_pedals = bikes_owned * pedals_per_bike\n\nresult = total_pedals\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Ryan owns 5 bikes. Each bike has 2 pedals. How many pedals does he have?\n    \"\"\"\n    bikes_owned = 5\n    pedals_per_bike = 2\n    total_pedals = bikes_owned * pedals_per_bike\n\n    result = total_pedals\n\n    return result",
    "result": 10
  },
  {
    "index": 28,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nMark wants to visit two different zoos. One is 8 miles from his home and the other is 20 miles away. If he goes to both zoos on different days, how many miles will he travel in total?\n\"\"\"\ndistance_to_first_zoo = 8\ndistance_to_second_zoo = 20\ntotal_distance = distance_to_first_zoo + distance_to_second_zoo\n\nresult = total_distance\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Mark wants to visit two different zoos. One is 8 miles from his home and the other is 20 miles away. If he goes to both zoos on different days, how many miles will he travel in total?\n    \"\"\"\n    distance_to_first_zoo = 8\n    distance_to_second_zoo = 20\n    total_distance = distance_to_first_zoo + distance_to_second_zoo\n\n    result = total_distance\n\n    return result",
    "result": 28
  },
  {
    "index": 29,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Sarah weighs 80% of John's weight. If John weighs 180 lbs and Mary weighs 30 lbs less than Sarah,\n    what is their combined weight?\n    \"\"\"\n    # Assign known values\n    john_weight = 180  # John weighs 180 lbs\n    sarah_weight = 0.8 * john_weight  # Sarah weighs 80% of John's weight\n    mary_weight = sarah_weight - 30  # Mary weighs 30 lbs less than Sarah\n\n    # Calculate total combined weight\n    total_weight = john_weight + sarah_weight + mary_weight\n\n    return total_weight",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sarah weighs 80% of John's weight. If John weighs 180 lbs and Mary weighs 30 lbs less than Sarah,\n    what is their combined weight?\n    \"\"\"\n    # Assign known values\n    john_weight = 180  # John weighs 180 lbs\n    sarah_weight = 0.8 * john_weight  # Sarah weighs 80% of John's weight\n    mary_weight = sarah_weight - 30  # Mary weighs 30 lbs less than Sarah\n\n    # Calculate total combined weight\n    total_weight = john_weight + sarah_weight + mary_weight\n\n    return total_weight",
    "result": 438.0
  },
  {
    "index": 30,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nIf Edgar can type 48 words in 3 minutes, how many words can he type in 90 minutes?\n\"\"\"\nwordsInThreeMinutes = 48\nminutes = 3\n\nwordsPerMinute = wordsInThreeMinutes / minutes\ntotalMinutes = 90\ntotalWordsTyped = wordsPerMinute * totalMinutes\n\nresult = totalWordsTyped\n\nreturn int(result)",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    If Edgar can type 48 words in 3 minutes, how many words can he type in 90 minutes?\n    \"\"\"\n    wordsInThreeMinutes = 48\n    minutes = 3\n\n    wordsPerMinute = wordsInThreeMinutes / minutes\n    totalMinutes = 90\n    totalWordsTyped = wordsPerMinute * totalMinutes\n\n    result = totalWordsTyped\n\n    return int(result)",
    "result": 1440
  },
  {
    "index": 31,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Mark is considering whether to drive his old car or his new sports car for a long road trip. The sports car can go twice as fast as his old car, but the new car still needs to be broken in, and every 40 miles it will consume 1 gallon of gas, which will shave off 2 miles per hour from his speed until he refills. If Mark can drive at 60 miles per hour with his old car, what is the maximum speed he can go with his new sports car, assuming he will drive for 500 miles?\n    \"\"\"\n    # Old car speed\n    speed_old_car = 60  # miles per hour\n\n    # New sports car initial speed (twice the old car)\n    initial_speed_sports_car = 2 * speed_old_car  # 120 miles per hour\n\n    # Gas consumption parameters\n    miles_per_gallon = 40  # miles per gallon\n    speed_reduction_per_gallon = 2  # miles per hour\n\n    # Total distance to be traveled\n    total_miles = 500  # miles\n\n    # Total gallons needed for the entire trip\n    total_gallons_needed = total_miles / miles_per_gallon  # gallons\n\n    # Number of times the gas tank is refilled (each refill occurs after 40 miles)\n    refills = total_miles / 40\n\n    # The speed decreases by 2 mph each time after consuming 1 gallon (per 40 miles)\n    total_speed_reduction = refills * speed_reduction_per_gallon\n\n    # Final maximum speed after accounting for consumption-induced reduction\n    max_speed_sports_car = initial_speed_sports_car - total_speed_reduction\n\n    return max_speed_sports_car",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mark is considering whether to drive his old car or his new sports car for a long road trip. The sports car can go twice as fast as his old car, but the new car still needs to be broken in, and every 40 miles it will consume 1 gallon of gas, which will shave off 2 miles per hour from his speed until he refills. If Mark can drive at 60 miles per hour with his old car, what is the maximum speed he can go with his new sports car, assuming he will drive for 500 miles?\n    \"\"\"\n    # Old car speed\n    speed_old_car = 60  # miles per hour\n\n    # New sports car initial speed (twice the old car)\n    initial_speed_sports_car = 2 * speed_old_car  # 120 miles per hour\n\n    # Gas consumption parameters\n    miles_per_gallon = 40  # miles per gallon\n    speed_reduction_per_gallon = 2  # miles per hour\n\n    # Total distance to be traveled\n    total_miles = 500  # miles\n\n    # Total gallons needed for the entire trip\n    total_gallons_needed = total_miles / miles_per_gallon  # gallons\n\n    # Number of times the gas tank is refilled (each refill occurs after 40 miles)\n    refills = total_miles / 40\n\n    # The speed decreases by 2 mph each time after consuming 1 gallon (per 40 miles)\n    total_speed_reduction = refills * speed_reduction_per_gallon\n\n    # Final maximum speed after accounting for consumption-induced reduction\n    max_speed_sports_car = initial_speed_sports_car - total_speed_reduction\n\n    return max_speed_sports_car",
    "result": 95.0
  },
  {
    "index": 32,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nAt a library, there were three bookshelves labeled A, B, and C. At 7:00 pm, shelf B had five times as many books as shelf C, which had 30 more books than shelf A. If shelf A had 50 books, how many books were there in all the shelves?\n\"\"\"\nshelf_A_books = 50\nshelf_C_books = shelf_A_books + 30\nshelf_B_books = 5 * shelf_C_books\ntotal_books = shelf_A_books + shelf_B_books + shelf_C_books\nresult = total_books\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    At a library, there were three bookshelves labeled A, B, and C. At 7:00 pm, shelf B had five times as many books as shelf C, which had 30 more books than shelf A. If shelf A had 50 books, how many books were there in all the shelves?\n    \"\"\"\n    shelf_A_books = 50\n    shelf_C_books = shelf_A_books + 30\n    shelf_B_books = 5 * shelf_C_books\n    total_books = shelf_A_books + shelf_B_books + shelf_C_books\n    result = total_books\n\n    return result",
    "result": 530
  },
  {
    "index": 33,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    A swimming pool has a width of 10 meters, a length of 20 meters and a depth of 2 meters. \n    How many liters of water will the pool hold when completely filled?\n    \"\"\"\n    width_meters = 10\n    length_meters = 20\n    depth_meters = 2\n    \n    # Calculate volume in cubic meters\n    volume_cubic_meters = width_meters * length_meters * depth_meters\n    \n    # Convert cubic meters to liters (1 cubic meter = 1000 liters)\n    liters = volume_cubic_meters * 1000\n    \n    result = liters\n    \n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A swimming pool has a width of 10 meters, a length of 20 meters and a depth of 2 meters. \n    How many liters of water will the pool hold when completely filled?\n    \"\"\"\n    width_meters = 10\n    length_meters = 20\n    depth_meters = 2\n    \n    # Calculate volume in cubic meters\n    volume_cubic_meters = width_meters * length_meters * depth_meters\n    \n    # Convert cubic meters to liters (1 cubic meter = 1000 liters)\n    liters = volume_cubic_meters * 1000\n    \n    result = liters\n    \n    return result",
    "result": 400000
  },
  {
    "index": 34,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nLisa is baking cookies for a fundraiser. She uses 3/4 cup of flour for each batch of 12 cookies. She sells each cookie for $0.5 and spends $10 on ingredients. She wants to donate half of her profits to a local shelter. How many batches of cookies does she need to bake?\n\"\"\"\n# Constants\ncookies_per_batch = 12\nflour_per_batch = 3/4  # cups\nprice_per_cookie = 0.5  # dollars\ningredients_cost = 10  # dollars\ndonate_fraction = 0.5\n\n# Find total revenue per batch\nrevenue_per_cookie = price_per_cookie\nrevenue_per_batch = cookies_per_batch * revenue_per_cookie\n\n# Costs per batch\ncost_per_batch = ingredients_cost  # total ingredients cost per batch (assuming it's for all batches; if it's total, need clarification)\n# But as per the problem, she spends $10 on ingredients total, need to see how it's computed:\n# Since she uses 3/4 cup per batch, and total ingredients cost is $10 (probably for all batches), \n# we need to determine how many batches she can make with that initial investment.\n\n# First, find profit per batch\n# However, the $10 is total ingredients cost, which likely applies to all batches she decides to make\n# So, total profit depends on total number of cookies sold minus total ingredients cost\n\n# Approach:\n# Let's denote variable B as the number of batches she needs to bake\n\n# Total cookies sold = 12 * B\n# Total revenue = total cookies * price\n# Total ingredients cost = $10 (fixed)\n\n# For profit:\n# Profit = total revenue - ingredients cost\n\n# She wants to donate half of her profits\n# Hence, total profit after donation = profit * (1 - 0.5) = 0.5 * profit\n\n# She wants to find the minimum number of batches so that after donating half, she still makes enough to cover expenses?\n\n# But the question is straightforward: How many batches does she need to bake to ensure she can donate half of profit (which depends on profit)?\n\n# Let's find the total profit as a function of number of batches\n# total_revenue = (12 * B) * 0.5 = 6 * B\n# profit = total_revenue - ingredients_cost = 6 * B - 10\n\n# She wants to donate half of her profit, so she must have at least some positive profit\n# Also, the profit must be non-negative: 6 * B - 10 >= 0\n# B >= 10/6 ≈ 1.666..., so she needs at least 2 batches for profit to be positive.\n\n# But to find the number of batches needed to donate a certain amount, or for total profit to be positive, let's pick the minimal B where profit > 0\n\n# Since she wants to donate half of her profits, she will do so only if profits are positive\n# Therefore, minimal B is 2\n\n# But the problem asks: \"How many batches of cookies does she need to bake?\" — Presumably, the minimal whole number B satisfying the profit condition.\n\n# Final calculation:\nbatches_needed = 0\n# Starting from 1, check for profit > 0\nfor B in range(1, 100):  # arbitrary upper limit\n    profit = 6 * B - 10\n    if profit > 0:\n        batches_needed = B\n        break\n\nresult = batches_needed\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Lisa is baking cookies for a fundraiser. She uses 3/4 cup of flour for each batch of 12 cookies. She sells each cookie for $0.5 and spends $10 on ingredients. She wants to donate half of her profits to a local shelter. How many batches of cookies does she need to bake?\n    \"\"\"\n    # Constants\n    cookies_per_batch = 12\n    flour_per_batch = 3/4  # cups\n    price_per_cookie = 0.5  # dollars\n    ingredients_cost = 10  # dollars\n    donate_fraction = 0.5\n\n    # Find total revenue per batch\n    revenue_per_cookie = price_per_cookie\n    revenue_per_batch = cookies_per_batch * revenue_per_cookie\n\n    # Costs per batch\n    cost_per_batch = ingredients_cost  # total ingredients cost per batch (assuming it's for all batches; if it's total, need clarification)\n    # But as per the problem, she spends $10 on ingredients total, need to see how it's computed:\n    # Since she uses 3/4 cup per batch, and total ingredients cost is $10 (probably for all batches), \n    # we need to determine how many batches she can make with that initial investment.\n\n    # First, find profit per batch\n    # However, the $10 is total ingredients cost, which likely applies to all batches she decides to make\n    # So, total profit depends on total number of cookies sold minus total ingredients cost\n\n    # Approach:\n    # Let's denote variable B as the number of batches she needs to bake\n\n    # Total cookies sold = 12 * B\n    # Total revenue = total cookies * price\n    # Total ingredients cost = $10 (fixed)\n\n    # For profit:\n    # Profit = total revenue - ingredients cost\n\n    # She wants to donate half of her profits\n    # Hence, total profit after donation = profit * (1 - 0.5) = 0.5 * profit\n\n    # She wants to find the minimum number of batches so that after donating half, she still makes enough to cover expenses?\n\n    # But the question is straightforward: How many batches does she need to bake to ensure she can donate half of profit (which depends on profit)?\n\n    # Let's find the total profit as a function of number of batches\n    # total_revenue = (12 * B) * 0.5 = 6 * B\n    # profit = total_revenue - ingredients_cost = 6 * B - 10\n\n    # She wants to donate half of her profit, so she must have at least some positive profit\n    # Also, the profit must be non-negative: 6 * B - 10 >= 0\n    # B >= 10/6 ≈ 1.666..., so she needs at least 2 batches for profit to be positive.\n\n    # But to find the number of batches needed to donate a certain amount, or for total profit to be positive, let's pick the minimal B where profit > 0\n\n    # Since she wants to donate half of her profits, she will do so only if profits are positive\n    # Therefore, minimal B is 2\n\n    # But the problem asks: \"How many batches of cookies does she need to bake?\" — Presumably, the minimal whole number B satisfying the profit condition.\n\n    # Final calculation:\n    batches_needed = 0\n    # Starting from 1, check for profit > 0\n    for B in range(1, 100):  # arbitrary upper limit\n    profit = 6 * B - 10\n    if profit > 0:\n        batches_needed = B\n        break\n\nresult = batches_needed\n\nreturn result",
    "result": "Error:   File \"/tmp/tmpachq5c88.py\", line 62\n    profit = 6 * B - 10\n    ^\nIndentationError: expected an indented block after 'for' statement on line 61\n"
  },
  {
    "index": 35,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nJake and his friends are playing a card game that allows each player to take turns being the dealer. The game is made up of three pairs and four individual players in addition to Jake. How many times will Jake get to be the dealer in a game of 56 rounds?\n\"\"\"\n# Number of players other than Jake\npairs = 3\nindividuals = 4\ntotal_players_excluding_jake = (pairs * 2) + individuals\n\n# Total players including Jake\ntotal_players = total_players_excluding_jake + 1\n\n# Since each player gets an equal number of turns as dealer\n# in a complete round robin, each player is dealer for:\ntimes_dealer_each = 56 / total_players\n\nresult = int(times_dealer_each)\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Jake and his friends are playing a card game that allows each player to take turns being the dealer. The game is made up of three pairs and four individual players in addition to Jake. How many times will Jake get to be the dealer in a game of 56 rounds?\n    \"\"\"\n    # Number of players other than Jake\n    pairs = 3\n    individuals = 4\n    total_players_excluding_jake = (pairs * 2) + individuals\n\n    # Total players including Jake\n    total_players = total_players_excluding_jake + 1\n\n    # Since each player gets an equal number of turns as dealer\n    # in a complete round robin, each player is dealer for:\n    times_dealer_each = 56 / total_players\n\n    result = int(times_dealer_each)\n\n    return result",
    "result": 5
  },
  {
    "index": 36,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Sarah has a cubical container with a height of 1.5 meters filled with a gas that has a density of 1.2 kg per cubic meter. What is the mass of the gas in the container?\n    \"\"\"\n    # Dimensions of the cube\n    height = 1.5  # meters\n    # Since the container is cubical, all sides are equal\n    side_length = height\n    \n    # Volume of the cube\n    volume = side_length ** 3  # cubic meters\n    \n    # Density of the gas\n    density = 1.2  # kg per cubic meter\n    \n    # Mass of the gas in the container\n    mass = volume * density\n    \n    result = mass\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sarah has a cubical container with a height of 1.5 meters filled with a gas that has a density of 1.2 kg per cubic meter. What is the mass of the gas in the container?\n    \"\"\"\n    # Dimensions of the cube\n    height = 1.5  # meters\n    # Since the container is cubical, all sides are equal\n    side_length = height\n    \n    # Volume of the cube\n    volume = side_length ** 3  # cubic meters\n    \n    # Density of the gas\n    density = 1.2  # kg per cubic meter\n    \n    # Mass of the gas in the container\n    mass = volume * density\n    \n    result = mass\n    return result",
    "result": 4.05
  },
  {
    "index": 37,
    "response": "def simple_math_problem() -> int:\n    \"\"\"\n    When Harry turned 40 years old, his son was 15 years old. If his son's age is twice his daughter's age, and his daughter is currently 20 years old, how old is Harry currently?\n    \"\"\"\n    # Harry's age when his son was 15\n    Harry_age_at_that_time = 40\n    # Age of his son at that time\n    son_age_then = 15\n    \n    # The difference in age between Harry and his son\n    age_difference_Harry_son = Harry_age_at_that_time - son_age_then\n    \n    # Current age of his daughter\n    daughter_current_age = 20\n    \n    # Since son's age = 2 * daughter's age\n    # Calculate son's current age\n    son_current_age = 2 * daughter_current_age  # current son's age\n    \n    # Calculate Harry's current age\n    Harry_current_age = son_current_age + age_difference_Harry_son\n    \n    result = Harry_current_age\n\n    return result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    When Harry turned 40 years old, his son was 15 years old. If his son's age is twice his daughter's age, and his daughter is currently 20 years old, how old is Harry currently?\n    \"\"\"\n    # Harry's age when his son was 15\n    Harry_age_at_that_time = 40\n    # Age of his son at that time\n    son_age_then = 15\n    \n    # The difference in age between Harry and his son\n    age_difference_Harry_son = Harry_age_at_that_time - son_age_then\n    \n    # Current age of his daughter\n    daughter_current_age = 20\n    \n    # Since son's age = 2 * daughter's age\n    # Calculate son's current age\n    son_current_age = 2 * daughter_current_age  # current son's age\n    \n    # Calculate Harry's current age\n    Harry_current_age = son_current_age + age_difference_Harry_son\n    \n    result = Harry_current_age\n\n    return result",
    "result": 65
  },
  {
    "index": 38,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nA snake has zero legs. If a group of snakes has 20 more snakes than three times as many tails as a single snake has, what is the total number of tails in this group of snakes?\n\"\"\"\n# Number of legs per snake\nlegs_per_snake = 0\n\n# Number of tails per snake (assuming each snake has exactly 1 tail)\ntails_per_snake = 1\n\n# Number of snakes in the group\n# The group of snakes has 20 more snakes than three times as many tails as a single snake has\n# For a single snake, tails = 1\n# Three times as many tails = 3 * 1 = 3\n# Number of snakes in group = 20 + 3\n\nnum_snakes = 20 + (3 * tails_per_snake)  # 20 + 3\n\n# Total number of tails in the group\ntotal_tails = num_snakes * tails_per_snake  # Each snake has 1 tail\n\nresult = total_tails\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A snake has zero legs. If a group of snakes has 20 more snakes than three times as many tails as a single snake has, what is the total number of tails in this group of snakes?\n    \"\"\"\n    # Number of legs per snake\n    legs_per_snake = 0\n\n    # Number of tails per snake (assuming each snake has exactly 1 tail)\n    tails_per_snake = 1\n\n    # Number of snakes in the group\n    # The group of snakes has 20 more snakes than three times as many tails as a single snake has\n    # For a single snake, tails = 1\n    # Three times as many tails = 3 * 1 = 3\n    # Number of snakes in group = 20 + 3\n\n    num_snakes = 20 + (3 * tails_per_snake)  # 20 + 3\n\n    # Total number of tails in the group\n    total_tails = num_snakes * tails_per_snake  # Each snake has 1 tail\n\n    result = total_tails\n\n    return result",
    "result": 23
  },
  {
    "index": 39,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nStudent: George has three times as many books as Sam. George has 21 books, calculate the total number of books they have.\n\"\"\"\n# George's number of books\ngeorge_books = 21\n\n# George has three times as many books as Sam\nsam_books = george_books / 3\n\n# Total number of books they have\ntotal_books = george_books + sam_books\n\nresult = total_books\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Student: George has three times as many books as Sam. George has 21 books, calculate the total number of books they have.\n    \"\"\"\n    # George's number of books\n    george_books = 21\n\n    # George has three times as many books as Sam\n    sam_books = george_books / 3\n\n    # Total number of books they have\n    total_books = george_books + sam_books\n\n    result = total_books\n\n    return result",
    "result": 28.0
  },
  {
    "index": 40,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nAt the beginning of the week, Joe had 17 baseballs. On Saturday he bought 5 more baseballs. On Sunday, he gave away 6 of the baseballs. How many baseballs does Joe have now?\n\"\"\"\ninitial_baseballs = 17\nbought_baseballs = 5\ngiven_away_baseballs = 6\n\ntotal_after_purchase = initial_baseballs + bought_baseballs\nfinal_total = total_after_purchase - given_away_baseballs\n\nresult = final_total\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    At the beginning of the week, Joe had 17 baseballs. On Saturday he bought 5 more baseballs. On Sunday, he gave away 6 of the baseballs. How many baseballs does Joe have now?\n    \"\"\"\n    initial_baseballs = 17\n    bought_baseballs = 5\n    given_away_baseballs = 6\n\n    total_after_purchase = initial_baseballs + bought_baseballs\n    final_total = total_after_purchase - given_away_baseballs\n\n    result = final_total\n\n    return result",
    "result": 16
  },
  {
    "index": 41,
    "response": "def simple_math_problem() -> int:\n    \"\"\"\n    A class has 25 boys and 30 girls. If the ratio of boys to girls is 5:6, how many boys would be there in the class if the number of girls is doubled?\n    \"\"\"\n    # Initial counts\n    boys_initial = 25\n    girls_initial = 30\n\n    # The current ratio (though given as 5:6, but actual counts are 25 and 30)\n    ratio_boys_to_girls = 5 / 6\n\n    # Since the ratio is 5:6, verify the actual counts match or adjust accordingly (here, they do)\n    # Next, double the number of girls\n    girls_doubled = girls_initial * 2\n\n    # Find new number of boys keeping the ratio the same\n    boys_new = ratio_boys_to_girls * girls_doubled\n\n    # Since counts are integer numbers of people, round or convert to int\n    result = int(boys_new)\n\n    return result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A class has 25 boys and 30 girls. If the ratio of boys to girls is 5:6, how many boys would be there in the class if the number of girls is doubled?\n    \"\"\"\n    # Initial counts\n    boys_initial = 25\n    girls_initial = 30\n\n    # The current ratio (though given as 5:6, but actual counts are 25 and 30)\n    ratio_boys_to_girls = 5 / 6\n\n    # Since the ratio is 5:6, verify the actual counts match or adjust accordingly (here, they do)\n    # Next, double the number of girls\n    girls_doubled = girls_initial * 2\n\n    # Find new number of boys keeping the ratio the same\n    boys_new = ratio_boys_to_girls * girls_doubled\n\n    # Since counts are integer numbers of people, round or convert to int\n    result = int(boys_new)\n\n    return result",
    "result": 50
  },
  {
    "index": 42,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nCarmen is painting a wall that is 7 feet tall and 9 feet long. If she needs 4 gallons of paint for the wall, how much paint is needed per square foot?\n\"\"\"\nheight = 7  # height of the wall in feet\nlength = 9  # length of the wall in feet\ntotal_gallons = 4  # total gallons of paint needed\n\narea = height * length  # compute the area of the wall in square feet\npaint_per_square_foot = total_gallons / area  # calculate the paint needed per square foot\n\nresult = paint_per_square_foot\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Carmen is painting a wall that is 7 feet tall and 9 feet long. If she needs 4 gallons of paint for the wall, how much paint is needed per square foot?\n    \"\"\"\n    height = 7  # height of the wall in feet\n    length = 9  # length of the wall in feet\n    total_gallons = 4  # total gallons of paint needed\n\n    area = height * length  # compute the area of the wall in square feet\n    paint_per_square_foot = total_gallons / area  # calculate the paint needed per square foot\n\n    result = paint_per_square_foot\n\n    return result",
    "result": 0.06349206349206349
  },
  {
    "index": 43,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nThe price of pizza at one restaurant is three times the price of pizza at another restaurant. If a pizza at the second restaurant costs $10, how much does a pizza cost at the first restaurant?\n\"\"\"\n# Price at the second restaurant\nprice_second_restaurant = 10\n\n# The first restaurant's pizza costs three times as much\nprice_first_restaurant = 3 * price_second_restaurant\n\nresult = price_first_restaurant\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The price of pizza at one restaurant is three times the price of pizza at another restaurant. If a pizza at the second restaurant costs $10, how much does a pizza cost at the first restaurant?\n    \"\"\"\n    # Price at the second restaurant\n    price_second_restaurant = 10\n\n    # The first restaurant's pizza costs three times as much\n    price_first_restaurant = 3 * price_second_restaurant\n\n    result = price_first_restaurant\n\n    return result",
    "result": 30
  },
  {
    "index": 44,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nA cake is cut into three equal slices and each slice is cut into 4 smaller pieces. How many pieces are there in total?\n\"\"\"\n# Total number of slices the cake is initially cut into\ninitial_slices = 3\n\n# Each slice is cut into 4 smaller pieces\npieces_per_slice = 4\n\n# Total number of pieces after both cuts\ntotal_pieces = initial_slices * pieces_per_slice\n\nresult = total_pieces\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A cake is cut into three equal slices and each slice is cut into 4 smaller pieces. How many pieces are there in total?\n    \"\"\"\n    # Total number of slices the cake is initially cut into\n    initial_slices = 3\n\n    # Each slice is cut into 4 smaller pieces\n    pieces_per_slice = 4\n\n    # Total number of pieces after both cuts\n    total_pieces = initial_slices * pieces_per_slice\n\n    result = total_pieces\n\n    return result",
    "result": 12
  },
  {
    "index": 45,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nIn a school, if each classroom has 4 teachers and 15 students, how many teachers and students are there in the entire school if there are 10 classrooms?\n\"\"\"\nteachersPerClassroom = 4\nstudentsPerClassroom = 15\nnumberOfClassrooms = 10\n\ntotalTeachers = teachersPerClassroom * numberOfClassrooms\ntotalStudents = studentsPerClassroom * numberOfClassrooms\n\nresult = totalTeachers + totalStudents\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    In a school, if each classroom has 4 teachers and 15 students, how many teachers and students are there in the entire school if there are 10 classrooms?\n    \"\"\"\n    teachersPerClassroom = 4\n    studentsPerClassroom = 15\n    numberOfClassrooms = 10\n\n    totalTeachers = teachersPerClassroom * numberOfClassrooms\n    totalStudents = studentsPerClassroom * numberOfClassrooms\n\n    result = totalTeachers + totalStudents\n\n    return result",
    "result": 190
  },
  {
    "index": 46,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    A pizza restaurant has a special deal where they offer a 10% discount on pizzas that are ordered after 8 pm. A customer orders a large pizza that costs $15 at 9 pm. How much does the customer pay (before tax and delivery fees)?\n    \"\"\"\n    original_price = 15  # Original price of the large pizza in dollars\n    discount_rate = 0.10  # 10% discount\n    discounted_price = original_price * (1 - discount_rate)  # Applying the discount\n    result = discounted_price\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A pizza restaurant has a special deal where they offer a 10% discount on pizzas that are ordered after 8 pm. A customer orders a large pizza that costs $15 at 9 pm. How much does the customer pay (before tax and delivery fees)?\n    \"\"\"\n    original_price = 15  # Original price of the large pizza in dollars\n    discount_rate = 0.10  # 10% discount\n    discounted_price = original_price * (1 - discount_rate)  # Applying the discount\n    result = discounted_price\n\n    return result",
    "result": 13.5
  },
  {
    "index": 47,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nA restaurant had 100 pizzas. They sold one third of the pizzas in the morning and half of the remaining pizzas in the evening. How many pizzas were left after the dinner rush?\n\"\"\"\ntotal_pizzas = 100\nmorning_sales = total_pizzas / 3\nremaining_after_morning = total_pizzas - morning_sales\nevening_sales = remaining_after_morning / 2\nremaining_after_evening = remaining_after_morning - evening_sales\n\nresult = int(remaining_after_evening)\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A restaurant had 100 pizzas. They sold one third of the pizzas in the morning and half of the remaining pizzas in the evening. How many pizzas were left after the dinner rush?\n    \"\"\"\n    total_pizzas = 100\n    morning_sales = total_pizzas / 3\n    remaining_after_morning = total_pizzas - morning_sales\n    evening_sales = remaining_after_morning / 2\n    remaining_after_evening = remaining_after_morning - evening_sales\n\n    result = int(remaining_after_evening)\n\n    return result",
    "result": 33
  },
  {
    "index": 48,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Student: A train travels a distance of 300 miles in 5 hours. What is the average speed of the train in miles per hour?\n    \"\"\"\n    distance_miles = 300\n    time_hours = 5\n    # Calculate the average speed = total distance / total time\n    average_speed = distance_miles / time_hours\n    result = average_speed\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Student: A train travels a distance of 300 miles in 5 hours. What is the average speed of the train in miles per hour?\n    \"\"\"\n    distance_miles = 300\n    time_hours = 5\n    # Calculate the average speed = total distance / total time\n    average_speed = distance_miles / time_hours\n    result = average_speed\n    return result",
    "result": 60.0
  },
  {
    "index": 49,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nIn a group of 50 people, 30% are vegetarian and the rest eat meat. How many people in the group eat meat?\n\"\"\"\ntotal_people = 50\nvegetarian_percentage = 30\nvegetarian_people = (vegetarian_percentage / 100) * total_people\nmeat_eaters = total_people - vegetarian_people\nresult = int(meat_eaters)\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    In a group of 50 people, 30% are vegetarian and the rest eat meat. How many people in the group eat meat?\n    \"\"\"\n    total_people = 50\n    vegetarian_percentage = 30\n    vegetarian_people = (vegetarian_percentage / 100) * total_people\n    meat_eaters = total_people - vegetarian_people\n    result = int(meat_eaters)\n    return result",
    "result": 35
  },
  {
    "index": 50,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nMark needs to buy 6 items for $120. If each item is priced the same, how much does each item cost?\n\"\"\"\ntotal_cost = 120\nnumber_of_items = 6\nprice_per_item = total_cost / number_of_items\n\nresult = price_per_item\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mark needs to buy 6 items for $120. If each item is priced the same, how much does each item cost?\n    \"\"\"\n    total_cost = 120\n    number_of_items = 6\n    price_per_item = total_cost / number_of_items\n\n    result = price_per_item\n\n    return result",
    "result": 20.0
  },
  {
    "index": 51,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    A salesperson receives a base salary of $2000. In addition, the salesperson receives a 10% commission on all sales above $5000. If the salesperson sells $8000 worth of goods in a month, what is the total amount received as salary and commission that month (in dollars)?\n    \"\"\"\n    base_salary = 2000\n    total_sales = 8000\n    sales_threshold = 5000\n    commission_rate = 0.10\n\n    # Calculate sales above the threshold\n    sales_above_threshold = total_sales - sales_threshold\n\n    # Calculate commission on sales above threshold\n    commission = sales_above_threshold * commission_rate\n\n    # Calculate total earnings\n    total_earnings = base_salary + commission\n\n    result = total_earnings\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A salesperson receives a base salary of $2000. In addition, the salesperson receives a 10% commission on all sales above $5000. If the salesperson sells $8000 worth of goods in a month, what is the total amount received as salary and commission that month (in dollars)?\n    \"\"\"\n    base_salary = 2000\n    total_sales = 8000\n    sales_threshold = 5000\n    commission_rate = 0.10\n\n    # Calculate sales above the threshold\n    sales_above_threshold = total_sales - sales_threshold\n\n    # Calculate commission on sales above threshold\n    commission = sales_above_threshold * commission_rate\n\n    # Calculate total earnings\n    total_earnings = base_salary + commission\n\n    result = total_earnings\n\n    return result",
    "result": 2300.0
  },
  {
    "index": 52,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nA farmer has 120 chickens and 80 ducks in his farm. He sells 20% of his chickens and 30% of his ducks to a market. He then buys 15 more chickens and 10 more ducks from another farmer. How many chickens and ducks does he have now?\n\"\"\"\n\n# Initial counts\ninitial_chickens = 120\ninitial_ducks = 80\n\n# Calculate chickens sold (20%)\nchickens_sold = 0.20 * initial_chickens\n# Remaining chickens after sale\nremaining_chickens = initial_chickens - chickens_sold\n\n# Calculate ducks sold (30%)\nducks_sold = 0.30 * initial_ducks\n# Remaining ducks after sale\nremaining_ducks = initial_ducks - ducks_sold\n\n# Buy new chickens and ducks\nnew_chickens_bought = 15\nnew_ducks_bought = 10\n\n# Final counts\nfinal_chickens = remaining_chickens + new_chickens_bought\nfinal_ducks = remaining_ducks + new_ducks_bought\n\n# Since the count should be in integers, convert to int\nresult = (int(final_chickens), int(final_ducks))\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A farmer has 120 chickens and 80 ducks in his farm. He sells 20% of his chickens and 30% of his ducks to a market. He then buys 15 more chickens and 10 more ducks from another farmer. How many chickens and ducks does he have now?\n    \"\"\"\n\n    # Initial counts\n    initial_chickens = 120\n    initial_ducks = 80\n\n    # Calculate chickens sold (20%)\n    chickens_sold = 0.20 * initial_chickens\n    # Remaining chickens after sale\n    remaining_chickens = initial_chickens - chickens_sold\n\n    # Calculate ducks sold (30%)\n    ducks_sold = 0.30 * initial_ducks\n    # Remaining ducks after sale\n    remaining_ducks = initial_ducks - ducks_sold\n\n    # Buy new chickens and ducks\n    new_chickens_bought = 15\n    new_ducks_bought = 10\n\n    # Final counts\n    final_chickens = remaining_chickens + new_chickens_bought\n    final_ducks = remaining_ducks + new_ducks_bought\n\n    # Since the count should be in integers, convert to int\n    result = (int(final_chickens), int(final_ducks))\n\n    return result",
    "result": [
      111,
      66
    ]
  },
  {
    "index": 53,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    A baker has 24 pies and sells them at a farmers market. He sells 40% of the pies in the morning, \n    and then reduces the price by 25% for the remaining pies in the afternoon. \n    He sells 75% of the discounted pies by the end of the day. How much money, in dollars, does he make in total if each pie initially costs 12 dollars?\n    \"\"\"\n    initial_pies = 24\n    initial_price = 12\n\n    # Calculate the number of pies sold in the morning\n    pies_sold_morning = 0.40 * initial_pies\n\n    # Remaining pies after morning sales\n    remaining_pies = initial_pies - pies_sold_morning\n\n    # Discounted price after reduction by 25%\n    discounted_price = initial_price * (1 - 0.25)\n\n    # Pies sold in the afternoon (75% of remaining pies)\n    pies_sold_afternoon = 0.75 * remaining_pies\n\n    # Money earned in the morning\n    morning_revenue = pies_sold_morning * initial_price\n\n    # Money earned in the afternoon\n    afternoon_revenue = pies_sold_afternoon * discounted_price\n\n    # Total revenue\n    total_revenue = morning_revenue + afternoon_revenue\n\n    return total_revenue",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A baker has 24 pies and sells them at a farmers market. He sells 40% of the pies in the morning, \n    and then reduces the price by 25% for the remaining pies in the afternoon. \n    He sells 75% of the discounted pies by the end of the day. How much money, in dollars, does he make in total if each pie initially costs 12 dollars?\n    \"\"\"\n    initial_pies = 24\n    initial_price = 12\n\n    # Calculate the number of pies sold in the morning\n    pies_sold_morning = 0.40 * initial_pies\n\n    # Remaining pies after morning sales\n    remaining_pies = initial_pies - pies_sold_morning\n\n    # Discounted price after reduction by 25%\n    discounted_price = initial_price * (1 - 0.25)\n\n    # Pies sold in the afternoon (75% of remaining pies)\n    pies_sold_afternoon = 0.75 * remaining_pies\n\n    # Money earned in the morning\n    morning_revenue = pies_sold_morning * initial_price\n\n    # Money earned in the afternoon\n    afternoon_revenue = pies_sold_afternoon * discounted_price\n\n    # Total revenue\n    total_revenue = morning_revenue + afternoon_revenue\n\n    return total_revenue",
    "result": 212.4
  },
  {
    "index": 54,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nPeter spent $64 at the bakery. He bought a cake for $40 and 4 identical pastries. How much did one pastry cost?\n\"\"\"\n# Total amount Peter spent\ntotal_spent = 64\n# Cost of the cake\ncake_cost = 40\n# Total spent on pastries\npastries_total_cost = total_spent - cake_cost\n# Number of pastries\nnumber_of_pastries = 4\n# Cost of one pastry\ncost_per_pastry = pastries_total_cost / number_of_pastries\n\nresult = cost_per_pastry\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Peter spent $64 at the bakery. He bought a cake for $40 and 4 identical pastries. How much did one pastry cost?\n    \"\"\"\n    # Total amount Peter spent\n    total_spent = 64\n    # Cost of the cake\n    cake_cost = 40\n    # Total spent on pastries\n    pastries_total_cost = total_spent - cake_cost\n    # Number of pastries\n    number_of_pastries = 4\n    # Cost of one pastry\n    cost_per_pastry = pastries_total_cost / number_of_pastries\n\n    result = cost_per_pastry\n\n    return result",
    "result": 6.0
  },
  {
    "index": 55,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nLeo has a rectangular garden that is 15 feet long and 10 feet wide. He wants to plant a row of sunflowers along the perimeter of the garden, leaving 1 foot of space between each sunflower. How many sunflowers does he need to buy?\n\"\"\"\nlength = 15  # length of the garden in feet\nwidth = 10   # width of the garden in feet\n\n# Calculate the perimeter of the garden\nperimeter = 2 * (length + width)\n\n# Each sunflower is spaced 1 foot apart along the perimeter\n# Number of sunflowers is equal to the number of spaces, which is the perimeter\n# Since the sunflower is planted along the perimeter, and spacing is 1 foot between each,\n# the total number of sunflowers = perimeter divided by 1 (spacing) plus possibly one at the start,\n# but since they are along the entire perimeter with 1-foot space between each, total = perimeter // 1\n\n# Because the spacing is 1 foot *between* each sunflower, the number of sunflowers is equal to the total number of such 1-foot segments.\n# Large clarification: For spacing of 1 foot *between* each sunflower:\n# Number of sunflowers = perimeter / (1 + 0) because each sunflower is separated by 1 foot, but the number of sunflowers\n# is such that total spacing between them is perimeter minus the last segment, but typically, for uniform spacing:\n# Number of sunflowers = perimeter / 1.\n\n# As per the problem, they leave 1 foot of space between each sunflower, so total number is:\nsunflowers = int(perimeter // 1)\n\nresult = sunflowers\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Leo has a rectangular garden that is 15 feet long and 10 feet wide. He wants to plant a row of sunflowers along the perimeter of the garden, leaving 1 foot of space between each sunflower. How many sunflowers does he need to buy?\n    \"\"\"\n    length = 15  # length of the garden in feet\n    width = 10   # width of the garden in feet\n\n    # Calculate the perimeter of the garden\n    perimeter = 2 * (length + width)\n\n    # Each sunflower is spaced 1 foot apart along the perimeter\n    # Number of sunflowers is equal to the number of spaces, which is the perimeter\n    # Since the sunflower is planted along the perimeter, and spacing is 1 foot between each,\n    # the total number of sunflowers = perimeter divided by 1 (spacing) plus possibly one at the start,\n    # but since they are along the entire perimeter with 1-foot space between each, total = perimeter // 1\n\n    # Because the spacing is 1 foot *between* each sunflower, the number of sunflowers is equal to the total number of such 1-foot segments.\n    # Large clarification: For spacing of 1 foot *between* each sunflower:\n    # Number of sunflowers = perimeter / (1 + 0) because each sunflower is separated by 1 foot, but the number of sunflowers\n    # is such that total spacing between them is perimeter minus the last segment, but typically, for uniform spacing:\n    # Number of sunflowers = perimeter / 1.\n\n    # As per the problem, they leave 1 foot of space between each sunflower, so total number is:\n    sunflowers = int(perimeter // 1)\n\n    result = sunflowers\n\n    return result",
    "result": 50
  },
  {
    "index": 56,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nDaphne and Alice were both selling apples. Daphne sold 6 apples for $2 each while Alice sold 4 apples for $2.50 each. How much more money (in dollars) did Daphne earn than Alice?\n\"\"\"\n# Daphne's earnings\ndaphne_apples_sold = 6\ndaphne_price_per_apple = 2\ndaphne_earnings = daphne_apples_sold * daphne_price_per_apple\n\n# Alice's earnings\nalice_apples_sold = 4\nalice_price_per_apple = 2.50\nalice_earnings = alice_apples_sold * alice_price_per_apple\n\n# Calculate how much more Daphne earned than Alice\nresult = daphne_earnings - alice_earnings\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Daphne and Alice were both selling apples. Daphne sold 6 apples for $2 each while Alice sold 4 apples for $2.50 each. How much more money (in dollars) did Daphne earn than Alice?\n    \"\"\"\n    # Daphne's earnings\n    daphne_apples_sold = 6\n    daphne_price_per_apple = 2\n    daphne_earnings = daphne_apples_sold * daphne_price_per_apple\n\n    # Alice's earnings\n    alice_apples_sold = 4\n    alice_price_per_apple = 2.50\n    alice_earnings = alice_apples_sold * alice_price_per_apple\n\n    # Calculate how much more Daphne earned than Alice\n    result = daphne_earnings - alice_earnings\n\n    return result",
    "result": 2.0
  },
  {
    "index": 57,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nA supermarket is having a clearance sale on its fruits and vegetables, offering 30% off on all produce. Mark found a crate of oranges that was originally priced at $30. He also has a coupon of $5 off on any produce purchase. What is the total amount Mark will pay after applying both discounts?\n\"\"\"\noriginal_price = 30.0\ndiscount_percentage = 30  # 30% off\ncoupon_discount = 5.0\n\n# Calculate the price after percentage discount\ndiscount_amount = (discount_percentage / 100) * original_price\nprice_after_discount = original_price - discount_amount\n\n# Apply the $5 coupon discount\ntotal_price = price_after_discount - coupon_discount\n\nresult = total_price\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A supermarket is having a clearance sale on its fruits and vegetables, offering 30% off on all produce. Mark found a crate of oranges that was originally priced at $30. He also has a coupon of $5 off on any produce purchase. What is the total amount Mark will pay after applying both discounts?\n    \"\"\"\n    original_price = 30.0\n    discount_percentage = 30  # 30% off\n    coupon_discount = 5.0\n\n    # Calculate the price after percentage discount\n    discount_amount = (discount_percentage / 100) * original_price\n    price_after_discount = original_price - discount_amount\n\n    # Apply the $5 coupon discount\n    total_price = price_after_discount - coupon_discount\n\n    result = total_price\n\n    return result",
    "result": 16.0
  },
  {
    "index": 58,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nFive coworkers decided to split the cost of a gift card equally. If the total cost of the gift card was $100 and they used a 10% coupon, how much should each coworker contribute?\n\"\"\"\ntotal_cost = 100             # Original total cost of the gift card\ncoupon_discount = 0.10       # 10% coupon\ndiscount_amount = total_cost * coupon_discount  # Amount saved due to coupon\ndiscounted_total = total_cost - discount_amount # Total cost after applying coupon\nnumber_of_coworkers = 5\n\ncontribution_per_coworker = discounted_total / number_of_coworkers\nresult = contribution_per_coworker\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Five coworkers decided to split the cost of a gift card equally. If the total cost of the gift card was $100 and they used a 10% coupon, how much should each coworker contribute?\n    \"\"\"\n    total_cost = 100             # Original total cost of the gift card\n    coupon_discount = 0.10       # 10% coupon\n    discount_amount = total_cost * coupon_discount  # Amount saved due to coupon\n    discounted_total = total_cost - discount_amount # Total cost after applying coupon\n    number_of_coworkers = 5\n\n    contribution_per_coworker = discounted_total / number_of_coworkers\n    result = contribution_per_coworker\n\n    return result",
    "result": 18.0
  },
  {
    "index": 59,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nThere are 100 people in a room. If each person shakes hands with every other person in the room, how many handshakes occur in total?\n\"\"\"\ntotal_people = 100\n# Each handshake occurs between two people, and we want to count each handshake only once.\n# The total number of handshakes is the number of combinations of 100 people taken 2 at a time.\nhandshakes = total_people * (total_people - 1) // 2\nresult = handshakes\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    There are 100 people in a room. If each person shakes hands with every other person in the room, how many handshakes occur in total?\n    \"\"\"\n    total_people = 100\n    # Each handshake occurs between two people, and we want to count each handshake only once.\n    # The total number of handshakes is the number of combinations of 100 people taken 2 at a time.\n    handshakes = total_people * (total_people - 1) // 2\n    result = handshakes\n\n    return result",
    "result": 4950
  },
  {
    "index": 60,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nA pizza has 8 slices. Rachel ate 1/4 of the pizza and then shared 2 slices with her friend. They now have 3 slices left. How many slices did the pizza have originally?\n\"\"\"\n# Total slices of pizza\ntotal_slices = 8\n\n# Rachel ate 1/4 of the pizza\nslices_eaten_by_rachel = (1/4) * total_slices\n\n# After Rachel ate, remaining slices\nremaining_after_eating = total_slices - slices_eaten_by_rachel\n\n# Rachel shared 2 slices with her friend\nslices_shared = 2\n\n# Slices left after sharing\nslices_left_after_sharing = remaining_after_eating - slices_shared\n\n# According to the problem, now they have 3 slices left\n# But, we need to verify the total slices initially to match this condition\n\n# Check if the total slices correspond with the given final remaining slices\n# total_slices - slices_eaten_by_rachel - slices_shared = 3\n# Let's assign total slices and verify\nresult = total_slices\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A pizza has 8 slices. Rachel ate 1/4 of the pizza and then shared 2 slices with her friend. They now have 3 slices left. How many slices did the pizza have originally?\n    \"\"\"\n    # Total slices of pizza\n    total_slices = 8\n\n    # Rachel ate 1/4 of the pizza\n    slices_eaten_by_rachel = (1/4) * total_slices\n\n    # After Rachel ate, remaining slices\n    remaining_after_eating = total_slices - slices_eaten_by_rachel\n\n    # Rachel shared 2 slices with her friend\n    slices_shared = 2\n\n    # Slices left after sharing\n    slices_left_after_sharing = remaining_after_eating - slices_shared\n\n    # According to the problem, now they have 3 slices left\n    # But, we need to verify the total slices initially to match this condition\n\n    # Check if the total slices correspond with the given final remaining slices\n    # total_slices - slices_eaten_by_rachel - slices_shared = 3\n    # Let's assign total slices and verify\n    result = total_slices\n\n    return result",
    "result": 8
  },
  {
    "index": 61,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    A pack of pencils contains 12 pencils. Each pencil costs 50 cents. A pack of erasers contains 8 erasers. Each eraser costs 25 cents. How much money is needed to buy 3 packs of pencils and 2 packs of erasers?\n    \"\"\"\n    pencils_per_pack = 12\n    pencil_cost = 0.50\n    erasers_per_pack = 8\n    eraser_cost = 0.25\n\n    number_of_packs_pencils = 3\n    number_of_packs_erasers = 2\n\n    total_pencil_cost = number_of_packs_pencils * pencils_per_pack * pencil_cost\n    total_eraser_cost = number_of_packs_erasers * erasers_per_pack * eraser_cost\n\n    result = total_pencil_cost + total_eraser_cost\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A pack of pencils contains 12 pencils. Each pencil costs 50 cents. A pack of erasers contains 8 erasers. Each eraser costs 25 cents. How much money is needed to buy 3 packs of pencils and 2 packs of erasers?\n    \"\"\"\n    pencils_per_pack = 12\n    pencil_cost = 0.50\n    erasers_per_pack = 8\n    eraser_cost = 0.25\n\n    number_of_packs_pencils = 3\n    number_of_packs_erasers = 2\n\n    total_pencil_cost = number_of_packs_pencils * pencils_per_pack * pencil_cost\n    total_eraser_cost = number_of_packs_erasers * erasers_per_pack * eraser_cost\n\n    result = total_pencil_cost + total_eraser_cost\n\n    return result",
    "result": 22.0
  },
  {
    "index": 62,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nA clothing store is having a 15% off sale. A shirt originally priced at $20 is now on sale. What is the sale price?\n\"\"\"\noriginal_price = 20  # Original price of the shirt in dollars\ndiscount_percentage = 15  # Discount percentage\n\n# Calculate the discount amount\ndiscount_amount = (discount_percentage / 100) * original_price\n\n# Calculate the sale price after discount\nsale_price = original_price - discount_amount\n\nresult = sale_price\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A clothing store is having a 15% off sale. A shirt originally priced at $20 is now on sale. What is the sale price?\n    \"\"\"\n    original_price = 20  # Original price of the shirt in dollars\n    discount_percentage = 15  # Discount percentage\n\n    # Calculate the discount amount\n    discount_amount = (discount_percentage / 100) * original_price\n\n    # Calculate the sale price after discount\n    sale_price = original_price - discount_amount\n\n    result = sale_price\n\n    return result",
    "result": 17.0
  },
  {
    "index": 63,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    A rectangle has a length of 20 cm and a width of 10 cm. What is the perimeter of the rectangle?\n    \"\"\"\n    length_cm = 20\n    width_cm = 10\n    perimeter = 2 * (length_cm + width_cm)\n    return perimeter",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A rectangle has a length of 20 cm and a width of 10 cm. What is the perimeter of the rectangle?\n    \"\"\"\n    length_cm = 20\n    width_cm = 10\n    perimeter = 2 * (length_cm + width_cm)\n    return perimeter",
    "result": 60
  },
  {
    "index": 64,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nIn an office building, there are 12 elevators, 6 on the odd floors and 6 on the even floors. If each elevator serves 8 floors, how many total floors does the building have?\n\"\"\"\n# Number of elevators on odd floors\nodd_elevators = 6\n# Number of elevators on even floors\neven_elevators = 6\n# Total number of elevators\ntotal_elevators = odd_elevators + even_elevators\n\n# Number of floors served by each elevator\nfloors_per_elevator = 8\n\n# Since elevators on odd floors serve the odd-numbered floors and elevators on even floors serve the even-numbered floors\n# Total floors are the total unique floors served across all elevators\n# However, assuming no overlap, total floors = number of floors served per elevator * number of elevators\n# But note, some floors are served by both odd and even elevators? No, per description, each set serves their respective floors, and floors are categorized into odd and even; to find total floors, we need to find the total number of unique floors.\n\n# The problem says each elevator serves 8 floors, and there's a total of 12 elevators divided into two groups.\n# Since the grouping is odd/even, total floors in building = number of floors covered by the range of odd floors plus that of even floors.\n\n# To find total floors, we need to identify the maximum floor number:\n# Since the elevators on odd floors serve 8 odd-numbered floors, and on even floors serve 8 even-numbered floors,\n# the highest odd floor number within the 8 served would be:\nmax_odd_floor = (odd_elevators - 1) * 2 + 1  # Because for each elevator, if it serves 8 floors starting from some base, but the problem doesn't specify their starting point, so assume the highest odd floor is the last odd in the sequence.\n# With each elevator serving 8 floors, and no info about starting floors, better to assume:\n# Each group covers 8 consecutive floors, for simplicity.\n\n# But the problem doesn't specify the exact floors, just that each elevator serves 8 floors, and total floors in building are to be calculated.\n\n# The best approach is to see that:\n# Total floors in the building are simply the union of all floors served.\n# Since the elevators on odd floors serve 8 floors, and there are 6 such elevators, total odd floors served:\ntotal_odd_floors = odd_elevators * floors_per_elevator\n# Similarly, total even floors served:\ntotal_even_floors = even_elevators * floors_per_elevator\n\n# The total floors in the building are the sum of odd and even floors served:\ntotal_floors = total_odd_floors + total_even_floors\n\nresult = total_floors\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    In an office building, there are 12 elevators, 6 on the odd floors and 6 on the even floors. If each elevator serves 8 floors, how many total floors does the building have?\n    \"\"\"\n    # Number of elevators on odd floors\n    odd_elevators = 6\n    # Number of elevators on even floors\n    even_elevators = 6\n    # Total number of elevators\n    total_elevators = odd_elevators + even_elevators\n\n    # Number of floors served by each elevator\n    floors_per_elevator = 8\n\n    # Since elevators on odd floors serve the odd-numbered floors and elevators on even floors serve the even-numbered floors\n    # Total floors are the total unique floors served across all elevators\n    # However, assuming no overlap, total floors = number of floors served per elevator * number of elevators\n    # But note, some floors are served by both odd and even elevators? No, per description, each set serves their respective floors, and floors are categorized into odd and even; to find total floors, we need to find the total number of unique floors.\n\n    # The problem says each elevator serves 8 floors, and there's a total of 12 elevators divided into two groups.\n    # Since the grouping is odd/even, total floors in building = number of floors covered by the range of odd floors plus that of even floors.\n\n    # To find total floors, we need to identify the maximum floor number:\n    # Since the elevators on odd floors serve 8 odd-numbered floors, and on even floors serve 8 even-numbered floors,\n    # the highest odd floor number within the 8 served would be:\n    max_odd_floor = (odd_elevators - 1) * 2 + 1  # Because for each elevator, if it serves 8 floors starting from some base, but the problem doesn't specify their starting point, so assume the highest odd floor is the last odd in the sequence.\n    # With each elevator serving 8 floors, and no info about starting floors, better to assume:\n    # Each group covers 8 consecutive floors, for simplicity.\n\n    # But the problem doesn't specify the exact floors, just that each elevator serves 8 floors, and total floors in building are to be calculated.\n\n    # The best approach is to see that:\n    # Total floors in the building are simply the union of all floors served.\n    # Since the elevators on odd floors serve 8 floors, and there are 6 such elevators, total odd floors served:\n    total_odd_floors = odd_elevators * floors_per_elevator\n    # Similarly, total even floors served:\n    total_even_floors = even_elevators * floors_per_elevator\n\n    # The total floors in the building are the sum of odd and even floors served:\n    total_floors = total_odd_floors + total_even_floors\n\n    result = total_floors\n\n    return result",
    "result": 96
  },
  {
    "index": 65,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nJamie bought bags of flour and depending on the weight of the bag he will need more measuring cups. If a bag weighs more than 8 pounds, he will need 3 cups. If it weighs less than that, it will only need 1 cup. If he bought 48 cups with 6 bags that weigh less than 8 pounds, how many bags in total did Jamie need to buy?\n\"\"\"\n# Number of cups used by bags weighing less than 8 pounds\ncupCount_fewer_bags = 48\n# Number of bags that weigh less than 8 pounds\nbags_weigh_less = 6\n# Cups needed per bag that weighs less than 8 pounds\ncups_per_fewer_bag = 1\n# Cups needed per bag that weighs more than 8 pounds\ncups_per_more_bag = 3\n\n# Total cups used by bags weighing less than 8 pounds\ncups_from_fewer_bags = bags_weigh_less * cups_per_fewer_bag\n\n# Total cups used overall\ntotal_cups = cupCount_fewer_bags\n\n# Cups used by bags that weigh more than 8 pounds\ncups_from_more_bags = total_cups - cups_from_fewer_bags\n\n# Number of bags that weigh more than 8 pounds\nmore_bags_count = cups_from_more_bags // cups_per_more_bag\n\n# Total number of bags Jamie bought\ntotal_bags = bags_weigh_less + more_bags_count\n\nresult = total_bags\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Jamie bought bags of flour and depending on the weight of the bag he will need more measuring cups. If a bag weighs more than 8 pounds, he will need 3 cups. If it weighs less than that, it will only need 1 cup. If he bought 48 cups with 6 bags that weigh less than 8 pounds, how many bags in total did Jamie need to buy?\n    \"\"\"\n    # Number of cups used by bags weighing less than 8 pounds\n    cupCount_fewer_bags = 48\n    # Number of bags that weigh less than 8 pounds\n    bags_weigh_less = 6\n    # Cups needed per bag that weighs less than 8 pounds\n    cups_per_fewer_bag = 1\n    # Cups needed per bag that weighs more than 8 pounds\n    cups_per_more_bag = 3\n\n    # Total cups used by bags weighing less than 8 pounds\n    cups_from_fewer_bags = bags_weigh_less * cups_per_fewer_bag\n\n    # Total cups used overall\n    total_cups = cupCount_fewer_bags\n\n    # Cups used by bags that weigh more than 8 pounds\n    cups_from_more_bags = total_cups - cups_from_fewer_bags\n\n    # Number of bags that weigh more than 8 pounds\n    more_bags_count = cups_from_more_bags // cups_per_more_bag\n\n    # Total number of bags Jamie bought\n    total_bags = bags_weigh_less + more_bags_count\n\n    result = total_bags\n\n    return result",
    "result": 20
  },
  {
    "index": 66,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nMichael collects antique guns. He has 10 rifles and half as many pistols. He wants to buy more guns and his goal is to add 25% more guns to his collection. How many guns does Michael have after he achieves his goal?\n\"\"\"\nrifles = 10\npistols = rifles / 2\ncurrent_total_guns = rifles + pistols\n\nadditional_guns = current_total_guns * 0.25\nfinal_total_guns = current_total_guns + additional_guns\n\nresult = final_total_guns\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Michael collects antique guns. He has 10 rifles and half as many pistols. He wants to buy more guns and his goal is to add 25% more guns to his collection. How many guns does Michael have after he achieves his goal?\n    \"\"\"\n    rifles = 10\n    pistols = rifles / 2\n    current_total_guns = rifles + pistols\n\n    additional_guns = current_total_guns * 0.25\n    final_total_guns = current_total_guns + additional_guns\n\n    result = final_total_guns\n\n    return result",
    "result": 18.75
  },
  {
    "index": 67,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Tonya can type 60 words per minute. If she has a 1000-word essay to type, how many minutes will it take her to finish typing it?\n    \"\"\"\n    typing_speed_wpm = 60\n    total_words = 1000\n    time_minutes = total_words / typing_speed_wpm\n    result = time_minutes\n\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Tonya can type 60 words per minute. If she has a 1000-word essay to type, how many minutes will it take her to finish typing it?\n    \"\"\"\n    typing_speed_wpm = 60\n    total_words = 1000\n    time_minutes = total_words / typing_speed_wpm\n    result = time_minutes\n\n    return result",
    "result": 16.666666666666668
  },
  {
    "index": 68,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Celine earns $3000 a month. She spends 1/3 of her salary for rent, 2/7 of the remaining money on electricity bills and the rest on groceries. How much did Celine spend on each item, respectively, in dollars?\n    \"\"\"\n    salary = 3000\n    rent = (1/3) * salary\n    \n    remaining_after_rent = salary - rent\n    electricity = (2/7) * remaining_after_rent\n    \n    groceries = remaining_after_rent - electricity\n    \n    return rent + electricity + groceries  # Total spent can be verified as salary, or to give individual amounts, return them separately if needed. But based on instruction, here is the total spent which should match the total calculations.\n    \n    # To return each amount individually:\n    # return rent, electricity, groceries\n\n# If needed to return each spent amount individually, you can modify the return statement accordingly:\ndef simple_math_problem() -> tuple:\n    \"\"\"\n    Celine earns $3000 a month. She spends 1/3 of her salary for rent, 2/7 of the remaining money on electricity bills and the rest on groceries. How much did Celine spend on each item, respectively, in dollars?\n    \"\"\"\n    salary = 3000\n    rent = (1/3) * salary\n    remaining_after_rent = salary - rent\n    electricity = (2/7) * remaining_after_rent\n    groceries = remaining_after_rent - electricity\n    \n    return rent, electricity, groceries",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Celine earns $3000 a month. She spends 1/3 of her salary for rent, 2/7 of the remaining money on electricity bills and the rest on groceries. How much did Celine spend on each item, respectively, in dollars?\n    \"\"\"\n    salary = 3000\n    rent = (1/3) * salary\n    \n    remaining_after_rent = salary - rent\n    electricity = (2/7) * remaining_after_rent\n    \n    groceries = remaining_after_rent - electricity\n    \n    return rent + electricity + groceries  # Total spent can be verified as salary, or to give individual amounts, return them separately if needed. But based on instruction, here is the total spent which should match the total calculations.\n    \n    # To return each amount individually:\n    # return rent, electricity, groceries\n\n# If needed to return each spent amount individually, you can modify the return statement accordingly:\ndef simple_math_problem() -> tuple:\n    \"\"\"\n    Celine earns $3000 a month. She spends 1/3 of her salary for rent, 2/7 of the remaining money on electricity bills and the rest on groceries. How much did Celine spend on each item, respectively, in dollars?\n    \"\"\"\n    salary = 3000\n    rent = (1/3) * salary\n    remaining_after_rent = salary - rent\n    electricity = (2/7) * remaining_after_rent\n    groceries = remaining_after_rent - electricity\n    \n    return rent, electricity, groceries",
    "result": [
      1000.0,
      571.4285714285714,
      1428.5714285714284
    ]
  },
  {
    "index": 69,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nA company had a profit of $500,000 last year. If they had revenue of $2,000,000, what was their profit margin (as a percentage)?\n\"\"\"\nprofit = 500000\nrevenue = 2000000\nprofit_margin = (profit / revenue) * 100\nresult = profit_margin\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A company had a profit of $500,000 last year. If they had revenue of $2,000,000, what was their profit margin (as a percentage)?\n    \"\"\"\n    profit = 500000\n    revenue = 2000000\n    profit_margin = (profit / revenue) * 100\n    result = profit_margin\n\n    return result",
    "result": 25.0
  },
  {
    "index": 70,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nWhen Rob was 8 years old, he was half as old as his sister Mandy. How old is Mandy now if Rob is 5 times as old now?\n\"\"\"\n# Let current age of Rob be R\n# Let current age of Mandy be M\n\n# At age 8, Rob was half as old as Mandy:\n# When Rob was 8, Mandy's age was 8 * 2 = 16\n# But this is at the time when Rob was 8, so Mandy's age at that time was 16\n\n# The difference in their ages is then 16 - 8 = 8 years\n\n# Now, Rob's current age is R\n# Since the age difference remains the same, Mandy's current age is R + 8\n\n# Also, Rob is currently 5 times as old as he was before?\n# Actually, the problem states \"Rob is 5 times as old now\" — since no previous age is specified, the likely interpretation is:\n# Rob's current age R\n# Then R = 5 * (Rob's age at some previous point), but since the problem directly says \"Rob is 5 times as old now\" it's probably implying that Rob now is 5 times his age at 8 — that is, at age 8.\n\n# Wait, that wouldn't make sense because at age 8, Rob was 8. And now he's R, which is older.\n\n# Alternatively, the problem says: \"Rob was 8 when he was half as old as Mandy.\" We need to find Mandy's current age, given R.\n\n# The key is at age 8, Mandy was 16, so current ages are:\n\n# If Rob's current age is R, then Mandy's current age is R + 8.\n\n# The problem says: \"how old is Mandy now if Rob is 5 times as old now?\"\n# So:\n# R = current age of Rob\n# Mandy's current age = R + 8\n# R = 5 * (Rob's age now) at some earlier time? No, that wouldn't make sense.\n\n# Wait, the problem states: \"How old is Mandy now if Rob is 5 times as old now?\"\n\n# Could it be that Rob's current age R, and:\n# R = 5 * (Rob's age at some prior point)? No, the only reference is \"Rob is 5 times as old now,\" which suggests they are asking for Mandy's current age based on Rob's current age.\n\n# Since at age 8, Mandy was 16, and age difference is 8 years, then:\n\n# Given Rob's current age R:\n# Mandy's current age = R + 8\n\n# The key is to find R based on the info, but the only info given is that Rob is 5 times as old now. The problem seems a little ambiguous, but most likely, the intended meaning is:\n\n# \"Rob's current age is R. When he was 8, Mandy was 16. How old is Mandy now if Rob is 5 times as old now?\"\n\n# That is, R is the current age of Rob, and it's given that R = 5 times Rob's age at *some point*, but perhaps the simplest interpretation: We know Rob's current age R and that R = 5 times Rob's age now at that moment? No, that doesn't make sense.\n\n# Alternatively, perhaps the intended interpretation is:\n\n# Rob's current age = R\n# When Rob was 8, Mandy was 16\n# The difference in age is 8 years always\n\n# \"How old is Mandy now if Rob is 5 times as old now?\" That is, the current age of Rob is R, and R is 5 times what? Since no previous age is specified, perhaps the intended meaning is:\n\n# Rob's current age R\n# At age 8, Mandy was 16\n# The difference is 8 years: Mandy is R + 8\n\n# And the problem states \"if Rob is 5 times as old now\" — probably meaning:\n\n# R = 5 * 8 = 40? No, that would be assuming Rob's age now is 5 times his age at 8?\n\n# Either way, the likely intended solution, based on the typical approach, is:\n\n# At age 8, Mandy was 16 (double the age). The difference in age is 8.\n\n# Now, current age of Rob = R\n# Mandy's current age = R + 8\n# The one piece of info about \"Rob is 5 times as old now\" most likely means:\n# Rob's current age R = 5 * Rob's age at some earlier point, but earlier, Rob was 8 years old, so that would mean:\n# R = 5 * 8 = 40\n\n# Therefore, Rob's current age R = 40, and Mandy's current age = 40 + 8 = 48\n\n# So answer: 48\n\n# Let's implement this reasoning:\nRob_now = 8 * 5  # Since Rob is now 5 times his age at 8\nMandy_now = Rob_now + 8\n\nresult = Mandy_now\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    When Rob was 8 years old, he was half as old as his sister Mandy. How old is Mandy now if Rob is 5 times as old now?\n    \"\"\"\n    # Let current age of Rob be R\n    # Let current age of Mandy be M\n\n    # At age 8, Rob was half as old as Mandy:\n    # When Rob was 8, Mandy's age was 8 * 2 = 16\n    # But this is at the time when Rob was 8, so Mandy's age at that time was 16\n\n    # The difference in their ages is then 16 - 8 = 8 years\n\n    # Now, Rob's current age is R\n    # Since the age difference remains the same, Mandy's current age is R + 8\n\n    # Also, Rob is currently 5 times as old as he was before?\n    # Actually, the problem states \"Rob is 5 times as old now\" — since no previous age is specified, the likely interpretation is:\n    # Rob's current age R\n    # Then R = 5 * (Rob's age at some previous point), but since the problem directly says \"Rob is 5 times as old now\" it's probably implying that Rob now is 5 times his age at 8 — that is, at age 8.\n\n    # Wait, that wouldn't make sense because at age 8, Rob was 8. And now he's R, which is older.\n\n    # Alternatively, the problem says: \"Rob was 8 when he was half as old as Mandy.\" We need to find Mandy's current age, given R.\n\n    # The key is at age 8, Mandy was 16, so current ages are:\n\n    # If Rob's current age is R, then Mandy's current age is R + 8.\n\n    # The problem says: \"how old is Mandy now if Rob is 5 times as old now?\"\n    # So:\n    # R = current age of Rob\n    # Mandy's current age = R + 8\n    # R = 5 * (Rob's age now) at some earlier time? No, that wouldn't make sense.\n\n    # Wait, the problem states: \"How old is Mandy now if Rob is 5 times as old now?\"\n\n    # Could it be that Rob's current age R, and:\n    # R = 5 * (Rob's age at some prior point)? No, the only reference is \"Rob is 5 times as old now,\" which suggests they are asking for Mandy's current age based on Rob's current age.\n\n    # Since at age 8, Mandy was 16, and age difference is 8 years, then:\n\n    # Given Rob's current age R:\n    # Mandy's current age = R + 8\n\n    # The key is to find R based on the info, but the only info given is that Rob is 5 times as old now. The problem seems a little ambiguous, but most likely, the intended meaning is:\n\n    # \"Rob's current age is R. When he was 8, Mandy was 16. How old is Mandy now if Rob is 5 times as old now?\"\n\n    # That is, R is the current age of Rob, and it's given that R = 5 times Rob's age at *some point*, but perhaps the simplest interpretation: We know Rob's current age R and that R = 5 times Rob's age now at that moment? No, that doesn't make sense.\n\n    # Alternatively, perhaps the intended interpretation is:\n\n    # Rob's current age = R\n    # When Rob was 8, Mandy was 16\n    # The difference in age is 8 years always\n\n    # \"How old is Mandy now if Rob is 5 times as old now?\" That is, the current age of Rob is R, and R is 5 times what? Since no previous age is specified, perhaps the intended meaning is:\n\n    # Rob's current age R\n    # At age 8, Mandy was 16\n    # The difference is 8 years: Mandy is R + 8\n\n    # And the problem states \"if Rob is 5 times as old now\" — probably meaning:\n\n    # R = 5 * 8 = 40? No, that would be assuming Rob's age now is 5 times his age at 8?\n\n    # Either way, the likely intended solution, based on the typical approach, is:\n\n    # At age 8, Mandy was 16 (double the age). The difference in age is 8.\n\n    # Now, current age of Rob = R\n    # Mandy's current age = R + 8\n    # The one piece of info about \"Rob is 5 times as old now\" most likely means:\n    # Rob's current age R = 5 * Rob's age at some earlier point, but earlier, Rob was 8 years old, so that would mean:\n    # R = 5 * 8 = 40\n\n    # Therefore, Rob's current age R = 40, and Mandy's current age = 40 + 8 = 48\n\n    # So answer: 48\n\n    # Let's implement this reasoning:\n    Rob_now = 8 * 5  # Since Rob is now 5 times his age at 8\n    Mandy_now = Rob_now + 8\n\n    result = Mandy_now\n\n    return result",
    "result": 48
  },
  {
    "index": 71,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nAndrew wants to knit a scarf and would like it to be at least 60 inches long. He estimates that, due to mistakes and unraveling, a third of the knitting might need to be redone. Each completed row of knitting adds 2 inches to the length of the scarf. How many rows of knitting should Andrew do?\n\"\"\"\n# Total desired length of the scarf\ndesired_length = 60  # inches\n\n# Due to mistakes and unraveling, only two-thirds of the knitting will be usable\nusable_fraction = 2/3\n\n# Since only two-thirds of the knitting counts, the actual knitted length must be increased accordingly\nnecessary_length = desired_length / usable_fraction\n\n# Each row adds 2 inches\nlength_per_row = 2  # inches\n\n# Calculate the number of rows needed\nrows_needed = necessary_length / length_per_row\n\n# Since the number of rows must be a whole number, round up to ensure the length is at least 60 inches\nimport math\nresult = math.ceil(rows_needed)\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Andrew wants to knit a scarf and would like it to be at least 60 inches long. He estimates that, due to mistakes and unraveling, a third of the knitting might need to be redone. Each completed row of knitting adds 2 inches to the length of the scarf. How many rows of knitting should Andrew do?\n    \"\"\"\n    # Total desired length of the scarf\n    desired_length = 60  # inches\n\n    # Due to mistakes and unraveling, only two-thirds of the knitting will be usable\n    usable_fraction = 2/3\n\n    # Since only two-thirds of the knitting counts, the actual knitted length must be increased accordingly\n    necessary_length = desired_length / usable_fraction\n\n    # Each row adds 2 inches\n    length_per_row = 2  # inches\n\n    # Calculate the number of rows needed\n    rows_needed = necessary_length / length_per_row\n\n    # Since the number of rows must be a whole number, round up to ensure the length is at least 60 inches\n    import math\n    result = math.ceil(rows_needed)\n\n    return result",
    "result": 45
  },
  {
    "index": 72,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 16 girls and 12 boys in a class. If a student is chosen randomly from the class, what is the probability that the student is a boy?\n    \"\"\"\n    total_girls = 16\n    total_boys = 12\n    total_students = total_girls + total_boys\n    \n    probability_boy = total_boys / total_students\n    \n    return probability_boy",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 16 girls and 12 boys in a class. If a student is chosen randomly from the class, what is the probability that the student is a boy?\n    \"\"\"\n    total_girls = 16\n    total_boys = 12\n    total_students = total_girls + total_boys\n    \n    probability_boy = total_boys / total_students\n    \n    return probability_boy",
    "result": 0.42857142857142855
  },
  {
    "index": 73,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nMrs. Black wants to plant a row of carrots. She plans to plant 20 carrots in the row and then she wants to add an extra 7 carrots. How many carrots does she need to buy?\n\"\"\"\ncarrotsInRow = 20\nadditionalCarrots = 7\ntotalCarrotsNeeded = carrotsInRow + additionalCarrots\n\nreturn totalCarrotsNeeded",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Mrs. Black wants to plant a row of carrots. She plans to plant 20 carrots in the row and then she wants to add an extra 7 carrots. How many carrots does she need to buy?\n    \"\"\"\n    carrotsInRow = 20\n    additionalCarrots = 7\n    totalCarrotsNeeded = carrotsInRow + additionalCarrots\n\n    return totalCarrotsNeeded",
    "result": 27
  },
  {
    "index": 74,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nA departmental store ran a sale on three types of pens: rollerball, ballpoint, and felt-tip pens. The store had a total of 900 pens on sale. If there were twice as many ballpoint pens as rollerball pens, and twice as many felt-tip pens as ballpoint pens; how many pens were of each type?\n\"\"\"\n# Total pens\ntotal_pens = 900\n\n# Let rollerball pens be R\n# Then ballpoint pens are 2 * R\n# Felt-tip pens are 2 * (2 * R) = 4 * R\n\n# Sum of all pens\n# R + 2*R + 4*R = 900\n# 7 * R = 900\n# R = 900 / 7\n\nrollerball_pens = 900 / 7\nballpoint_pens = 2 * rollerball_pens\nfelt_tip_pens = 4 * rollerball_pens\n\nresult = {\n    'rollerball_pens': rollerball_pens,\n    'ballpoint_pens': ballpoint_pens,\n    'felt_tip_pens': felt_tip_pens\n}\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A departmental store ran a sale on three types of pens: rollerball, ballpoint, and felt-tip pens. The store had a total of 900 pens on sale. If there were twice as many ballpoint pens as rollerball pens, and twice as many felt-tip pens as ballpoint pens; how many pens were of each type?\n    \"\"\"\n    # Total pens\n    total_pens = 900\n\n    # Let rollerball pens be R\n    # Then ballpoint pens are 2 * R\n    # Felt-tip pens are 2 * (2 * R) = 4 * R\n\n    # Sum of all pens\n    # R + 2*R + 4*R = 900\n    # 7 * R = 900\n    # R = 900 / 7\n\n    rollerball_pens = 900 / 7\n    ballpoint_pens = 2 * rollerball_pens\n    felt_tip_pens = 4 * rollerball_pens\n\n    result = {\n    'rollerball_pens': rollerball_pens,\n    'ballpoint_pens': ballpoint_pens,\n    'felt_tip_pens': felt_tip_pens\n}\n\nreturn result",
    "result": "Error:   File \"/tmp/tmplevpvyub.py\", line 27\n    return result\n    ^^^^^^^^^^^^^\nSyntaxError: 'return' outside function\n"
  },
  {
    "index": 75,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nA recipe calls for 3 eggs to make 12 muffins. How many eggs are needed to make 24 muffins?\n\"\"\"\neggs_for_12_muffins = 3\nmuffins_made_with_these_eggs = 12\ndesired_muffins = 24\neggs_needed = (eggs_for_12_muffins / muffins_made_with_these_eggs) * desired_muffins\n\nresult = eggs_needed\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A recipe calls for 3 eggs to make 12 muffins. How many eggs are needed to make 24 muffins?\n    \"\"\"\n    eggs_for_12_muffins = 3\n    muffins_made_with_these_eggs = 12\n    desired_muffins = 24\n    eggs_needed = (eggs_for_12_muffins / muffins_made_with_these_eggs) * desired_muffins\n\n    result = eggs_needed\n\n    return result",
    "result": 6.0
  },
  {
    "index": 76,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nEvery time David goes for a walk, he drinks some water to stay hydrated. He notices that for every 2 miles he walks, he needs 10 ounces of water. Every bottle of water he buys contains 20 ounces and costs $1. If David walks 8 miles, how much does he spend on water?\n\"\"\"\n# Water needed per mile\nwater_per_2_miles = 10  # ounces\n# Distance walked\ndistance_miles = 8\n\n# Calculate total water needed for 8 miles\nwater_needed = (distance_miles / 2) * water_per_2_miles  # ounces\n\n# Number of bottles needed (always round up)\nimport math\nbottles_needed = math.ceil(water_needed / 20)\n\n# Cost per bottle\ncost_per_bottle = 1  # dollars\n\n# Total cost\nresult = bottles_needed * cost_per_bottle\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Every time David goes for a walk, he drinks some water to stay hydrated. He notices that for every 2 miles he walks, he needs 10 ounces of water. Every bottle of water he buys contains 20 ounces and costs $1. If David walks 8 miles, how much does he spend on water?\n    \"\"\"\n    # Water needed per mile\n    water_per_2_miles = 10  # ounces\n    # Distance walked\n    distance_miles = 8\n\n    # Calculate total water needed for 8 miles\n    water_needed = (distance_miles / 2) * water_per_2_miles  # ounces\n\n    # Number of bottles needed (always round up)\n    import math\n    bottles_needed = math.ceil(water_needed / 20)\n\n    # Cost per bottle\n    cost_per_bottle = 1  # dollars\n\n    # Total cost\n    result = bottles_needed * cost_per_bottle\n\n    return result",
    "result": 2
  },
  {
    "index": 77,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nA farmer is harvesting apples from his orchard. He has 40 apple trees, and each tree produces an average of 50 apples. \nHe sells the apples in two ways: by weight or by bag. He charges $1.50 per kilogram for the apples by weight, and $5 for a bag of 12 apples. \nHe estimates that each apple weighs about 100 grams. How much more money can he make by selling all his apples by weight instead of by bag?\n\"\"\"\n# Number of apple trees\nnum_trees = 40\n\n# Average apples produced per tree\navg_apples_per_tree = 50\n\n# Total apples harvested\ntotal_apples = num_trees * avg_apples_per_tree\n\n# Weight per apple in grams\nweight_per_apple_grams = 100\n\n# Convert weight per apple to kilograms\nweight_per_apple_kg = weight_per_apple_grams / 1000\n\n# Total weight of all apples in kg\ntotal_weight_kg = total_apples * weight_per_apple_kg\n\n# Price per kg when selling by weight\nprice_per_kg = 1.50\n\n# Total money if sold by weight\nmoney_by_weight = total_weight_kg * price_per_kg\n\n# Price per bag (12 apples)\nprice_per_bag = 5\n\n# Number of bags needed (assuming all apples are bundled in bags of 12)\nnum_bags = total_apples // 12\n# If there are remaining apples that do not fill a bag, still need an extra bag\nif total_apples % 12 != 0:\n    num_bags += 1\n\n# Total money if sold by bag\nmoney_by_bag = num_bags * price_per_bag\n\n# The difference in earnings\nresult = money_by_weight - money_by_bag\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A farmer is harvesting apples from his orchard. He has 40 apple trees, and each tree produces an average of 50 apples. \n    He sells the apples in two ways: by weight or by bag. He charges $1.50 per kilogram for the apples by weight, and $5 for a bag of 12 apples. \n    He estimates that each apple weighs about 100 grams. How much more money can he make by selling all his apples by weight instead of by bag?\n    \"\"\"\n    # Number of apple trees\n    num_trees = 40\n\n    # Average apples produced per tree\n    avg_apples_per_tree = 50\n\n    # Total apples harvested\n    total_apples = num_trees * avg_apples_per_tree\n\n    # Weight per apple in grams\n    weight_per_apple_grams = 100\n\n    # Convert weight per apple to kilograms\n    weight_per_apple_kg = weight_per_apple_grams / 1000\n\n    # Total weight of all apples in kg\n    total_weight_kg = total_apples * weight_per_apple_kg\n\n    # Price per kg when selling by weight\n    price_per_kg = 1.50\n\n    # Total money if sold by weight\n    money_by_weight = total_weight_kg * price_per_kg\n\n    # Price per bag (12 apples)\n    price_per_bag = 5\n\n    # Number of bags needed (assuming all apples are bundled in bags of 12)\n    num_bags = total_apples // 12\n    # If there are remaining apples that do not fill a bag, still need an extra bag\n    if total_apples % 12 != 0:\n    num_bags += 1\n\n# Total money if sold by bag\nmoney_by_bag = num_bags * price_per_bag\n\n# The difference in earnings\nresult = money_by_weight - money_by_bag\n\nreturn result",
    "result": "Error:   File \"/tmp/tmp5h5qxza6.py\", line 38\n    num_bags += 1\n    ^\nIndentationError: expected an indented block after 'if' statement on line 37\n"
  },
  {
    "index": 78,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nA slow cooker can cook 6 chicken breasts in 6 hours. How many chicken breasts can it cook in 3 hours?\n\"\"\"\n# Number of chicken breasts cooked in 6 hours\nchickens_cooked_in_6_hours = 6\n\n# Chicken breasts cooked per hour\nchickens_per_hour = chickens_cooked_in_6_hours / 6\n\n# Chicken breasts cooked in 3 hours\nchickens_in_3_hours = chickens_per_hour * 3\n\nresult = chickens_in_3_hours\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A slow cooker can cook 6 chicken breasts in 6 hours. How many chicken breasts can it cook in 3 hours?\n    \"\"\"\n    # Number of chicken breasts cooked in 6 hours\n    chickens_cooked_in_6_hours = 6\n\n    # Chicken breasts cooked per hour\n    chickens_per_hour = chickens_cooked_in_6_hours / 6\n\n    # Chicken breasts cooked in 3 hours\n    chickens_in_3_hours = chickens_per_hour * 3\n\n    result = chickens_in_3_hours\n\n    return result",
    "result": 3.0
  },
  {
    "index": 79,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nOn his first pick-up station, a bus driver welcomed 27 passengers and then dropped 12 off at his second stop. After that, the bus driver collected 50% of the previous number at the third stop, then 5 people left at the following station, while only 2 joined. What's the number of passengers that are still on the bus?\n\"\"\"\ninitial_passengers = 27\ndrop_off_second_stop = 12\npassengers_after_second_stop = initial_passengers - drop_off_second_stop\n\npassengers_at_third_stop = passengers_after_second_stop * 0.5\n\npeople_left_third_stop = 5\npeople_joined_fourth_stop = 2\n\nfinal_passengers = passengers_at_third_stop - people_left_third_stop + people_joined_fourth_stop\n\nresult = int(final_passengers)\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    On his first pick-up station, a bus driver welcomed 27 passengers and then dropped 12 off at his second stop. After that, the bus driver collected 50% of the previous number at the third stop, then 5 people left at the following station, while only 2 joined. What's the number of passengers that are still on the bus?\n    \"\"\"\n    initial_passengers = 27\n    drop_off_second_stop = 12\n    passengers_after_second_stop = initial_passengers - drop_off_second_stop\n\n    passengers_at_third_stop = passengers_after_second_stop * 0.5\n\n    people_left_third_stop = 5\n    people_joined_fourth_stop = 2\n\n    final_passengers = passengers_at_third_stop - people_left_third_stop + people_joined_fourth_stop\n\n    result = int(final_passengers)\n\n    return result",
    "result": 4
  },
  {
    "index": 80,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    A company sells 400 widgets per month at $15 each. If the company decides to increase the price by 20%, how much revenue would the company make in a year?\n    \"\"\"\n    widgets_per_month = 400\n    original_price = 15\n    price_increase_percentage = 20\n\n    # Calculate the new price after a 20% increase\n    increased_price = original_price * (1 + price_increase_percentage / 100)\n\n    # Calculate monthly revenue with new price\n    monthly_revenue = widgets_per_month * increased_price\n\n    # Calculate annual revenue\n    annual_revenue = monthly_revenue * 12\n\n    result = annual_revenue\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A company sells 400 widgets per month at $15 each. If the company decides to increase the price by 20%, how much revenue would the company make in a year?\n    \"\"\"\n    widgets_per_month = 400\n    original_price = 15\n    price_increase_percentage = 20\n\n    # Calculate the new price after a 20% increase\n    increased_price = original_price * (1 + price_increase_percentage / 100)\n\n    # Calculate monthly revenue with new price\n    monthly_revenue = widgets_per_month * increased_price\n\n    # Calculate annual revenue\n    annual_revenue = monthly_revenue * 12\n\n    result = annual_revenue\n    return result",
    "result": 86400.0
  },
  {
    "index": 81,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nThe length of a rectangle is four times its width. If the area of the rectangle is 96 square units, what is its perimeter?\n\"\"\"\n# Assign known values\nwidth = None\nlength = None\narea = 96\n\n# Since length is four times the width\n# length = 4 * width\n\n# Area of rectangle = length * width\n# 96 = (4 * width) * width\n# 96 = 4 * width^2\n# width^2 = 96 / 4\nwidth_squared = 96 / 4\n\n# Calculate width\nwidth = width_squared ** 0.5\n\n# Calculate length\nlength = 4 * width\n\n# Calculate perimeter = 2 * (length + width)\nperimeter = 2 * (length + width)\n\nresult = perimeter\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The length of a rectangle is four times its width. If the area of the rectangle is 96 square units, what is its perimeter?\n    \"\"\"\n    # Assign known values\n    width = None\n    length = None\n    area = 96\n\n    # Since length is four times the width\n    # length = 4 * width\n\n    # Area of rectangle = length * width\n    # 96 = (4 * width) * width\n    # 96 = 4 * width^2\n    # width^2 = 96 / 4\n    width_squared = 96 / 4\n\n    # Calculate width\n    width = width_squared ** 0.5\n\n    # Calculate length\n    length = 4 * width\n\n    # Calculate perimeter = 2 * (length + width)\n    perimeter = 2 * (length + width)\n\n    result = perimeter\n\n    return result",
    "result": 48.98979485566356
  },
  {
    "index": 82,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nA train has 12 cars, each with 24 seats. If there are 240 passengers on the train, how many seats are empty?\n\"\"\"\n# Total number of cars on the train\nnumber_of_cars = 12\n# Number of seats in each car\nseats_per_car = 24\n# Total number of seats on the train\ntotal_seats = number_of_cars * seats_per_car\n\n# Number of passengers on the train\npassengers = 240\n# Calculate the number of empty seats\nempty_seats = total_seats - passengers\n\nresult = empty_seats\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A train has 12 cars, each with 24 seats. If there are 240 passengers on the train, how many seats are empty?\n    \"\"\"\n    # Total number of cars on the train\n    number_of_cars = 12\n    # Number of seats in each car\n    seats_per_car = 24\n    # Total number of seats on the train\n    total_seats = number_of_cars * seats_per_car\n\n    # Number of passengers on the train\n    passengers = 240\n    # Calculate the number of empty seats\n    empty_seats = total_seats - passengers\n\n    result = empty_seats\n\n    return result",
    "result": 48
  },
  {
    "index": 83,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Harry ordered 15 kilograms of potatoes and 3 kilograms of onions. How many pounds did Harry order in total?\n    \"\"\"\n    # Conversion factor from kilograms to pounds\n    kg_to_pounds = 2.20462\n    \n    # Weight of potatoes in kilograms\n    potatoes_kg = 15\n    \n    # Weight of onions in kilograms\n    onions_kg = 3\n    \n    # Convert weights to pounds\n    potatoes_pounds = potatoes_kg * kg_to_pounds\n    onions_pounds = onions_kg * kg_to_pounds\n    \n    # Total weight in pounds\n    total_pounds = potatoes_pounds + onions_pounds\n    \n    result = total_pounds\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Harry ordered 15 kilograms of potatoes and 3 kilograms of onions. How many pounds did Harry order in total?\n    \"\"\"\n    # Conversion factor from kilograms to pounds\n    kg_to_pounds = 2.20462\n    \n    # Weight of potatoes in kilograms\n    potatoes_kg = 15\n    \n    # Weight of onions in kilograms\n    onions_kg = 3\n    \n    # Convert weights to pounds\n    potatoes_pounds = potatoes_kg * kg_to_pounds\n    onions_pounds = onions_kg * kg_to_pounds\n    \n    # Total weight in pounds\n    total_pounds = potatoes_pounds + onions_pounds\n    \n    result = total_pounds\n    return result",
    "result": 39.68316
  },
  {
    "index": 84,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nRob buys 3 apples and 4 oranges for $6.50. How much did an apple and an orange cost Rob?\n\"\"\"\n# Assign known values\ntotal_cost = 6.50\napples_count = 3\noranges_count = 4\n\n# Let x be the cost of one apple\n# Let y be the cost of one orange\n\n# Set up the equation:\n# 3x + 4y = 6.50\n\n# To find the cost of one apple and one orange individually, we need additional info.\n# But based on the typical interpretation, the question is asking for the cost of one apple and one orange,\n# assuming equal contribution or the combined cost of 1 apple and 1 orange?\n\n# Since the problem doesn't specify how to split the total cost between apples and oranges directly,\n# a common assumption is to find the average cost per fruit:\ntotal_fruits = apples_count + oranges_count\n\naverage_cost_per_fruit = total_cost / total_fruits\n\n# But the question asks: \"How much did an apple and an orange cost Rob?\"\n# Interpreting as the individual costs, but with only one equation, we need more info:\n# Without additional info (like their prices are equal), we cannot uniquely determine both.\n# However, in the context of the problem, the usual approach is to find the combined individual costs:\n# Let's assume the cost of an apple and an orange individually, for simplicity, as the same (if that's the intended meaning).\n\n# Alternatively, if the problem intends to find the total of one apple and one orange:\nresult = average_cost_per_fruit * 2  # total cost of one apple and one orange\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Rob buys 3 apples and 4 oranges for $6.50. How much did an apple and an orange cost Rob?\n    \"\"\"\n    # Assign known values\n    total_cost = 6.50\n    apples_count = 3\n    oranges_count = 4\n\n    # Let x be the cost of one apple\n    # Let y be the cost of one orange\n\n    # Set up the equation:\n    # 3x + 4y = 6.50\n\n    # To find the cost of one apple and one orange individually, we need additional info.\n    # But based on the typical interpretation, the question is asking for the cost of one apple and one orange,\n    # assuming equal contribution or the combined cost of 1 apple and 1 orange?\n\n    # Since the problem doesn't specify how to split the total cost between apples and oranges directly,\n    # a common assumption is to find the average cost per fruit:\n    total_fruits = apples_count + oranges_count\n\n    average_cost_per_fruit = total_cost / total_fruits\n\n    # But the question asks: \"How much did an apple and an orange cost Rob?\"\n    # Interpreting as the individual costs, but with only one equation, we need more info:\n    # Without additional info (like their prices are equal), we cannot uniquely determine both.\n    # However, in the context of the problem, the usual approach is to find the combined individual costs:\n    # Let's assume the cost of an apple and an orange individually, for simplicity, as the same (if that's the intended meaning).\n\n    # Alternatively, if the problem intends to find the total of one apple and one orange:\n    result = average_cost_per_fruit * 2  # total cost of one apple and one orange\n\n    return result",
    "result": 1.8571428571428572
  },
  {
    "index": 85,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nNatalie has a garden she's been tending to. In the first month she grew 2 carrots, then each month after that she grew 7 more carrots than the previous month. If she's been growing for 6 months, how many carrots has she grown in total?\n\"\"\"\ninitial_carrots = 2  # Number of carrots in the first month\nmonthly_increase = 7  # Additional carrots grown each subsequent month\nmonths = 6\n\n# List to store the carrots grown each month\ncarrots_per_month = []\n\n# Calculate the carrots grown each month\nfor i in range(months):\n    carrots_this_month = initial_carrots + i * monthly_increase\n    carrots_per_month.append(carrots_this_month)\n\n# Sum the total carrots grown over all months\ntotal_carrots = sum(carrots_per_month)\n\nresult = total_carrots\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Natalie has a garden she's been tending to. In the first month she grew 2 carrots, then each month after that she grew 7 more carrots than the previous month. If she's been growing for 6 months, how many carrots has she grown in total?\n    \"\"\"\n    initial_carrots = 2  # Number of carrots in the first month\n    monthly_increase = 7  # Additional carrots grown each subsequent month\n    months = 6\n\n    # List to store the carrots grown each month\n    carrots_per_month = []\n\n    # Calculate the carrots grown each month\n    for i in range(months):\n    carrots_this_month = initial_carrots + i * monthly_increase\n    carrots_per_month.append(carrots_this_month)\n\n# Sum the total carrots grown over all months\ntotal_carrots = sum(carrots_per_month)\n\nresult = total_carrots\nreturn result",
    "result": "Error:   File \"/tmp/tmpvz8mt1po.py\", line 14\n    carrots_this_month = initial_carrots + i * monthly_increase\n    ^\nIndentationError: expected an indented block after 'for' statement on line 13\n"
  },
  {
    "index": 86,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nMarianne bought five pens for 75 cents each and three notebooks for $2.25 each. How much did she spend?\n\"\"\"\npens_quantity = 5\npen_price_cents = 75\nnotebooks_quantity = 3\nnotebook_price_dollars = 2.25\n\ntotal_pen_cost = pens_quantity * pen_price_cents  # in cents\ntotal_notebook_cost = notebooks_quantity * notebook_price_dollars  # in dollars\n\n# Convert total pen cost from cents to dollars\ntotal_pen_cost_dollars = total_pen_cost / 100\n\n# Calculate total amount spent\nresult = total_pen_cost_dollars + total_notebook_cost\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Marianne bought five pens for 75 cents each and three notebooks for $2.25 each. How much did she spend?\n    \"\"\"\n    pens_quantity = 5\n    pen_price_cents = 75\n    notebooks_quantity = 3\n    notebook_price_dollars = 2.25\n\n    total_pen_cost = pens_quantity * pen_price_cents  # in cents\n    total_notebook_cost = notebooks_quantity * notebook_price_dollars  # in dollars\n\n    # Convert total pen cost from cents to dollars\n    total_pen_cost_dollars = total_pen_cost / 100\n\n    # Calculate total amount spent\n    result = total_pen_cost_dollars + total_notebook_cost\n\n    return result",
    "result": 10.5
  },
  {
    "index": 87,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nFor Jennifer's birthday, the family have bought 12 cups of ice cream, twice as many cones, and 4 times as many cups. How many ice cream dishes are there in total?\n\"\"\"\n# Number of cups of ice cream\ncups = 12\n\n# Number of cones (twice as many as cups)\ncones = 2 * cups\n\n# Number of other cups (4 times as many as the initial cups)\nother_cups = 4 * cups\n\n# Total number of ice cream dishes\ntotal_dishes = cups + cones + other_cups\n\nresult = total_dishes\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    For Jennifer's birthday, the family have bought 12 cups of ice cream, twice as many cones, and 4 times as many cups. How many ice cream dishes are there in total?\n    \"\"\"\n    # Number of cups of ice cream\n    cups = 12\n\n    # Number of cones (twice as many as cups)\n    cones = 2 * cups\n\n    # Number of other cups (4 times as many as the initial cups)\n    other_cups = 4 * cups\n\n    # Total number of ice cream dishes\n    total_dishes = cups + cones + other_cups\n\n    result = total_dishes\n\n    return result",
    "result": 84
  },
  {
    "index": 88,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nIf 5 men can do a job in 6 hours, how many men are needed to do the job in 4 hours?\n\"\"\"\n# Number of men initially\nmen_initial = 5\n# Time taken by initial group\nhours_initial = 6\n# Desired time to complete the job\nhours_final = 4\n\n# Since the work done is inversely proportional to the time, total work can be considered as:\n# work = number_of_men * hours\nwork_done = men_initial * hours_initial\n\n# To find the number of men needed to do the same work in 4 hours:\nmen_required = work_done / hours_final\n\nresult = int(men_required)\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    If 5 men can do a job in 6 hours, how many men are needed to do the job in 4 hours?\n    \"\"\"\n    # Number of men initially\n    men_initial = 5\n    # Time taken by initial group\n    hours_initial = 6\n    # Desired time to complete the job\n    hours_final = 4\n\n    # Since the work done is inversely proportional to the time, total work can be considered as:\n    # work = number_of_men * hours\n    work_done = men_initial * hours_initial\n\n    # To find the number of men needed to do the same work in 4 hours:\n    men_required = work_done / hours_final\n\n    result = int(men_required)\n\n    return result",
    "result": 7
  },
  {
    "index": 89,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nStudent: Sally put $10,000 in an account that offers 8% interest compounded quarterly. How much money will Sally have after 3 years?\n\"\"\"\nprincipal = 10000  # initial amount in dollars\nannual_rate = 0.08  # annual interest rate\ncompounding_periods_per_year = 4  # quarterly compounding\nyears = 3\n\n# Calculate the total number of compounding periods\ntotal_periods = compounding_periods_per_year * years\n\n# Calculate the interest rate per period\nrate_per_period = annual_rate / compounding_periods_per_year\n\n# Calculate the final amount using compound interest formula\nresult = principal * (1 + rate_per_period) ** total_periods\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Student: Sally put $10,000 in an account that offers 8% interest compounded quarterly. How much money will Sally have after 3 years?\n    \"\"\"\n    principal = 10000  # initial amount in dollars\n    annual_rate = 0.08  # annual interest rate\n    compounding_periods_per_year = 4  # quarterly compounding\n    years = 3\n\n    # Calculate the total number of compounding periods\n    total_periods = compounding_periods_per_year * years\n\n    # Calculate the interest rate per period\n    rate_per_period = annual_rate / compounding_periods_per_year\n\n    # Calculate the final amount using compound interest formula\n    result = principal * (1 + rate_per_period) ** total_periods\n\n    return result",
    "result": 12682.417945625455
  },
  {
    "index": 90,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nJohn walks 1 km from his house to the store in 10 minutes. He then walks another 2 km to his friend's house in 15 minutes. What is John's average speed in km/h?\n\"\"\"\n# Distance traveled in first part (km)\ndistance_first_leg = 1\n# Time taken for first part (hours)\ntime_first_leg_hours = 10 / 60\n\n# Distance traveled in second part (km)\ndistance_second_leg = 2\n# Time taken for second part (hours)\ntime_second_leg_hours = 15 / 60\n\n# Total distance traveled (km)\ntotal_distance = distance_first_leg + distance_second_leg\n# Total time taken (hours)\ntotal_time_hours = time_first_leg_hours + time_second_leg_hours\n\n# Calculate average speed (km/h)\naverage_speed = total_distance / total_time_hours\n\nreturn average_speed",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John walks 1 km from his house to the store in 10 minutes. He then walks another 2 km to his friend's house in 15 minutes. What is John's average speed in km/h?\n    \"\"\"\n    # Distance traveled in first part (km)\n    distance_first_leg = 1\n    # Time taken for first part (hours)\n    time_first_leg_hours = 10 / 60\n\n    # Distance traveled in second part (km)\n    distance_second_leg = 2\n    # Time taken for second part (hours)\n    time_second_leg_hours = 15 / 60\n\n    # Total distance traveled (km)\n    total_distance = distance_first_leg + distance_second_leg\n    # Total time taken (hours)\n    total_time_hours = time_first_leg_hours + time_second_leg_hours\n\n    # Calculate average speed (km/h)\n    average_speed = total_distance / total_time_hours\n\n    return average_speed",
    "result": 7.200000000000001
  },
  {
    "index": 91,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nA school has 480 students. If there are 20 students in each class, how many classes are there?\n\"\"\"\nstudents_total = 480\nstudents_per_class = 20\nnumber_of_classes = students_total / students_per_class\nresult = number_of_classes\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A school has 480 students. If there are 20 students in each class, how many classes are there?\n    \"\"\"\n    students_total = 480\n    students_per_class = 20\n    number_of_classes = students_total / students_per_class\n    result = number_of_classes\n\n    return result",
    "result": 24.0
  },
  {
    "index": 92,
    "response": "def simple_math_problem() -> int:\n\"\"\"\nA group of friends went to a restaurant and the bill came out to be $120. If the friends split the bill equally and each one paid $20, how many friends were there?\n\"\"\"\nbillTotal = 120\namountPaidPerFriend = 20\nnumberOfFriends = billTotal / amountPaidPerFriend\nresult = int(numberOfFriends)\n\nreturn result",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A group of friends went to a restaurant and the bill came out to be $120. If the friends split the bill equally and each one paid $20, how many friends were there?\n    \"\"\"\n    billTotal = 120\n    amountPaidPerFriend = 20\n    numberOfFriends = billTotal / amountPaidPerFriend\n    result = int(numberOfFriends)\n\n    return result",
    "result": 6
  },
  {
    "index": 93,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nAna is hosting a dinner party. She needs to buy 7 bottles of wine for the party. Each bottle costs $8. What will be the total cost for the 7 bottles?\n\"\"\"\nbottlesNeeded = 7\npricePerBottle = 8\ntotalCost = bottlesNeeded * pricePerBottle\n\nreturn totalCost",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Ana is hosting a dinner party. She needs to buy 7 bottles of wine for the party. Each bottle costs $8. What will be the total cost for the 7 bottles?\n    \"\"\"\n    bottlesNeeded = 7\n    pricePerBottle = 8\n    totalCost = bottlesNeeded * pricePerBottle\n\n    return totalCost",
    "result": 56
  },
  {
    "index": 94,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nA shopkeeper had 27 brownies and 18 cupcakes. He sold half of all of them. How many of each did he have left?\n\"\"\"\nbrownies_initial = 27\ncupcakes_initial = 18\n\ntotal_items = brownies_initial + cupcakes_initial\nitems_sold = total_items / 2\n\nbrownies_left = brownies_initial - (brownies_initial / 2)\ncupcakes_left = cupcakes_initial - (cupcakes_initial / 2)\n\nresult = (brownies_left, cupcakes_left)\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A shopkeeper had 27 brownies and 18 cupcakes. He sold half of all of them. How many of each did he have left?\n    \"\"\"\n    brownies_initial = 27\n    cupcakes_initial = 18\n\n    total_items = brownies_initial + cupcakes_initial\n    items_sold = total_items / 2\n\n    brownies_left = brownies_initial - (brownies_initial / 2)\n    cupcakes_left = cupcakes_initial - (cupcakes_initial / 2)\n\n    result = (brownies_left, cupcakes_left)\n\n    return result",
    "result": [
      13.5,
      9.0
    ]
  },
  {
    "index": 95,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nA rope is cut into three equal segments. The first segment is 6.2 m long, the second segment is 2.8 m long and the third segment is 7.6 m long. What is the length of the original rope before it was cut?\n\"\"\"\n# Lengths of the three segments\nsegment1 = 6.2\nsegment2 = 2.8\nsegment3 = 7.6\n\n# Calculate the total length of all three segments\ntotal_segments_length = segment1 + segment2 + segment3\n\n# Since the segments are equal, the length of one segment\n# is the total length divided by 3\nsegment_length = total_segments_length / 3\n\n# The original length of the rope was the sum of the three segments\noriginal_rope_length = total_segments_length\n\nresult = original_rope_length\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A rope is cut into three equal segments. The first segment is 6.2 m long, the second segment is 2.8 m long and the third segment is 7.6 m long. What is the length of the original rope before it was cut?\n    \"\"\"\n    # Lengths of the three segments\n    segment1 = 6.2\n    segment2 = 2.8\n    segment3 = 7.6\n\n    # Calculate the total length of all three segments\n    total_segments_length = segment1 + segment2 + segment3\n\n    # Since the segments are equal, the length of one segment\n    # is the total length divided by 3\n    segment_length = total_segments_length / 3\n\n    # The original length of the rope was the sum of the three segments\n    original_rope_length = total_segments_length\n\n    result = original_rope_length\n\n    return result",
    "result": 16.6
  },
  {
    "index": 96,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nRachel rents 4 bikes per week for $25 each. She decides to sell them at a discount at the end of the year and gets only $360. What was her loss?\n\"\"\"\n# Number of bikes rented per week\nbikes_per_week = 4\n# Cost per bike per week\ncost_per_bike = 25\n# Total weeks in a year\nweeks_in_year = 52\n# Total cost of renting bikes for the year\ntotal_cost = bikes_per_week * cost_per_bike * weeks_in_year\n\n# Amount received after selling the bikes\nselling_price = 360\n\n# Loss is the total cost minus the amount received\nloss = total_cost - selling_price\n\nresult = loss\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Rachel rents 4 bikes per week for $25 each. She decides to sell them at a discount at the end of the year and gets only $360. What was her loss?\n    \"\"\"\n    # Number of bikes rented per week\n    bikes_per_week = 4\n    # Cost per bike per week\n    cost_per_bike = 25\n    # Total weeks in a year\n    weeks_in_year = 52\n    # Total cost of renting bikes for the year\n    total_cost = bikes_per_week * cost_per_bike * weeks_in_year\n\n    # Amount received after selling the bikes\n    selling_price = 360\n\n    # Loss is the total cost minus the amount received\n    loss = total_cost - selling_price\n\n    result = loss\n\n    return result",
    "result": 4840
  },
  {
    "index": 97,
    "response": "def simple_math_problem() -> float:\n\"\"\"\nAt a local library, there are 1,000 books in the fiction section and 800 books in the non-fiction section. If 30% of the books in the fiction section are mysteries and 25% of the books in the non-fiction section are biographies, how many books are mysteries or biographies?\n\"\"\"\n# Number of books in each section\nfiction_books = 1000\nnon_fiction_books = 800\n\n# Percentages\npercent_mysteries_in_fiction = 30 / 100\npercent_biographies_in_non_fiction = 25 / 100\n\n# Number of mysteries in fiction\nmysteries_in_fiction = fiction_books * percent_mysteries_in_fiction\n\n# Number of biographies in non-fiction\nbiographies_in_non_fiction = non_fiction_books * percent_biographies_in_non_fiction\n\n# Total books that are mysteries or biographies\nresult = mysteries_in_fiction + biographies_in_non_fiction\n\nreturn result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    At a local library, there are 1,000 books in the fiction section and 800 books in the non-fiction section. If 30% of the books in the fiction section are mysteries and 25% of the books in the non-fiction section are biographies, how many books are mysteries or biographies?\n    \"\"\"\n    # Number of books in each section\n    fiction_books = 1000\n    non_fiction_books = 800\n\n    # Percentages\n    percent_mysteries_in_fiction = 30 / 100\n    percent_biographies_in_non_fiction = 25 / 100\n\n    # Number of mysteries in fiction\n    mysteries_in_fiction = fiction_books * percent_mysteries_in_fiction\n\n    # Number of biographies in non-fiction\n    biographies_in_non_fiction = non_fiction_books * percent_biographies_in_non_fiction\n\n    # Total books that are mysteries or biographies\n    result = mysteries_in_fiction + biographies_in_non_fiction\n\n    return result",
    "result": 500.0
  },
  {
    "index": 98,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    Amina and her friend want to buy some books, so they ask their teacher for money, who gives them $80 in total to use. Amina buys four books at $12 each, and her friend uses the remaining amount to buy three books at $10 each and some bookmarks. How much money did Amina's friend spend on bookmarks?\n    \"\"\"\n    total_money = 80\n    \n    # Amina's purchases\n    price_per_book_amina = 12\n    number_of_books_amina = 4\n    amount_spent_by_amina = price_per_book_amina * number_of_books_amina\n    \n    # Remaining money for the friend\n    remaining_money = total_money - amount_spent_by_amina\n    \n    # Friend's purchases\n    price_per_book_friend = 10\n    number_of_books_friend = 3\n    amount_spent_on_books_by_friend = price_per_book_friend * number_of_books_friend\n    \n    # Money spent on bookmarks\n    money_for_bookmarks = remaining_money - amount_spent_on_books_by_friend\n    \n    result = money_for_bookmarks\n    \n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Amina and her friend want to buy some books, so they ask their teacher for money, who gives them $80 in total to use. Amina buys four books at $12 each, and her friend uses the remaining amount to buy three books at $10 each and some bookmarks. How much money did Amina's friend spend on bookmarks?\n    \"\"\"\n    total_money = 80\n    \n    # Amina's purchases\n    price_per_book_amina = 12\n    number_of_books_amina = 4\n    amount_spent_by_amina = price_per_book_amina * number_of_books_amina\n    \n    # Remaining money for the friend\n    remaining_money = total_money - amount_spent_by_amina\n    \n    # Friend's purchases\n    price_per_book_friend = 10\n    number_of_books_friend = 3\n    amount_spent_on_books_by_friend = price_per_book_friend * number_of_books_friend\n    \n    # Money spent on bookmarks\n    money_for_bookmarks = remaining_money - amount_spent_on_books_by_friend\n    \n    result = money_for_bookmarks\n    \n    return result",
    "result": 2
  },
  {
    "index": 99,
    "response": "def simple_math_problem() -> float:\n    \"\"\"\n    If a person travels in a truck at 35 km per hour and a motorbike at 55 km per hour, calculate the total distance travelled by them in 4 hours.\n    \"\"\"\n    truck_speed_kph = 35  # speed of the truck in kilometers per hour\n    motorbike_speed_kph = 55  # speed of the motorbike in kilometers per hour\n    time_hours = 4  # total time in hours\n\n    # Distance traveled by truck\n    distance_truck = truck_speed_kph * time_hours\n\n    # Distance traveled by motorbike\n    distance_motorbike = motorbike_speed_kph * time_hours\n\n    # Total distance traveled\n    total_distance = distance_truck + distance_motorbike\n\n    result = total_distance\n    return result",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a person travels in a truck at 35 km per hour and a motorbike at 55 km per hour, calculate the total distance travelled by them in 4 hours.\n    \"\"\"\n    truck_speed_kph = 35  # speed of the truck in kilometers per hour\n    motorbike_speed_kph = 55  # speed of the motorbike in kilometers per hour\n    time_hours = 4  # total time in hours\n\n    # Distance traveled by truck\n    distance_truck = truck_speed_kph * time_hours\n\n    # Distance traveled by motorbike\n    distance_motorbike = motorbike_speed_kph * time_hours\n\n    # Total distance traveled\n    total_distance = distance_truck + distance_motorbike\n\n    result = total_distance\n    return result",
    "result": 360
  }
]