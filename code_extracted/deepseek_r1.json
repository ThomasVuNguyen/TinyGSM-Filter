[
  {
    "index": 0,
    "response": "**Reasoning:**\n1. Calculate the cost of the shirts: 6 shirts at $15 each → 6 * 15 = $90\n2. Calculate the cost of the jeans without discount: 4 pairs at $20 each → 4 * 20 = $80\n3. Apply the 25% discount to one pair of jeans: 25% of $20 is (0.25 * 20) = $5 discount\n4. Adjust the jeans cost: Total jeans cost - discount → $80 - $5 = $75\n5. Total payment = Shirts cost + Jeans cost → $90 + $75 = $165\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Bob buys 6 shirts for $15 each and 4 pairs of jeans for $20 each. He gets a 25% off coupon for one pair of jeans. How much does he pay for the shirts and jeans?\n    \"\"\"\n    num_shirts = 6\n    shirt_price = 15\n    num_jeans = 4\n    jean_price = 20\n    discount_rate = 0.25  # 25% discount for one pair\n    \n    total_shirts = num_shirts * shirt_price\n    total_jeans_full = num_jeans * jean_price\n    discount_amount = discount_rate * jean_price  # Discount for one pair\n    total_jeans = total_jeans_full - discount_amount\n    total_paid = total_shirts + total_jeans\n    \n    return total_paid\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Bob buys 6 shirts for $15 each and 4 pairs of jeans for $20 each. He gets a 25% off coupon for one pair of jeans. How much does he pay for the shirts and jeans?\n    \"\"\"\n    num_shirts = 6\n    shirt_price = 15\n    num_jeans = 4\n    jean_price = 20\n    discount_rate = 0.25  # 25% discount for one pair\n    \n    total_shirts = num_shirts * shirt_price\n    total_jeans_full = num_jeans * jean_price\n    discount_amount = discount_rate * jean_price  # Discount for one pair\n    total_jeans = total_jeans_full - discount_amount\n    total_paid = total_shirts + total_jeans\n    \n    return total_paid",
    "result": 165.0
  },
  {
    "index": 1,
    "response": "**Reasoning:**\n1. Corina starts with 24 shells.\n2. She keeps 6 shells, leaving her with 24 - 6 = 18 shells.\n3. She then gives 10 of the remaining shells to her brother, so she has 18 - 10 = 8 shells left.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Corina collected 24 shells on the beach and picks 6 of them to keep. She gives 10 of the remaining shells to her brother. How many shells does Corina have left?\n    \"\"\"\n    total_shells = 24\n    kept_shells = 6\n    remaining_after_keeping = total_shells - kept_shells\n    given_to_brother = 10\n    shells_left = remaining_after_keeping - given_to_brother\n    \n    return shells_left\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Corina collected 24 shells on the beach and picks 6 of them to keep. She gives 10 of the remaining shells to her brother. How many shells does Corina have left?\n    \"\"\"\n    total_shells = 24\n    kept_shells = 6\n    remaining_after_keeping = total_shells - kept_shells\n    given_to_brother = 10\n    shells_left = remaining_after_keeping - given_to_brother\n    \n    return shells_left",
    "result": 8
  },
  {
    "index": 2,
    "response": "**Reasoning:**\nTo find the cost per sticky note in cents, follow these steps:\n1. Calculate the total cost for all packs: 8 packs × $2.50 per pack = $20.00.\n2. Convert the total cost to cents: $20.00 × 100 = 2000 cents.\n3. Calculate the total number of sticky notes: 8 packs × 15 notes per pack = 120 notes.\n4. Determine the cost per note: 2000 cents ÷ 120 notes ≈ 16.666... cents per note.\n\nThe problem requires the exact cost per note, so the result is a repeating decimal (50/3 cents). Python will represent this as a float.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A student buys 8 packs of sticky notes for $2.50, each pack contains 15 sticky notes. How many cents does each sticky note cost?\n    \"\"\"\n    packs = 8\n    cost_per_pack_dollars = 2.50\n    notes_per_pack = 15\n    \n    total_cost_dollars = packs * cost_per_pack_dollars\n    total_cost_cents = total_cost_dollars * 100\n    total_notes = packs * notes_per_pack\n    cost_per_note_cents = total_cost_cents / total_notes\n    \n    result = cost_per_note_cents\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A student buys 8 packs of sticky notes for $2.50, each pack contains 15 sticky notes. How many cents does each sticky note cost?\n    \"\"\"\n    packs = 8\n    cost_per_pack_dollars = 2.50\n    notes_per_pack = 15\n    \n    total_cost_dollars = packs * cost_per_pack_dollars\n    total_cost_cents = total_cost_dollars * 100\n    total_notes = packs * notes_per_pack\n    cost_per_note_cents = total_cost_cents / total_notes\n    \n    result = cost_per_note_cents\n    return result",
    "result": 16.666666666666668
  },
  {
    "index": 3,
    "response": "**Reasoning:**\nThe problem states that Oliver sold 35 cookies, Lucas sold 26 cookies, and they initially collected a total of 93 dollars from all cookie sales. Mason gave away half of his earnings to his little sister, and we need to find the total money they have now.\n\nHowever, the price per cookie is not specified. Given that the total initial amount is 93 dollars and the cookie counts for Oliver and Lucas are provided, we assume a price of $1 per cookie for simplicity, as it is a common approach in such problems when the price is not given. This allows us to calculate Mason's earnings.\n\nSteps:\n1. Oliver's earnings: 35 cookies × $1/cookie = $35.\n2. Lucas's earnings: 26 cookies × $1/cookie = $26.\n3. Mason's earnings: Total initial amount - (Oliver's earnings + Lucas's earnings) = $93 - ($35 + $26) = $32.\n4. Mason gives away half of his earnings: $32 / 2 = $16 (so he keeps $16).\n5. Total money they have: Oliver's earnings + Lucas's earnings + Mason's remaining money = $",
    "code": "",
    "result": null
  },
  {
    "index": 4,
    "response": "**Reasoning:**\nTo solve this problem, we need to calculate Kevin's total earnings over three days by determining the number of lawns he mowed each day and the corresponding earnings per day.\n\n1. **Sunday:**\n   - Mowed 3 lawns.\n   - Earned $15 per lawn.\n   - Earnings: \\(3 \\times 15 = 45\\) dollars.\n\n2. **Monday:**\n   - \"4 more than twice that number of lawns\" — \"that number\" refers to Sunday's 3 lawns.\n   - Twice Sunday's lawns: \\(2 \\times 3 = 6\\).\n   - Add 4 more: \\(6 + 4 = 10\\) lawns.\n   - Earned $10 per lawn.\n   - Earnings: \\(10 \\times 10 = 100\\) dollars.\n\n3. **Tuesday:**\n   - \"2 fewer than half that number of lawns\" — \"that number\" refers to Monday's 10 lawns.\n   - Half of Monday's lawns: \\(10 \\div 2 = 5\\).\n   - Subtract 2: \\(5 - 2 = 3\\) lawns.\n   - Earned $12 per lawn.\n   - Earnings: \\(3 \\times 12 = 36\\) dollars.\n\n4. **Total Earnings:**\n   - Sum of all daily earnings: \\(45 + 100 + 36 = 181\\) dollars.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Kevin is earning money by mowing lawns. On Sunday, he mowed 3 lawns and earned $15 per lawn. On Monday, he mowed 4 more than twice that number of lawns and earned $10 per lawn. And on Tuesday, he mowed 2 fewer than half that number of lawns and earned $12 per lawn. How much money did he earn over the three days?\n    \"\"\"\n    # Sunday\n    lawns_sunday = 3\n    rate_sunday = 15\n    earnings_sunday = lawns_sunday * rate_sunday  # 45\n\n    # Monday: 4 more than twice Sunday's lawns\n    twice_sunday = 2 * lawns_sunday\n    lawns_monday = twice_sunday + 4  # 10\n    rate_monday = 10\n    earnings_monday = lawns_monday * rate_monday  # 100\n\n    # Tuesday: 2 fewer than half Monday's lawns\n    half_monday = lawns_monday / 2\n    lawns_tuesday = half_monday - 2  # 3\n    rate_tuesday = 12\n    earnings_tuesday = lawns_tuesday * rate_tuesday  # 36\n\n    # Total earnings\n    total_earnings = earnings_sunday + earnings_monday + earnings_tuesday\n\n    return total_earnings\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Kevin is earning money by mowing lawns. On Sunday, he mowed 3 lawns and earned $15 per lawn. On Monday, he mowed 4 more than twice that number of lawns and earned $10 per lawn. And on Tuesday, he mowed 2 fewer than half that number of lawns and earned $12 per lawn. How much money did he earn over the three days?\n    \"\"\"\n    # Sunday\n    lawns_sunday = 3\n    rate_sunday = 15\n    earnings_sunday = lawns_sunday * rate_sunday  # 45\n\n    # Monday: 4 more than twice Sunday's lawns\n    twice_sunday = 2 * lawns_sunday\n    lawns_monday = twice_sunday + 4  # 10\n    rate_monday = 10\n    earnings_monday = lawns_monday * rate_monday  # 100\n\n    # Tuesday: 2 fewer than half Monday's lawns\n    half_monday = lawns_monday / 2\n    lawns_tuesday = half_monday - 2  # 3\n    rate_tuesday = 12\n    earnings_tuesday = lawns_tuesday * rate_tuesday  # 36\n\n    # Total earnings\n    total_earnings = earnings_sunday + earnings_monday + earnings_tuesday\n\n    return total_earnings",
    "result": 181.0
  },
  {
    "index": 5,
    "response": "**Reasoning:**\nTo solve this problem, we need to calculate the total amount Bob spent by considering the quantity and price of each item:\n- 7 bottles of soda at $2 each\n- 6 iPads at $500 each\n- 8 pizza boxes at $1 each\n\nThe total cost is computed in three steps:\n1. Calculate soda cost: 7 bottles × $2/bottle = $14\n2. Calculate iPad cost: 6 iPads × $500/iPad = $3,000\n3. Calculate pizza cost: 8 pizza boxes × $1/box = $8\n4. Sum all costs: $14 + $3,000 + $8 = $3,022\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Bob has decided to buy 7 bottles of soda at $2 each, 6 iPads at $500 each, and 8 pizza boxes at $1 each. How much did he spend in total?\n    \"\"\"\n    soda_quantity = 7\n    soda_price_per_unit = 2\n    soda_cost = soda_quantity * soda_price_per_unit\n    \n    ipad_quantity = 6\n    ipad_price_per_unit = 500\n    ipad_cost = ipad_quantity * ipad_price_per_unit\n    \n    pizza_quantity = 8\n    pizza_price_per_unit = 1\n    pizza_cost = pizza_quantity * pizza_price_per_unit\n    \n    total_cost = soda_cost + ipad_cost + pizza_cost\n    \n    return total_cost\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Bob has decided to buy 7 bottles of soda at $2 each, 6 iPads at $500 each, and 8 pizza boxes at $1 each. How much did he spend in total?\n    \"\"\"\n    soda_quantity = 7\n    soda_price_per_unit = 2\n    soda_cost = soda_quantity * soda_price_per_unit\n    \n    ipad_quantity = 6\n    ipad_price_per_unit = 500\n    ipad_cost = ipad_quantity * ipad_price_per_unit\n    \n    pizza_quantity = 8\n    pizza_price_per_unit = 1\n    pizza_cost = pizza_quantity * pizza_price_per_unit\n    \n    total_cost = soda_cost + ipad_cost + pizza_cost\n    \n    return total_cost",
    "result": 3022
  },
  {
    "index": 6,
    "response": "**Reasoning:**\nThe problem involves Lily who has 350 marbles and initially plans to make groups of 5 marbles to give to her friends. This would allow her to give marbles to 350 ÷ 5 = 70 friends. However, she then decides to make groups of 25 marbles each instead. With groups of 25, she can give to 350 ÷ 25 = 14 friends. \n\nThe question asks: \"how many friends will Lily have left to give marbles to?\" This refers to the number of friends who would have received marbles under the original plan (groups of 5) but will not receive any under the new plan (groups of 25), because the marbles are now used in larger groups. \n\nTo find this, subtract the number of friends served under the new plan from the number that would have been served under the original plan: 70 - 14 = 56 friends. These 56 friends are \"left\" in the sense that they were intended to receive marbles originally but will not receive any under the new distribution, as all marbles are used.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Lily has 350 marbles and wants to make groups of 5 to give to her friends. If each group consists of 25 marbles, how many friends will Lily have left to give marbles to?\n    \"\"\"\n    total_marbles = 350\n    original_group_size = 5\n    new_group_size = 25\n\n    original_friends_count = total_marbles // original_group_size\n    new_friends_count = total_marbles // new_group_size\n    friends_left = original_friends_count - new_friends_count\n\n    result = friends_left\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Lily has 350 marbles and wants to make groups of 5 to give to her friends. If each group consists of 25 marbles, how many friends will Lily have left to give marbles to?\n    \"\"\"\n    total_marbles = 350\n    original_group_size = 5\n    new_group_size = 25\n\n    original_friends_count = total_marbles // original_group_size\n    new_friends_count = total_marbles // new_group_size\n    friends_left = original_friends_count - new_friends_count\n\n    result = friends_left\n\n    return result",
    "result": 56
  },
  {
    "index": 7,
    "response": "**Reasoning:**\n1. Sally starts with 42 pieces of candy.\n2. She receives an additional 14 pieces.\n3. To find the total, add the initial amount (42) to the additional amount (14): 42 + 14 = 56.\n4. The problem requires the result as a float, so we return 56.0.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If Sally was given 42 pieces of candy, and then given 14 more, how many pieces of candy has she been given in total?\n    \"\"\"\n    initial_candy = 42\n    additional_candy = 14\n    total_candy = initial_candy + additional_candy\n    result = float(total_candy)\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If Sally was given 42 pieces of candy, and then given 14 more, how many pieces of candy has she been given in total?\n    \"\"\"\n    initial_candy = 42\n    additional_candy = 14\n    total_candy = initial_candy + additional_candy\n    result = float(total_candy)\n    \n    return result",
    "result": 56.0
  },
  {
    "index": 8,
    "response": "**Reasoning:**\n- The pump drains 8 gallons of water every 10 minutes.\n- There are 4 pools to drain, each containing 500 gallons.\n- First, calculate the total water drained: 4 pools × 500 gallons/pool = 2000 gallons.\n- The pump's drainage rate is 8 gallons per 10 minutes, so the time required to drain 2000 gallons is:\n  - Time = (Total gallons × Time per 8 gallons) / Gallons per cycle\n  - Time = (2000 × 10) / 8 = 2500 minutes.\n- Therefore, the pump ran for 2500 minutes.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A water pump can drain 8 gallons of water every 10 minutes. The pump ran for long enough to drain 4 pools. Each pool contains 500 gallons of water. How long did the pump run?\n    \"\"\"\n    pools = 4\n    gallons_per_pool = 500\n    gallons_drained_per_10_min = 8\n    \n    total_gallons = pools * gallons_per_pool\n    time_minutes = (total_gallons * 10) / gallons_drained_per_10_min\n    \n    result = time_minutes\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A water pump can drain 8 gallons of water every 10 minutes. The pump ran for long enough to drain 4 pools. Each pool contains 500 gallons of water. How long did the pump run?\n    \"\"\"\n    pools = 4\n    gallons_per_pool = 500\n    gallons_drained_per_10_min = 8\n    \n    total_gallons = pools * gallons_per_pool\n    time_minutes = (total_gallons * 10) / gallons_drained_per_10_min\n    \n    result = time_minutes\n    return result",
    "result": 2500.0
  },
  {
    "index": 9,
    "response": "**Reasoning:**\n1. Andra goes shopping once a month and spends $25 each time.\n2. To save for the computer, she must accumulate $1000.\n3. The key insight is that by not spending $25 each month, she effectively saves that $25 toward her goal.\n4. Therefore, she saves $25 per month.\n5. To calculate the number of months needed: divide the target amount ($1000) by the monthly savings ($25).\n6. \\( 1000 \\div 25 = 40 \\).\n7. Since 40 months is a whole number and exactly meets the savings goal, no rounding is necessary.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    andra only to goes out shopping once a month. When she goes out, she spends 25 dollars. She has decided to save up 1000 dollars for a brand new computer. How many months will it take her to save up the right amount?\n    \"\"\"\n    monthly_savings = 25\n    target_amount = 1000\n    months_needed = target_amount / monthly_savings\n    return months_needed\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    andra only to goes out shopping once a month. When she goes out, she spends 25 dollars. She has decided to save up 1000 dollars for a brand new computer. How many months will it take her to save up the right amount?\n    \"\"\"\n    monthly_savings = 25\n    target_amount = 1000\n    months_needed = target_amount / monthly_savings\n    return months_needed",
    "result": 40.0
  },
  {
    "index": 10,
    "response": "**Reasoning:**\nThe problem requires calculating average speed, which is defined as total distance traveled divided by the total time taken. Here, the delivery boy walked 12 km in 1.5 hours. Therefore, the average speed is calculated as:\n- Distance = 12 km\n- Time = 1.5 hours\n- Average speed = Distance / Time = 12 km / 1.5 hours\n\nPerforming the division:\n- 12 divided by 1.5 equals 8\nThus, the average speed is 8 km/h.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A delivery boy walked 12 km in 1.5 hours. What is his average speed in km/h?\n    \"\"\"\n    distance_km = 12.0\n    time_hours = 1.5\n    average_speed = distance_km / time_hours\n    result = average_speed\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A delivery boy walked 12 km in 1.5 hours. What is his average speed in km/h?\n    \"\"\"\n    distance_km = 12.0\n    time_hours = 1.5\n    average_speed = distance_km / time_hours\n    result = average_speed\n    \n    return result",
    "result": 8.0
  },
  {
    "index": 11,
    "response": "**Reasoning:**\nTo solve this problem, we need to calculate the total cost of building a 30,000 square foot modular car wash. The components include:\n- One Main Building module (2000 sq ft at $80,000)\n- Two Car Washing Area modules (each 500 sq ft at $22,000, so total 1000 sq ft at $44,000)\n- The remaining area (30,000 - 2000 - 1000 = 27,000 sq ft) at $130 per sq foot for other modules\n\nSteps:\n1. Calculate the cost of the Main Building: $80,000\n2. Calculate the cost of two Car Washing Areas: 2 × $22,000 = $44,000\n3. Determine the remaining area: 30,000 - 2000 - 1000 = 27,000 sq ft\n4. Calculate the cost of the remaining area: 27,000 × $130\n5. Sum all costs: Main Building + Car Washing Areas + remaining area cost\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Ben is planning to build a modular car wash. A 2000 square foot Main Building module costs $80000 and a 500 square foot Car Washing Area module costs $22000. All other modules cost $130 per square foot. If Ben plans to build a 30,000 square foot modular car wash containing one Main Building and two Car Washing Areas, how much will it cost, in dollars?\n    \"\"\"\n    # Fixed module costs\n    main_building_cost = 80000\n    car_washing_area_cost_per = 22000\n    num_car_washing_areas = 2\n    total_car_washing_cost = car_washing_area_cost_per * num_car_washing_areas\n    \n    # Area calculations\n    main_building_area = 2000\n    car_washing_area_per = 500\n    total_car_washing_area = car_washing_area_per * num_car_washing_areas\n    total_area = 30000\n    remaining_area = total_area - main_building_area - total_car_washing_area\n    \n    # Cost for remaining area\n    cost_per_sq_ft_other = 130\n    other_modules_cost = remaining_area * cost_per_sq_ft_other\n    \n    # Total cost\n    total_cost = main_building_cost + total_car_washing_cost + other_modules_cost\n    \n    return total_cost\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Ben is planning to build a modular car wash. A 2000 square foot Main Building module costs $80000 and a 500 square foot Car Washing Area module costs $22000. All other modules cost $130 per square foot. If Ben plans to build a 30,000 square foot modular car wash containing one Main Building and two Car Washing Areas, how much will it cost, in dollars?\n    \"\"\"\n    # Fixed module costs\n    main_building_cost = 80000\n    car_washing_area_cost_per = 22000\n    num_car_washing_areas = 2\n    total_car_washing_cost = car_washing_area_cost_per * num_car_washing_areas\n    \n    # Area calculations\n    main_building_area = 2000\n    car_washing_area_per = 500\n    total_car_washing_area = car_washing_area_per * num_car_washing_areas\n    total_area = 30000\n    remaining_area = total_area - main_building_area - total_car_washing_area\n    \n    # Cost for remaining area\n    cost_per_sq_ft_other = 130\n    other_modules_cost = remaining_area * cost_per_sq_ft_other\n    \n    # Total cost\n    total_cost = main_building_cost + total_car_washing_cost + other_modules_cost\n    \n    return total_cost",
    "result": 3634000
  },
  {
    "index": 12,
    "response": "**Reasoning:**\nTo find the probability of selecting a red candy:\n1. Identify the number of red candies: 15.\n2. Calculate the total number of candies: 15 red + 20 blue + 25 green = 60.\n3. Probability = (number of red candies) / (total candies) = 15 / 60 = 1/4 = 0.25.\nThe probability is 0.25 or 25%.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A bag of candy contains 15 red candies, 20 blue candies, and 25 green candies. If a candy is chosen randomly, what is the probability that it will be red?\n    \"\"\"\n    red_candies = 15\n    blue_candies = 20\n    green_candies = 25\n    \n    total_candies = red_candies + blue_candies + green_candies\n    probability_red = red_candies / total_candies\n    \n    return probability_red\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A bag of candy contains 15 red candies, 20 blue candies, and 25 green candies. If a candy is chosen randomly, what is the probability that it will be red?\n    \"\"\"\n    red_candies = 15\n    blue_candies = 20\n    green_candies = 25\n    \n    total_candies = red_candies + blue_candies + green_candies\n    probability_red = red_candies / total_candies\n    \n    return probability_red",
    "result": 0.25
  },
  {
    "index": 13,
    "response": "**Reasoning:**\nThe bag contains 6 red marbles and 4 green marbles, making a total of 10 marbles. We need to find the probability that both marbles drawn are red when drawn without replacement. There are two ways to approach this:\n\n1. **Sequential Probability Method**:\n   - Probability of first marble being red: \\( \\frac{6}{10} \\)\n   - After drawing one red marble, 5 red marbles remain out of 9 total marbles. Probability of second marble being red: \\( \\frac{5}{9} \\)\n   - Combined probability: \\( \\frac{6}{10} \\times \\frac{5}{9} = \\frac{30}{90} = \\frac{1}{3} \\)\n\n2. **Combination Method**:\n   - Number of ways to choose 2 red marbles from 6: \\( \\binom{6}{2} = \\frac{6 \\times 5}{2 \\times 1} = 15 \\)\n   - Number of ways to choose any 2 marbles from 10: \\( \\binom{10}{2} = \\frac{10 \\times 9}{2 \\times 1} = 45 \\)\n   - Probability: \\( \\frac{15}{45} = \\frac{1}{3} \\)\n\nBoth methods confirm that the probability is \\( \\frac{1}{3} \\).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A bag contains 6 red marbles and 4 green marbles. If two marbles are drawn at random from the bag without replacement, what is the probability that both marbles are red?\n    \"\"\"\n    total_marbles = 10\n    red_marbles = 6\n    \n    # Calculate probability using sequential multiplication\n    prob_first_red = red_marbles / total_marbles\n    prob_second_red_given_first_red = (red_marbles - 1) / (total_marbles - 1)\n    probability_both_red = prob_first_red * prob_second_red_given_first_red\n    \n    return probability_both_red\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A bag contains 6 red marbles and 4 green marbles. If two marbles are drawn at random from the bag without replacement, what is the probability that both marbles are red?\n    \"\"\"\n    total_marbles = 10\n    red_marbles = 6\n    \n    # Calculate probability using sequential multiplication\n    prob_first_red = red_marbles / total_marbles\n    prob_second_red_given_first_red = (red_marbles - 1) / (total_marbles - 1)\n    probability_both_red = prob_first_red * prob_second_red_given_first_red\n    \n    return probability_both_red",
    "result": 0.3333333333333333
  },
  {
    "index": 14,
    "response": "**Reasoning:**\n- Let \\( m \\) be the number of male dogs.\n- Since there are 17 more female dogs than male dogs, the number of female dogs is \\( m + 17 \\).\n- The total number of dogs is the sum of male and female dogs: \\( m + (m + 17) = 42 \\).\n- Simplify the equation: \\( 2m + 17 = 42 \\).\n- Subtract 17 from both sides: \\( 2m = 25 \\).\n- Divide by 2: \\( m = \\frac{25}{2} = 12.5 \\).\n\nAlthough 12.5 is not an integer, the mathematical solution to the given problem yields this result. The problem does not specify that the number of dogs must be whole numbers, so we proceed with the fractional result.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    There are 42 dogs in a rescue center. There are 17 more female than male dogs. How many male dogs are in the rescue center?\n    \"\"\"\n    total_dogs = 42\n    female_more_than_male = 17\n    male_dogs = (total_dogs - female_more_than_male) / 2\n    result = male_dogs\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 42 dogs in a rescue center. There are 17 more female than male dogs. How many male dogs are in the rescue center?\n    \"\"\"\n    total_dogs = 42\n    female_more_than_male = 17\n    male_dogs = (total_dogs - female_more_than_male) / 2\n    result = male_dogs\n    \n    return result",
    "result": 12.5
  },
  {
    "index": 15,
    "response": "**Reasoning:**\nThe problem requires calculating the total number of pages sold over two weeks. Here's the step-by-step breakdown:\n1. **First Week Sales**: The store sells 50 books per day for 7 days, so the total books sold in the first week is \\(7 \\times 50 = 350\\) books.\n2. **Second Week Sales**: The store sells 30 books per day for 7 days, so the total books sold in the second week is \\(7 \\times 30 = 210\\) books.\n3. **Total Books Sold**: Combine both weeks: \\(350 + 210 = 560\\) books.\n4. **Total Pages Calculation**: Each book has 400 pages, so the total pages sold is \\(560 \\times 400 = 224,000\\).\n\n**Solution:**\n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    A bookstore is known to sell 50 books in a day, where each book has 400 pages. \n    Nevertheless, in the following week, the store was only able to sell 30 books per day. \n    What's the total number of pages in the books sold in two weeks?\n    \"\"\"\n    days_per_week = 7\n    books_per_day_first_week = 50\n    books_per_day_second_week = 30\n    pages_per_book = 400\n    \n    total_books_first_week = days_per_week * books_per_day_first_week\n    total_books_second_week = days_per_week * books_per_day_second_week\n    total_books = total_books_first_week + total_books_second_week\n    total_pages = total_books * pages_per_book\n    \n    return total_pages\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A bookstore is known to sell 50 books in a day, where each book has 400 pages. \n    Nevertheless, in the following week, the store was only able to sell 30 books per day. \n    What's the total number of pages in the books sold in two weeks?\n    \"\"\"\n    days_per_week = 7\n    books_per_day_first_week = 50\n    books_per_day_second_week = 30\n    pages_per_book = 400\n    \n    total_books_first_week = days_per_week * books_per_day_first_week\n    total_books_second_week = days_per_week * books_per_day_second_week\n    total_books = total_books_first_week + total_books_second_week\n    total_pages = total_books * pages_per_book\n    \n    return total_pages",
    "result": 224000
  },
  {
    "index": 16,
    "response": "**Reasoning:**  \nAndra makes 12 pancakes with 3 cups of batter. To find how many cups are needed for 36 pancakes, we recognize this as a proportional relationship. The ratio of pancakes to batter is constant.  \n\nThe proportion can be expressed as:  \n\\[\\frac{12 \\text{ pancakes}}{3 \\text{ cups}} = \\frac{36 \\text{ pancakes}}{x \\text{ cups}}\\]  \n\nCross-multiplying gives:  \n\\[12x = 3 \\times 36\\]  \n\\[12x = 108\\]  \n\\[x = \\frac{108}{12} = 9\\]  \n\nAlternatively, observe that 36 pancakes is 3 times 12 pancakes (since \\(36 \\div 12 = 3\\)). Thus, the batter required is \\(3 \\times 3 \\text{ cups} = 9 \\text{ cups}\\).  \n\nBoth methods confirm that 9 cups of batter are needed.  \n\n**Solution:**  \n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    andra can make 12 pancakes with 3 cups of batter. How many cups of batter does she need to make 36 pancakes?\n    \"\"\"\n    # Define known quantities\n    pancakes_made = 12\n    cups_used = 3\n    target_pancakes = 36\n\n    # Calculate the batter per pancake\n    batter_per_pancake = cups_used / pancakes_made\n\n    # Calculate total batter needed for target pancakes\n    result = batter_per_pancake * target_pancakes\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    andra can make 12 pancakes with 3 cups of batter. How many cups of batter does she need to make 36 pancakes?\n    \"\"\"\n    # Define known quantities\n    pancakes_made = 12\n    cups_used = 3\n    target_pancakes = 36\n\n    # Calculate the batter per pancake\n    batter_per_pancake = cups_used / pancakes_made\n\n    # Calculate total batter needed for target pancakes\n    result = batter_per_pancake * target_pancakes\n\n    return result",
    "result": 9.0
  },
  {
    "index": 17,
    "response": "**Reasoning:**\n- The group has 45 people.\n- 60% are adults, so the remaining percentage must be children.\n- Calculate the percentage of children: 100% - 60% = 40%.\n- Convert the percentage to a decimal: 40% = 0.4.\n- Multiply the total number of people by the decimal: 45 × 0.4 = 18.\n- Therefore, there are 18 children.\n\n**Solution:**\n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    A group of friends decided to go to a movie theater. If there are 45 people in the group and 60% of them are adults, how many children are there?\n    \"\"\"\n    total_people = 45\n    percent_adults = 60\n    percent_children = 100 - percent_adults  # 40%\n    decimal_children = percent_children / 100  # 0.4\n    num_children = total_people * decimal_children  # 45 * 0.4 = 18\n    \n    return int(num_children)  # Convert to integer since the count must be a whole number\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    A group of friends decided to go to a movie theater. If there are 45 people in the group and 60% of them are adults, how many children are there?\n    \"\"\"\n    total_people = 45\n    percent_adults = 60\n    percent_children = 100 - percent_adults  # 40%\n    decimal_children = percent_children / 100  # 0.4\n    num_children = total_people * decimal_children  # 45 * 0.4 = 18\n    \n    return int(num_children)  # Convert to integer since the count must be a whole number",
    "result": 18
  },
  {
    "index": 18,
    "response": "**Reasoning:**\n1. The problem states that bananas are sold for half the price of mangoes.\n2. It specifies that 1 kg of mangoes costs $6.\n3. Therefore, the cost of 1 kg of bananas is half of $6.\n4. Half of $6 is calculated as $6 divided by 2, which equals $3.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In a grocery store, bananas are sold for half the price of mangoes. If a kg of mangoes costs $6, how much would a kg of banana cost?\n    \"\"\"\n    mango_price_per_kg = 6.0  # Cost of 1 kg of mangoes in dollars\n    banana_price_per_kg = mango_price_per_kg / 2.0  # Bananas cost half the price of mangoes\n    result = banana_price_per_kg\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In a grocery store, bananas are sold for half the price of mangoes. If a kg of mangoes costs $6, how much would a kg of banana cost?\n    \"\"\"\n    mango_price_per_kg = 6.0  # Cost of 1 kg of mangoes in dollars\n    banana_price_per_kg = mango_price_per_kg / 2.0  # Bananas cost half the price of mangoes\n    result = banana_price_per_kg\n    \n    return result",
    "result": 3.0
  },
  {
    "index": 19,
    "response": "**Reasoning:**\n1. The problem states there are 8 cows.\n2. The number of pigs is twice the number of cows: pigs = 2 × 8 = 16.\n3. The number of chickens is thrice the number of cows: chickens = 3 × 8 = 24.\n4. Total animals = cows + pigs + chickens = 8 + 16 + 24 = 48.\n5. Since the function must return a float, the integer total (48) is converted to 48.0.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A farm has cows, pigs, and chickens. If there are 8 cows, and the number of pigs is twice the number of cows, and the number of chickens is thrice the number of cows, how many animals are there in total?\n    \"\"\"\n    cows = 8\n    pigs = 2 * cows\n    chickens = 3 * cows\n    total_animals = cows + pigs + chickens\n    result = float(total_animals)\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A farm has cows, pigs, and chickens. If there are 8 cows, and the number of pigs is twice the number of cows, and the number of chickens is thrice the number of cows, how many animals are there in total?\n    \"\"\"\n    cows = 8\n    pigs = 2 * cows\n    chickens = 3 * cows\n    total_animals = cows + pigs + chickens\n    result = float(total_animals)\n    \n    return result",
    "result": 48.0
  },
  {
    "index": 20,
    "response": "**Reasoning:**\nIsaac wants to make two identical balls, each requiring 120 rubber bands. The total rubber bands needed is calculated as:\n- Total needed = 2 balls × 120 rubber bands/ball = 240 rubber bands.\n\nIsaac currently has 350 rubber bands. Since 350 is greater than 240, he already has more than enough rubber bands to make the two balls. Therefore, he does not need any additional rubber bands. The question asks for \"how many more\" he needs, so the answer is 0.\n\nThe calculation is:\n- Deficit = Total needed - Current amount = 240 - 350 = -110\n- Since a negative deficit means no additional rubber bands are needed, the result is 0.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Isaac has 350 rubber bands and wants to make two identical balls. If each ball requires 120 rubber bands, how many more rubber bands does Isaac need?\n    \"\"\"\n    current_rubber_bands = 350\n    balls_to_make = 2\n    rubber_bands_per_ball = 120\n    \n    total_rubber_bands_needed = balls_to_make * rubber_bands_per_ball\n    deficit = total_rubber_bands_needed - current_rubber_bands\n    result = max(0, deficit)  # Only consider positive deficit; negative means no additional needed\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Isaac has 350 rubber bands and wants to make two identical balls. If each ball requires 120 rubber bands, how many more rubber bands does Isaac need?\n    \"\"\"\n    current_rubber_bands = 350\n    balls_to_make = 2\n    rubber_bands_per_ball = 120\n    \n    total_rubber_bands_needed = balls_to_make * rubber_bands_per_ball\n    deficit = total_rubber_bands_needed - current_rubber_bands\n    result = max(0, deficit)  # Only consider positive deficit; negative means no additional needed\n    \n    return result",
    "result": 0
  },
  {
    "index": 21,
    "response": "**Reasoning:**\n1. Olivia buys 20 flower bulbs at $2 each, so the total cost for all bulbs is 20 * 2 = $40.\n2. She donates 10 bulbs to her friend, meaning she keeps 20 - 10 = 10 bulbs for her own garden.\n3. The cost for the bulbs she keeps is based on the per-bulb price. Since each bulb costs $2, the cost for her own garden bulbs is 10 * 2 = $20.\n4. The donation does not change the per-bulb cost; the spending is determined by the bulbs she retains for herself.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Olivia wants to buy 20 flower bulbs at $2 each. If she donates 10 of them to her friend's garden, how much does she spend on bulbs for her own garden?\n    \"\"\"\n    total_bulbs = 20\n    cost_per_bulb = 2\n    donated_bulbs = 10\n    own_bulbs = total_bulbs - donated_bulbs\n    spent_on_own_garden = own_bulbs * cost_per_bulb\n\n    return float(spent_on_own_garden)\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Olivia wants to buy 20 flower bulbs at $2 each. If she donates 10 of them to her friend's garden, how much does she spend on bulbs for her own garden?\n    \"\"\"\n    total_bulbs = 20\n    cost_per_bulb = 2\n    donated_bulbs = 10\n    own_bulbs = total_bulbs - donated_bulbs\n    spent_on_own_garden = own_bulbs * cost_per_bulb\n\n    return float(spent_on_own_garden)",
    "result": 20.0
  },
  {
    "index": 22,
    "response": "**Reasoning:**\nThe problem describes a sequence of volume adjustments, but the final step explicitly sets the volume to half the initial level, regardless of intermediate changes. Initially, the volume is set to 7. The phrase \"turned down the volume to half the initial level\" means the final volume is exactly half of the initial setting. Therefore, intermediate steps (increasing to twice the initial and then increasing by three times the initial) do not affect the final volume, as the last action overrides them by setting the volume directly to 3.5 (which is 7 divided by 2).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Tyler tried to decrease noise levels by changing his stereo volume, but the noise levels fluctuated. At first, he set the volume to 3 out of 10. Then, he increased the volume to twice the level that he initially set. Then, he increased it three times more than the initial level. But finally, he turned down the volume to half the initial level. If he initially set the volume to 7 out of 10, what was the final volume?\n    \"\"\"\n    initial_volume = 7\n    # The final step sets the volume to half the initial level\n    final_volume = initial_volume / 2.0\n    return final_volume\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Tyler tried to decrease noise levels by changing his stereo volume, but the noise levels fluctuated. At first, he set the volume to 3 out of 10. Then, he increased the volume to twice the level that he initially set. Then, he increased it three times more than the initial level. But finally, he turned down the volume to half the initial level. If he initially set the volume to 7 out of 10, what was the final volume?\n    \"\"\"\n    initial_volume = 7\n    # The final step sets the volume to half the initial level\n    final_volume = initial_volume / 2.0\n    return final_volume",
    "result": 3.5
  },
  {
    "index": 23,
    "response": "**Reasoning for Lisa's Walk Problem:**\n- Lisa walks 1.5 miles on day 1.\n- Each subsequent day, she adds 0.5 miles, forming an arithmetic sequence: 1.5, 2.0, 2.5, ...\n- The distance on day \\(n\\) is \\(1.5 + (n-1) \\times 0.5\\).\n- Solve \\(1.5 + (n-1) \\times 0.5 > 4\\):\n  - Subtract 1.5: \\((n-1) \\times 0.5 > 2.5\\)\n  - Divide by 0.5: \\(n-1 > 5\\)\n  - Add 1: \\(n > 6\\)\n- Since \\(n\\) must be an integer, the first day exceeding 4 miles is day 7.\n\n**Reasoning for Ava's Car Repair Problem:**\n- Labor cost: $900\n- Parts cost: $300\n- Total cost: \\(900 + 300 = \\$1200\\)\n- Insurance covers 70%, so Ava pays \\(100\\% - 70\\% = 30\\%\\)\n- Out-of-pocket cost: \\(30\\% \\times 1200 = 0.3 \\times 1200 = \\$360\\)\n\n**Solution:**\n```python\ndef lisa_walk_day() -> int:\n    \"\"\"\n    Lisa goes for a walk every day. On the first day, she walks for 1.5 miles. Every subsequent day, she adds 0.5 miles to her walk. On what day will Lisa walk more than 4 miles?\n    \"\"\"\n    start_distance = 1.5\n    daily_increment = 0.5\n    target_distance = 4.0\n    \n    # Calculate days using arithmetic progression formula: distance = start + (day - 1) * increment\n    day = 1\n    while True:\n        distance = start_distance + (day - 1) * daily_increment\n        if distance > target_distance:\n            break\n        day += 1\n    \n    return day\n\ndef ava_out_of_pocket_cost() -> float:\n    \"\"\"\n    Ava's car needs repairs after being in an accident. The mechanic charges $900 for labor and $300 for parts. Insurance covers 70% of the total cost. How much does Ava have to pay out of pocket?\n    \"\"\"\n    labor_cost = 900\n    parts_cost = 300\n    insurance_coverage = 0.70  # 70%\n    \n    total_cost = labor_cost + parts_cost\n    ava_percentage = 1 - insurance_coverage\n    ava_cost = total_cost * ava_percentage\n    \n    return ava_cost\n```",
    "code": "def lisa_walk_day() -> int:\n    \"\"\"\n    Lisa goes for a walk every day. On the first day, she walks for 1.5 miles. Every subsequent day, she adds 0.5 miles to her walk. On what day will Lisa walk more than 4 miles?\n    \"\"\"\n    start_distance = 1.5\n    daily_increment = 0.5\n    target_distance = 4.0\n    \n    # Calculate days using arithmetic progression formula: distance = start + (day - 1) * increment\n    day = 1\n    while True:\n        distance = start_distance + (day - 1) * daily_increment\n        if distance > target_distance:\n            break\n        day += 1\n    \n    return day\n\ndef ava_out_of_pocket_cost() -> float:\n    \"\"\"\n    Ava's car needs repairs after being in an accident. The mechanic charges $900 for labor and $300 for parts. Insurance covers 70% of the total cost. How much does Ava have to pay out of pocket?\n    \"\"\"\n    labor_cost = 900\n    parts_cost = 300\n    insurance_coverage = 0.70  # 70%\n    \n    total_cost = labor_cost + parts_cost\n    ava_percentage = 1 - insurance_coverage\n    ava_cost = total_cost * ava_percentage\n    \n    return ava_cost",
    "result": "Success"
  },
  {
    "index": 24,
    "response": "**Reasoning:**\n- The first bracelet took 15 minutes.\n- The second bracelet took \"2.5 times longer\" than the first. This means its duration is calculated as 15 minutes multiplied by 2.5.\n- Calculate the second bracelet's duration: 15 × 2.5 = 37.5 minutes.\n- Total time is the sum of both bracelets: 15 + 37.5 = 52.5 minutes.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Student: - Zoe likes to make bracelets on her desk. She made a bracelet that took 15 minutes, and then made another bracelet that took 2.5 times longer. How many total minutes did she spend making bracelets?\n    \"\"\"\n    first_bracelet_time = 15.0\n    second_bracelet_time_multiplier = 2.5\n    second_bracelet_time = first_bracelet_time * second_bracelet_time_multiplier\n    total_time = first_bracelet_time + second_bracelet_time\n    result = total_time\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Student: - Zoe likes to make bracelets on her desk. She made a bracelet that took 15 minutes, and then made another bracelet that took 2.5 times longer. How many total minutes did she spend making bracelets?\n    \"\"\"\n    first_bracelet_time = 15.0\n    second_bracelet_time_multiplier = 2.5\n    second_bracelet_time = first_bracelet_time * second_bracelet_time_multiplier\n    total_time = first_bracelet_time + second_bracelet_time\n    result = total_time\n\n    return result",
    "result": 52.5
  },
  {
    "index": 25,
    "response": "**Reasoning:**\n1. Let the number of girls be \\( g \\).\n2. Since there are 20 more boys than girls, the number of boys is \\( g + 20 \\).\n3. The total number of players is the sum of girls and boys: \\( g + (g + 20) = 72 \\).\n4. Simplify the equation: \\( 2g + 20 = 72 \\).\n5. Subtract 20 from both sides: \\( 2g = 52 \\).\n6. Divide both sides by 2: \\( g = 26 \\).\n7. Thus, there are 26 girls in the team.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In a football team, there are 72 players. If there are 20 more boys than girls, how many girls are in the team?\n    \"\"\"\n    total_players = 72\n    boys_more_than_girls = 20\n    \n    # Let girls = g, then boys = g + boys_more_than_girls\n    # Total: g + (g + boys_more_than_girls) = total_players\n    girls = (total_players - boys_more_than_girls) / 2\n    \n    result = girls  # This will be 26.0\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In a football team, there are 72 players. If there are 20 more boys than girls, how many girls are in the team?\n    \"\"\"\n    total_players = 72\n    boys_more_than_girls = 20\n    \n    # Let girls = g, then boys = g + boys_more_than_girls\n    # Total: g + (g + boys_more_than_girls) = total_players\n    girls = (total_players - boys_more_than_girls) / 2\n    \n    result = girls  # This will be 26.0\n    return result",
    "result": 26.0
  },
  {
    "index": 26,
    "response": "**Reasoning:**\n- Jed starts with 6 pens.\n- He gives away 3 pens to his siblings.\n- The pens he has left are the initial amount minus what he gave away: 6 - 3.\n- Calculating this gives 3 pens remaining.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jed buys 6 pens, give 3 to his siblings, and keeps the rest how many pens does he have left?\n    \"\"\"\n    pens_bought = 6\n    pens_given_to_siblings = 3\n    pens_left = pens_bought - pens_given_to_siblings\n    \n    result = float(pens_left)\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jed buys 6 pens, give 3 to his siblings, and keeps the rest how many pens does he have left?\n    \"\"\"\n    pens_bought = 6\n    pens_given_to_siblings = 3\n    pens_left = pens_bought - pens_given_to_siblings\n    \n    result = float(pens_left)\n    return result",
    "result": 3.0
  },
  {
    "index": 27,
    "response": "**Reasoning:**\nThe problem states that you start with 10 dollars and spend 5 dollars on a toy. To find the remaining money, subtract the toy's cost from the initial amount: 10 - 5. This results in 5 dollars left. The solution requires a Python function that returns this result as a float.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If you have 10 dollars in your pocket and you buy a toy for 5 dollars, how much money do you have left?\n    \"\"\"\n    initial_money = 10.0\n    toy_cost = 5.0\n    money_left = initial_money - toy_cost\n    result = money_left\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If you have 10 dollars in your pocket and you buy a toy for 5 dollars, how much money do you have left?\n    \"\"\"\n    initial_money = 10.0\n    toy_cost = 5.0\n    money_left = initial_money - toy_cost\n    result = money_left\n    return result",
    "result": 5.0
  },
  {
    "index": 28,
    "response": "**Reasoning:**\nThe baker can make 6 cakes per hour or 10 pies per hour. To find the total time for 15 cakes and 30 pies:\n1. Calculate the time for cakes: 15 cakes ÷ 6 cakes/hour = 2.5 hours.\n2. Calculate the time for pies: 30 pies ÷ 10 pies/hour = 3 hours.\n3. Since the baker works sequentially (as implied by \"or\"), add the times: 2.5 hours + 3 hours = 5.5 hours.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If a baker can make 6 cakes per hour or 10 pies per hour, how many hours will it take her to bake 15 cakes and 30 pies?\n    \"\"\"\n    cakes_needed = 15\n    pies_needed = 30\n    cakes_per_hour = 6\n    pies_per_hour = 10\n    \n    hours_for_cakes = cakes_needed / cakes_per_hour\n    hours_for_pies = pies_needed / pies_per_hour\n    total_hours = hours_for_cakes + hours_for_pies\n    \n    return total_hours\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If a baker can make 6 cakes per hour or 10 pies per hour, how many hours will it take her to bake 15 cakes and 30 pies?\n    \"\"\"\n    cakes_needed = 15\n    pies_needed = 30\n    cakes_per_hour = 6\n    pies_per_hour = 10\n    \n    hours_for_cakes = cakes_needed / cakes_per_hour\n    hours_for_pies = pies_needed / pies_per_hour\n    total_hours = hours_for_cakes + hours_for_pies\n    \n    return total_hours",
    "result": 5.5
  },
  {
    "index": 29,
    "response": "**Reasoning:**\nTo solve this problem, we need to calculate Laura's total weekly earnings from tutoring. Here's the step-by-step reasoning:\n\n1. **Identify the hourly rate:** Laura earns $25 per hour.\n2. **Calculate weekday earnings:**\n   - She works 4 hours per weekday.\n   - There are 5 weekdays.\n   - Total weekday hours = 4 hours/day × 5 days = 20 hours.\n   - Earnings from weekdays = 20 hours × $25/hour = $500.\n3. **Calculate weekend earnings:**\n   - She works 6 hours per weekend day.\n   - There are 2 weekend days (since \"2 weekends\" implies 2 days, typically Saturday and Sunday).\n   - Total weekend hours = 6 hours/day × 2 days = 12 hours.\n   - Earnings from weekends = 12 hours × $25/hour = $300.\n4. **Calculate total weekly earnings:**\n   - Total earnings = Weekday earnings + Weekend earnings = $500 + $300 = $800.\n\nAlternatively, we can compute it using total hours:\n- Total weekly hours = Weekday hours + Weekend hours = 20 hours + 12 hours = 32 hours.\n- Total earnings = 32 hours × $25/hour = $800.\n\nBoth approaches confirm the result of $800.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Laura is a teacher who earns $25 per hour for tutoring students online. She works for 4 hours on weekdays and 6 hours on weekends. How much does Laura earn in a week, assuming there are 5 weekdays and 2 weekends?\n    \"\"\"\n    hourly_rate = 25.0\n    weekday_hours_per_day = 4\n    weekend_hours_per_day = 6\n    num_weekdays = 5\n    num_weekends = 2  # Represents 2 weekend days (e.g., Saturday and Sunday)\n    \n    total_weekday_hours = weekday_hours_per_day * num_weekdays\n    total_weekend_hours = weekend_hours_per_day * num_weekends\n    total_weekly_hours = total_weekday_hours + total_weekend_hours\n    total_earnings = total_weekly_hours * hourly_rate\n    \n    return total_earnings\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Laura is a teacher who earns $25 per hour for tutoring students online. She works for 4 hours on weekdays and 6 hours on weekends. How much does Laura earn in a week, assuming there are 5 weekdays and 2 weekends?\n    \"\"\"\n    hourly_rate = 25.0\n    weekday_hours_per_day = 4\n    weekend_hours_per_day = 6\n    num_weekdays = 5\n    num_weekends = 2  # Represents 2 weekend days (e.g., Saturday and Sunday)\n    \n    total_weekday_hours = weekday_hours_per_day * num_weekdays\n    total_weekend_hours = weekend_hours_per_day * num_weekends\n    total_weekly_hours = total_weekday_hours + total_weekend_hours\n    total_earnings = total_weekly_hours * hourly_rate\n    \n    return total_earnings",
    "result": 800.0
  },
  {
    "index": 30,
    "response": "**Reasoning:**\nThe bathroom floor is square-shaped and measures 7 feet by 7 feet, so its area is \\(7 \\times 7 = 49\\) square feet. Each tile is 1 foot by 1 foot, covering an area of 1 square foot. To cover the entire floor, the number of tiles needed is equal to the total floor area divided by the area covered by one tile: \\(49 \\, \\text{sq ft} \\div 1 \\, \\text{sq ft/tile} = 49\\) tiles. The cost per tile is irrelevant since the question only asks for the number of tiles required.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A homeowner wants to re-tile their bathroom floor. The bathroom is square-shaped and measures 7 feet by 7 feet. Tiles cost $0.50 each, and they measure 1 foot by 1 foot. How many tiles will the homeowner need to complete the job?\n    \"\"\"\n    length_ft = 7\n    width_ft = 7\n    tile_area_sq_ft = 1  # Each tile covers 1 sq ft\n    \n    # Calculate total floor area\n    floor_area_sq_ft = length_ft * width_ft\n    \n    # Calculate number of tiles needed (tiles cover exactly without waste)\n    num_tiles = floor_area_sq_ft / tile_area_sq_ft\n    \n    result = num_tiles\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A homeowner wants to re-tile their bathroom floor. The bathroom is square-shaped and measures 7 feet by 7 feet. Tiles cost $0.50 each, and they measure 1 foot by 1 foot. How many tiles will the homeowner need to complete the job?\n    \"\"\"\n    length_ft = 7\n    width_ft = 7\n    tile_area_sq_ft = 1  # Each tile covers 1 sq ft\n    \n    # Calculate total floor area\n    floor_area_sq_ft = length_ft * width_ft\n    \n    # Calculate number of tiles needed (tiles cover exactly without waste)\n    num_tiles = floor_area_sq_ft / tile_area_sq_ft\n    \n    result = num_tiles\n    \n    return result",
    "result": 49.0
  },
  {
    "index": 31,
    "response": "**Reasoning:**\n- The time to bake one batch of cookies is 15 minutes.\n- The total available time is 2 hours and 45 minutes.\n- Convert the total time to minutes: 2 hours = 2 × 60 = 120 minutes, plus 45 minutes gives 120 + 45 = 165 minutes.\n- To find the number of batches that can be baked, divide the total time by the time per batch: 165 minutes ÷ 15 minutes/batch = 11 batches.\n- Since baking is sequential and the time divides evenly, the answer is 11 whole batches.\n\n**Solution:**\n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    If it takes 15 minutes to bake one batch of cookies, how many batches can be baked in 2 hours and 45 minutes?\n    \"\"\"\n    minutes_per_batch = 15\n    hours = 2\n    additional_minutes = 45\n    \n    total_minutes = hours * 60 + additional_minutes\n    batches = total_minutes // minutes_per_batch\n    \n    return batches\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    If it takes 15 minutes to bake one batch of cookies, how many batches can be baked in 2 hours and 45 minutes?\n    \"\"\"\n    minutes_per_batch = 15\n    hours = 2\n    additional_minutes = 45\n    \n    total_minutes = hours * 60 + additional_minutes\n    batches = total_minutes // minutes_per_batch\n    \n    return batches",
    "result": 11
  },
  {
    "index": 32,
    "response": "**Reasoning:**\nThe problem states that the store sells 3 times as many notebooks as pens. Given that they sold 6 pens, we need to determine how many notebooks were sold. Since notebooks are sold at a rate of 3 times the number of pens, we multiply the number of pens (6) by 3 to get the number of notebooks:\n- Notebooks sold = 3 × 6 = 18\n\nThis straightforward calculation uses the given ratio and pen sales data to find the solution.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A store sells 3 times as many notebooks as pens. If they sell 6 pens, how many notebooks did they sell?\n    \"\"\"\n    pens_sold = 6\n    notebooks_sold = 3 * pens_sold\n    result = notebooks_sold\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A store sells 3 times as many notebooks as pens. If they sell 6 pens, how many notebooks did they sell?\n    \"\"\"\n    pens_sold = 6\n    notebooks_sold = 3 * pens_sold\n    result = notebooks_sold\n    \n    return result",
    "result": 18
  },
  {
    "index": 33,
    "response": "**Reasoning:**\nThe problem states that the company earns $5000 from selling 50 units and $9000 from selling 75 units. The earnings (revenue) can be modeled as a linear function of the number of units sold: \\( \\text{Revenue} = \\text{price per unit} \\times \\text{quantity} + \\text{fixed adjustment} \\). \n\nHowever, the revenue values are not proportional to the quantities (since \\( \\frac{5000}{50} = 100 \\) and \\( \\frac{9000}{75} = 120 \\)), indicating an additional factor. The difference in revenue for the additional 25 units (from 50 to 75 units) is \\( 9000 - 5000 = 4000 \\). This gives a marginal revenue of \\( \\frac{4000}{25} = 160 \\) per unit for the additional units. \n\nAssuming the price per unit is constant, this marginal revenue equals the price per unit. Verification shows:\n- At 50 units: \\( 50 \\times 160 = 8000 \\), but the actual revenue is $5000, suggesting a fixed discount of \\( 8000 - 5000 = 3000 \\).\n- At 75 units: \\( 75 \\times 160 = 12000 \\), minus the $3000 discount equals $9000, matching the given revenue.\n\nThus, the price per unit is $160, with a fixed discount applied to the total. The problem asks for the price of one unit, which is $160.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A company earns $5000 selling 50 units of a product and $9000 selling 75 units of the same product. What is the price of one unit of the product?\n    \"\"\"\n    revenue_50 = 5000\n    revenue_75 = 9000\n    units_50 = 50\n    units_75 = 75\n    \n    # Calculate the change in revenue and the change in units sold\n    delta_revenue = revenue_75 - revenue_50\n    delta_units = units_75 - units_50\n    \n    # The price per unit is the marginal revenue (change in revenue per unit)\n    price_per_unit = delta_revenue / delta_units\n    \n    return price_per_unit\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A company earns $5000 selling 50 units of a product and $9000 selling 75 units of the same product. What is the price of one unit of the product?\n    \"\"\"\n    revenue_50 = 5000\n    revenue_75 = 9000\n    units_50 = 50\n    units_75 = 75\n    \n    # Calculate the change in revenue and the change in units sold\n    delta_revenue = revenue_75 - revenue_50\n    delta_units = units_75 - units_50\n    \n    # The price per unit is the marginal revenue (change in revenue per unit)\n    price_per_unit = delta_revenue / delta_units\n    \n    return price_per_unit",
    "result": 160.0
  },
  {
    "index": 34,
    "response": "**Reasoning:**\n1. Jake's original ticket price is $25 with a 20% discount.\n   - Discount amount for Jake: 20% of $25 = 0.20 * 25 = $5\n   - Jake pays: $25 - $5 = $20\n2. Tyler's original ticket price is $20 with a 15% discount.\n   - Discount amount for Tyler: 15% of $20 = 0.15 * 20 = $3\n   - Tyler pays: $20 - $3 = $17\n3. Total amount paid after discounts: $20 (Jake) + $17 (Tyler) = $37\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"Jake and Tyler went to a baseball game. Jake's ticket was $25 and Tyler's ticket was $20. The stadium gave Jake a 20% discount and Tyler a 15% discount. How much did Jake and Tyler pay in total after the discounts?\"\"\"\n    jake_original = 25\n    tyler_original = 20\n    jake_discount_rate = 0.20\n    tyler_discount_rate = 0.15\n    \n    jake_pays = jake_original * (1 - jake_discount_rate)\n    tyler_pays = tyler_original * (1 - tyler_discount_rate)\n    total_paid = jake_pays + tyler_pays\n    \n    return total_paid\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"Jake and Tyler went to a baseball game. Jake's ticket was $25 and Tyler's ticket was $20. The stadium gave Jake a 20% discount and Tyler a 15% discount. How much did Jake and Tyler pay in total after the discounts?\"\"\"\n    jake_original = 25\n    tyler_original = 20\n    jake_discount_rate = 0.20\n    tyler_discount_rate = 0.15\n    \n    jake_pays = jake_original * (1 - jake_discount_rate)\n    tyler_pays = tyler_original * (1 - tyler_discount_rate)\n    total_paid = jake_pays + tyler_pays\n    \n    return total_paid",
    "result": 37.0
  },
  {
    "index": 35,
    "response": "**Reasoning:**\nThe problem consists of two separate questions. The first is about Sophia buying bouquets, and the second is about Sarah's earnings. However, the function signature specifies a return type of `float`, and the second question involves money (a float), while the first involves bouquets (an integer). Given the return type constraint, the solution focuses on Sarah's earnings from the bakery.\n\nFor Sarah's earnings:\n- She earns $12 per hour for the first 8 hours.\n- For overtime (hours beyond 8), she earns 25% more, which is $12 * 1.25 = $15 per hour.\n- She works a 16-hour shift, so:\n  - Regular hours: 8 hours * $12/hour = $96\n  - Overtime hours: 8 hours * $15/hour = $120\n- Total earnings: $96 + $120 = $216\n\nThe first part about Sophia is acknowledged in the docstring but is not used in the calculation since it does not align with the float return type.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sophia loves going to the flower shop every Friday and buys 1 bouquet for herself and 2 for her grandma. Last Friday she picked up an additional 12 roses as a surprise for her best friend. How many bouquets did Sophia end up buying for the month? Sarah works at a bakery and earns $12 per hour for the first 8 hours. For the rest of the day, she earns 25% more per hour. If she works a 16-hour shift, how much money does she make in total?\n    \"\"\"\n    regular_rate = 12.0  # dollars per hour for first 8 hours\n    overtime_rate = regular_rate * 1.25  # 25% more for overtime\n    regular_hours = 8\n    overtime_hours = 16 - regular_hours  # 16 total hours - 8 regular hours\n    \n    regular_pay = regular_hours * regular_rate\n    overtime_pay = overtime_hours * overtime_rate\n    total_pay = regular_pay + overtime_pay\n    \n    result = total_pay\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sophia loves going to the flower shop every Friday and buys 1 bouquet for herself and 2 for her grandma. Last Friday she picked up an additional 12 roses as a surprise for her best friend. How many bouquets did Sophia end up buying for the month? Sarah works at a bakery and earns $12 per hour for the first 8 hours. For the rest of the day, she earns 25% more per hour. If she works a 16-hour shift, how much money does she make in total?\n    \"\"\"\n    regular_rate = 12.0  # dollars per hour for first 8 hours\n    overtime_rate = regular_rate * 1.25  # 25% more for overtime\n    regular_hours = 8\n    overtime_hours = 16 - regular_hours  # 16 total hours - 8 regular hours\n    \n    regular_pay = regular_hours * regular_rate\n    overtime_pay = overtime_hours * overtime_rate\n    total_pay = regular_pay + overtime_pay\n    \n    result = total_pay\n    return result",
    "result": 216.0
  },
  {
    "index": 36,
    "response": "**Reasoning:**\n1. Harry has 8 books.\n2. Linda has 3 times as many books as Harry, so Linda has 3 * 8 = 24 books.\n3. John has 7 fewer books than Linda, so John has 24 - 7 = 17 books.\n4. Therefore, John has 17 books.\n\n**Solution:**\n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Linda has 3 times as many books as Harry. John has 7 fewer books than Linda. If Harry has 8 books, how many books does John have?\n    \"\"\"\n    # Assign known values\n    harry_books = 8\n    \n    # Calculate Linda's books: 3 times Harry's books\n    linda_books = 3 * harry_books\n    \n    # Calculate John's books: Linda's books minus 7\n    john_books = linda_books - 7\n    \n    result = john_books\n    \n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Linda has 3 times as many books as Harry. John has 7 fewer books than Linda. If Harry has 8 books, how many books does John have?\n    \"\"\"\n    # Assign known values\n    harry_books = 8\n    \n    # Calculate Linda's books: 3 times Harry's books\n    linda_books = 3 * harry_books\n    \n    # Calculate John's books: Linda's books minus 7\n    john_books = linda_books - 7\n    \n    result = john_books\n    \n    return result",
    "result": 17
  },
  {
    "index": 37,
    "response": "**Reasoning:**\nTo find the average of the test scores (89, 95, 77, 82):\n1. Add all the scores:  \n   - 89 + 95 = 184  \n   - 184 + 77 = 261  \n   - 261 + 82 = 343  \n2. Divide the total (343) by the number of scores (4):  \n   - 343 ÷ 4 = 85.75  \nThe average score is 85.75.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A student's test scores are 89, 95, 77, and 82. What is the average score?\n    \"\"\"\n    score1 = 89\n    score2 = 95\n    score3 = 77\n    score4 = 82\n    \n    total_score = score1 + score2 + score3 + score4\n    number_of_scores = 4\n    average_score = total_score / number_of_scores\n    result = average_score\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A student's test scores are 89, 95, 77, and 82. What is the average score?\n    \"\"\"\n    score1 = 89\n    score2 = 95\n    score3 = 77\n    score4 = 82\n    \n    total_score = score1 + score2 + score3 + score4\n    number_of_scores = 4\n    average_score = total_score / number_of_scores\n    result = average_score\n    \n    return result",
    "result": 85.75
  },
  {
    "index": 38,
    "response": "**Reasoning:**\n1. **Identify cake weights:**\n   - First cake: 2.5 kg\n   - Second cake: 75% of the first cake → 0.75 × 2.5 kg = 1.875 kg\n   - Third cake: 500 grams more than the first cake. Since 500 grams = 0.5 kg, this is 2.5 kg + 0.5 kg = 3.0 kg\n\n2. **Calculate total weight:**\n   - Total = 2.5 kg + 1.875 kg + 3.0 kg = 7.375 kg\n\n3. **Compute average weight:**\n   - Average = Total weight / Number of cakes = 7.375 kg / 3 = 2.458333... kg\n\nAll weights are in kilograms, and the calculations use exact decimal values (2.5, 1.875, 3.0) to ensure precision. The average is derived directly from these values without rounding.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Maya loves to bake cakes. She baked a cake that weighed 2.5 kilograms. Then she baked another cake that weighed 75% of the first cake. She finished by baking a cake that weighed 500 grams more than the first cake. What was the average weight of the cakes that Maya baked?\n    \"\"\"\n    first_cake_kg = 2.5\n    second_cake_kg = 0.75 * first_cake_kg  # 75% of the first cake\n    third_cake_kg = first_cake_kg + 0.5    # 500 grams = 0.5 kg added to the first cake\n    \n    total_weight_kg = first_cake_kg + second_cake_kg + third_cake_kg\n    average_weight_kg = total_weight_kg / 3\n    \n    return average_weight_kg\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Maya loves to bake cakes. She baked a cake that weighed 2.5 kilograms. Then she baked another cake that weighed 75% of the first cake. She finished by baking a cake that weighed 500 grams more than the first cake. What was the average weight of the cakes that Maya baked?\n    \"\"\"\n    first_cake_kg = 2.5\n    second_cake_kg = 0.75 * first_cake_kg  # 75% of the first cake\n    third_cake_kg = first_cake_kg + 0.5    # 500 grams = 0.5 kg added to the first cake\n    \n    total_weight_kg = first_cake_kg + second_cake_kg + third_cake_kg\n    average_weight_kg = total_weight_kg / 3\n    \n    return average_weight_kg",
    "result": 2.4583333333333335
  },
  {
    "index": 39,
    "response": "**Reasoning:**\nThe bike costs $300, and Janet saves $12 per week. To find out how many weeks she needs to save enough, we divide the total cost by her weekly allowance: 300 / 12 = 25. Since 25 weeks will give her exactly $300 (25 * 12 = 300), she will have enough money after 25 weeks. The result is an integer, but the function is specified to return a float, so we return 25.0.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Janet is trying to save up for a new bike which costs $300. She gets $12 per week for her allowance, and she is trying to save up all of her allowance without spending any of it. Assuming she doesn't spend any of her allowance, how many weeks will it take her to save up enough for the new bike?\n    \"\"\"\n    total_cost = 300\n    weekly_allowance = 12\n    weeks_needed = total_cost / weekly_allowance\n    return weeks_needed\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Janet is trying to save up for a new bike which costs $300. She gets $12 per week for her allowance, and she is trying to save up all of her allowance without spending any of it. Assuming she doesn't spend any of her allowance, how many weeks will it take her to save up enough for the new bike?\n    \"\"\"\n    total_cost = 300\n    weekly_allowance = 12\n    weeks_needed = total_cost / weekly_allowance\n    return weeks_needed",
    "result": 25.0
  },
  {
    "index": 40,
    "response": "**Reasoning:**\n- Marquise has 6 marbles, each worth 20 cents. The total value of the marbles is calculated as 6 marbles × 20 cents/marble = 120 cents.\n- Marquise also has 7 glass balls, each worth 50 cents. The total value of the glass balls is 7 glass balls × 50 cents/glass ball = 350 cents.\n- The total money is the sum of these values: 120 cents + 350 cents = 470 cents.\n- Since the problem asks for the total money and the inputs are in cents, the result remains in cents. The function returns this as a float (470.0).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Marquise has 6 marbles and 7 glass balls. If each marble is worth 20 cents and each glass ball is worth 50 cents, how much money does Marquise have in total?\n    \"\"\"\n    num_marbles = 6\n    value_per_marble_cents = 20\n    num_glass_balls = 7\n    value_per_glass_ball_cents = 50\n    \n    total_marble_value = num_marbles * value_per_marble_cents\n    total_glass_ball_value = num_glass_balls * value_per_glass_ball_cents\n    total_money_cents = total_marble_value + total_glass_ball_value\n    \n    result = float(total_money_cents)\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Marquise has 6 marbles and 7 glass balls. If each marble is worth 20 cents and each glass ball is worth 50 cents, how much money does Marquise have in total?\n    \"\"\"\n    num_marbles = 6\n    value_per_marble_cents = 20\n    num_glass_balls = 7\n    value_per_glass_ball_cents = 50\n    \n    total_marble_value = num_marbles * value_per_marble_cents\n    total_glass_ball_value = num_glass_balls * value_per_glass_ball_cents\n    total_money_cents = total_marble_value + total_glass_ball_value\n    \n    result = float(total_money_cents)\n    return result",
    "result": 470.0
  },
  {
    "index": 41,
    "response": "**Reasoning:**\n1. Laura has 30 markers.\n2. Jasmine has 40% more markers than Laura:\n   - 40% of 30 = 0.4 × 30 = 12\n   - Jasmine's markers = 30 + 12 = 42\n3. Michael has 25 fewer markers than Jasmine:\n   - Michael's markers = 42 - 25 = 17\n4. Total markers = Laura + Jasmine + Michael = 30 + 42 + 17 = 89\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Laura has 30 markers. Jasmine has 40% more markers than Laura. Michael has 25 fewer markers than Jasmine. How many markers do they have altogether?\n    \"\"\"\n    laura_markers = 30\n    jasmine_markers = laura_markers + (0.4 * laura_markers)  # 40% more than Laura\n    michael_markers = jasmine_markers - 25                   # 25 fewer than Jasmine\n    total_markers = laura_markers + jasmine_markers + michael_markers\n    result = total_markers\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Laura has 30 markers. Jasmine has 40% more markers than Laura. Michael has 25 fewer markers than Jasmine. How many markers do they have altogether?\n    \"\"\"\n    laura_markers = 30\n    jasmine_markers = laura_markers + (0.4 * laura_markers)  # 40% more than Laura\n    michael_markers = jasmine_markers - 25                   # 25 fewer than Jasmine\n    total_markers = laura_markers + jasmine_markers + michael_markers\n    result = total_markers\n\n    return result",
    "result": 89.0
  },
  {
    "index": 42,
    "response": "**Reasoning:**\nTo find the total time taken for the entire journey, we need to calculate the time for each segment of the trip and sum them. The time for each segment is found using the formula: time = distance / speed.\n\n1. **First segment:**  \n   Distance = 50 km, Speed = 60 km/h  \n   Time = 50 km / 60 km/h = 5/6 hours ≈ 0.8333 hours\n   \n2. **Second segment:**  \n   Distance = 80 km, Speed = 40 km/h  \n   Time = 80 km / 40 km/h = 2 hours\n\n3. **Total time:**  \n   Total time = Time (first segment) + Time (second segment) = 5/6 + 2 = 17/6 hours ≈ 2.8333 hours\n\nThe exact value is \\( \\frac{17}{6} \\) hours, which we'll represent as a float in Python.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car travels 50 km at a speed of 60 km/h and then travels 80 km at a speed of 40 km/h. Find the total time taken for the entire journey.\n    \"\"\"\n    distance_first = 50  # km\n    speed_first = 60     # km/h\n    time_first = distance_first / speed_first  # hours\n    \n    distance_second = 80 # km\n    speed_second = 40    # km/h\n    time_second = distance_second / speed_second  # hours\n    \n    total_time = time_first + time_second  # hours\n    return total_time\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car travels 50 km at a speed of 60 km/h and then travels 80 km at a speed of 40 km/h. Find the total time taken for the entire journey.\n    \"\"\"\n    distance_first = 50  # km\n    speed_first = 60     # km/h\n    time_first = distance_first / speed_first  # hours\n    \n    distance_second = 80 # km\n    speed_second = 40    # km/h\n    time_second = distance_second / speed_second  # hours\n    \n    total_time = time_first + time_second  # hours\n    return total_time",
    "result": 2.8333333333333335
  },
  {
    "index": 43,
    "response": "**Reasoning:**\nThe problem states that Jackie trains for 4 hours a day and spends 1 hour on stretching and cool down. Since the stretching is part of her training, the 4 hours total training time includes both jogging and stretching. Therefore, the time spent jogging is 4 hours minus 1 hour, which equals 3 hours per day.\n\nShe has 5 different jogging routes. The question asks for the average time spent on one route per day. To find this, we divide the total jogging time (3 hours) by the number of routes (5), resulting in 0.6 hours per route on average.\n\nThe key assumptions are:\n- The 4 hours of training includes both jogging and stretching/cool down.\n- The jogging time is distributed equally among the 5 routes per day (or averaged over time such that each route gets an equal share).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jackie is training for a marathon for 4 hours a day and she has 5 different jogging routes. She spends an hour on stretching and cool down. On average, how much time does Jackie spend on one route?\n    \"\"\"\n    total_training_time = 4  # hours per day\n    stretching_time = 1      # hour per day\n    jogging_time = total_training_time - stretching_time  # time spent jogging\n    num_routes = 5           # number of jogging routes\n    time_per_route = jogging_time / num_routes  # average time per route\n\n    return time_per_route\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jackie is training for a marathon for 4 hours a day and she has 5 different jogging routes. She spends an hour on stretching and cool down. On average, how much time does Jackie spend on one route?\n    \"\"\"\n    total_training_time = 4  # hours per day\n    stretching_time = 1      # hour per day\n    jogging_time = total_training_time - stretching_time  # time spent jogging\n    num_routes = 5           # number of jogging routes\n    time_per_route = jogging_time / num_routes  # average time per route\n\n    return time_per_route",
    "result": 0.6
  },
  {
    "index": 44,
    "response": "**Reasoning:**\nThe problem requires calculating the volume of a rectangular room. The volume \\( V \\) of a rectangular prism is given by the formula:\n\\[ V = \\text{length} \\times \\text{width} \\times \\text{height} \\]\nGiven:\n- Length = 12 feet\n- Width = 9 feet\n- Height = 8 feet\n\nSubstitute the values into the formula:\n\\[ V = 12 \\times 9 \\times 8 \\]\n\nFirst, calculate \\( 12 \\times 9 = 108 \\).  \nThen, multiply the result by the height: \\( 108 \\times 8 = 864 \\).  \n\nThus, the volume of the room is 864 cubic feet.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A room has a length of 12 feet, a width of 9 feet, and a height of 8 feet. What is the volume of the room?\n    \"\"\"\n    length_feet = 12\n    width_feet = 9\n    height_feet = 8\n    volume_cubic_feet = length_feet * width_feet * height_feet\n    return volume_cubic_feet\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A room has a length of 12 feet, a width of 9 feet, and a height of 8 feet. What is the volume of the room?\n    \"\"\"\n    length_feet = 12\n    width_feet = 9\n    height_feet = 8\n    volume_cubic_feet = length_feet * width_feet * height_feet\n    return volume_cubic_feet",
    "result": 864
  },
  {
    "index": 45,
    "response": "**Reasoning:**\nThe problem states that John, Sarah, and James each purchase equally priced items. John has $6, Sarah has $3, and James has $9. Since the items are equally priced and each person can spend at most their available money, the maximum price per item that all three can afford is limited by the person with the least money. Sarah has only $3, so the price per item cannot exceed $3. If they each spend $3 (the maximum possible price that Sarah can afford), the total purchase cost is 3 items × $3 per item = $9. This is the maximum total cost under the constraints, and it uses all of Sarah's money while John and James spend within their means. The problem does not specify that they spend all their money, but given that the total cost is fixed by the constraint (each must be able to afford at least one item at the same price), $9 is the only consistent solution.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John, Sarah, and James are going to the store. John has $6, Sarah has $3 and James has $9. If they each purchase equally priced items, how much will the total purchase cost?\n    \"\"\"\n    john_money = 6\n    sarah_money = 3\n    james_money = 9\n    \n    # The price per item is limited by the person with the least money (Sarah)\n    price_per_item = sarah_money  # $3\n    \n    # Total purchase cost: 3 items at the same price\n    total_cost = 3 * price_per_item\n    \n    return total_cost\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John, Sarah, and James are going to the store. John has $6, Sarah has $3 and James has $9. If they each purchase equally priced items, how much will the total purchase cost?\n    \"\"\"\n    john_money = 6\n    sarah_money = 3\n    james_money = 9\n    \n    # The price per item is limited by the person with the least money (Sarah)\n    price_per_item = sarah_money  # $3\n    \n    # Total purchase cost: 3 items at the same price\n    total_cost = 3 * price_per_item\n    \n    return total_cost",
    "result": 9
  },
  {
    "index": 46,
    "response": "**Reasoning:**\nTo find the speed in miles per hour (mph), we start with the given distance of 1/4 mile and time of 10 minutes. Since speed is typically expressed in miles per hour, we need to convert the time from minutes to hours. There are 60 minutes in an hour, so 10 minutes is 10/60 hours, which simplifies to 1/6 hours. \n\nThe formula for speed is distance divided by time. Therefore, we calculate:\n- Speed = (1/4 mile) / (1/6 hour)\n- Dividing fractions: (1/4) × (6/1) = 6/4 = 3/2 = 1.5 mph\n\nAlternatively, we can reason that in 10 minutes the car travels 1/4 mile. Since one hour has 6 intervals of 10 minutes (60 ÷ 10 = 6), the car would travel 6 times the distance in an hour: (1/4) × 6 = 6/4 = 1.5 mph.\n\nBoth approaches confirm the speed is 1.5 mph.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car drives 1/4 of a mile in 10 minutes. What is the speed of the car in mph?\n    \"\"\"\n    distance_miles = 1 / 4\n    time_minutes = 10\n    minutes_per_hour = 60\n    time_hours = time_minutes / minutes_per_hour\n    speed_mph = distance_miles / time_hours\n    result = speed_mph\n\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car drives 1/4 of a mile in 10 minutes. What is the speed of the car in mph?\n    \"\"\"\n    distance_miles = 1 / 4\n    time_minutes = 10\n    minutes_per_hour = 60\n    time_hours = time_minutes / minutes_per_hour\n    speed_mph = distance_miles / time_hours\n    result = speed_mph\n\n    return result",
    "result": 1.5
  },
  {
    "index": 47,
    "response": "**Reasoning:**\n- Alex completes 5 puzzles each week.\n- The duration is three months. Since months vary in length, we assume a standard of 4 weeks per month, making the total weeks 3 * 4 = 12.\n- Total puzzles completed: 5 puzzles/week * 12 weeks = 60 puzzles.\n- Alex spills water on two-thirds of the puzzles, meaning two-thirds are ruined. Therefore, one-third remain.\n- Puzzles left: 60 * (1/3) = 20.\n\n**Solution:**\n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Alex likes to solve puzzles. He completes five puzzles each week for three months, but then accidentally spills water on two-thirds of them. How many puzzles does Alex have left?\n    \"\"\"\n    puzzles_per_week = 5\n    weeks_per_month = 4\n    months_count = 3\n    total_weeks = months_count * weeks_per_month\n    total_puzzles = puzzles_per_week * total_weeks\n    puzzles_left = total_puzzles // 3  # Since two-thirds are ruined, one-third remain\n\n    return puzzles_left\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Alex likes to solve puzzles. He completes five puzzles each week for three months, but then accidentally spills water on two-thirds of them. How many puzzles does Alex have left?\n    \"\"\"\n    puzzles_per_week = 5\n    weeks_per_month = 4\n    months_count = 3\n    total_weeks = months_count * weeks_per_month\n    total_puzzles = puzzles_per_week * total_weeks\n    puzzles_left = total_puzzles // 3  # Since two-thirds are ruined, one-third remain\n\n    return puzzles_left",
    "result": 20
  },
  {
    "index": 48,
    "response": "**Reasoning:**\nTo solve this problem, we need to determine how many months it will take for Emily to accumulate at least $5000 in savings, considering she earns $800 per month but spends $250 on a gym membership every four months. \n\n1. **Earnings and Expenses**: Emily earns $800 each month. Every four months (i.e., at the end of months 4, 8, 12, etc.), she spends $250 on a gym membership.\n2. **Net Savings Calculation**: For any month `t`, her total earnings are `800 * t`. The number of gym payments made by the end of month `t` is `t // 4` (using integer division, as each payment occurs every four months). Therefore, her net savings after `t` months is `800 * t - 250 * (t // 4)`.\n3. **Finding the Minimum `t`**: We need the smallest integer `t` such that her net savings is at least $5000. This can be found by incrementing `t` from 1 upwards, calculating net savings each time, and stopping when savings reach or exceed $5000.\n4. **Verification**: \n   - After 6 months: Earnings = 800 * 6 = $4800, gym payments = 6 // 4 = 1, net savings = 4800 - 250 = $4550 (",
    "code": "",
    "result": null
  },
  {
    "index": 49,
    "response": "**Reasoning:**\n1. The problem states that Charlie's salary is $2000 more than 5 times Scott's salary.\n2. It also provides that Charlie's salary is $12000.\n3. Let \\( S \\) represent Scott's salary. The relationship can be expressed as:  \n   \\( 12000 = 5 \\times S + 2000 \\).\n4. Subtract $2000 from both sides to isolate the term with \\( S \\):  \n   \\( 12000 - 2000 = 5 \\times S \\) → \\( 10000 = 5 \\times S \\).\n5. Divide both sides by 5 to solve for \\( S \\):  \n   \\( S = \\frac{10000}{5} = 2000 \\).\n6. Thus, Scott's salary is $2000.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If Charlie's salary is $2000 more than 5 times Scott's salary, and Charlie's salary is $12000, what is Scott's salary?\n    \"\"\"\n    charlie_salary = 12000.0\n    additional_amount = 2000.0\n    multiplier = 5.0\n\n    # Equation: charlie_salary = multiplier * scott_salary + additional_amount\n    # Rearranged: scott_salary = (charlie_salary - additional_amount) / multiplier\n    scott_salary = (charlie_salary - additional_amount) / multiplier\n\n    return scott_salary\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If Charlie's salary is $2000 more than 5 times Scott's salary, and Charlie's salary is $12000, what is Scott's salary?\n    \"\"\"\n    charlie_salary = 12000.0\n    additional_amount = 2000.0\n    multiplier = 5.0\n\n    # Equation: charlie_salary = multiplier * scott_salary + additional_amount\n    # Rearranged: scott_salary = (charlie_salary - additional_amount) / multiplier\n    scott_salary = (charlie_salary - additional_amount) / multiplier\n\n    return scott_salary",
    "result": 2000.0
  },
  {
    "index": 50,
    "response": "**Reasoning:**\nFrank has three different currencies: liras, dollars, and yen. To find the total amount in liras, we need to convert all amounts to liras using the given exchange rates.\n\n- Frank has 60 liras, which are already in liras.\n- He has 15 dollars. Since 1 dollar = 8 liras, the lira equivalent is \\( 15 \\times 8 = 120 \\) liras.\n- He has 900 yen. The exchange rate is 110 yen per dollar. First, convert yen to dollars: \\( 900 \\div 110 \\) dollars. Then convert dollars to liras: \\( (900 \\div 110) \\times 8 \\) liras, which simplifies to \\( 900 \\times 8 \\div 110 = 7200 \\div 110 = 720 \\div 11 \\) liras.\n\nNow, sum all lira amounts:\n- Original liras: 60\n- From dollars: 120\n- From yen: \\( \\frac{720}{11} \\)\n\nTotal liras = \\( 60 + 120 + \\frac{720}{11} = 180 + \\frac{720}{11} \\).  \nConvert 180 to elevenths: \\( 180 = \\frac{1980}{11} \\), so total = \\( \\frac{1980}{11} + \\frac{720}{11} = \\frac{2700}{11} \\approx 245.454545... \\).\n\nSince the problem asks for an exact solution and the result is a repeating decimal, we can represent it exactly as a float in Python. The calculation is:  \nTotal liras = \\( 60 + (15 \\times 8) + (900 \\times 8 \\div 110) \\).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Frank has 60 liras, 15 dollars, and 900 yen. If there are 8 liras per dollar and 110 yen per dollar, how much does Frank have in liras?\n    \"\"\"\n    liras = 60\n    dollars = 15\n    yen = 900\n    liras_per_dollar = 8\n    yen_per_dollar = 110\n\n    # Convert dollars to liras\n    dollars_in_liras = dollars * liras_per_dollar\n    \n    # Convert yen to liras: first to dollars, then to liras\n    yen_in_liras = (yen / yen_per_dollar) * liras_per_dollar\n    \n    # Total in liras\n    total_liras = liras + dollars_in_liras + yen_in_liras\n    \n    return total_liras\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Frank has 60 liras, 15 dollars, and 900 yen. If there are 8 liras per dollar and 110 yen per dollar, how much does Frank have in liras?\n    \"\"\"\n    liras = 60\n    dollars = 15\n    yen = 900\n    liras_per_dollar = 8\n    yen_per_dollar = 110\n\n    # Convert dollars to liras\n    dollars_in_liras = dollars * liras_per_dollar\n    \n    # Convert yen to liras: first to dollars, then to liras\n    yen_in_liras = (yen / yen_per_dollar) * liras_per_dollar\n    \n    # Total in liras\n    total_liras = liras + dollars_in_liras + yen_in_liras\n    \n    return total_liras",
    "result": 245.45454545454544
  },
  {
    "index": 51,
    "response": "**Reasoning:**\n- Nicole's daily calorie burn goal is 2000 calories.\n- She has already burned 1000 calories today.\n- To find the remaining calories needed, subtract the calories burned from the goal:  \n  `remaining_calories = goal_calories - calories_burned`  \n  which is `2000 - 1000 = 1000`.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Nicole is trying to lose weight and wants to burn 2000 calories per day. If she has already burned 1000 calories today, how many more calories does she need to burn to reach her goal?\n    \"\"\"\n    goal_calories = 2000\n    calories_burned = 1000\n    remaining_calories = goal_calories - calories_burned\n    result = remaining_calories\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Nicole is trying to lose weight and wants to burn 2000 calories per day. If she has already burned 1000 calories today, how many more calories does she need to burn to reach her goal?\n    \"\"\"\n    goal_calories = 2000\n    calories_burned = 1000\n    remaining_calories = goal_calories - calories_burned\n    result = remaining_calories\n    \n    return result",
    "result": 1000
  },
  {
    "index": 52,
    "response": "**Reasoning:**\n1. Calculate the total original cost by adding the prices of the couch, curtains, and throw pillows: $500 + $80 + $30 = $610.\n2. Determine the discount amount: total original cost minus amount paid = $610 - $550 = $60.\n3. Calculate the discount percentage: (discount amount / total original cost) × 100 = ($60 / $610) × 100 ≈ 9.836%.\n4. Since the problem doesn't specify rounding, we'll return the exact calculated value without additional rounding.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sarah purchased a couch for $500, curtains for $80, and throw pillows for $30. She received a discount and paid $550. What was the discount percentage?\n    \"\"\"\n    couch_price = 500\n    curtains_price = 80\n    throw_pillows_price = 30\n    amount_paid = 550\n    \n    total_cost = couch_price + curtains_price + throw_pillows_price\n    discount_amount = total_cost - amount_paid\n    discount_percentage = (discount_amount / total_cost) * 100\n    \n    return discount_percentage\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sarah purchased a couch for $500, curtains for $80, and throw pillows for $30. She received a discount and paid $550. What was the discount percentage?\n    \"\"\"\n    couch_price = 500\n    curtains_price = 80\n    throw_pillows_price = 30\n    amount_paid = 550\n    \n    total_cost = couch_price + curtains_price + throw_pillows_price\n    discount_amount = total_cost - amount_paid\n    discount_percentage = (discount_amount / total_cost) * 100\n    \n    return discount_percentage",
    "result": 9.836065573770492
  },
  {
    "index": 53,
    "response": "**Reasoning:**\nThe problem states that John has 47 pieces of fruit in total. The relationships given are:\n- Pears = 5 × Apples\n- Bananas = 2 × Apples\n\nLet \\( A \\) represent the number of apples. Then:\n- Pears = \\( 5A \\)\n- Bananas = \\( 2A \\)\n\nThe total fruit equation is:\n\\[\nA + 5A + 2A = 47\n\\]\n\\[\n8A = 47\n\\]\n\nSolving for \\( A \\):\n\\[\nA = \\frac{47}{8} = 5.875\n\\]\n\nNow, calculate the number of pears:\n\\[\n\\text{Pears} = 5 \\times A = 5 \\times \\frac{47}{8} = \\frac{235}{8} = 29.375\n\\]\n\nThe problem asks for the number of pears, and since fractional pieces are allowed (as the total is given as pieces of fruit), the answer is 29.375.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John has 47 pieces of fruit. He has 5 times as many pears as apples and 2 times as many bananas as apples. How many pears does he have?\n    \"\"\"\n    total_fruit = 47\n    # Let A = apples, then pears = 5A, bananas = 2A\n    # Total fruit: A + 5A + 2A = 8A = 47\n    # Pears = 5 * (47 / 8) = 235 / 8\n    pears = (5 * total_fruit) / 8.0\n    \n    return pears\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John has 47 pieces of fruit. He has 5 times as many pears as apples and 2 times as many bananas as apples. How many pears does he have?\n    \"\"\"\n    total_fruit = 47\n    # Let A = apples, then pears = 5A, bananas = 2A\n    # Total fruit: A + 5A + 2A = 8A = 47\n    # Pears = 5 * (47 / 8) = 235 / 8\n    pears = (5 * total_fruit) / 8.0\n    \n    return pears",
    "result": 29.375
  },
  {
    "index": 54,
    "response": "**Reasoning:**\nTom has a total bonus of 8,000 dollars. He spends 800 dollars each month on bills. To determine how many months it will take to spend the entire bonus, divide the total bonus by the monthly spending amount. The calculation is 8,000 divided by 800, which equals 10. Therefore, it will take 10 months to spend the entire bonus.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Tom received a bonus of 8,000 dollars from his job. If he spends 800 dollars on bills every month, how many months will it take him to spend the 8,000 dollars?\n    \"\"\"\n    total_bonus = 8000\n    monthly_spending = 800\n    months_required = total_bonus / monthly_spending\n    result = months_required\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Tom received a bonus of 8,000 dollars from his job. If he spends 800 dollars on bills every month, how many months will it take him to spend the 8,000 dollars?\n    \"\"\"\n    total_bonus = 8000\n    monthly_spending = 800\n    months_required = total_bonus / monthly_spending\n    result = months_required\n    \n    return result",
    "result": 10.0
  },
  {
    "index": 55,
    "response": "**Reasoning:**\n- There are 20 students.\n- Textbooks are twice as many as students, so textbooks = 2 * 20 = 40.\n- Textbooks make up 25% of all items. So, 40 is 25% of the total items.  \n  Total items = textbooks / 0.25 = 40 / 0.25 = 160.\n- Whiteboards make up 15% of all items.  \n  Whiteboards = 15% of total items = 0.15 * 160 = 24.\n\n**Solution:**\n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    In a classroom, there are 20 students and twice as many textbooks. Textbooks make up 25% of all items in the classroom. How many whiteboards are there if they make up 15% of all items?\n    \"\"\"\n    num_students = 20\n    num_textbooks = 2 * num_students\n    total_items = num_textbooks / 0.25\n    num_whiteboards = total_items * 0.15\n    \n    return int(num_whiteboards)\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    In a classroom, there are 20 students and twice as many textbooks. Textbooks make up 25% of all items in the classroom. How many whiteboards are there if they make up 15% of all items?\n    \"\"\"\n    num_students = 20\n    num_textbooks = 2 * num_students\n    total_items = num_textbooks / 0.25\n    num_whiteboards = total_items * 0.15\n    \n    return int(num_whiteboards)",
    "result": 24
  },
  {
    "index": 56,
    "response": "**Reasoning:**\n- The problem states that a train travels 200 km in 4 hours.\n- Speed is calculated by dividing distance by time.\n- Therefore, the speed is 200 km divided by 4 hours.\n- Performing the division: 200 / 4 = 50 km per hour.\n\n**Solution:**\n```python\ndef calculate_train_speed() -> float:\n    \"\"\"\n    A train travels 200 km in 4 hours. What is the speed of the train in km per hour?\n    \"\"\"\n    distance_km = 200\n    time_hours = 4\n    speed_km_per_hour = distance_km / time_hours\n    result = speed_km_per_hour\n\n    return result\n```",
    "code": "def calculate_train_speed() -> float:\n    \"\"\"\n    A train travels 200 km in 4 hours. What is the speed of the train in km per hour?\n    \"\"\"\n    distance_km = 200\n    time_hours = 4\n    speed_km_per_hour = distance_km / time_hours\n    result = speed_km_per_hour\n\n    return result",
    "result": "Success"
  },
  {
    "index": 57,
    "response": "**Reasoning:**\nTo determine the time taken for a car to cover a distance of 1320 miles at a constant speed of 55 miles per hour, we use the formula for time:  \n\\[ \\text{time} = \\frac{\\text{distance}}{\\text{speed}} \\]  \nSubstituting the given values:  \n\\[ \\text{time} = \\frac{1320 \\text{ miles}}{55 \\text{ miles per hour}} \\]  \nPerforming the division:  \n\\[ 1320 ÷ 55 = 24 \\]  \nThus, the car takes 24 hours to complete the journey. The result is returned as a float (24.0) to match the expected output type.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car traveling at the speed of 55 miles per hour covers a distance of 1320 miles. How long did the car take to make this journey?\n    \"\"\"\n    speed_miles_per_hour = 55.0\n    distance_miles = 1320.0\n    \n    time_hours = distance_miles / speed_miles_per_hour\n    \n    result = time_hours\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car traveling at the speed of 55 miles per hour covers a distance of 1320 miles. How long did the car take to make this journey?\n    \"\"\"\n    speed_miles_per_hour = 55.0\n    distance_miles = 1320.0\n    \n    time_hours = distance_miles / speed_miles_per_hour\n    \n    result = time_hours\n    return result",
    "result": 24.0
  },
  {
    "index": 58,
    "response": "**Reasoning:**\nTo solve this problem, we need to calculate the total amount Emily spent on her purchases. The problem involves three items:\n1. 4 notebooks at $2 each\n2. 3 pens at $1.50 each\n3. 1 pack of markers at $5\n\nFirst, calculate the cost of the notebooks:  \n4 notebooks × $2/notebook = $8  \n\nNext, calculate the cost of the pens:  \n3 pens × $1.50/pen = $4.50  \n\nThe markers cost a flat $5.  \n\nFinally, sum all the costs:  \n$8 (notebooks) + $4.50 (pens) + $5 (markers) = $17.50  \n\nThe solution will compute these values step by step and return the total.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Emily bought 4 notebooks for $2 each, 3 pens for $1.50 each, and a pack of markers for $5. How much did Emily spend?\n    \"\"\"\n    notebook_quantity = 4\n    notebook_price = 2.0\n    notebooks_total = notebook_quantity * notebook_price\n    \n    pen_quantity = 3\n    pen_price = 1.5\n    pens_total = pen_quantity * pen_price\n    \n    markers_price = 5.0\n    \n    total_spent = notebooks_total + pens_total + markers_price\n    \n    return total_spent\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Emily bought 4 notebooks for $2 each, 3 pens for $1.50 each, and a pack of markers for $5. How much did Emily spend?\n    \"\"\"\n    notebook_quantity = 4\n    notebook_price = 2.0\n    notebooks_total = notebook_quantity * notebook_price\n    \n    pen_quantity = 3\n    pen_price = 1.5\n    pens_total = pen_quantity * pen_price\n    \n    markers_price = 5.0\n    \n    total_spent = notebooks_total + pens_total + markers_price\n    \n    return total_spent",
    "result": 17.5
  },
  {
    "index": 59,
    "response": "**Reasoning:**\n- Michael spends 6 hours playing video games.\n- He spends three times as long doing homework as playing video games.\n- To find the homework time, multiply the video game time (6 hours) by 3.\n- Calculation: 6 × 3 = 18 hours.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Michael spends 6 hours playing video games and three times as long doing homework. How long does he spend doing homework?\n    \"\"\"\n    video_game_time = 6  # hours spent playing video games\n    homework_multiplier = 3  # homework time is three times video game time\n    homework_time = video_game_time * homework_multiplier  # calculate homework time\n    \n    return homework_time\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Michael spends 6 hours playing video games and three times as long doing homework. How long does he spend doing homework?\n    \"\"\"\n    video_game_time = 6  # hours spent playing video games\n    homework_multiplier = 3  # homework time is three times video game time\n    homework_time = video_game_time * homework_multiplier  # calculate homework time\n    \n    return homework_time",
    "result": 18
  },
  {
    "index": 60,
    "response": "**Reasoning:**\n1. **Calculate daily miles:**\n   - Day 1: 27 miles.\n   - Day 2: 18 miles more than Day 1 → 27 + 18 = 45 miles.\n   - Day 3: 36 miles.\n   - Day 4: 24 miles less than Day 3 → 36 - 24 = 12 miles.\n   - Day 5: 21 miles.\n   - Day 6: 30 miles.\n\n2. **Total miles:**  \n   Sum all daily miles:  \n   27 + 45 = 72  \n   72 + 36 = 108  \n   108 + 12 = 120  \n   120 + 21 = 141  \n   141 + 30 = 171 miles.\n\n3. **Refills calculation:**  \n   Alex refills every 15 miles. The number of refills is the integer division of total miles by 15 (since refills occur at each completed 15-mile interval, excluding the start).  \n   171 ÷ 15 = 11.4 → Integer part is 11.  \n   Verification: 15 × 11 = 165 miles, which covers 11 refills. The remaining 6 miles (171 - 165) do not trigger another refill.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    During a six-day vacation, Alex biked 27 miles the first day, 18 miles more the second day, 36 miles the third day, 24 miles less the fourth day, 21 miles the fifth day, and 30 miles the sixth day. If he had to refill his water bottle every 15 miles, how many times did he refill his water bottle for the whole trip?\n    \"\"\"\n    day1 = 27\n    day2 = day1 + 18  # 45 miles\n    day3 = 36\n    day4 = day3 - 24  # 12 miles\n    day5 = 21\n    day6 = 30\n\n    total_miles = day1 + day2 + day3 + day4 + day5 + day6  # 171 miles\n    refills = total_miles // 15  # 171 // 15 = 11\n\n    return refills\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    During a six-day vacation, Alex biked 27 miles the first day, 18 miles more the second day, 36 miles the third day, 24 miles less the fourth day, 21 miles the fifth day, and 30 miles the sixth day. If he had to refill his water bottle every 15 miles, how many times did he refill his water bottle for the whole trip?\n    \"\"\"\n    day1 = 27\n    day2 = day1 + 18  # 45 miles\n    day3 = 36\n    day4 = day3 - 24  # 12 miles\n    day5 = 21\n    day6 = 30\n\n    total_miles = day1 + day2 + day3 + day4 + day5 + day6  # 171 miles\n    refills = total_miles // 15  # 171 // 15 = 11\n\n    return refills",
    "result": 11
  },
  {
    "index": 61,
    "response": "**Reasoning:**\nTo solve this problem, we need to calculate the total cost for Ken to buy supplies for his 18 students. Each student requires one pencil, one pen, and one pad of paper. The costs are:\n- Pencil: $0.50 each\n- Pen: $0.75 each\n- Pad of paper: $2.00 each\n\nFirst, calculate the cost for one set of supplies (pencil + pen + pad):\n$0.50 + $0.75 + $2.00 = $3.25 per student.\n\nThen, multiply the cost per student by the number of students:\n$3.25 × 18 = $58.50.\n\nAlternatively, we can calculate the total cost for each item separately:\n- Total pencils: 18 × $0.50 = $9.00\n- Total pens: 18 × $0.75 = $13.50\n- Total pads: 18 × $2.00 = $36.00\n\nSumming these: $9.00 + $13.50 + $36.00 = $58.50.\n\nBoth methods confirm the total cost is $58.50.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    There are 18 students in Ken's class and he needs to give each student a pencil, a pen and a pad of paper. Each pencil costs $0.50, each pen costs $0.75 and each pad of paper costs $2.00. How much will it cost Ken to buy these items for his class?\n    \"\"\"\n    num_students = 18\n    pencil_cost = 0.50\n    pen_cost = 0.75\n    pad_cost = 2.00\n    \n    # Calculate total cost for all items\n    total_pencil_cost = num_students * pencil_cost\n    total_pen_cost = num_students * pen_cost\n    total_pad_cost = num_students * pad_cost\n    \n    total_cost = total_pencil_cost + total_pen_cost + total_pad_cost\n    \n    return total_cost\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 18 students in Ken's class and he needs to give each student a pencil, a pen and a pad of paper. Each pencil costs $0.50, each pen costs $0.75 and each pad of paper costs $2.00. How much will it cost Ken to buy these items for his class?\n    \"\"\"\n    num_students = 18\n    pencil_cost = 0.50\n    pen_cost = 0.75\n    pad_cost = 2.00\n    \n    # Calculate total cost for all items\n    total_pencil_cost = num_students * pencil_cost\n    total_pen_cost = num_students * pen_cost\n    total_pad_cost = num_students * pad_cost\n    \n    total_cost = total_pencil_cost + total_pen_cost + total_pad_cost\n    \n    return total_cost",
    "result": 58.5
  },
  {
    "index": 62,
    "response": "**Reasoning:**\n1. Calculate the discounted price of the chicken: Original price is $10, 15% discount means John pays 85% of the original price.  \n   Chicken after discount = $10 × (1 - 0.15) = $8.50.\n2. Calculate the total for the chips: Two packs at $3 each, so 2 × $3 = $6.00.\n3. Calculate the subtotal before the extra discount: $8.50 (chicken) + $6.00 (chips) = $14.50.\n4. Apply the extra 5% discount to the entire purchase: John pays 95% of the subtotal.  \n   Final amount = $14.50 × (1 - 0.05) = $14.50 × 0.95 = $13.775.\n5. The problem does not specify rounding, so the exact amount after all discounts is $13.775.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John went to the supermarket and bought a chicken for $10 but received a 15% discount, and two packs of chips worth $3 each. At the counter, John got an extra 5% off. How much did he pay after all the discounts?\n    \"\"\"\n    chicken_price = 10.0\n    chicken_discount_rate = 0.15\n    chips_price_per_pack = 3.0\n    chips_quantity = 2\n    total_discount_rate = 0.05\n\n    chicken_after_discount = chicken_price * (1 - chicken_discount_rate)\n    chips_total = chips_price_per_pack * chips_quantity\n    subtotal = chicken_after_discount + chips_total\n    total_paid = subtotal * (1 - total_discount_rate)\n\n    return total_paid\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John went to the supermarket and bought a chicken for $10 but received a 15% discount, and two packs of chips worth $3 each. At the counter, John got an extra 5% off. How much did he pay after all the discounts?\n    \"\"\"\n    chicken_price = 10.0\n    chicken_discount_rate = 0.15\n    chips_price_per_pack = 3.0\n    chips_quantity = 2\n    total_discount_rate = 0.05\n\n    chicken_after_discount = chicken_price * (1 - chicken_discount_rate)\n    chips_total = chips_price_per_pack * chips_quantity\n    subtotal = chicken_after_discount + chips_total\n    total_paid = subtotal * (1 - total_discount_rate)\n\n    return total_paid",
    "result": 13.774999999999999
  },
  {
    "index": 63,
    "response": "**Reasoning:**\nTo solve this problem, we need to calculate the total time taken for a runner to complete a marathon in two segments:\n1. The first 5 km at a speed of 12 km/h.\n2. The remaining 37.195 km at a speed of 15 km/h.\n\nThe time for each segment is computed using the formula:  \n**Time = Distance / Speed**\n\n- Time for the first segment: \\( \\frac{5}{12} \\) hours  \n- Time for the second segment: \\( \\frac{37.195}{15} \\) hours  \n\nThe total time is the sum of these two times. The result will be in hours (as a decimal).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In a marathon, a runner goes at a speed of 12 km/h for the first 5 km and then speeds up to 15 km/h for the remaining distance of 37.195 km. What is their total time for the marathon?\n    \"\"\"\n    first_segment_distance = 5  # km\n    first_segment_speed = 12    # km/h\n    second_segment_distance = 37.195  # km\n    second_segment_speed = 15   # km/h\n    \n    time_first_segment = first_segment_distance / first_segment_speed\n    time_second_segment = second_segment_distance / second_segment_speed\n    total_time = time_first_segment + time_second_segment\n    \n    return total_time\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In a marathon, a runner goes at a speed of 12 km/h for the first 5 km and then speeds up to 15 km/h for the remaining distance of 37.195 km. What is their total time for the marathon?\n    \"\"\"\n    first_segment_distance = 5  # km\n    first_segment_speed = 12    # km/h\n    second_segment_distance = 37.195  # km\n    second_segment_speed = 15   # km/h\n    \n    time_first_segment = first_segment_distance / first_segment_speed\n    time_second_segment = second_segment_distance / second_segment_speed\n    total_time = time_first_segment + time_second_segment\n    \n    return total_time",
    "result": 2.896333333333333
  },
  {
    "index": 64,
    "response": "**Reasoning:**\nThe problem involves finding the perimeter of a rectangle given its dimensions. The rectangle has a length of 8 cm and a width of 5 cm. The formula for the perimeter \\( P \\) of a rectangle is \\( P = 2 \\times (\\text{length} + \\text{width}) \\). \n\nSteps:\n1. Assign the length as 8 cm.\n2. Assign the width as 5 cm.\n3. Calculate the perimeter using the formula:  \n   - First, add the length and width: \\( 8 + 5 = 13 \\) cm.  \n   - Then multiply by 2: \\( 2 \\times 13 = 26 \\) cm.  \nThe perimeter is 26 cm.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A rectangle has a length of 8 cm and a width of 5 cm. What is the perimeter of the rectangle?\n    \"\"\"\n    length_cm = 8\n    width_cm = 5\n    perimeter_cm = 2 * (length_cm + width_cm)\n    result = perimeter_cm\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A rectangle has a length of 8 cm and a width of 5 cm. What is the perimeter of the rectangle?\n    \"\"\"\n    length_cm = 8\n    width_cm = 5\n    perimeter_cm = 2 * (length_cm + width_cm)\n    result = perimeter_cm\n    \n    return result",
    "result": 26
  },
  {
    "index": 65,
    "response": "**Reasoning:**  \nThe problem states that one apple costs $0.75. To find the total cost for 10 apples, multiply the cost per apple by the number of apples:  \nTotal cost = Cost per apple × Number of apples  \nTotal cost = $0.75 × 10  \nThis calculation gives $7.50.  \n\n**Solution:**  \n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    An apple costs $0.75. How much money will you need to buy 10 apples?\n    \"\"\"\n    apple_cost = 0.75  # Cost of one apple in dollars\n    num_apples = 10    # Number of apples to buy\n    total_cost = apple_cost * num_apples  # Calculate total cost\n    result = total_cost\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    An apple costs $0.75. How much money will you need to buy 10 apples?\n    \"\"\"\n    apple_cost = 0.75  # Cost of one apple in dollars\n    num_apples = 10    # Number of apples to buy\n    total_cost = apple_cost * num_apples  # Calculate total cost\n    result = total_cost\n    \n    return result",
    "result": 7.5
  },
  {
    "index": 66,
    "response": "**Reasoning:**\n1. Calculate the total price before discount: 4 shirts × $25 per shirt = $100.\n2. Calculate the discount amount: 10% of $100 = $10.\n3. Subtract the discount from the total price: $100 - $10 = $90.\nAlternatively, apply the discount directly by multiplying the total price by 90% (100% - 10%): $100 × 0.9 = $90.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A store sells shirts for $25 each. If John buys 4 shirts and gets a discount of 10% on the total price, what is the final amount he pays?\n    \"\"\"\n    price_per_shirt = 25\n    shirts_bought = 4\n    total_before_discount = price_per_shirt * shirts_bought\n    discount_percent = 10\n    discount_decimal = discount_percent / 100\n    final_amount = total_before_discount * (1 - discount_decimal)\n    \n    return final_amount\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A store sells shirts for $25 each. If John buys 4 shirts and gets a discount of 10% on the total price, what is the final amount he pays?\n    \"\"\"\n    price_per_shirt = 25\n    shirts_bought = 4\n    total_before_discount = price_per_shirt * shirts_bought\n    discount_percent = 10\n    discount_decimal = discount_percent / 100\n    final_amount = total_before_discount * (1 - discount_decimal)\n    \n    return final_amount",
    "result": 90.0
  },
  {
    "index": 67,
    "response": "**Reasoning:**\n1. Calculate total eggs produced per week: 20 chickens × 4 eggs/chicken = 80 eggs\n2. Calculate earnings from eggs: 80 eggs × $0.50/egg = $40\n3. Calculate total milk produced per week: 15 cows × 10 liters/cow = 150 liters\n4. Calculate earnings from milk: 150 liters × $1.00/liter = $150\n5. Calculate total earnings: $40 (eggs) + $150 (milk) = $190\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A farmer has 20 chickens and 15 cows. Each chicken lays 4 eggs per week and each cow produces 10 liters of milk per week. The farmer sells each egg for $0.5 and each liter of milk for $1. How much money does the farmer earn in a week from selling eggs and milk?\n    \"\"\"\n    num_chickens = 20\n    eggs_per_chicken = 4\n    egg_price = 0.5\n    num_cows = 15\n    milk_per_cow = 10\n    milk_price = 1.0\n    \n    total_eggs = num_chickens * eggs_per_chicken\n    egg_earnings = total_eggs * egg_price\n    total_milk = num_cows * milk_per_cow\n    milk_earnings = total_milk * milk_price\n    total_earnings = egg_earnings + milk_earnings\n    \n    return total_earnings\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A farmer has 20 chickens and 15 cows. Each chicken lays 4 eggs per week and each cow produces 10 liters of milk per week. The farmer sells each egg for $0.5 and each liter of milk for $1. How much money does the farmer earn in a week from selling eggs and milk?\n    \"\"\"\n    num_chickens = 20\n    eggs_per_chicken = 4\n    egg_price = 0.5\n    num_cows = 15\n    milk_per_cow = 10\n    milk_price = 1.0\n    \n    total_eggs = num_chickens * eggs_per_chicken\n    egg_earnings = total_eggs * egg_price\n    total_milk = num_cows * milk_per_cow\n    milk_earnings = total_milk * milk_price\n    total_earnings = egg_earnings + milk_earnings\n    \n    return total_earnings",
    "result": 190.0
  },
  {
    "index": 68,
    "response": "**Reasoning:**\n- Let \\( L \\) be the number of students initially in the lunchroom, which is given as 30.\n- After five more students come in, the lunchroom has \\( L + 5 = 30 + 5 = 35 \\) students.\n- This new number of students (35) is stated to be seven times the number of students inside the cafeteria, denoted as \\( C \\).\n- Therefore, the equation is: \\( 35 = 7 \\times C \\).\n- Solving for \\( C \\): \\( C = \\frac{35}{7} = 5 \\).\n\nThus, there are 5 students inside the cafeteria.\n\n**Solution:**\n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    There are thirty students in a lunchroom. If five more students come to the lunchroom, the number of students becomes seven times the number of students inside the cafeteria. How many students are inside the cafeteria?\n    \"\"\"\n    initial_lunchroom_students = 30\n    additional_students = 5\n    total_after_addition = initial_lunchroom_students + additional_students\n    # Total after addition is seven times the students in the cafeteria\n    students_in_cafeteria = total_after_addition // 7\n    result = students_in_cafeteria\n    \n    return result\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    There are thirty students in a lunchroom. If five more students come to the lunchroom, the number of students becomes seven times the number of students inside the cafeteria. How many students are inside the cafeteria?\n    \"\"\"\n    initial_lunchroom_students = 30\n    additional_students = 5\n    total_after_addition = initial_lunchroom_students + additional_students\n    # Total after addition is seven times the students in the cafeteria\n    students_in_cafeteria = total_after_addition // 7\n    result = students_in_cafeteria\n    \n    return result",
    "result": 5
  },
  {
    "index": 69,
    "response": "**Reasoning:**\n- The barrel has a capacity of 25 gallons.\n- Sheila pours oil at a rate of 1 gallon every 30 seconds.\n- First, convert the pouring time (15 minutes) to seconds: 15 minutes × 60 seconds/minute = 900 seconds.\n- Calculate the amount poured in 900 seconds: (1 gallon / 30 seconds) × 900 seconds = 30 gallons.\n- Since the barrel capacity is 25 gallons, Sheila has already poured 30 gallons, which exceeds the barrel's capacity by 5 gallons.\n- The barrel is already full (and overfilled), so no more oil is needed to fill it.\n- Therefore, the remaining gallons needed is 0.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In order to fill up a 25-gallon barrel with oil, Sheila needs to pour 1 gallon of oil every 30 seconds. If she has already poured oil into the barrel for 15 minutes, how many more gallons of oil does she need to pour?\n    \"\"\"\n    total_capacity_gallons = 25\n    pour_rate_gallons_per_second = 1 / 30  # gallons per second\n    minutes_poured = 15\n    seconds_poured = minutes_poured * 60  # convert to seconds\n    gallons_poured = pour_rate_gallons_per_second * seconds_poured\n\n    # Calculate remaining gallons needed (cannot be negative)\n    remaining_gallons = max(0, total_capacity_gallons - gallons_poured)\n    \n    return remaining_gallons\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In order to fill up a 25-gallon barrel with oil, Sheila needs to pour 1 gallon of oil every 30 seconds. If she has already poured oil into the barrel for 15 minutes, how many more gallons of oil does she need to pour?\n    \"\"\"\n    total_capacity_gallons = 25\n    pour_rate_gallons_per_second = 1 / 30  # gallons per second\n    minutes_poured = 15\n    seconds_poured = minutes_poured * 60  # convert to seconds\n    gallons_poured = pour_rate_gallons_per_second * seconds_poured\n\n    # Calculate remaining gallons needed (cannot be negative)\n    remaining_gallons = max(0, total_capacity_gallons - gallons_poured)\n    \n    return remaining_gallons",
    "result": 0
  },
  {
    "index": 70,
    "response": "**Reasoning:**\n1. The total cost of the dinner is $315, and the potluck earnings are $90, so the remaining cost to be shared is $315 - $90 = $225.\n2. Originally, this remaining cost was to be split equally among 7 colleagues, so each would pay $225 / 7.\n3. After Diana drops out, only 6 colleagues share the remaining cost, so each now pays $225 / 6.\n4. The additional amount each of the remaining 6 colleagues pays is the difference: ($225 / 6) - ($225 / 7).\n5. This simplifies to $225 × (1/6 - 1/7) = $225 × (1/42) = $225 / 42.\n6. Calculating $225 / 42 gives approximately 5.357142857142857 dollars.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A group of seven colleagues planned to go out for dinner. The cost of the dinner is $315 and they plan to share the cost equally. They had a potluck to help raise funds, which would be taken out of the total cost. The remaining cost would be split between the seven colleagues. At the potluck, they earn $90. However, Diana decided not to join in the purchase of the dinner. How much more does each colleague have to pay now that Diana isn't participating?\n    \"\"\"\n    total_cost = 315\n    potluck_earnings = 90\n    initial_colleagues = 7\n    remaining_colleagues = initial_colleagues - 1  # Diana dropped out, so 6 remain\n\n    remaining_cost = total_cost - potluck_earnings\n    original_share_per_person = remaining_cost / initial_colleagues\n    new_share_per_person = remaining_cost / remaining_colleagues\n    extra_per_person = new_share_per_person - original_share_per_person\n\n    return extra_per_person\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A group of seven colleagues planned to go out for dinner. The cost of the dinner is $315 and they plan to share the cost equally. They had a potluck to help raise funds, which would be taken out of the total cost. The remaining cost would be split between the seven colleagues. At the potluck, they earn $90. However, Diana decided not to join in the purchase of the dinner. How much more does each colleague have to pay now that Diana isn't participating?\n    \"\"\"\n    total_cost = 315\n    potluck_earnings = 90\n    initial_colleagues = 7\n    remaining_colleagues = initial_colleagues - 1  # Diana dropped out, so 6 remain\n\n    remaining_cost = total_cost - potluck_earnings\n    original_share_per_person = remaining_cost / initial_colleagues\n    new_share_per_person = remaining_cost / remaining_colleagues\n    extra_per_person = new_share_per_person - original_share_per_person\n\n    return extra_per_person",
    "result": 5.357142857142854
  },
  {
    "index": 71,
    "response": "**Reasoning:**\nThe problem states that for every group of 7 customers, 3 order a main course and the other 4 order dessert. Given 3952 total customers, we first determine how many complete groups of 7 exist. \n\n1. Calculate the number of complete groups:  \n   \\( 3952 \\div 7 = 564 \\) (using integer division, as only complete groups contribute to the main course count).  \n   \\( 7 \\times 564 = 3948 \\), leaving a remainder of 4 customers (3952 - 3948 = 4).\n\n2. The remaining 4 customers form an incomplete group. According to the problem, in a complete group of 7, the \"other 4\" order dessert, implying that the incomplete group of 4 also orders dessert and not main course.\n\n3. Thus, only the 564 complete groups contribute to the main course count:  \n   \\( 564 \\times 3 = 1692 \\).\n\nTherefore, the number of customers ordering a main course is 1692.\n\n**Solution:**\n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    At a restaurant, there are 3952 customers. 3 out of every 7 customers order a main course while the other 4 customers order a dessert. How many customers order a main course?\n    \"\"\"\n    total_customers = 3952\n    customers_per_group = 7\n    main_course_per_group = 3\n    \n    complete_groups = total_customers // customers_per_group\n    main_course_count = complete_groups * main_course_per_group\n    \n    return main_course_count\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    At a restaurant, there are 3952 customers. 3 out of every 7 customers order a main course while the other 4 customers order a dessert. How many customers order a main course?\n    \"\"\"\n    total_customers = 3952\n    customers_per_group = 7\n    main_course_per_group = 3\n    \n    complete_groups = total_customers // customers_per_group\n    main_course_count = complete_groups * main_course_per_group\n    \n    return main_course_count",
    "result": 1692
  },
  {
    "index": 72,
    "response": "**Reasoning:**\n- David starts with 15 candies.\n- He gives 2 candies to each of his 3 friends, so he gives away 2 × 3 = 6 candies.\n- After giving away the candies, he has 15 - 6 = 9 candies left.\n- He then receives 4 candies from his teacher, so he has 9 + 4 = 13 candies.\n- Therefore, David has 13 candies now.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    David had 15 candies. He gave 2 candies to each of his 3 friends and then received 4 candies from his teacher. How many candies does David have now?\n    \"\"\"\n    initial_candies = 15\n    candies_per_friend = 2\n    number_of_friends = 3\n    candies_given_away = candies_per_friend * number_of_friends\n    candies_after_giving = initial_candies - candies_given_away\n    candies_received = 4\n    final_candies = candies_after_giving + candies_received\n    result = float(final_candies)\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    David had 15 candies. He gave 2 candies to each of his 3 friends and then received 4 candies from his teacher. How many candies does David have now?\n    \"\"\"\n    initial_candies = 15\n    candies_per_friend = 2\n    number_of_friends = 3\n    candies_given_away = candies_per_friend * number_of_friends\n    candies_after_giving = initial_candies - candies_given_away\n    candies_received = 4\n    final_candies = candies_after_giving + candies_received\n    result = float(final_candies)\n    \n    return result",
    "result": 13.0
  },
  {
    "index": 73,
    "response": "**Reasoning:**\nTo solve this problem, we need to calculate the total cost of the fruits and subtract it from the $20 bill to determine the change. Here's the step-by-step breakdown:\n1. Calculate the cost of 2 oranges at $2 each: \\(2 \\times 2 = 4\\) dollars.\n2. Calculate the cost of 3 apples at $3 each: \\(3 \\times 3 = 9\\) dollars.\n3. Sum the costs: \\(4 + 9 = 13\\) dollars.\n4. Subtract the total cost from the $20 bill: \\(20 - 13 = 7\\) dollars.\n\nThus, the change should be $7.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    ve went to the market and bought 2 oranges for $2 each and 3 apples for $3 each. How much change should he get from a $20 bill?\n    \"\"\"\n    orange_price = 2\n    orange_quantity = 2\n    apple_price = 3\n    apple_quantity = 3\n    bill_amount = 20\n    \n    total_orange_cost = orange_price * orange_quantity\n    total_apple_cost = apple_price * apple_quantity\n    total_cost = total_orange_cost + total_apple_cost\n    change = bill_amount - total_cost\n    \n    result = round(change, 2)\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    ve went to the market and bought 2 oranges for $2 each and 3 apples for $3 each. How much change should he get from a $20 bill?\n    \"\"\"\n    orange_price = 2\n    orange_quantity = 2\n    apple_price = 3\n    apple_quantity = 3\n    bill_amount = 20\n    \n    total_orange_cost = orange_price * orange_quantity\n    total_apple_cost = apple_price * apple_quantity\n    total_cost = total_orange_cost + total_apple_cost\n    change = bill_amount - total_cost\n    \n    result = round(change, 2)\n    return result",
    "result": 7
  },
  {
    "index": 74,
    "response": "**Reasoning:**\nThe problem states there are 5 children in a family and each child has 8 pencils. To find the total number of pencils, we multiply the number of children by the number of pencils each child has:\n- Number of children = 5\n- Pencils per child = 8\n- Total pencils = 5 × 8 = 40\n\nSince the problem asks for the total number of pencils, the result is 40. The function should return this as a float to match the specified return type.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    If there are 5 children in a family and each child has 8 pencils. How many pencils does the family have in total?\n    \"\"\"\n    num_children = 5\n    pencils_per_child = 8\n    total_pencils = num_children * pencils_per_child\n    result = float(total_pencils)\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    If there are 5 children in a family and each child has 8 pencils. How many pencils does the family have in total?\n    \"\"\"\n    num_children = 5\n    pencils_per_child = 8\n    total_pencils = num_children * pencils_per_child\n    result = float(total_pencils)\n    \n    return result",
    "result": 40.0
  },
  {
    "index": 75,
    "response": "**Reasoning:**\n- The car travels at a constant speed of 60 miles per hour (mph).\n- The travel time is 2.5 hours.\n- Distance traveled is calculated using the formula: distance = speed × time.\n- Substituting the given values: distance = 60 mph × 2.5 hours = 150 miles.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car travels at a speed of 60 mph for 2.5 hours. How far did it travel?\n    \"\"\"\n    speed_mph = 60\n    time_hours = 2.5\n    distance_miles = speed_mph * time_hours\n    result = distance_miles\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car travels at a speed of 60 mph for 2.5 hours. How far did it travel?\n    \"\"\"\n    speed_mph = 60\n    time_hours = 2.5\n    distance_miles = speed_mph * time_hours\n    result = distance_miles\n    \n    return result",
    "result": 150.0
  },
  {
    "index": 76,
    "response": "**Reasoning:**\n1. The problem requires calculating the time taken for a journey when the car travels at a constant speed of 60 km/h and covers a distance of 360 km.\n2. The relationship between speed, distance, and time is given by the formula:  \n   **Time = Distance / Speed**.\n3. Substitute the given values:  \n   Distance = 360 km,  \n   Speed = 60 km/h.  \n   Time = 360 km / 60 km/h = 6 hours.\n4. Since both distance and speed are in compatible units (km and km/h), the result will be in hours.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car travelling at a constant speed of 60 km/h covers a distance of 360 km. How long did the journey take in hours?\n    \"\"\"\n    speed_km_per_hour = 60.0\n    distance_km = 360.0\n    time_hours = distance_km / speed_km_per_hour\n    result = time_hours\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car travelling at a constant speed of 60 km/h covers a distance of 360 km. How long did the journey take in hours?\n    \"\"\"\n    speed_km_per_hour = 60.0\n    distance_km = 360.0\n    time_hours = distance_km / speed_km_per_hour\n    result = time_hours\n    \n    return result",
    "result": 6.0
  },
  {
    "index": 77,
    "response": "**Reasoning:**\n1. The original price of the dress is $80.\n2. Apply the 20% discount: calculate 20% of $80, which is $16, and subtract it from the original price: $80 - $16 = $64.\n3. Alternatively, compute the discounted price directly: $80 × (1 - 0.20) = $80 × 0.80 = $64.\n4. Apply the 6% sales tax to the discounted price: calculate 6% of $64, which is $3.84, and add it to the discounted price: $64 + $3.84 = $67.84.\n5. Alternatively, compute the total directly: $64 × (1 + 0.06) = $64 × 1.06 = $67.84.\n6. The total amount paid is $67.84.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Mary wants to buy a dress. The price is $80. She has a coupon for 20% off, but she has to pay 6% sales tax. How much does she pay in total?\n    \"\"\"\n    original_price = 80.0\n    discount_rate = 0.20\n    tax_rate = 0.06\n    \n    # Calculate discounted price after 20% off\n    discounted_price = original_price * (1 - discount_rate)\n    \n    # Calculate total after adding 6% sales tax\n    total_paid = discounted_price * (1 + tax_rate)\n    \n    result = round(total_paid, 2)  # Round to two decimal places for currency\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Mary wants to buy a dress. The price is $80. She has a coupon for 20% off, but she has to pay 6% sales tax. How much does she pay in total?\n    \"\"\"\n    original_price = 80.0\n    discount_rate = 0.20\n    tax_rate = 0.06\n    \n    # Calculate discounted price after 20% off\n    discounted_price = original_price * (1 - discount_rate)\n    \n    # Calculate total after adding 6% sales tax\n    total_paid = discounted_price * (1 + tax_rate)\n    \n    result = round(total_paid, 2)  # Round to two decimal places for currency\n    return result",
    "result": 67.84
  },
  {
    "index": 78,
    "response": "**Reasoning:**\nTo solve this problem step by step:\n1. Kelly works 7 hours each day for 5 days a week. First, calculate her total weekly hours:  \n   Total hours = Hours per day × Days per week = 7 × 5 = 35 hours.\n2. She earns $9 for each hour worked. Multiply the total weekly hours by her hourly rate to find her weekly pay:  \n   Weekly pay = Total hours × Hourly rate = 35 × $9 = $315.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Kelly works 7 hours per day for 5 days a week. If she gets paid $9 per hour, how much does she make a week?\n    \"\"\"\n    hours_per_day = 7\n    days_per_week = 5\n    hourly_rate = 9\n    \n    total_hours_per_week = hours_per_day * days_per_week\n    weekly_pay = total_hours_per_week * hourly_rate\n    \n    result = weekly_pay\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Kelly works 7 hours per day for 5 days a week. If she gets paid $9 per hour, how much does she make a week?\n    \"\"\"\n    hours_per_day = 7\n    days_per_week = 5\n    hourly_rate = 9\n    \n    total_hours_per_week = hours_per_day * days_per_week\n    weekly_pay = total_hours_per_week * hourly_rate\n    \n    result = weekly_pay\n    return result",
    "result": 315
  },
  {
    "index": 79,
    "response": "**Reasoning:**\nTo solve this problem, we need to find the number of farmers with less than 10 acres of land. The city has 50,000 people, and 20% of them are farmers. First, we calculate the total number of farmers: 20% of 50,000 is 10,000 farmers. Then, we know that 70% of these farmers have more than 10 acres of land, so the remaining percentage with less than 10 acres must be 100% - 70% = 30%. Finally, we find 30% of the 10,000 farmers, which is 3,000 farmers. Therefore, the number of farmers with less than 10 acres of land is 3,000.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    In a city with 50,000 people, 20% of the people are farmers, and 70% of the farmers have more than 10 acres of land. How many of the farmers have less than 10 acres of land?\n    \"\"\"\n    total_people = 50000\n    farmer_percentage = 0.20  # 20% of people are farmers\n    number_of_farmers = total_people * farmer_percentage\n    \n    more_than_10_percentage = 0.70  # 70% of farmers have more than 10 acres\n    less_than_10_percentage = 1.0 - more_than_10_percentage  # 30% have less than 10 acres\n    \n    farmers_less_than_10 = number_of_farmers * less_than_10_percentage\n    result = farmers_less_than_10  # This will be 3000.0\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    In a city with 50,000 people, 20% of the people are farmers, and 70% of the farmers have more than 10 acres of land. How many of the farmers have less than 10 acres of land?\n    \"\"\"\n    total_people = 50000\n    farmer_percentage = 0.20  # 20% of people are farmers\n    number_of_farmers = total_people * farmer_percentage\n    \n    more_than_10_percentage = 0.70  # 70% of farmers have more than 10 acres\n    less_than_10_percentage = 1.0 - more_than_10_percentage  # 30% have less than 10 acres\n    \n    farmers_less_than_10 = number_of_farmers * less_than_10_percentage\n    result = farmers_less_than_10  # This will be 3000.0\n    \n    return result",
    "result": 3000.0000000000005
  },
  {
    "index": 80,
    "response": "**Reasoning:**\nTo solve this problem, we need to calculate the total amount Phil withdrew from his business account and express it as a percentage of the initial $10,000. The problem has two phases:\n1. **First 6 months:** Withdrawal of $300 per month.\n2. **Months 7–12 (next 6 months):** Withdrawal of $500 per month.\n\nSteps:\n1. Calculate withdrawals for the first 6 months:  \n   \\( 6 \\text{ months} \\times 300 \\text{ dollars/month} = 1800 \\text{ dollars} \\)\n2. Calculate withdrawals for the next 6 months:  \n   \\( 6 \\text{ months} \\times 500 \\text{ dollars/month} = 3000 \\text{ dollars} \\)\n3. Compute total withdrawals:  \n   \\( 1800 + 3000 = 4800 \\text{ dollars} \\)\n4. Calculate the percentage of the initial amount:  \n   \\( \\left( \\frac{4800}{10000} \\right) \\times 100 = 48\\% \\)\n\nThus, Phil withdrew 48% of the initial amount.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Phil started a business with $10,000. During the first 6 months of the year, he withdrew $300 per month for operating costs. From the 7th month to the end of the year, he spent $500 per month in operating costs. What percent of the initial amount did he withdrawal from the business account?\n    \"\"\"\n    initial_amount = 10000\n    first_six_months_withdrawal_per_month = 300\n    next_six_months_withdrawal_per_month = 500\n    months_per_period = 6\n    \n    total_first_period = months_per_period * first_six_months_withdrawal_per_month\n    total_second_period = months_per_period * next_six_months_withdrawal_per_month\n    total_withdrawal = total_first_period + total_second_period\n    \n    withdrawal_percentage = (total_withdrawal / initial_amount) * 100\n    \n    return withdrawal_percentage\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Phil started a business with $10,000. During the first 6 months of the year, he withdrew $300 per month for operating costs. From the 7th month to the end of the year, he spent $500 per month in operating costs. What percent of the initial amount did he withdrawal from the business account?\n    \"\"\"\n    initial_amount = 10000\n    first_six_months_withdrawal_per_month = 300\n    next_six_months_withdrawal_per_month = 500\n    months_per_period = 6\n    \n    total_first_period = months_per_period * first_six_months_withdrawal_per_month\n    total_second_period = months_per_period * next_six_months_withdrawal_per_month\n    total_withdrawal = total_first_period + total_second_period\n    \n    withdrawal_percentage = (total_withdrawal / initial_amount) * 100\n    \n    return withdrawal_percentage",
    "result": 48.0
  },
  {
    "index": 81,
    "response": "**Reasoning:**\n1. **Identify the problem**: We need to find how much further John ran in April compared to March.\n2. **Gather data**:\n   - March has 31 days.\n   - April has 30 days.\n   - Daily run in March: 2 miles.\n   - Daily run in April: 3.5 miles.\n3. **Calculate total distance for March**:  \n   Total March distance = Days in March × Daily run  \n   = 31 days × 2 miles/day = 62 miles.\n4. **Calculate total distance for April**:  \n   Total April distance = Days in April × Daily run  \n   = 30 days × 3.5 miles/day = 105 miles.\n5. **Compute the difference**:  \n   Difference = Total April distance - Total March distance  \n   = 105 miles - 62 miles = 43 miles.\n6. **Conclusion**: John ran 43 miles further in April than in March.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    John ran 2 miles every morning in March. He wanted to start training for a race and increased his morning run to 3.5 miles in April. How much further did John run in April compared to March?\n    \"\"\"\n    days_in_march = 31\n    daily_run_march = 2.0  # miles per day\n    days_in_april = 30\n    daily_run_april = 3.5  # miles per day\n    \n    total_distance_march = days_in_march * daily_run_march\n    total_distance_april = days_in_april * daily_run_april\n    additional_distance_april = total_distance_april - total_distance_march\n    \n    result = additional_distance_april\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    John ran 2 miles every morning in March. He wanted to start training for a race and increased his morning run to 3.5 miles in April. How much further did John run in April compared to March?\n    \"\"\"\n    days_in_march = 31\n    daily_run_march = 2.0  # miles per day\n    days_in_april = 30\n    daily_run_april = 3.5  # miles per day\n    \n    total_distance_march = days_in_march * daily_run_march\n    total_distance_april = days_in_april * daily_run_april\n    additional_distance_april = total_distance_april - total_distance_march\n    \n    result = additional_distance_april\n    return result",
    "result": 43.0
  },
  {
    "index": 82,
    "response": "**Reasoning:**\n- The problem states that the bakery produced four times as many doughnuts this week compared to the previous week.\n- The previous week's production is given as 200 doughnuts.\n- To find this week's production, multiply the previous week's amount by 4.\n- Calculation: \\( 200 \\times 4 = 800 \\).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A bakery produced four times as many doughnuts as the previous week. If the previous week, the bakery has made 200 doughnuts, how many doughnuts has it produced this week?\n    \"\"\"\n    previous_week_doughnuts = 200\n    this_week_doughnuts = 4 * previous_week_doughnuts\n    result = this_week_doughnuts\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A bakery produced four times as many doughnuts as the previous week. If the previous week, the bakery has made 200 doughnuts, how many doughnuts has it produced this week?\n    \"\"\"\n    previous_week_doughnuts = 200\n    this_week_doughnuts = 4 * previous_week_doughnuts\n    result = this_week_doughnuts\n    \n    return result",
    "result": 800
  },
  {
    "index": 83,
    "response": "**Reasoning:**\n1. San starts with 16 ounces of ice cream.\n2. She leaves 25% uneaten, so she eats 75% of the ice cream (100% - 25% = 75%).\n3. Calculate the eaten portion: 75% of 16 ounces = 0.75 × 16 = 12 ounces.\n4. She splits the 12 ounces equally among herself and two friends (3 people total).\n5. Divide the eaten ice cream by 3: 12 ÷ 3 = 4 ounces per person.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    san leaves 25% of her ice cream uneaten. She then splits the rest evenly between herself and two friends. If she started with 16 ounces of ice cream, how much did each person get?\n    \"\"\"\n    total_ice_cream = 16.0\n    uneaten_percentage = 0.25\n    eaten_percentage = 1.0 - uneaten_percentage\n    eaten_ice_cream = total_ice_cream * eaten_percentage\n    number_of_people = 3.0  # San + two friends\n    per_person_amount = eaten_ice_cream / number_of_people\n    \n    return per_person_amount\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    san leaves 25% of her ice cream uneaten. She then splits the rest evenly between herself and two friends. If she started with 16 ounces of ice cream, how much did each person get?\n    \"\"\"\n    total_ice_cream = 16.0\n    uneaten_percentage = 0.25\n    eaten_percentage = 1.0 - uneaten_percentage\n    eaten_ice_cream = total_ice_cream * eaten_percentage\n    number_of_people = 3.0  # San + two friends\n    per_person_amount = eaten_ice_cream / number_of_people\n    \n    return per_person_amount",
    "result": 4.0
  },
  {
    "index": 84,
    "response": "**Reasoning:**\nThe problem states that Peter makes a profit of $30 for every necktie he sells, and he has exactly 10 neckties to sell. To find the maximum possible profit, we multiply the profit per necktie by the total number of neckties available. Since there are no additional constraints (like variable pricing or unsold items), the calculation is straightforward: $30 × 10 = $300.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Peter can make a profit of $30 for every necktie that he sells. If he has only 10 neckties to sell, what is his maximum possible profit?\n    \"\"\"\n    profit_per_necktie = 30\n    number_of_neckties = 10\n    maximum_profit = profit_per_necktie * number_of_neckties\n    \n    return maximum_profit\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Peter can make a profit of $30 for every necktie that he sells. If he has only 10 neckties to sell, what is his maximum possible profit?\n    \"\"\"\n    profit_per_necktie = 30\n    number_of_neckties = 10\n    maximum_profit = profit_per_necktie * number_of_neckties\n    \n    return maximum_profit",
    "result": 300
  },
  {
    "index": 85,
    "response": "**Reasoning:**\nThe problem states there are 6 different colors of balloons and a total of 72 balloons. Each color has an equal number of balloons. To find the number of balloons per color, divide the total number of balloons by the number of colors:  \n72 balloons ÷ 6 colors = 12 balloons per color.  \nThe information about each balloon having a number from 1 to 6 is irrelevant to this calculation.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    There are 6 different colors of balloons at a party. Each balloon has a number from 1 to 6 on it. \n    If the total number of balloons is 72, and each color has the same number of balloons, \n    how many balloons of each color are there?\n    \"\"\"\n    total_balloons = 72\n    number_of_colors = 6\n    balloons_per_color = total_balloons / number_of_colors\n    result = balloons_per_color\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 6 different colors of balloons at a party. Each balloon has a number from 1 to 6 on it. \n    If the total number of balloons is 72, and each color has the same number of balloons, \n    how many balloons of each color are there?\n    \"\"\"\n    total_balloons = 72\n    number_of_colors = 6\n    balloons_per_color = total_balloons / number_of_colors\n    result = balloons_per_color\n    \n    return result",
    "result": 12.0
  },
  {
    "index": 86,
    "response": "**Reasoning:**\nTo find the percentage of girls in the classroom:\n1. First, calculate the total number of students: girls + boys = 20 + 15 = 35.\n2. Then, determine the fraction of girls: number of girls divided by total students = 20 / 35.\n3. Convert this fraction to a percentage by multiplying by 100: (20 / 35) * 100.\n4. This yields approximately 57.14285714285714%, which is the exact result of the calculation.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    There are 20 girls and 15 boys in a classroom. What percentage of the class is girls?\n    \"\"\"\n    num_girls = 20\n    num_boys = 15\n    total_students = num_girls + num_boys\n    percentage_girls = (num_girls / total_students) * 100\n    result = percentage_girls\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    There are 20 girls and 15 boys in a classroom. What percentage of the class is girls?\n    \"\"\"\n    num_girls = 20\n    num_boys = 15\n    total_students = num_girls + num_boys\n    percentage_girls = (num_girls / total_students) * 100\n    result = percentage_girls\n    return result",
    "result": 57.14285714285714
  },
  {
    "index": 87,
    "response": "**Reasoning:**\nThe problem states that the ratio of boys to girls is 5 to 9, meaning for every 5 boys there are 9 girls. Given there are 30 girls, we can set up the proportion:\n\n\\[\n\\frac{\\text{boys}}{\\text{girls}} = \\frac{5}{9}\n\\]\n\nSubstituting the known number of girls:\n\n\\[\n\\frac{\\text{boys}}{30} = \\frac{5}{9}\n\\]\n\nSolving for the number of boys:\n\n\\[\n\\text{boys} = 30 \\times \\frac{5}{9} = \\frac{150}{9} = \\frac{50}{3} \\approx 16.6667\n\\]\n\nAlthough the result is not an integer, the problem asks for the exact mathematical solution based on the given ratio and input. Thus, we compute \\( \\frac{150}{9} \\) (which simplifies to \\(\\frac{50}{3}\\)) as a floating-point number.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    The ratio of boys to girls in a class is 5 to 9. If there are 30 girls in the class, how many boys are there?\n    \"\"\"\n    # Given values\n    ratio_boys = 5\n    ratio_girls = 9\n    num_girls = 30\n    \n    # Calculate number of boys: (ratio_boys / ratio_girls) * num_girls\n    num_boys = (ratio_boys * num_girls) / ratio_girls\n    \n    result = num_boys\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    The ratio of boys to girls in a class is 5 to 9. If there are 30 girls in the class, how many boys are there?\n    \"\"\"\n    # Given values\n    ratio_boys = 5\n    ratio_girls = 9\n    num_girls = 30\n    \n    # Calculate number of boys: (ratio_boys / ratio_girls) * num_girls\n    num_boys = (ratio_boys * num_girls) / ratio_girls\n    \n    result = num_boys\n    return result",
    "result": 16.666666666666668
  },
  {
    "index": 88,
    "response": "**Reasoning:**\n1. The pond is circular with a radius of 5 meters.\n2. The full circumference of the pond is calculated using the formula \\( C = 2 \\times \\pi \\times r \\), where \\( \\pi = 3.14 \\) (as given).\n3. Substituting the values: \\( C = 2 \\times 3.14 \\times 5 = 31.4 \\) meters.\n4. Leo needs to leave a 1-meter gap for the entrance, so the fence length is the circumference minus the gap: \\( 31.4 - 1 = 30.4 \\) meters.\n5. Thus, the fence should be 30.4 meters long.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Leo has a circular pond in his backyard. The radius of the pond is 5 meters. He wants to build a fence around the pond, but he needs to leave a gap of 1 meter for the entrance. How long should the fence be? Assume that pi is 3.14.\n    \"\"\"\n    radius = 5.0\n    pi_value = 3.14\n    gap = 1.0\n    \n    circumference = 2 * pi_value * radius\n    fence_length = circumference - gap\n    \n    result = fence_length\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Leo has a circular pond in his backyard. The radius of the pond is 5 meters. He wants to build a fence around the pond, but he needs to leave a gap of 1 meter for the entrance. How long should the fence be? Assume that pi is 3.14.\n    \"\"\"\n    radius = 5.0\n    pi_value = 3.14\n    gap = 1.0\n    \n    circumference = 2 * pi_value * radius\n    fence_length = circumference - gap\n    \n    result = fence_length\n    return result",
    "result": 30.400000000000002
  },
  {
    "index": 89,
    "response": "**Reasoning:**\nMax performed twelve double-ollies. Since each double-ollie consists of two jumps, the total number of jumps Max made is 12 × 2 = 24. Olivia jumped one-third the number of times Max jumped, so she jumped 24 × (1/3) = 8 times. Since Olivia practices single-ollies and each single-ollie is one jump, the number of single-ollies she did is 8.\n\n**Solution:**\n```python\ndef simple_math_problem() -> int:\n    \"\"\"\n    Max and Olivia are skateboarders practicing ollies. Max is practicing the double-ollie while Olivia is practicing the single-ollie. Max did twelve double-ollies during practice. Olivia jumped in the air one-third the number of times Max did. How many single-ollies did Olivia do?\n    \"\"\"\n    # Max's double-ollies: each consists of 2 jumps\n    max_double_ollies = 12\n    max_jumps = max_double_ollies * 2\n    \n    # Olivia's jumps: one-third of Max's jumps\n    olivia_jumps = max_jumps / 3\n    \n    # Each single-ollie is one jump, so Olivia's single-ollies = her jumps\n    olivia_single_ollies = olivia_jumps\n    \n    result = olivia_single_ollies\n    return int(result)  # Convert to int since the answer is a whole number\n```",
    "code": "def simple_math_problem() -> int:\n    \"\"\"\n    Max and Olivia are skateboarders practicing ollies. Max is practicing the double-ollie while Olivia is practicing the single-ollie. Max did twelve double-ollies during practice. Olivia jumped in the air one-third the number of times Max did. How many single-ollies did Olivia do?\n    \"\"\"\n    # Max's double-ollies: each consists of 2 jumps\n    max_double_ollies = 12\n    max_jumps = max_double_ollies * 2\n    \n    # Olivia's jumps: one-third of Max's jumps\n    olivia_jumps = max_jumps / 3\n    \n    # Each single-ollie is one jump, so Olivia's single-ollies = her jumps\n    olivia_single_ollies = olivia_jumps\n    \n    result = olivia_single_ollies\n    return int(result)  # Convert to int since the answer is a whole number",
    "result": 8
  },
  {
    "index": 90,
    "response": "**Reasoning:**\n1. The farmer starts with 120 chickens and 80 ducks.\n2. He sells 25% of the chickens: \\( 0.25 \\times 120 = 30 \\) chickens sold.\n3. He sells 40% of the ducks: \\( 0.40 \\times 80 = 32 \\) ducks sold.\n4. After selling, the remaining chickens are \\( 120 - 30 = 90 \\).\n5. The remaining ducks are \\( 80 - 32 = 48 \\).\n6. He then buys 30 more chickens and 20 more ducks.\n7. The new chicken count is \\( 90 + 30 = 120 \\).\n8. The new duck count is \\( 48 + 20 = 68 \\).\n9. The total number of birds after all transactions is \\( 120 + 68 = 188 \\).\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A farmer has 120 chickens and 80 ducks. He sells 25% of his chickens and 40% of his ducks to the market. Then, he buys 30 more chickens and 20 more ducks with the money he earned. How many birds does he have in total after the transactions?\n    \"\"\"\n    initial_chickens = 120\n    initial_ducks = 80\n    \n    # Calculate birds sold\n    chickens_sold = initial_chickens * 0.25\n    ducks_sold = initial_ducks * 0.40\n    \n    # Calculate remaining birds after sales\n    remaining_chickens = initial_chickens - chickens_sold\n    remaining_ducks = initial_ducks - ducks_sold\n    \n    # Add newly bought birds\n    total_chickens = remaining_chickens + 30\n    total_ducks = remaining_ducks + 20\n    \n    # Calculate total birds\n    total_birds = total_chickens + total_ducks\n    \n    return total_birds\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A farmer has 120 chickens and 80 ducks. He sells 25% of his chickens and 40% of his ducks to the market. Then, he buys 30 more chickens and 20 more ducks with the money he earned. How many birds does he have in total after the transactions?\n    \"\"\"\n    initial_chickens = 120\n    initial_ducks = 80\n    \n    # Calculate birds sold\n    chickens_sold = initial_chickens * 0.25\n    ducks_sold = initial_ducks * 0.40\n    \n    # Calculate remaining birds after sales\n    remaining_chickens = initial_chickens - chickens_sold\n    remaining_ducks = initial_ducks - ducks_sold\n    \n    # Add newly bought birds\n    total_chickens = remaining_chickens + 30\n    total_ducks = remaining_ducks + 20\n    \n    # Calculate total birds\n    total_birds = total_chickens + total_ducks\n    \n    return total_birds",
    "result": 188.0
  },
  {
    "index": 91,
    "response": "**Reasoning:**\n1. The teacher bought 300 pencils at $0.2 each and 200 erasers at $0.3 each.\n2. The total cost for pencils is 300 * $0.2 = $60.\n3. The total cost for erasers is 200 * $0.3 = $60.\n4. The total cost for all items is $60 + $60 = $120.\n5. She sold the pencils at $0.3 each and erasers at $0.4 each.\n6. The total revenue from pencils is 300 * $0.3 = $90.\n7. The total revenue from erasers is 200 * $0.4 = $80.\n8. The total revenue from all items is $90 + $80 = $170.\n9. The profit is total revenue minus total cost: $170 - $120 = $50.\n10. Since the calculations involve multiples of 0.1, which are exactly representable in floating-point arithmetic for these values, the result is accurate.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A teacher bought 300 pencils and 200 erasers for her students. She paid $0.2 for each pencil and $0.3 for each eraser. She then sold the pencils and erasers to her students at $0.3 and $0.4 each, respectively. How much profit did she make in total, if one dollar is equal to 100 cents?\n    \"\"\"\n    pencils_bought = 300\n    erasers_bought = 200\n    \n    pencil_cost = 0.2\n    eraser_cost = 0.3\n    \n    pencil_sell = 0.3\n    eraser_sell = 0.4\n    \n    total_cost = (pencils_bought * pencil_cost) + (erasers_bought * eraser_cost)\n    total_revenue = (pencils_bought * pencil_sell) + (erasers_bought * eraser_sell)\n    \n    profit = total_revenue - total_cost\n    \n    return profit\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A teacher bought 300 pencils and 200 erasers for her students. She paid $0.2 for each pencil and $0.3 for each eraser. She then sold the pencils and erasers to her students at $0.3 and $0.4 each, respectively. How much profit did she make in total, if one dollar is equal to 100 cents?\n    \"\"\"\n    pencils_bought = 300\n    erasers_bought = 200\n    \n    pencil_cost = 0.2\n    eraser_cost = 0.3\n    \n    pencil_sell = 0.3\n    eraser_sell = 0.4\n    \n    total_cost = (pencils_bought * pencil_cost) + (erasers_bought * eraser_cost)\n    total_revenue = (pencils_bought * pencil_sell) + (erasers_bought * eraser_sell)\n    \n    profit = total_revenue - total_cost\n    \n    return profit",
    "result": 50.0
  },
  {
    "index": 92,
    "response": "**Reasoning:**\n- Alex rode 10 miles east.\n- He then rode an additional 20% of the east distance north.\n- 20% of 10 miles is calculated as: (20/100) * 10 = 0.2 * 10 = 2 miles north.\n- The total distance biked is the sum of the east and north distances: 10 miles + 2 miles = 12 miles.\n- Since the question asks for the total distance traveled along the path (not displacement), it is simply the addition of the two segments.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Alex went out for a bike ride. He rode his bike 10 miles east and then rode an additional 20% of that distance north. How far did he bike in total?\n    \"\"\"\n    # Assign the initial distance ridden east\n    east_distance = 10.0  # miles\n    \n    # Calculate the additional distance ridden north (20% of east_distance)\n    north_distance = 0.20 * east_distance  # 20% is 0.20\n    \n    # Calculate the total distance biked by adding east and north distances\n    total_distance = east_distance + north_distance\n    \n    # Set the result\n    result = total_distance\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Alex went out for a bike ride. He rode his bike 10 miles east and then rode an additional 20% of that distance north. How far did he bike in total?\n    \"\"\"\n    # Assign the initial distance ridden east\n    east_distance = 10.0  # miles\n    \n    # Calculate the additional distance ridden north (20% of east_distance)\n    north_distance = 0.20 * east_distance  # 20% is 0.20\n    \n    # Calculate the total distance biked by adding east and north distances\n    total_distance = east_distance + north_distance\n    \n    # Set the result\n    result = total_distance\n    \n    return result",
    "result": 12.0
  },
  {
    "index": 93,
    "response": "**Reasoning:**\nThe problem requires calculating fuel consumption for a given distance based on average mileage. The car travels 25 miles per gallon, meaning each gallon of fuel allows the car to travel 25 miles. To find the fuel consumed for 500 miles, we divide the total distance by the mileage rate:\n\nFuel consumed (gallons) = Distance driven (miles) ÷ Mileage (miles per gallon)  \nFuel consumed = 500 miles ÷ 25 miles/gallon = 20 gallons\n\nThe fuel tank capacity (20 gallons) is irrelevant to this calculation since we are only asked for consumption over 500 miles, not refueling requirements.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A car has an average mileage of 25 miles per gallon and a fuel tank capacity of 20 gallons. \n    If it is driven for 500 miles, how many gallons of fuel will it consume?\n    \"\"\"\n    # Assign variables with descriptive names\n    average_mileage = 25  # miles per gallon\n    distance_driven = 500  # miles\n    \n    # Calculate fuel consumption\n    fuel_consumed = distance_driven / average_mileage  # gallons\n    \n    # Return the result\n    return fuel_consumed\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A car has an average mileage of 25 miles per gallon and a fuel tank capacity of 20 gallons. \n    If it is driven for 500 miles, how many gallons of fuel will it consume?\n    \"\"\"\n    # Assign variables with descriptive names\n    average_mileage = 25  # miles per gallon\n    distance_driven = 500  # miles\n    \n    # Calculate fuel consumption\n    fuel_consumed = distance_driven / average_mileage  # gallons\n    \n    # Return the result\n    return fuel_consumed",
    "result": 20.0
  },
  {
    "index": 94,
    "response": "**Reasoning:**\n1. Jane has a $100 gift card and wants to purchase an item.\n2. The item's original price is $120, but there's a 15% discount promotion.\n3. Calculate the discounted price: 15% of $120 is $18, so the discounted price is $120 - $18 = $102.\n4. Since the discounted price ($102) is greater than the gift card balance ($100), Jane uses the entire gift card amount.\n5. The remaining balance on the gift card is $0 because the entire amount was used, and the remaining $2 must be paid by other means.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Jane has a $100 gift card she wants to use to purchase something from an online store, but she does not know the price of the item she wants to buy. If the item has a 15% off promotion and the price of the item is $120, how much balance does Jane have left?\n    \"\"\"\n    gift_card_balance = 100.0\n    original_price = 120.0\n    discount_percent = 15.0\n    \n    discounted_price = original_price * (1 - discount_percent / 100.0)\n    balance_left = max(0, gift_card_balance - discounted_price)\n    \n    return balance_left\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Jane has a $100 gift card she wants to use to purchase something from an online store, but she does not know the price of the item she wants to buy. If the item has a 15% off promotion and the price of the item is $120, how much balance does Jane have left?\n    \"\"\"\n    gift_card_balance = 100.0\n    original_price = 120.0\n    discount_percent = 15.0\n    \n    discounted_price = original_price * (1 - discount_percent / 100.0)\n    balance_left = max(0, gift_card_balance - discounted_price)\n    \n    return balance_left",
    "result": 0
  },
  {
    "index": 95,
    "response": "**Reasoning:**\nThe recipe requires 3 cups of flour, 2 cups of sugar, and 4 eggs. To make half of the recipe, each ingredient amount is divided by 2:\n- Flour: 3 cups ÷ 2 = 1.5 cups\n- Sugar: 2 cups ÷ 2 = 1 cup\n- Eggs: 4 eggs ÷ 2 = 2 eggs\n\nThe result is returned as a tuple of three floats representing the halved amounts of flour, sugar, and eggs, in that order.\n\n**Solution:**\n```python\ndef simple_math_problem() -> tuple:\n    \"\"\"\n    A cake recipe calls for 3 cups of flour, 2 cups of sugar, and 4 eggs. He wants to make half of the recipe. How much of each ingredient does he need?\n    \"\"\"\n    original_flour = 3\n    original_sugar = 2\n    original_eggs = 4\n    \n    half_flour = original_flour / 2\n    half_sugar = original_sugar / 2\n    half_eggs = original_eggs / 2\n    \n    result = (half_flour, half_sugar, half_eggs)\n    \n    return result\n```",
    "code": "def simple_math_problem() -> tuple:\n    \"\"\"\n    A cake recipe calls for 3 cups of flour, 2 cups of sugar, and 4 eggs. He wants to make half of the recipe. How much of each ingredient does he need?\n    \"\"\"\n    original_flour = 3\n    original_sugar = 2\n    original_eggs = 4\n    \n    half_flour = original_flour / 2\n    half_sugar = original_sugar / 2\n    half_eggs = original_eggs / 2\n    \n    result = (half_flour, half_sugar, half_eggs)\n    \n    return result",
    "result": [
      1.5,
      1.0,
      2.0
    ]
  },
  {
    "index": 96,
    "response": "**Reasoning:**\n- The ratio of sneakers to sandals sold is 3:2.\n- This means for every 3 sneakers sold, 2 sandals are sold.\n- We are given that 300 sneakers were sold.\n- To find the number of sandals, we first determine the value of one ratio unit:  \n  sneakers (3 units) = 300 → 1 unit = 300 / 3 = 100.\n- Sandals correspond to 2 units, so sandals sold = 2 × 100 = 200.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A store sells 2 types of shoes, sneakers and sandals. The ratio of sneakers to sandals sold is 3:2. If the store sold 300 sneakers, how many sandals were sold?\n    \"\"\"\n    ratio_sneakers = 3\n    ratio_sandals = 2\n    sneakers_sold = 300\n    \n    # Calculate the value of one ratio unit\n    one_unit = sneakers_sold / ratio_sneakers\n    \n    # Calculate sandals sold using the ratio\n    sandals_sold = ratio_sandals * one_unit\n    \n    result = sandals_sold\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A store sells 2 types of shoes, sneakers and sandals. The ratio of sneakers to sandals sold is 3:2. If the store sold 300 sneakers, how many sandals were sold?\n    \"\"\"\n    ratio_sneakers = 3\n    ratio_sandals = 2\n    sneakers_sold = 300\n    \n    # Calculate the value of one ratio unit\n    one_unit = sneakers_sold / ratio_sneakers\n    \n    # Calculate sandals sold using the ratio\n    sandals_sold = ratio_sandals * one_unit\n    \n    result = sandals_sold\n    return result",
    "result": 200.0
  },
  {
    "index": 97,
    "response": "**Reasoning:**\nThe problem states that Sam has seven buckets of water, and each of his buckets contains two-sevenths the amount of water in Mia's bucket. Mia's bucket has 14 liters of water. \n\nFirst, calculate the amount of water in one of Sam's buckets:  \n(2/7) * 14 liters = 4 liters.\n\nSo, each of Sam's buckets has 4 liters. With seven buckets, Sam's total water is:  \n7 * 4 liters = 28 liters.\n\nMia has 14 liters in her single bucket. The question asks how much water Sam needs to add to his buckets to have the same amount of water as Mia. However, Sam already has 28 liters, which is more than Mia's 14 liters. This suggests that the intended interpretation may be for each of Sam's buckets to contain the same amount as Mia's bucket (14 liters per bucket), not the total water.\n\nUnder this interpretation:  \n- Each of Sam's buckets should have 14 liters.  \n- Currently, each has 4 liters, so each needs: 14 - 4 = 10 liters added.  \n- With seven buckets, the total addition is: 7 * 10 = 70 liters.\n\nThus, Sam needs to add 70 liters to his buckets so that each contains 14 liters, matching the amount in Mia's bucket.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    Sam has seven buckets of water. Each bucket has two-sevenths the amount of water as the bucket that Mia has. If Mia's bucket has 14 liters of water, how much water does Sam need to add to his buckets to have the same amount of water as Mia?\n    \"\"\"\n    mia_bucket_amount = 14\n    ratio = 2/7\n    \n    # Amount in one of Sam's buckets\n    sam_bucket_amount = ratio * mia_bucket_amount\n    \n    # Number of Sam's buckets\n    num_buckets = 7\n    \n    # Desired amount per bucket for Sam (same as Mia's bucket)\n    desired_per_bucket = mia_bucket_amount\n    \n    # Amount to add per bucket\n    add_per_bucket = desired_per_bucket - sam_bucket_amount\n    \n    # Total amount to add to all buckets\n    total_add = num_buckets * add_per_bucket\n    \n    result = total_add\n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    Sam has seven buckets of water. Each bucket has two-sevenths the amount of water as the bucket that Mia has. If Mia's bucket has 14 liters of water, how much water does Sam need to add to his buckets to have the same amount of water as Mia?\n    \"\"\"\n    mia_bucket_amount = 14\n    ratio = 2/7\n    \n    # Amount in one of Sam's buckets\n    sam_bucket_amount = ratio * mia_bucket_amount\n    \n    # Number of Sam's buckets\n    num_buckets = 7\n    \n    # Desired amount per bucket for Sam (same as Mia's bucket)\n    desired_per_bucket = mia_bucket_amount\n    \n    # Amount to add per bucket\n    add_per_bucket = desired_per_bucket - sam_bucket_amount\n    \n    # Total amount to add to all buckets\n    total_add = num_buckets * add_per_bucket\n    \n    result = total_add\n    return result",
    "result": 70.0
  },
  {
    "index": 98,
    "response": "**Reasoning:**\n1. The toy store sells 40 dolls every day.\n2. It sells 60 more cars than dolls every day, so cars sold per day = 40 + 60 = 100.\n3. Total toys (cars and dolls) sold per day = 100 cars + 40 dolls = 140.\n4. In 10 days, total toys sold = 140 per day × 10 days = 1400.\n5. The question asks for the total number of cars and dolls sold in 10 days, which is 1400.\n\n**Solution:**\n```python\ndef simple_math_problem() -> float:\n    \"\"\"\n    A toy store sells 60 more cars than dolls every day. If the toy store sells 40 dolls every day, how many cars and dolls will it sell in 10 days?\n    \"\"\"\n    dolls_per_day = 40\n    additional_cars_per_day = 60\n    cars_per_day = dolls_per_day + additional_cars_per_day\n    total_toys_per_day = dolls_per_day + cars_per_day\n    days = 10\n    total_toys_in_10_days = total_toys_per_day * days\n    result = float(total_toys_in_10_days)\n    \n    return result\n```",
    "code": "def simple_math_problem() -> float:\n    \"\"\"\n    A toy store sells 60 more cars than dolls every day. If the toy store sells 40 dolls every day, how many cars and dolls will it sell in 10 days?\n    \"\"\"\n    dolls_per_day = 40\n    additional_cars_per_day = 60\n    cars_per_day = dolls_per_day + additional_cars_per_day\n    total_toys_per_day = dolls_per_day + cars_per_day\n    days = 10\n    total_toys_in_10_days = total_toys_per_day * days\n    result = float(total_toys_in_10_days)\n    \n    return result",
    "result": 1400.0
  },
  {
    "index": 99,
    "response": "**Reasoning:**\n- There are 20 students, each with 3 books, so the total number of books initially is 20 * 3 = 60.\n- 5 students donated 2 books each, contributing 5 * 2 = 10 books.\n- The remaining 15 students (20 - 5) donated 1 book each, contributing 15 * 1 = 15 books.\n- Total books donated to the library is 10 + 15 = 25.\n- Books left in the class is the initial total minus the donated books: 60 - 25 = 35.\n\n**Solution:**\n```python\ndef simple_math_problem() -> tuple:\n    \"\"\"\n    There are 20 students in a class and each student has 3 books. The teacher asked them to donate some books to the library. Each student donated one book except for 5 students who donated 2 books each. How many books are left in the class and how many books are donated to the library?\n    \"\"\"\n    total_students = 20\n    books_per_student = 3\n    initial_books = total_students * books_per_student\n    \n    students_donating_two = 5\n    students_donating_one = total_students - students_donating_two\n    \n    books_donated = (students_donating_one * 1) + (students_donating_two * 2)\n    books_left = initial_books - books_donated\n    \n    result = (books_left, books_donated)\n    return result\n```",
    "code": "def simple_math_problem() -> tuple:\n    \"\"\"\n    There are 20 students in a class and each student has 3 books. The teacher asked them to donate some books to the library. Each student donated one book except for 5 students who donated 2 books each. How many books are left in the class and how many books are donated to the library?\n    \"\"\"\n    total_students = 20\n    books_per_student = 3\n    initial_books = total_students * books_per_student\n    \n    students_donating_two = 5\n    students_donating_one = total_students - students_donating_two\n    \n    books_donated = (students_donating_one * 1) + (students_donating_two * 2)\n    books_left = initial_books - books_donated\n    \n    result = (books_left, books_donated)\n    return result",
    "result": [
      35,
      25
    ]
  }
]